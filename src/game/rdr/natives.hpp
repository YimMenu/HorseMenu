#pragma once

#include "game/rdr/invoker/invoker.hpp"

// Generated on 8/25/2023, 9:09:59 PM
// https://rdr.gta.menu

namespace YimMenu
{


	template<typename Ret, typename... Args>
	FORCEINLINE Ret invoke(scrNativeHash hash, Args&&... args)
	{
		g_native_invoker.begin_call();
		(g_native_invoker.push_arg(std::forward<Args>(args)), ...);
		g_native_invoker.end_call(hash);

		if constexpr (!std::is_same_v<Ret, void>)
		{
			return g_native_invoker.get_return_value<Ret>();
		}
	}

	namespace BUILTIN
	{
		static void WAIT(int ms)
		{
			invoke<int>(0x4EDE34FBADD967A6, ms);
		} // 0x4EDE34FBADD967A6 0x7715C03B b1207
		// Counts up. Every 1000 is 1 real-time second. Use SETTIMERA(int value) to set the timer (e.g.: SETTIMERA(0)).
		static int TIMERA()
		{
			return invoke<int>(0x83666F9FB8FEBD4B);
		} // 0x83666F9FB8FEBD4B 0x45C8C188 b1207
		static int TIMERB()
		{
			return invoke<int>(0xC9D9444186B5A374);
		} // 0xC9D9444186B5A374 0x330A9C0C b1207
		static void SETTIMERA(int value)
		{
			invoke<int>(0xC1B1E9A034A63A62, value);
		} // 0xC1B1E9A034A63A62 0x35785333 b1207
		static void SETTIMERB(int value)
		{
			invoke<int>(0x5AE11BC36633DE4E, value);
		} // 0x5AE11BC36633DE4E 0x27C1B7C6 b1207
		// Gets the current frame time.
		static float TIMESTEP()
		{
			return invoke<float>(0x0000000050597EE2);
		} // 0x0000000050597EE2 0x50597EE2 b1207
		static float SIN(float value)
		{
			return invoke<float>(0x0BADBFA3B172435F, value);
		} // 0x0BADBFA3B172435F 0xBF987F58 b1207
		static float COS(float value)
		{
			return invoke<float>(0xD0FFB162F40A139C, value);
		} // 0xD0FFB162F40A139C 0x00238FE9 b1207
		static float SQRT(float value)
		{
			return invoke<float>(0x71D93B57D07F9804, value);
		} // 0x71D93B57D07F9804 0x145C7701 b1207
		static float POW(float base, float exponent)
		{
			return invoke<float>(0xE3621CC40F31FE2E, base, exponent);
		} // 0xE3621CC40F31FE2E 0x85D134F8 b1207
		// Old name: _LOG10
		static float LOG10(float value)
		{
			return invoke<float>(0xE816E655DE37FE20, value);
		} // 0xE816E655DE37FE20  b1232
		// Calculates the magnitude of a vector.
		static float VMAG(float x, float y, float z)
		{
			return invoke<float>(0x652D2EEEF1D3E62C, x, y, z);
		} // 0x652D2EEEF1D3E62C 0x1FCF1ECD b1207
		// Calculates the magnitude of a vector but does not perform Sqrt operations. (Its way faster)
		static float VMAG2(float x, float y, float z)
		{
			return invoke<float>(0xA8CEACB4F35AE058, x, y, z);
		} // 0xA8CEACB4F35AE058 0xE796E629 b1207
		// Calculates distance between vectors.
		// The value returned will be in meters.
		static float VDIST(float x1, float y1, float z1, float x2, float y2, float z2)
		{
			return invoke<float>(0x2A488C176D52CCA5, x1, y1, z1, x2, y2, z2);
		} // 0x2A488C176D52CCA5 0x3C08ECB7 b1207
		// Calculates distance between vectors but does not perform Sqrt operations. (Its way faster)
		// The value returned will be in RAGE units.
		static float VDIST2(float x1, float y1, float z1, float x2, float y2, float z2)
		{
			return invoke<float>(0xB7A628320EFF8E47, x1, y1, z1, x2, y2, z2);
		} // 0xB7A628320EFF8E47 0xC85DEF1F b1207
		static int SHIFT_LEFT(int value, int bitShift)
		{
			return invoke<int>(0xEDD95A39E5544DE8, value, bitShift);
		} // 0xEDD95A39E5544DE8 0x314CC6CD b1207
		static int SHIFT_RIGHT(int value, int bitShift)
		{
			return invoke<int>(0x97EF1E5BCE9DC075, value, bitShift);
		} // 0x97EF1E5BCE9DC075 0x352633CA b1207
		// Rounds a float value down to the next whole number
		static int FLOOR(float value)
		{
			return invoke<int>(0xF34EE736CF047844, value);
		} // 0xF34EE736CF047844 0x32E9BE04 b1207
		// Rounds a float value up to the next whole number
		static int CEIL(float value)
		{
			return invoke<int>(0x11E019C8F43ACC8A, value);
		} // 0x11E019C8F43ACC8A 0xD536A1DF b1207
		static int ROUND(float value)
		{
			return invoke<int>(0xF2DB717A73826179, value);
		} // 0xF2DB717A73826179 0x323B0E24 b1207
		static float TO_FLOAT(int value)
		{
			return invoke<float>(0xBBDA792448DB5A89, value);
		} // 0xBBDA792448DB5A89 0x67116627 b1207
		// THREAD_PRIO_HIGHEST = 0
		// THREAD_PRIO_NORMAL = 1
		// THREAD_PRIO_LOWEST = 2
		// THREAD_PRIO_MANUAL_UPDATE = 100
		static void SET_THIS_THREAD_PRIORITY(int priority)
		{
			invoke<int>(0x42B65DEEF2EDF2A1, priority);
		} // 0x42B65DEEF2EDF2A1  b1207
	}

	namespace AICOVERPOINT
	{
		static Entity N0x53E4D0C079CA6855(ScrHandle handle)
		{
			return invoke<Entity>(0x53E4D0C079CA6855, handle);
		} // 0x53E4D0C079CA6855 undefined b1207
		static BOOL DOES_COVER_POINT_EXIST_(ScrHandle handle)
		{
			return invoke<BOOL>(0xC276FE69DDA22BAD, handle);
		} // 0xC276FE69DDA22BAD undefined b1207
		// 1 = In cover while crouched
		// 2 = In cover while standing
		// 3 = Not in cover
		static int GET_COVER_POINT_STATE_FROM_PED_(Ped ped)
		{
			return invoke<int>(0x5F5B1B7E8E8F94C6, ped);
		} // 0x5F5B1B7E8E8F94C6 undefined b1207
		static void TASK_ENTER_COVER(Ped ped)
		{
			invoke<int>(0x4972A022AE6DAFA1, ped);
		} // 0x4972A022AE6DAFA1 undefined b1207
		static void TASK_EXIT_COVER(Ped ped)
		{
			invoke<int>(0x2BC4A6D92D140112, ped);
		} // 0x2BC4A6D92D140112 undefined b1207
		static int N0x957D7E750216D74B(Ped ped)
		{
			return invoke<int>(0x957D7E750216D74B, ped);
		} // 0x957D7E750216D74B undefined b1207
		static void TASK_AI_SEEK_COVER_TO_COVER_POINT_(Any* args)
		{
			invoke<int>(0x89783FDDF079C88D, args);
		} // 0x89783FDDF079C88D undefined b1207
		// coverLayer: see levels_0/levels/rdr3/coverlayers
		static void N0x64340DC208D671D5(const char* coverLayer)
		{
			invoke<int>(0x64340DC208D671D5, coverLayer);
		} // 0x64340DC208D671D5 undefined b1207
		// coverLayer: see levels_0/levels/rdr3/coverlayers
		static void N0x7A1FDCF35EAA140F(const char* coverLayer)
		{
			invoke<int>(0x7A1FDCF35EAA140F, coverLayer);
		} // 0x7A1FDCF35EAA140F undefined b1207
		// Makes ped flinch (if in cover) like they have been shot at
		static void REQUEST_FLINCH_COVER_ANIM_(Ped ped)
		{
			invoke<int>(0x2A31D13C5F021D0D, ped);
		} // 0x2A31D13C5F021D0D undefined b1207
		static void N0x3C7A9C2C953128FE(Ped ped)
		{
			invoke<int>(0x3C7A9C2C953128FE, ped);
		} // 0x3C7A9C2C953128FE undefined b1207
		static void N0xEBA51A294C73292E(Any* args)
		{
			invoke<int>(0xEBA51A294C73292E, args);
		} // 0xEBA51A294C73292E undefined b1207
		// weaponHash can also be -1
		static void N0x140B3CB1D424A945(Ped ped, Hash weaponHash)
		{
			invoke<int>(0x140B3CB1D424A945, ped, weaponHash);
		} // 0x140B3CB1D424A945 undefined b1207
		static BOOL ARE_LOAD_COVER_ANIMS_LOADED_(Ped ped)
		{
			return invoke<BOOL>(0x8CBE916CFC64AD5C, ped);
		} // 0x8CBE916CFC64AD5C undefined b1207
		// Stops running cover anims and releases them
		// _STOP_RENDERING_* - _STOP_SCRIPTED*
		static void STOP_RUNNING_COVER_ANIMS_(Ped ped)
		{
			invoke<int>(0x1A7A802B2301EDC0, ped);
		} // 0x1A7A802B2301EDC0 undefined b1207
		// args: f_0 = Volume Handle, f_2 = integer (-1, 32 used in R* Scripts)
		static void N0x733077295AB51304(Any* args)
		{
			invoke<int>(0x733077295AB51304, args);
		} // 0x733077295AB51304 undefined b1207
		static ScrHandle ADD_SCRIPTED_COVER_POINT_(Any* data)
		{
			return invoke<ScrHandle>(0x975BD6351648935F, data);
		} // 0x975BD6351648935F undefined b1207
	}

	namespace AITRANSPORT
	{
		static void TASK_ENTER_TRANSPORT(Any* args)
		{
			invoke<int>(0xAEE3ADD08829CB6F, args);
		} // 0xAEE3ADD08829CB6F undefined b1207
		static void TASK_EXIT_TRANSPORT(Any* args)
		{
			invoke<int>(0xC273A5B8488F7838, args);
		} // 0xC273A5B8488F7838 undefined b1207
		// seat: see CREATE_PED_INSIDE_VEHICLE
		static void SET_PED_ON_TRANSPORT_SEAT(Ped ped, Entity transportEntity, int seat, int flags)
		{
			invoke<int>(0xE588B5A8A005CB5E, ped, transportEntity, seat, flags);
		} // 0xE588B5A8A005CB5E undefined b1207
		static void SET_PED_OFF_TRANSPORT_SEAT(Ped ped, int flags)
		{
			invoke<int>(0x8886D83A430537FD, ped, flags);
		} // 0x8886D83A430537FD undefined b1207
		// flagId:
		// enum eTransportConfigFlags
		// {
		// 	TCF_NotConsideredForEntryByLocalPlayer,
		// 	TCF_0xB78D6624,
		// 	TCF_0xA9700425,
		// 	TCF_0x8D7E4641,
		// 	TCF_0xF24BAA1F,
		// 	TCF_0x63B77935,
		// 	TCF_NotConsideredForEntryByAllPlayers,
		// 	TCF_0xD17A2AFD,
		// 	TCF_0xD4E4FDD5,
		// 	TCF_0x8227C929,
		// 	TCF_0x812C1070,
		// 	TCF_0x0E1AB26F,
		// 	TCF_0xBF4EC863,
		// 	TCF_0x75660C36,
		// 	TCF_0xA2539E20,
		// 	TCF_0x9162C633,
		// 	TCF_DisableHonorModifiers,
		// 	TCF_0xF9E71CB6,
		// 	TCF_0x933ECD3F,
		// 	TCF_0x18513A34
		// };
		// https://github.com/femga/rdr3_discoveries/tree/master/AI/TRANSPORT_CONFIG_FLAGS
		static void SET_TRANSPORT_CONFIG_FLAG(Entity transportEntity, int flagId, BOOL value)
		{
			invoke<int>(0xBA8818212633500A, transportEntity, flagId, value);
		} // 0xBA8818212633500A undefined b1207
		// flagId: see SET_TRANSPORT_CONFIG_FLAG
		static BOOL GET_TRANSPORT_CONFIG_FLAG(Entity transportEntity, int flagId, BOOL p2)
		{
			return invoke<BOOL>(0xF382C92CCC1CCDBC, transportEntity, flagId, p2);
		} // 0xF382C92CCC1CCDBC undefined b1207
		// See _SET_TRANSPORT_USAGE_FLAGS
		static Any GET_TRANSPORT_USAGE_FLAGS_(Entity transportEntity, int* flags)
		{
			return invoke<Any>(0xE195C5A82156321D, transportEntity, flags);
		} // 0xE195C5A82156321D undefined b1207
		// enum eTransportUsageFlags
		// {
		// 	TUF_INVALID = 0,
		// 	TUF_ALLOW_DRIVER_ME = (1 << 0),
		// 	TUF_ALLOW_DRIVER_GANG = (1 << 1),
		// 	TUF_ALLOW_DRIVER_CREW = (1 << 2),
		// 	TUF_ALLOW_DRIVER_FRIENDS = (1 << 3),
		// 	TUF_ALLOW_DRIVER_ANYONE = (1 << 4),
		// 	TUF_ALLOW_PASSENGER_ME = (1 << 5),
		// 	TUF_ALLOW_PASSENGER_GANG = (1 << 6),
		// 	TUF_ALLOW_PASSENGER_CREW = (1 << 7),
		// 	TUF_ALLOW_PASSENGER_FRIENDS = (1 << 8),
		// 	TUF_ALLOW_PASSENGER_ANYONE = (1 << 9),
		// 	TUF_ALLOW_ACCESS_AI = (1 << 10)
		// };
		static void SET_TRANSPORT_USAGE_FLAGS_(Entity transportEntity, int flags)
		{
			invoke<int>(0xE2487779957FE897, transportEntity, flags);
		} // 0xE2487779957FE897 undefined b1207
		static void SET_TRANSPORT_ACCESSIBLE_SEAT_FLAGS(Entity transportEntity, int flags)
		{
			invoke<int>(0xDD0660C997DE94FD, transportEntity, flags);
		} // 0xDD0660C997DE94FD undefined b1207
		static void N0x4B6C9A43F7D9109B(Any p0, Any p1)
		{
			invoke<int>(0x4B6C9A43F7D9109B, p0, p1);
		} // 0x4B6C9A43F7D9109B undefined b1207
		// Checks if ped is placed on target transportEntity
		static BOOL IS_PED_ON_TRANSPORT_ENTITY_(Ped ped, Entity transportEntity)
		{
			return invoke<BOOL>(0x159EF5B6EDCE00E8, ped, transportEntity);
		} // 0x159EF5B6EDCE00E8 undefined b1207
		static BOOL IS_PED_ON_TRANSPORT_SEAT_(Ped ped, BOOL p1)
		{
			return invoke<BOOL>(0xDC44F405A6B98D03, ped, p1);
		} // 0xDC44F405A6B98D03 undefined b1207
		static BOOL IS_TRANSPORT_SEAT_OCCUPIED_(Entity transportEntity, int seatIndex)
		{
			return invoke<BOOL>(0x2E2E06023D07631E, transportEntity, seatIndex);
		} // 0x2E2E06023D07631E undefined b1207
		// Called together with IS_VEHICLE_SEAT_FREE
		static BOOL IS_TRANSPORT_SEAT_FREE_(Entity transportEntity, int seatIndex)
		{
			return invoke<BOOL>(0x43FF27FC1829C202, transportEntity, seatIndex);
		} // 0x43FF27FC1829C202 undefined b1207
		// seatIndex: see CREATE_PED_INSIDE_VEHICLE
		static Ped GET_PED_IN_TRANSPORT_SEAT_(Entity transportEntity, int seatIndex)
		{
			return invoke<Ped>(0xFFEC4B0A1A3ED515, transportEntity, seatIndex);
		} // 0xFFEC4B0A1A3ED515 undefined b1207
		static BOOL IS_PED_ENTERING_TRANSPORT(Ped ped, Entity transportEntity, BOOL p2)
		{
			return invoke<BOOL>(0x619E63980BFC0096, ped, transportEntity, p2);
		} // 0x619E63980BFC0096 undefined b1207
		static BOOL IS_PED_EXITING_TRANSPORT(Ped ped, Entity transportEntity)
		{
			return invoke<BOOL>(0x660639BC60157048, ped, transportEntity);
		} // 0x660639BC60157048 undefined b1207
		// _SET_TRANSPORT_*
		static void N0x4248AB2EEB3C75AD(Entity transportEntity, Ped ped, BOOL p2)
		{
			invoke<int>(0x4248AB2EEB3C75AD, transportEntity, ped, p2);
		} // 0x4248AB2EEB3C75AD undefined b1207
		static void SET_PED_USE_TRANSPORT_SEAT_PREFERENCE_(Ped ped, Entity transportEntity, int preferenceSlot, int p3, int seatIndex)
		{
			invoke<int>(0xB7079F4C72896756, ped, transportEntity, preferenceSlot, p3, seatIndex);
		} // 0xB7079F4C72896756 undefined b1207
		// _CLEAR_A*
		static void N0x5639FBEA922788DA(Entity transportEntity)
		{
			invoke<int>(0x5639FBEA922788DA, transportEntity);
		} // 0x5639FBEA922788DA undefined b1207
		static void SET_AI_CAN_USE_TRANSPORT_(Entity transportEntity, BOOL state)
		{
			invoke<int>(0x67F7CEAC2391E114, transportEntity, state);
		} // 0x67F7CEAC2391E114 undefined b1207
		// _SET_TRANSPORT_*
		static void N0x8C8371EDFAF014A0(Ped ped, float p1)
		{
			invoke<int>(0x8C8371EDFAF014A0, ped, p1);
		} // 0x8C8371EDFAF014A0 undefined b1207
		// _SET_TRANSPORT_*
		static void N0xF8C20282B237E3F7(Ped ped)
		{
			invoke<int>(0xF8C20282B237E3F7, ped);
		} // 0xF8C20282B237E3F7 undefined b1207
		static void SET_TRANSPORT_PRIORITY_SEAT_(Entity transportEntity, int seatIndex)
		{
			invoke<int>(0x13F138225C202F66, transportEntity, seatIndex);
		} // 0x13F138225C202F66 undefined b1207
	}

	namespace ANIMSCENE
	{
		// flags: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eAnimSceneFlag
		static AnimScene CREATE_ANIM_SCENE_(const char* animDict, int flags, const char* playbackListName, BOOL p3, BOOL p4)
		{
			return invoke<AnimScene>(0x1FCA98E33C1437B3, animDict, flags, playbackListName, p3, p4);
		} // 0x1FCA98E33C1437B3 undefined b1207
		static void DELETE_ANIM_SCENE_(AnimScene animScene)
		{
			invoke<int>(0x84EEDB2C6E650000, animScene);
		} // 0x84EEDB2C6E650000 undefined b1207
		static void TRIGGER_ANIM_SCENE_SKIP(AnimScene animScene)
		{
			invoke<int>(0x4B85B3CF9197AEDF, animScene);
		} // 0x4B85B3CF9197AEDF undefined b1207
		// Used in Script Function CUTSCENE_MANAGE_SKIP
		// _CHECK_* (?)
		static BOOL N0x4B85B3CF91972222(AnimScene animScene)
		{
			return invoke<BOOL>(0x4B85B3CF91972222, animScene);
		} // 0x4B85B3CF91972222 undefined b1207
		static void CLEAR_ANIM_SCENE_WAS_SKIPPED_(AnimScene animScene)
		{
			invoke<int>(0x8A8208AE92BF87A5, animScene);
		} // 0x8A8208AE92BF87A5 undefined b1207
		static BOOL DOES_ANIM_SCENE_EXIST(AnimScene animScene)
		{
			return invoke<BOOL>(0x25557E324489393C, animScene);
		} // 0x25557E324489393C undefined b1207
		static BOOL DOES_ENTITY_WITH_ID_EXIST_IN_ANIM_SCENE_(AnimScene animScene, const char* entityId)
		{
			return invoke<BOOL>(0x6F1F0B17109309DA, animScene, entityId);
		} // 0x6F1F0B17109309DA undefined b1207
		static BOOL DOES_ANIM_SCENE_OWNERSHIP_OF_ENTITY_EXIST_(AnimScene animScene, const char* entityName)
		{
			return invoke<BOOL>(0x9D1ECA9337BE9FC3, animScene, entityName);
		} // 0x9D1ECA9337BE9FC3 undefined b1207
		static void LOAD_ANIM_SCENE(AnimScene animScene)
		{
			invoke<int>(0xAF068580194D9DC7, animScene);
		} // 0xAF068580194D9DC7 undefined b1207
		static BOOL IS_ANIM_SCENE_LOADED(AnimScene animScene, BOOL p1, BOOL p2)
		{
			return invoke<BOOL>(0x477122B8D05E7968, animScene, p1, p2);
		} // 0x477122B8D05E7968 undefined b1207
		static BOOL IS_ANIM_SCENE_LOADING_(AnimScene animScene, BOOL p1)
		{
			return invoke<BOOL>(0x59606519FF9D3EC2, animScene, p1);
		} // 0x59606519FF9D3EC2 undefined b1207
		static BOOL IS_ANIM_SCENE_METADATA_ASSET_IN_RANGE_LOADING_(AnimScene animScene, BOOL p1)
		{
			return invoke<BOOL>(0xF8D1D2DAB6007EEF, animScene, p1);
		} // 0xF8D1D2DAB6007EEF undefined b1207
		static BOOL IS_ANIM_SCENE_METADATA_LOADED(AnimScene animScene, BOOL p1)
		{
			return invoke<BOOL>(0x95531A4A20CCE7BC, animScene, p1);
		} // 0x95531A4A20CCE7BC undefined b1207
		static int GET_ANIM_SCENE_PLAYBACK_LIST_PHASE_AUDIO_LOAD_STRESS_(AnimScene animScene, const char* phaseName)
		{
			return invoke<int>(0x9E036D5204FFBBC8, animScene, phaseName);
		} // 0x9E036D5204FFBBC8 undefined b1207
		static void START_ANIM_SCENE(AnimScene animScene)
		{
			invoke<int>(0xF4D94AF761768700, animScene);
		} // 0xF4D94AF761768700 undefined b1207
		static void RESET_ANIM_SCENE(AnimScene animScene, const char* playbackListName)
		{
			invoke<int>(0x8FDF221F13537936, animScene, playbackListName);
		} // 0x8FDF221F13537936 undefined b1207
		static void ABORT_ANIM_SCENE(AnimScene animScene, BOOL p1)
		{
			invoke<int>(0x718CF1328D20C2B3, animScene, p1);
		} // 0x718CF1328D20C2B3 undefined b1207
		static void RESUME_ANIM_SCENE_FROM_LAST_CHECKPOINT(AnimScene animScene)
		{
			invoke<int>(0x8E1BA705F63C1925, animScene);
		} // 0x8E1BA705F63C1925 undefined b1207
		static BOOL IS_ANIM_SCENE_RUNNING(AnimScene animScene, BOOL p1)
		{
			return invoke<BOOL>(0xCBFC7725DE6CE2E0, animScene, p1);
		} // 0xCBFC7725DE6CE2E0 undefined b1207
		static BOOL IS_ANIM_SCENE_FINISHED(AnimScene animScene, BOOL p1)
		{
			return invoke<BOOL>(0xD8254CB2C586412B, animScene, p1);
		} // 0xD8254CB2C586412B undefined b1207
		static BOOL IS_ANIM_SCENE_EXITING_THIS_FRAME(AnimScene animScene)
		{
			return invoke<BOOL>(0xCDC5512A407CF08D, animScene);
		} // 0xCDC5512A407CF08D undefined b1207
		static BOOL HAS_ANIM_SCENE_EXITED(AnimScene animScene, BOOL p1)
		{
			return invoke<BOOL>(0xF94692EB9DC15D74, animScene, p1);
		} // 0xF94692EB9DC15D74 undefined b1207
		// Used in SP R* Scripts only
		// _CO* - _CR*
		static BOOL N0x73616E64696C132E(AnimScene animScene, BOOL p1)
		{
			return invoke<BOOL>(0x73616E64696C132E, animScene, p1);
		} // 0x73616E64696C132E undefined b1207
		static BOOL IS_ANIM_SCENE_IN_SECTION(AnimScene animScene, const char* sectionName, BOOL p2)
		{
			return invoke<BOOL>(0x8D81E7824B7753F7, animScene, sectionName, p2);
		} // 0x8D81E7824B7753F7 undefined b1207
		static BOOL IS_ANIM_SCENE_SKIPPABLE_(AnimScene animScene)
		{
			return invoke<BOOL>(0x4CDFFE3189EBDBD0, animScene);
		} // 0x4CDFFE3189EBDBD0 undefined b1207
		static BOOL IS_ANIM_SCENE_ABORTED_(AnimScene animScene)
		{
			return invoke<BOOL>(0x34A0671BE613D3D0, animScene);
		} // 0x34A0671BE613D3D0 undefined b1207
		// Used in SP R* Scripts only
		// _IS_ANIM_SCENE_*
		static BOOL N0xD70C7A30412F8FA0(AnimScene animScene)
		{
			return invoke<BOOL>(0xD70C7A30412F8FA0, animScene);
		} // 0xD70C7A30412F8FA0 undefined b1207
		// Used in SP R* Scripts only
		// _IS_ANIM_SCENE_*
		static BOOL N0x9AAE3C1148A09BCA(AnimScene animScene)
		{
			return invoke<BOOL>(0x9AAE3C1148A09BCA, animScene);
		} // 0x9AAE3C1148A09BCA undefined b1207
		// Used in SP R* Scripts only
		// _WAS_ANIM_SCENE_*
		static BOOL N0xA96619FE85159ED2(AnimScene animScene)
		{
			return invoke<BOOL>(0xA96619FE85159ED2, animScene);
		} // 0xA96619FE85159ED2 undefined b1207
		static void FADE_ANIM_SCENE_AUDIO_IN(AnimScene animScene, float p1)
		{
			invoke<int>(0xA41351EA2A18A0AD, animScene, p1);
		} // 0xA41351EA2A18A0AD undefined b1207
		static void FADE_ANIM_SCENE_AUDIO_OUT(AnimScene animScene, float p1)
		{
			invoke<int>(0x323E3AD772BA5D57, animScene, p1);
		} // 0x323E3AD772BA5D57 undefined b1207
		static void BLOCK_ANIM_SCENE_FADING_NEXT_FRAME(BOOL p0, BOOL p1)
		{
			invoke<int>(0x1B70811D3BF75DB9, p0, p1);
		} // 0x1B70811D3BF75DB9 undefined b1207
		static void SET_ANIM_SCENE_ORIGIN(AnimScene animScene, float posX, float posY, float posZ, float rotX, float rotY, float rotZ, int order)
		{
			invoke<int>(0x020894BF17A02EF2, animScene, posX, posY, posZ, rotX, rotY, rotZ, order);
		} // 0x020894BF17A02EF2 undefined b1207
		static void GET_ANIM_SCENE_ORIGIN(AnimScene animScene, Vector3* position, Vector3* rotation, int order)
		{
			invoke<int>(0xADF1D53F3B1FE0A7, animScene, position, rotation, order);
		} // 0xADF1D53F3B1FE0A7 undefined b1207
		static void SET_ANIM_SCENE_PAUSED(AnimScene animScene, BOOL toggle)
		{
			invoke<int>(0xD6824B7D24DC0CE0, animScene, toggle);
		} // 0xD6824B7D24DC0CE0 undefined b1207
		static BOOL IS_ANIM_SCENE_PAUSED_(AnimScene animScene)
		{
			return invoke<BOOL>(0x4B4038796F0D6566, animScene);
		} // 0x4B4038796F0D6566 undefined b1207
		static void SET_ANIM_SCENE_RATE(AnimScene animScene, float rate)
		{
			invoke<int>(0x75820B801CFF262A, animScene, rate);
		} // 0x75820B801CFF262A undefined b1207
		static float GET_ANIM_SCENE_RATE_(AnimScene animScene)
		{
			return invoke<float>(0x43C21623E42B821B, animScene);
		} // 0x43C21623E42B821B undefined b1207
		static float GET_ANIM_SCENE_PHASE(AnimScene animScene)
		{
			return invoke<float>(0x3FBC3F51BF12DFBF, animScene);
		} // 0x3FBC3F51BF12DFBF undefined b1207
		static float GET_ANIM_SCENE_TIME_(AnimScene animScene)
		{
			return invoke<float>(0x61BE7D6186260002, animScene);
		} // 0x61BE7D6186260002 undefined b1207
		static float GET_ANIM_SCENE_DURATION_(AnimScene animScene)
		{
			return invoke<float>(0x49F1D143ADE32656, animScene);
		} // 0x49F1D143ADE32656 undefined b1207
		static void SET_ANIM_SCENE_ENTITY(AnimScene animScene, const char* entityName, Entity entity, int flags)
		{
			invoke<int>(0x8B720AD451CA2AB3, animScene, entityName, entity, flags);
		} // 0x8B720AD451CA2AB3 undefined b1207
		static void REMOVE_ANIM_SCENE_ENTITY(AnimScene animScene, const char* entityName, Entity entity)
		{
			invoke<int>(0x2BF96692C67F3E53, animScene, entityName, entity);
		} // 0x2BF96692C67F3E53 undefined b1207
		static BOOL IS_ENTITY_EXITING_ANIM_SCENE_THIS_FRAME(AnimScene animScene, const char* entityName)
		{
			return invoke<BOOL>(0x005E6F28DD7ED58D, animScene, entityName);
		} // 0x005E6F28DD7ED58D undefined b1207
		static BOOL COULD_ANIM_SCENE_ENTITY_REACH_EXIT_NEXT_FRAME(AnimScene animScene, const char* entityName, Any p2, Any p3)
		{
			return invoke<BOOL>(0x73616E64696C616E, animScene, entityName, p2, p3);
		} // 0x73616E64696C616E undefined b1207
		static BOOL HAS_ENTITY_EXITED_ANIM_SCENE(AnimScene animScene, const char* entityName)
		{
			return invoke<BOOL>(0xB89FCFF19DAFFF28, animScene, entityName);
		} // 0xB89FCFF19DAFFF28 undefined b1207
		// _HAS_L* (?)
		static BOOL HAS_ENTITY_ENTERED_ANIM_SCENE_(AnimScene animScene, const char* entityName)
		{
			return invoke<BOOL>(0x337F1CC8EE895601, animScene, entityName);
		} // 0x337F1CC8EE895601 undefined b1207
		static Ped GET_ANIM_SCENE_PED_(AnimScene animScene, const char* name, BOOL isNetwork)
		{
			return invoke<Ped>(0xE5822422197BBBA3, animScene, name, isNetwork);
		} // 0xE5822422197BBBA3 undefined b1207
		static Object GET_ANIM_SCENE_OBJECT_(AnimScene animScene, const char* name, BOOL isNetwork)
		{
			return invoke<Object>(0xFB5674687A1B2814, animScene, name, isNetwork);
		} // 0xFB5674687A1B2814 undefined b1207
		static Vehicle GET_ANIM_SCENE_VEHICLE_(AnimScene animScene, const char* name, BOOL isNetwork)
		{
			return invoke<Vehicle>(0x430EE0A19BC5A287, animScene, name, isNetwork);
		} // 0x430EE0A19BC5A287 undefined b1207
		static void SET_ANIM_SCENE_BOOL(AnimScene animScene, const char* name, BOOL value, BOOL p3)
		{
			invoke<int>(0x519E96C2C68B404B, animScene, name, value, p3);
		} // 0x519E96C2C68B404B undefined b1207
		static BOOL GET_ANIM_SCENE_BOOL(AnimScene animScene, const char* name)
		{
			return invoke<BOOL>(0x07A6F6447ECA9B64, animScene, name);
		} // 0x07A6F6447ECA9B64 undefined b1207
		static void SET_ANIM_SCENE_FLOAT(AnimScene animScene, const char* name, float value, BOOL p3, BOOL p4)
		{
			invoke<int>(0x6BC5104E68CBEFE8, animScene, name, value, p3, p4);
		} // 0x6BC5104E68CBEFE8 undefined b1207
		static float GET_ANIM_SCENE_FLOAT(AnimScene animScene, const char* name)
		{
			return invoke<float>(0xCC24CB07F60B496E, animScene, name);
		} // 0xCC24CB07F60B496E undefined b1207
		static void SET_ANIM_SCENE_INT(AnimScene animScene, const char* name, int value, BOOL p3)
		{
			invoke<int>(0x3A379D2166CF5B92, animScene, name, value, p3);
		} // 0x3A379D2166CF5B92 undefined b1207
		static int GET_ANIM_SCENE_INT(AnimScene animScene, const char* name)
		{
			return invoke<int>(0x2B7277484CC095FD, animScene, name);
		} // 0x2B7277484CC095FD undefined b1207
		static BOOL GET_ANIM_SCENE_ENTITY_LOCATION_DATA(AnimScene animScene, const char* entityName, Vector3* matrix, BOOL p3, const char* playbackListName, int p5)
		{
			return invoke<BOOL>(0x8398438D8F14F56D, animScene, entityName, matrix, p3, playbackListName, p5);
		} // 0x8398438D8F14F56D undefined b1207
		static BOOL IS_ENTITY_PLAYING_ANIM_SCENE(Entity entity, AnimScene animScene)
		{
			return invoke<BOOL>(0x3AB6C7B0BB0DF4B1, entity, animScene);
		} // 0x3AB6C7B0BB0DF4B1 undefined b1207
		static void ATTACH_ANIM_SCENE_TO_ENTITY(AnimScene animScene, Entity entity, int p2)
		{
			invoke<int>(0xDC418495DBA327A1, animScene, entity, p2);
		} // 0xDC418495DBA327A1 undefined b1207
		static void ATTACH_ANIM_SCENE_TO_ENTITY_PRESERVING_LOCATION(AnimScene animScene, Entity entity, int p2)
		{
			invoke<int>(0x1C0B105C3F30B88D, animScene, entity, p2);
		} // 0x1C0B105C3F30B88D undefined b1207
		static void DETACH_ANIM_SCENE(AnimScene animScene)
		{
			invoke<int>(0x6843A1AA3A336DFF, animScene);
		} // 0x6843A1AA3A336DFF undefined b1207
		static void DETACH_ANIM_SCENE_PRESERVING_LOCATION(AnimScene animScene)
		{
			invoke<int>(0xA2507C4948C83D2E, animScene);
		} // 0xA2507C4948C83D2E undefined b1207
		static void TAKE_OWNERSHIP_OF_ANIM_SCENE(AnimScene animScene)
		{
			invoke<int>(0xF7A4C571E572D237, animScene);
		} // 0xF7A4C571E572D237 undefined b1207
		static BOOL CHECK_OWNERSHIP_OF_ANIM_SCENE(AnimScene animScene)
		{
			return invoke<BOOL>(0x661B8683611B9B97, animScene);
		} // 0x661B8683611B9B97 undefined b1207
		static void SET_ANIM_SCENE_PLAYBACK_LIST(AnimScene animScene, const char* playbackListName)
		{
			invoke<int>(0xAB5E7CAB074D6B84, animScene, playbackListName);
		} // 0xAB5E7CAB074D6B84 undefined b1207
		// Used in SP R* Scripts only
		// _IS_ANIM_SCENE_P*
		static BOOL N0x1C5D33A4293E6DDE(AnimScene animScene, const char* phaseName)
		{
			return invoke<BOOL>(0x1C5D33A4293E6DDE, animScene, phaseName);
		} // 0x1C5D33A4293E6DDE undefined b1207
		static BOOL DOES_ANIM_SCENE_PLAY_LIST_EXIST_(AnimScene animScene, const char* playbackListName)
		{
			return invoke<BOOL>(0xA9016536015DE29D, animScene, playbackListName);
		} // 0xA9016536015DE29D undefined b1207
		static void SET_ANIM_SCENE_PLAY_LIST(AnimScene animScene, const char* playlistName, BOOL p2)
		{
			invoke<int>(0x15598CFB25F3DC7E, animScene, playlistName, p2);
		} // 0x15598CFB25F3DC7E undefined b1207
		static BOOL IS_ANIM_SCENE_PLAYBACK_LIST_PHASE_ACTIVE_(AnimScene animScene, const char* phaseName)
		{
			return invoke<BOOL>(0x1F0E401031E20146, animScene, phaseName);
		} // 0x1F0E401031E20146 undefined b1207
		static BOOL REQUEST_ANIM_SCENE_PLAY_LIST(AnimScene animScene, const char* playlistName)
		{
			return invoke<BOOL>(0xDF7B5144E25CD3FE, animScene, playlistName);
		} // 0xDF7B5144E25CD3FE undefined b1207
		static BOOL RELEASE_ANIM_SCENE_PLAY_LIST_(AnimScene animScene, const char* playlistName)
		{
			return invoke<BOOL>(0xAE6ADA8FE7E84ACC, animScene, playlistName);
		} // 0xAE6ADA8FE7E84ACC undefined b1207
		static Hash GET_ANIM_SCENE_DICT_(AnimScene animScene)
		{
			return invoke<Hash>(0xAE5ADA4FE3E21ADC, animScene);
		} // 0xAE5ADA4FE3E21ADC undefined b1207
		// Used in SP R* Scripts only
		// Params: p1 = 2B-LowHonor, 2A-HighHonor
		static BOOL N0x1407F5115FB9583E(AnimScene animScene, const char* p1)
		{
			return invoke<BOOL>(0x1407F5115FB9583E, animScene, p1);
		} // 0x1407F5115FB9583E undefined b1207
		static BOOL IS_ANIM_SCENE_PLAYBACK_LIST_PHASE_LOADED_(AnimScene animScene, const char* phaseName)
		{
			return invoke<BOOL>(0x23E33CB9F4A3F547, animScene, phaseName);
		} // 0x23E33CB9F4A3F547 undefined b1207
		static BOOL IS_ANIM_SCENE_PLAYBACK_LIST_PHASE_LOADING_(AnimScene animScene, const char* phaseName)
		{
			return invoke<BOOL>(0x0DF57F86FE71DBE5, animScene, phaseName);
		} // 0x0DF57F86FE71DBE5 undefined b1207
		// Used in braithwaites2 SP R* Scripts only
		// _A*
		static void N0x1AD896BF43619551()
		{
			invoke<int>(0x1AD896BF43619551);
		} // 0x1AD896BF43619551 undefined b1207
		static int GET_ANIM_SCENE_CURRENT_ACTIVE_CAMERA_COUNT(AnimScene animScene)
		{
			return invoke<int>(0x4822A65D5AF64E69, animScene);
		} // 0x4822A65D5AF64E69 undefined b1207
		// Used in SP R* Scripts only
		// _IS_ANIM_SCENE_R* - _IS_ANIM_SCENE_S*
		static BOOL N0x5D7BFDA2290B4E39(const char* p0)
		{
			return invoke<BOOL>(0x5D7BFDA2290B4E39, p0);
		} // 0x5D7BFDA2290B4E39 undefined b1207
		// MGM stands for MiniGameMoments.
		static BOOL IS_MGM_SYSTEM_LOADED_(const char* mgmFilename)
		{
			return invoke<BOOL>(0xFDFC14799373283F, mgmFilename);
		} // 0xFDFC14799373283F undefined b1207
		// Used to request MiniGameMoments Assets.
		//
		// mgmFilename's:
		// Poker
		// PokerArthur
		// PokerArthurCamp
		// PokerJohn
		// PokerJohnCamp
		static BOOL LOAD_MGM_ASSETS_(const char* mgmFilename)
		{
			return invoke<BOOL>(0xB727A847862CB00A, mgmFilename);
		} // 0xB727A847862CB00A undefined b1207
		// Returns mgmHandle
		static int CREATE_MGM_SYSTEM_(const char* mgmFilename)
		{
			return invoke<int>(0xA1300DE03E5D1973, mgmFilename);
		} // 0xA1300DE03E5D1973 undefined b1207
		static void DELETE_MGM_SYSTEM_(int mgmHandle)
		{
			invoke<int>(0x53CB3970BA02E3CC, mgmHandle);
		} // 0x53CB3970BA02E3CC undefined b1207
		// _PREPARE_* - _REGISTER_*
		static void N0xB1A196BAFE650402(int mgmHandle, Ped ped)
		{
			invoke<int>(0xB1A196BAFE650402, mgmHandle, ped);
		} // 0xB1A196BAFE650402 undefined b1207
		// _UNLOAD_* - _WAS_ANIM_SCENE_*
		static void N0xAE6DE22DE0ED4554(int mgmHandle, Ped ped)
		{
			invoke<int>(0xAE6DE22DE0ED4554, mgmHandle, ped);
		} // 0xAE6DE22DE0ED4554 undefined b1207
		// Only used in tg_p R* Script
		// Returns true when mgm event success
		// _PREPARE_* - _REGISTER_*
		static BOOL N0x61B2AAEF645DDAF0(int mgmEventHandle, const char* p1, int seatId, int p3, BOOL p4)
		{
			return invoke<BOOL>(0x61B2AAEF645DDAF0, mgmEventHandle, p1, seatId, p3, p4);
		} // 0x61B2AAEF645DDAF0 undefined b1207
		static void SET_MGM_EVENT_(int mgmEventHandle, const char* p1, Any seatId, int p3, float p4)
		{
			invoke<int>(0x07706C4CC9C6CC9E, mgmEventHandle, p1, seatId, p3, p4);
		} // 0x07706C4CC9C6CC9E undefined b1207
		// p2: MINIGAME_GET_SECONDARY_VOICE_STRING
		// _SET_*
		static void N0x3641FCD53E59B335(int mgmHandle, Ped ped, const char* secondaryVoiceString)
		{
			invoke<int>(0x3641FCD53E59B335, mgmHandle, ped, secondaryVoiceString);
		} // 0x3641FCD53E59B335 undefined b1207
		static void SET_BREAKOUT_ARCHETYPE_(Ped ped, const char* archetype)
		{
			invoke<int>(0x99B2A2E3655DEAF1, ped, archetype);
		} // 0x99B2A2E3655DEAF1 undefined b1207
		static void CLEAR_BREAKOUT_ARCHETYPE_(Ped ped)
		{
			invoke<int>(0xBC781D24AA11F179, ped);
		} // 0xBC781D24AA11F179 undefined b1207
		// Used in SP R* Scripts only
		// _IS_*
		static BOOL N0x3B393716C3FD8237(Ped ped)
		{
			return invoke<BOOL>(0x3B393716C3FD8237, ped);
		} // 0x3B393716C3FD8237 undefined b1207
		// Used in SP R* Scripts only
		// _SET_B* - _SET_C*
		static void N0xE12D7B4B959644CD()
		{
			invoke<int>(0xE12D7B4B959644CD);
		} // 0xE12D7B4B959644CD undefined b1207
		// Used in SP R* Scripts only
		// _RESUME_* - _SET_A*
		static void N0xC1193521E3B9FADD(Entity entity, BOOL p1)
		{
			invoke<int>(0xC1193521E3B9FADD, entity, p1);
		} // 0xC1193521E3B9FADD undefined b1207
		static void REQUEST_PHOTO_MODE_FREEZE_()
		{
			invoke<int>(0x7C709C01D43D94CD);
		} // 0x7C709C01D43D94CD undefined b1207
		static void REQUEST_PHOTO_MODE_DEFREEZE_()
		{
			invoke<int>(0x41AFA5F228B0B6B0);
		} // 0x41AFA5F228B0B6B0 undefined b1207
		// Used in SP R* Scripts only
		// _IS_PED_* - _IS_SC*
		static BOOL N0x2DB524750DC41ED4()
		{
			return invoke<BOOL>(0x2DB524750DC41ED4);
		} // 0x2DB524750DC41ED4 undefined b1207
		// Used in SP R* Scripts only
		// _PAUSE_* - _PLAY_*
		static BOOL N0xEA41D44A8D42057B()
		{
			return invoke<BOOL>(0xEA41D44A8D42057B);
		} // 0xEA41D44A8D42057B undefined b1207
		// Pauses all script threads except the one that called it.
		static void PAUSE_SCRIPT_THREADS_(BOOL toggle)
		{
			invoke<int>(0x37C1257849DEF24A, toggle);
		} // 0x37C1257849DEF24A undefined b1207
		// Used in SP R* Scripts only
		// _SET_P*
		static void N0xCDCD7B2D49AEE73A(BOOL p0)
		{
			invoke<int>(0xCDCD7B2D49AEE73A, p0);
		} // 0xCDCD7B2D49AEE73A undefined b1207
		static BOOL WAS_ANIM_SCENE_SKIPPED(AnimScene animScene)
		{
			return invoke<BOOL>(0xEF324E9550A394D5, animScene);
		} // 0xEF324E9550A394D5 undefined b1207
	}

	namespace _NAMESPACE4
	{
		// nullsub, doesn't do anything
		// however it is being used in tty scripts: [NET_BAD_SPORT_REPORT_PLAYER] Detected bad sport behavior from Player
		// badSportBehavior: BS_QUITTER = 0, BS_VEHICLE_DESTRUCTION = 1, BS_VOTED_OUT = 2
		static void REPORT_PLAYER_BAD_SPORT_BEHAVIOR_(Any* gamerHandle, int badSportBehaviorType)
		{
			invoke<int>(0xC31C44C43B48FDE3, gamerHandle, badSportBehaviorType);
		} // 0xC31C44C43B48FDE3 undefined b1207
	}

	namespace ATTRIBUTE
	{
		// attributeIndex:
		// enum ePedAttribute
		// {
		// 	PA_HEALTH,
		// 	PA_STAMINA,
		// 	PA_SPECIALABILITY,
		// 	PA_COURAGE,
		// 	PA_AGILITY,
		// 	PA_SPEED,
		// 	PA_ACCELERATION,
		// 	PA_BONDING,
		// 	SA_HUNGER,
		// 	SA_FATIGUED,
		// 	SA_INEBRIATED,
		// 	SA_POISONED,
		// 	SA_BODYHEAT,
		// 	SA_BODYWEIGHT,
		// 	SA_OVERFED,
		// 	SA_SICKNESS,
		// 	SA_DIRTINESS,
		// 	SA_DIRTINESSHAT,
		// 	MTR_STRENGTH,
		// 	MTR_GRIT,
		// 	MTR_INSTINCT,
		// 	PA_UNRULINESS,
		// 	SA_DIRTINESSSKIN
		// };
		static void SET_ATTRIBUTE_BASE_RANK(Ped ped, int attributeIndex, int newValue)
		{
			invoke<int>(0x5DA12E025D47D4E5, ped, attributeIndex, newValue);
		} // 0x5DA12E025D47D4E5 undefined b1207
		// attributeIndex: see SET_ATTRIBUTE_BASE_RANK
		static int GET_ATTRIBUTE_RANK(Ped ped, int attributeIndex)
		{
			return invoke<int>(0xA4C8E23E29040DE0, ped, attributeIndex);
		} // 0xA4C8E23E29040DE0 undefined b1207
		// attributeIndex: see SET_ATTRIBUTE_BASE_RANK
		static int GET_ATTRIBUTE_BASE_RANK(Ped ped, int attributeIndex)
		{
			return invoke<int>(0x147149F2E909323C, ped, attributeIndex);
		} // 0x147149F2E909323C undefined b1207
		// attributeIndex: see SET_ATTRIBUTE_BASE_RANK
		static int GET_ATTRIBUTE_BONUS_RANK(Ped ped, int coreIndex)
		{
			return invoke<int>(0x0EFA71F4B4330E04, ped, coreIndex);
		} // 0x0EFA71F4B4330E04 undefined b1207
		// attributeIndex: see SET_ATTRIBUTE_BASE_RANK
		static int GET_MAX_ATTRIBUTE_RANK(Ped ped, int attributeIndex)
		{
			return invoke<int>(0x704674A0535A471D, ped, attributeIndex);
		} // 0x704674A0535A471D undefined b1207
		// attributeIndex: see SET_ATTRIBUTE_BASE_RANK
		static void SET_ATTRIBUTE_BONUS_RANK(Ped ped, int attributeIndex, int newValue)
		{
			invoke<int>(0x920F9488BD115EFB, ped, attributeIndex, newValue);
		} // 0x920F9488BD115EFB undefined b1207
		// attributeIndex: see SET_ATTRIBUTE_BASE_RANK
		static int GET_DEFAULT_ATTRIBUTE_RANK(Ped ped, int attributeIndex)
		{
			return invoke<int>(0x958DD43D41F89A47, ped, attributeIndex);
		} // 0x958DD43D41F89A47 undefined b1207
		// attributeIndex: see SET_ATTRIBUTE_BASE_RANK
		static int GET_DEFAULT_MAX_ATTRIBUTE_RANK(Ped ped, int attributeIndex)
		{
			return invoke<int>(0x7C059C55AD940CB4, ped, attributeIndex);
		} // 0x7C059C55AD940CB4 undefined b1207
		// attributeIndex: see SET_ATTRIBUTE_BASE_RANK
		static void ADD_ATTRIBUTE_POINTS(Ped ped, int attributeIndex, int p2)
		{
			invoke<int>(0x75415EE0CB583760, ped, attributeIndex, p2);
		} // 0x75415EE0CB583760 undefined b1207
		// attributeIndex: see SET_ATTRIBUTE_BASE_RANK
		static void SET_ATTRIBUTE_POINTS(Ped ped, int attributeIndex, int p2)
		{
			invoke<int>(0x09A59688C26D88DF, ped, attributeIndex, p2);
		} // 0x09A59688C26D88DF undefined b1207
		// attributeIndex: see SET_ATTRIBUTE_BASE_RANK
		static int GET_ATTRIBUTE_POINTS(Ped ped, int attributeIndex)
		{
			return invoke<int>(0x219DA04BAA9CB065, ped, attributeIndex);
		} // 0x219DA04BAA9CB065 undefined b1207
		// attributeIndex: see SET_ATTRIBUTE_BASE_RANK
		static int GET_MAX_ATTRIBUTE_POINTS(Ped ped, int attributeIndex)
		{
			return invoke<int>(0x223BF310F854871C, ped, attributeIndex);
		} // 0x223BF310F854871C undefined b1207
		// coreIndex:
		// enum eAttributeCore
		// {
		// 	ATTRIBUTE_CORE_HEALTH,
		// 	ATTRIBUTE_CORE_STAMINA,
		// 	ATTRIBUTE_CORE_DEADEYE
		// };
		static void SET_ATTRIBUTE_CORE_VALUE_(Ped ped, int coreIndex, int value)
		{
			invoke<int>(0xC6258F41D86676E0, ped, coreIndex, value);
		} // 0xC6258F41D86676E0 undefined b1207
		// Gets the ped's core value on a scale of 0 to 100.
		// coreIndex: see _SET_ATTRIBUTE_CORE_VALUE
		static int GET_ATTRIBUTE_CORE_VALUE_(Ped ped, int coreIndex)
		{
			return invoke<int>(0x36731AC041289BB1, ped, coreIndex);
		} // 0x36731AC041289BB1 undefined b1207
		// attributeIndex: see SET_ATTRIBUTE_BASE_RANK
		static int GET_DEFAULT_ATTRIBUTE_POINTS_NEEDED_FOR_RANK(Hash modelHash, int attributeIndex, int rank)
		{
			return invoke<int>(0x94A7F191DB49A44D, modelHash, attributeIndex, rank);
		} // 0x94A7F191DB49A44D undefined b1207
		// attributeIndex: see SET_ATTRIBUTE_BASE_RANK
		//
		// Old name: _SET_ATTRIBUTE_OVERPOWER_VALUE
		static void ENABLE_ATTRIBUTE_OVERPOWER(Ped ped, int attributeIndex, float value, BOOL makeSound)
		{
			invoke<int>(0xF6A7C08DF2E28B28, ped, attributeIndex, value, makeSound);
		} // 0xF6A7C08DF2E28B28 undefined b1207
		// coreIndex: see _SET_ATTRIBUTE_CORE_VALUE
		//
		// Previously incorrectly named ENABLE_ATTRIBUTE_OVERPOWER
		static void ENABLE_ATTRIBUTE_CORE_OVERPOWER_(Ped ped, int coreIndex, float value, BOOL makeSound)
		{
			invoke<int>(0x4AF5A4C7B9157D14, ped, coreIndex, value, makeSound);
		} // 0x4AF5A4C7B9157D14 undefined b1207
		// attributeIndex: see SET_ATTRIBUTE_BASE_RANK
		static void DISABLE_ATTRIBUTE_OVERPOWER(Ped ped, int attributeIndex)
		{
			invoke<int>(0xF8DAC3D85636C241, ped, attributeIndex);
		} // 0xF8DAC3D85636C241 undefined b1207
		// attributeIndex: see SET_ATTRIBUTE_BASE_RANK
		static BOOL IS_ATTRIBUTE_OVERPOWERED_(Ped ped, int attributeIndex)
		{
			return invoke<BOOL>(0x103C2F885ABEB00B, ped, attributeIndex);
		} // 0x103C2F885ABEB00B undefined b1207
		static BOOL IS_ATTRIBUTE_CORE_OVERPOWERED_(Ped ped, int coreIndex)
		{
			return invoke<BOOL>(0x200373A8DF081F22, ped, coreIndex);
		} // 0x200373A8DF081F22 undefined b1207
		static float GET_ATTRIBUTE_OVERPOWER_SECONDS_LEFT_(Ped ped, int attributeIndex)
		{
			return invoke<float>(0x4C9F782180712742, ped, attributeIndex);
		} // 0x4C9F782180712742 undefined b1207
		static float GET_ATTRIBUTE_CORE_OVERPOWER_SECONDS_LEFT_(Ped ped, int coreIndex)
		{
			return invoke<float>(0xB429F58803D285B1, ped, coreIndex);
		} // 0xB429F58803D285B1 undefined b1207
		// Params: p1 is related to satchel_category
		static void START_ITEM_PREVIEW_(Any p0, int p1)
		{
			invoke<int>(0x7E2C766ADB2C5F1A, p0, p1);
		} // 0x7E2C766ADB2C5F1A undefined b1207
		static void STOP_ITEM_PREVIEW()
		{
			invoke<int>(0xD962F8579D702DB5);
		} // 0xD962F8579D702DB5 undefined b1207
		// Displays status effects on core icons (includes warnings).
		//
		// enum eUiRpgStatusEffect
		// {
		// 	STATUS_NONE,
		// 	STATUS_COLD,
		// 	STATUS_HOT,
		// 	STATUS_OVERFED,
		// 	STATUS_DIRTY,
		// 	STATUS_SNAKE_VENOM,
		// 	STATUS_ARROW_WOUNDED,
		// 	STATUS_ARROW_DRAINED,
		// 	STATUS_ARROW_DISORIENTED,
		// 	STATUS_ARROW_TRACKED,
		// 	STATUS_ARROW_CONFUSION,
		// 	STATUS_UNDERWEIGHT,
		// 	STATUS_OVERWEIGHT,
		// 	STATUS_SICK_1,
		// 	STATUS_SICK_2,
		// 	STATUS_PREDATOR_INVULNERABLE
		// };
		static void SET_STATUS_EFFECT_CORE_ICON_(int statusEffectType)
		{
			invoke<int>(0xA4D3A1C008F250DF, statusEffectType);
		} // 0xA4D3A1C008F250DF undefined b1207
		// Starts core periodic icon.
		// statusEffectType: see 0xA4D3A1C008F250DF
		static void SET_STATUS_EFFECT_PERIODIC_ICON_(int statusEffectType)
		{
			invoke<int>(0xFB6E111908502871, statusEffectType);
		} // 0xFB6E111908502871 undefined b1207
		// Stops periodic icon.
		// statusEffectType: see 0xA4D3A1C008F250DF
		static void STOP_STATUS_EFFECT_PERIODIC_ICON_(int statusEffectType)
		{
			invoke<int>(0x3FC4C027FD0936F4, statusEffectType);
		} // 0x3FC4C027FD0936F4 undefined b1207
	}

	namespace AUDIO
	{
		// _AUDIO_IS_* - _AUDIO_TRIGGER*
		static void N0x7455CD705F7E933E()
		{
			invoke<int>(0x7455CD705F7E933E);
		} // 0x7455CD705F7E933E undefined b1207
		static void CLEAR_CONVERSATION_HISTORY()
		{
			invoke<int>(0x33D51F801CB16E4F);
		} // 0x33D51F801CB16E4F undefined b1207
		static void CLEAR_CONVERSATION_HISTORY_FOR_SCRIPTED_CONVERSATION_(const char* convoRoot)
		{
			invoke<int>(0xEF51242E35242B47, convoRoot);
		} // 0xEF51242E35242B47 undefined b1207
		static BOOL CREATE_NEW_SCRIPTED_CONVERSATION(const char* convoRoot)
		{
			return invoke<BOOL>(0xD2C91A0B572AAE56, convoRoot);
		} // 0xD2C91A0B572AAE56 0xB2BC25F8 b1207
		static BOOL N0xDF947FE0D551684E(Ped ped, const char* p1)
		{
			return invoke<BOOL>(0xDF947FE0D551684E, ped, p1);
		} // 0xDF947FE0D551684E undefined b1207
		static void ADD_PED_TO_CONVERSATION(const char* convoRoot, Ped ped, const char* characterName)
		{
			invoke<int>(0x95D9F4BC443956E7, convoRoot, ped, characterName);
		} // 0x95D9F4BC443956E7 0xF8D5EB86 b1207
		static void N0xA2323A2EAE32A290(Ped listeningToPed, Ped ped, const char* listenerName)
		{
			invoke<int>(0xA2323A2EAE32A290, listeningToPed, ped, listenerName);
		} // 0xA2323A2EAE32A290 undefined b1207
		// Only used in R* SP Script cv_mus_shared
		static BOOL N0x79F9C57B8D0DFE90(const char* convoRoot, AnimScene animScene)
		{
			return invoke<BOOL>(0x79F9C57B8D0DFE90, convoRoot, animScene);
		} // 0x79F9C57B8D0DFE90 undefined b1207
		static void START_SCRIPT_CONVERSATION(const char* convoRoot, BOOL p1, BOOL p2, BOOL clone)
		{
			invoke<int>(0x6B17C62C9635D2DC, convoRoot, p1, p2, clone);
		} // 0x6B17C62C9635D2DC 0xE5DE7D9D b1207
		static void PRELOAD_SCRIPT_CONVERSATION(const char* convoRoot, BOOL p1, BOOL p2, BOOL clone)
		{
			invoke<int>(0x3B3CAD6166916D87, convoRoot, p1, p2, clone);
		} // 0x3B3CAD6166916D87 0xDDF5C579 b1207
		static void START_PRELOADED_CONVERSATION(const char* convoRoot)
		{
			invoke<int>(0x23641AFE870AF385, convoRoot);
		} // 0x23641AFE870AF385 0xA170261B b1207
		static BOOL N0x0CB3D1919E8D7CBA(const char* convoRoot)
		{
			return invoke<BOOL>(0x0CB3D1919E8D7CBA, convoRoot);
		} // 0x0CB3D1919E8D7CBA undefined b1207
		static BOOL N0xFE5C6177064BD390(BOOL p0)
		{
			return invoke<BOOL>(0xFE5C6177064BD390, p0);
		} // 0xFE5C6177064BD390 undefined b1207
		static BOOL IS_SCRIPTED_CONVERSATION_CREATED_(const char* convoRoot)
		{
			return invoke<BOOL>(0xD89504D9D7D5057D, convoRoot);
		} // 0xD89504D9D7D5057D undefined b1207
		static BOOL N0x5A13586A9447931F(BOOL p0)
		{
			return invoke<BOOL>(0x5A13586A9447931F, p0);
		} // 0x5A13586A9447931F undefined b1207
		static BOOL IS_SCRIPTED_CONVERSATION_LOADED(const char* convoRoot)
		{
			return invoke<BOOL>(0xDF0D54BE7A776737, convoRoot);
		} // 0xDF0D54BE7A776737 0xE1870EA9 b1207
		static BOOL IS_ANY_CONVERSATION_PLAYING_(BOOL p0)
		{
			return invoke<BOOL>(0xA2CAC9DEF0195E6F, p0);
		} // 0xA2CAC9DEF0195E6F undefined b1207
		static BOOL IS_SCRIPTED_CONVERSATION_PLAYING(const char* p0)
		{
			return invoke<BOOL>(0x1ECC76792F661CF5, p0);
		} // 0x1ECC76792F661CF5 undefined b1207
		static BOOL IS_SCRIPTED_CONVERSION_ONGOING_(const char* p0)
		{
			return invoke<BOOL>(0xF01C570E0A0A1E67, p0);
		} // 0xF01C570E0A0A1E67 undefined b1207
		static BOOL N0x847748AE5D7B1071(BOOL p0)
		{
			return invoke<BOOL>(0x847748AE5D7B1071, p0);
		} // 0x847748AE5D7B1071 undefined b1207
		// _IS_SCRIPTED_CONVERSATION_*
		static BOOL N0xD0730C1FA40348D9(const char* convoRoot)
		{
			return invoke<BOOL>(0xD0730C1FA40348D9, convoRoot);
		} // 0xD0730C1FA40348D9 undefined b1207
		static int GET_CURRENT_SCRIPTED_CONVERSATION_LINE(const char* p0)
		{
			return invoke<int>(0x480357EE890C295A, p0);
		} // 0x480357EE890C295A 0x9620E41F b1207
		static void PAUSE_SCRIPTED_CONVERSATION(const char* p0, BOOL p1, BOOL p2, BOOL p3, BOOL p4)
		{
			invoke<int>(0x8530AD776CD72B12, p0, p1, p2, p3, p4);
		} // 0x8530AD776CD72B12 0xE2C9C6F8 b1207
		static void RESTART_SCRIPTED_CONVERSATION(const char* p0)
		{
			invoke<int>(0x9AEB285D1818C9AC, p0);
		} // 0x9AEB285D1818C9AC 0x6CB24B56 b1207
		static void STOP_ALL_SCRIPTED_CONVERSIONS_(BOOL p0, BOOL p1, BOOL p2)
		{
			invoke<int>(0x36559148B78853B3, p0, p1, p2);
		} // 0x36559148B78853B3 undefined b1207
		static int STOP_SCRIPTED_CONVERSATION(const char* p0, BOOL p1, BOOL p2)
		{
			return invoke<int>(0xD79DEEFB53455EBA, p0, p1, p2);
		} // 0xD79DEEFB53455EBA 0xAB77DA7D b1207
		static void SKIP_TO_NEXT_SCRIPTED_CONVERSATION_LINE(const char* p0)
		{
			invoke<int>(0x9663FE6B7A61EB00, p0);
		} // 0x9663FE6B7A61EB00 0x85C98304 b1207
		static int N0xF336E9F989B3518F(const char* p0)
		{
			return invoke<int>(0xF336E9F989B3518F, p0);
		} // 0xF336E9F989B3518F undefined b1207
		static Ped N0x254B0241E964B450(const char* p0, int currentScriptedConvoLine)
		{
			return invoke<Ped>(0x254B0241E964B450, p0, currentScriptedConvoLine);
		} // 0x254B0241E964B450 undefined b1207
		static Ped N0x152ED1B56E8F1F50(const char* p0, int currentScriptedConvoLine)
		{
			return invoke<Ped>(0x152ED1B56E8F1F50, p0, currentScriptedConvoLine);
		} // 0x152ED1B56E8F1F50 undefined b1207
		static int N0x935DBD96D4A3DA1F(const char* p0, int currentScriptedConvoLine)
		{
			return invoke<int>(0x935DBD96D4A3DA1F, p0, currentScriptedConvoLine);
		} // 0x935DBD96D4A3DA1F undefined b1207
		static int N0x295859EB18F48D82(const char* p0)
		{
			return invoke<int>(0x295859EB18F48D82, p0);
		} // 0x295859EB18F48D82 undefined b1207
		static void N0x40CA665AB9D8D505(const char* convoRoot, int singleLineIndex)
		{
			invoke<int>(0x40CA665AB9D8D505, convoRoot, singleLineIndex);
		} // 0x40CA665AB9D8D505 undefined b1207
		static void N0xF232C2C546AC16D0(const char* p0)
		{
			invoke<int>(0xF232C2C546AC16D0, p0);
		} // 0xF232C2C546AC16D0 undefined b1207
		static void N0x1E6F9A9FE1A99F36(const char* audSpeechEvent)
		{
			invoke<int>(0x1E6F9A9FE1A99F36, audSpeechEvent);
		} // 0x1E6F9A9FE1A99F36 undefined b1207
		// nullsub, doesn't do anything
		static void REGISTER_SCRIPT_WITH_AUDIO(BOOL p0)
		{
			invoke<int>(0xC6ED9D5092438D91, p0);
		} // 0xC6ED9D5092438D91 0xA6203643 b1207
		// nullsub, doesn't do anything
		static void UNREGISTER_SCRIPT_WITH_AUDIO()
		{
			invoke<int>(0xA8638BE228D4751A);
		} // 0xA8638BE228D4751A 0x66728EFE b1207
		static BOOL REQUEST_SCRIPT_AUDIO_BANK(const char* audioBank)
		{
			return invoke<BOOL>(0x2F844A8B08D76685, audioBank);
		} // 0x2F844A8B08D76685 0x21322887 b1207
		static void RELEASE_NAMED_SCRIPT_AUDIO_BANK(const char* audioBank)
		{
			invoke<int>(0x77ED170667F50170, audioBank);
		} // 0x77ED170667F50170 0x16707ABC b1207
		static void RELEASE_SCRIPT_AUDIO_BANK()
		{
			invoke<int>(0x7A2D8AD0A9EB9C3F);
		} // 0x7A2D8AD0A9EB9C3F 0x22F865E5 b1207
		static int GET_SOUND_ID()
		{
			return invoke<int>(0x430386FE9BF80B45);
		} // 0x430386FE9BF80B45 0x6AE0AD56 b1207
		static void RELEASE_SOUND_ID(int soundId)
		{
			invoke<int>(0x353FC880830B88FA, soundId);
		} // 0x353FC880830B88FA 0x9C080899 b1207
		static void PLAY_SOUND(const char* audioName, const char* audioRef, BOOL p2, Any p3, BOOL p4, Any p5)
		{
			invoke<int>(0x7FF4944CC209192D, audioName, audioRef, p2, p3, p4, p5);
		} // 0x7FF4944CC209192D 0xB6E1917F b1207
		// https://github.com/femga/rdr3_discoveries/tree/master/audio/frontend_soundsets
		static void PLAY_SOUND_FRONTEND(const char* audioName, const char* audioRef, BOOL p2, Any p3)
		{
			invoke<int>(0x67C540AA08E4A6F5, audioName, audioRef, p2, p3);
		} // 0x67C540AA08E4A6F5 0x2E458F74 b1207
		// item: value returned from 0x2E1CDC1FF3B8473E
		// soundSet: HUD_SHOP_SOUNDSET, COMPANIONS_ROBBERIES_SOUNDSET
		static void PLAY_SOUND_FROM_ITEM_(Hash item, Hash soundSet, Any p2)
		{
			invoke<int>(0xE8EAFF7B41EDD291, item, soundSet, p2);
		} // 0xE8EAFF7B41EDD291 undefined b1207
		static void PLAY_SOUND_FROM_ENTITY(const char* audioName, Entity entity, const char* audioRef, BOOL isNetwork, Any p4, Any p5)
		{
			invoke<int>(0x6FB1DA3CA9DA7D90, audioName, entity, audioRef, isNetwork, p4, p5);
		} // 0x6FB1DA3CA9DA7D90 undefined b1207
		static void PLAY_SOUND_FROM_POSITION_(const char* audioName, float x, float y, float z, const char* audioRef, BOOL isNetwork, Any p6, BOOL p7, Any p8)
		{
			invoke<int>(0xCCE219C922737BFA, audioName, x, y, z, audioRef, isNetwork, p6, p7, p8);
		} // 0xCCE219C922737BFA undefined b1207
		static void STOP_SOUND_WITH_NAME_(const char* audioName, const char* audioRef)
		{
			invoke<int>(0x0F2A2175734926D8, audioName, audioRef);
		} // 0x0F2A2175734926D8 undefined b1207
		// _IS_SOUND_RUNNING(?)
		static BOOL N0x580D71DFE0088E34(const char* audioName, const char* audioRef)
		{
			return invoke<BOOL>(0x580D71DFE0088E34, audioName, audioRef);
		} // 0x580D71DFE0088E34 undefined b1207
		// item: FUSE, value returned from 0x2E1CDC1FF3B8473E
		// soundSet: HUD_SHOP_SOUNDSET, COMPANIONS_ROBBERIES_SOUNDSET
		static BOOL IS_SCRIPTED_AUDIO_CUSTOM_(Hash item, Hash soundSet)
		{
			return invoke<BOOL>(0x6DF942C4179BE5AB, item, soundSet);
		} // 0x6DF942C4179BE5AB undefined b1207
		static void SET_VARIABLE_ON_SOUND_WITH_NAME_(const char* variableName, float variableValue, const char* audioName, const char* audioRef)
		{
			invoke<int>(0x9821B68CD3E05F2B, variableName, variableValue, audioName, audioRef);
		} // 0x9821B68CD3E05F2B undefined b1207
		// whistleConfig: Ped.WhistlePitch (0.0 - 1.0), Ped.WhistleClarity (0.0 - 1.0), Ped.WhistleShape (0.0 - 10.0)
		static void SET_WHISTLE_CONFIG_FOR_PED_(Ped ped, const char* whistleConfig, float value)
		{
			invoke<int>(0x9963681A8BC69BF3, ped, whistleConfig, value);
		} // 0x9963681A8BC69BF3 undefined b1207
		// p1: Entity.Relationship
		// p2: Player, Enemy, Teammate, Neutral
		static void SET_SOUND_RELATIONSHIP_ON_PED_(Ped ped, const char* p1, const char* p2)
		{
			invoke<int>(0x2E31ACA7477CF00F, ped, p1, p2);
		} // 0x2E31ACA7477CF00F undefined b1207
		static void PLAY_SOUND_FRONTEND_WITH_SOUND_ID_(int soundId, const char* name, const char* soundSet, BOOL p3)
		{
			invoke<int>(0xCE5D0FFE83939AF1, soundId, name, soundSet, p3);
		} // 0xCE5D0FFE83939AF1 undefined b1207
		// Params: p5 seems to be always 0
		static void PLAY_SOUND_FROM_ENTITY_WITH_SET_(int soundId, const char* soundName, Entity entity, const char* soundsetName, BOOL p4, Any p5)
		{
			invoke<int>(0xF1C5310FEAA36B48, soundId, soundName, entity, soundsetName, p4, p5);
		} // 0xF1C5310FEAA36B48 undefined b1207
		// Starts Audio Loop
		// _PLAY_SOUND_FROM_ENTITY* - _PLAY_SOUND_FRONTEND*
		static void PLAY_SOUND_FROM_POSITION_WITH_ID_(int soundId, const char* soundName, float x, float y, float z, const char* soundsetName, BOOL p6, int p7, BOOL p8)
		{
			invoke<int>(0xDCF5BA95BBF0FABA, soundId, soundName, x, y, z, soundsetName, p6, p7, p8);
		} // 0xDCF5BA95BBF0FABA undefined b1207
		// Only used in R* SP Scripts
		static void UPDATE_SOUND_POSITION_(int soundId, float x, float y, float z)
		{
			invoke<int>(0x0286617C8FC50A53, soundId, x, y, z);
		} // 0x0286617C8FC50A53 undefined b1207
		static void STOP_SOUND_WITH_ID_(int soundId)
		{
			invoke<int>(0x3210BCB36AF7621B, soundId);
		} // 0x3210BCB36AF7621B undefined b1207
		static void SET_VARIABLE_ON_SOUND_WITH_ID_(int soundId, const char* variableName, float variableValue)
		{
			invoke<int>(0x503703EC1781B7D6, soundId, variableName, variableValue);
		} // 0x503703EC1781B7D6 undefined b1207
		static BOOL PREPARE_SOUND(const char* soundName, const char* soundsetName, int soundId)
		{
			return invoke<BOOL>(0xE368E8422C860BA7, soundName, soundsetName, soundId);
		} // 0xE368E8422C860BA7 undefined b1207
		static void RELEASE_SHARD_SOUNDS_(const char* soundName, const char* soundsetName)
		{
			invoke<int>(0x9D746964E0CF2C5F, soundName, soundsetName);
		} // 0x9D746964E0CF2C5F undefined b1207
		// https://github.com/femga/rdr3_discoveries/tree/master/audio/soundsets
		static BOOL PREPARE_SOUNDSET(const char* soundsetName, BOOL p1)
		{
			return invoke<BOOL>(0xD9130842D7226045, soundsetName, p1);
		} // 0xD9130842D7226045 undefined b1207
		static void RELEASE_SOUNDSET_(const char* soundsetName)
		{
			invoke<int>(0x531A78D6BF27014B, soundsetName);
		} // 0x531A78D6BF27014B undefined b1207
		static BOOL PREPARE_SOUND_WITH_ENTITY(const char* soundName, Entity entity, const char* soundsetName, int soundId)
		{
			return invoke<BOOL>(0x4AD019591E94C064, soundName, entity, soundsetName, soundId);
		} // 0x4AD019591E94C064 undefined b1207
		static void N0x3E93DDDCBB6111E4(const char* p0, float p1)
		{
			invoke<int>(0x3E93DDDCBB6111E4, p0, p1);
		} // 0x3E93DDDCBB6111E4 undefined b1207
		static BOOL HAS_SOUND_AUDIO_NAME_FINISHED_(const char* audioName, const char* soundsetName)
		{
			return invoke<BOOL>(0x714A0EA7DE1167BE, audioName, soundsetName);
		} // 0x714A0EA7DE1167BE undefined b1207
		static BOOL HAS_SOUND_ID_FINISHED_(int soundId)
		{
			return invoke<BOOL>(0x84848E1C0FC67DBB, soundId);
		} // 0x84848E1C0FC67DBB undefined b1207
		// struct ScriptedSpeechParams
		// {
		// 	const char* speechName;
		// 	const char* voiceName;
		// 	alignas(8) int variation;
		// 	alignas(8) Hash speechParamHash;
		// 	alignas(8) Ped listenerPed;
		// 	alignas(8) BOOL syncOverNetwork;
		// 	alignas(8) int v7;
		// 	alignas(8) int v8;
		// };
		//
		// static_assert(sizeof(ScriptedSpeechParams) == 0x40, "incorrect ScriptedSpeechParams size");
		//
		//
		// Example:
		//
		// ScriptedSpeechParams params{"RE_PH_RHD_V3_AGGRO", "0405_U_M_M_RhdSheriff_01", 1, joaat("SPEECH_PARAMS_BEAT_SHOUTED_CLEAR"), 0, true, 1, 1};
		// PLAY_PED_AMBIENT_SPEECH_NATIVE(PLAYER_PED_ID(), (Any*)&params);
		//
		// Old name: _PLAY_AMBIENT_SPEECH1
		// https://github.com/femga/rdr3_discoveries/tree/master/audio/audio_banks
		static BOOL PLAY_PED_AMBIENT_SPEECH_NATIVE(Ped speaker, Any* params)
		{
			return invoke<BOOL>(0x8E04FEDD28D42462, speaker, params);
		} // 0x8E04FEDD28D42462 0x5C57B85D b1207
		// Old name: _PLAY_AMBIENT_SPEECH_AT_COORDS
		static BOOL PLAY_AMBIENT_SPEECH_FROM_POSITION_NATIVE(float x, float y, float z, Any* params)
		{
			return invoke<BOOL>(0xED640017ED337E45, x, y, z, params);
		} // 0xED640017ED337E45 0xA1A1402E b1207
		static Any N0x72E4D1C4639BC465(Entity p0, Any p1)
		{
			return invoke<Any>(0x72E4D1C4639BC465, p0, p1);
		} // 0x72E4D1C4639BC465 undefined b1207
		static Any N0xB18FEC133C7C6C69(Any p0)
		{
			return invoke<Any>(0xB18FEC133C7C6C69, p0);
		} // 0xB18FEC133C7C6C69 undefined b1207
		static void N0xDC93F0948F2C28F4(Any p0)
		{
			invoke<int>(0xDC93F0948F2C28F4, p0);
		} // 0xDC93F0948F2C28F4 undefined b1207
		// speechEventType: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/naSpeechEventType
		// p1 is possibly naSpeechAudibility, naSpeechType, or naSpeechEventTypeRequestPriority
		// SKIP_* - START_*
		static void N0x0D7FD6A55FD63AEF(int speechEventType, int p1, BOOL p2)
		{
			invoke<int>(0x0D7FD6A55FD63AEF, speechEventType, p1, p2);
		} // 0x0D7FD6A55FD63AEF undefined b1207
		// speechEventType: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/naSpeechEventType
		// SKIP_* - START_*
		static void N0x660A8F876DF1D4F8(int speechEventType)
		{
			invoke<int>(0x660A8F876DF1D4F8, speechEventType);
		} // 0x660A8F876DF1D4F8 undefined b1207
		static void N0x380A2E353AD30917(Any p0, Any p1, Any p2)
		{
			invoke<int>(0x380A2E353AD30917, p0, p1, p2);
		} // 0x380A2E353AD30917 undefined b1207
		static void N0x0FAF7171BF613B80(Any p0)
		{
			invoke<int>(0x0FAF7171BF613B80, p0);
		} // 0x0FAF7171BF613B80 undefined b1207
		// Valid pain IDs: 0..12
		static void PLAY_PAIN(Ped ped, int painId, float p2, BOOL p3, BOOL isNetwork)
		{
			invoke<int>(0xBC9AE166038A5CEC, ped, painId, p2, p3, isNetwork);
		} // 0xBC9AE166038A5CEC 0x874BD6CB b1207
		static void N0x6652B0C8F3D414D0(Any p0)
		{
			invoke<int>(0x6652B0C8F3D414D0, p0);
		} // 0x6652B0C8F3D414D0 undefined b1207
		// Name: ROPE_SETTINGS_DEFAULT
		static void N0xF092B6030D6FD49C(int ropeId, const char* name)
		{
			invoke<int>(0xF092B6030D6FD49C, ropeId, name);
		} // 0xF092B6030D6FD49C undefined b1207
		static void N0x2651DDC0EA269073(int ropeId, float p1)
		{
			invoke<int>(0x2651DDC0EA269073, ropeId, p1);
		} // 0x2651DDC0EA269073 undefined b1207
		static void SET_AMBIENT_VOICE_NAME(Ped ped, const char* name)
		{
			invoke<int>(0x6C8065A3B780185B, ped, name);
		} // 0x6C8065A3B780185B 0xBD2EA1A1 b1207
		// Hashes: VOFX_PLAYER_MALE01, VOFX_PLAYER_MALE02, VOFX_PLAYER_MALE03, VOFX_PLAYER_FEMALE01, VOFX_PLAYER_FEMALE02, VOFX_PLAYER_FEMALE03
		static void SET_VOFX_PED_VOICE_(Ped ped, Hash voice)
		{
			invoke<int>(0x2703EFB583F0949A, ped, voice);
		} // 0x2703EFB583F0949A undefined b1207
		static void STOP_CURRENT_PLAYING_SPEECH(Ped ped, Any p1)
		{
			invoke<int>(0x79D2F0E66F81D90D, ped, p1);
		} // 0x79D2F0E66F81D90D 0x5B7463F4 b1207
		static void STOP_CURRENT_PLAYING_AMBIENT_SPEECH(Ped ped, Any p1)
		{
			invoke<int>(0xB8BEC0CA6F0EDB0F, ped, p1);
		} // 0xB8BEC0CA6F0EDB0F 0xBB8E64BF b1207
		static BOOL IS_AMBIENT_SPEECH_PLAYING(Ped ped)
		{
			return invoke<BOOL>(0x9072C8B49907BFAD, ped);
		} // 0x9072C8B49907BFAD 0x1972E8AA b1207
		static BOOL IS_SCRIPTED_SPEECH_PLAYING(Any p0)
		{
			return invoke<BOOL>(0xCC9AA18DCC7084F4, p0);
		} // 0xCC9AA18DCC7084F4 0x2C653904 b1207
		static BOOL IS_ANY_SPEECH_PLAYING(Ped ped)
		{
			return invoke<BOOL>(0x729072355FA39EC9, ped);
		} // 0x729072355FA39EC9 0x2B74A6D6 b1207
		static Any N0x2B101AD9F651243A()
		{
			return invoke<Any>(0x2B101AD9F651243A);
		} // 0x2B101AD9F651243A undefined b1207
		static Any N0x4A98E228A936DBCC(Any p0)
		{
			return invoke<Any>(0x4A98E228A936DBCC, p0);
		} // 0x4A98E228A936DBCC undefined b1207
		static Any N0x6BFFB7C276866996(Any p0)
		{
			return invoke<Any>(0x6BFFB7C276866996, p0);
		} // 0x6BFFB7C276866996 undefined b1207
		// Checks if the ped can play the speech or has the speech file, last parameter is usually false.
		static BOOL DOES_CONTEXT_EXIST_FOR_THIS_PED(Ped ped, const char* speechName, BOOL unk)
		{
			return invoke<BOOL>(0x49B99BF3FDA89A7A, ped, speechName, unk);
		} // 0x49B99BF3FDA89A7A 0x8BD5F11E b1207
		static Any N0xF0EE69F500952FA5(Any p0)
		{
			return invoke<Any>(0xF0EE69F500952FA5, p0);
		} // 0xF0EE69F500952FA5 undefined b1207
		static Any N0x9D6DEC9791A4E501(Any p0, Any p1, Any p2, Any p3)
		{
			return invoke<Any>(0x9D6DEC9791A4E501, p0, p1, p2, p3);
		} // 0x9D6DEC9791A4E501 undefined b1207
		// Not implemented.
		static void N0x864A842B86993851(Ped ped)
		{
			invoke<int>(0x864A842B86993851, ped);
		} // 0x864A842B86993851 undefined b1207
		static BOOL IS_PED_IN_CURRENT_CONVERSATION(const char* p0, Ped ped, Any p2)
		{
			return invoke<BOOL>(0x049E937F18F4020C, p0, ped, p2);
		} // 0x049E937F18F4020C 0x7B2F0743 b1207
		static BOOL IS_PED_IN_ANY_CONVERSATION_(Ped ped, BOOL p1)
		{
			return invoke<BOOL>(0x54B187F111D9C6F8, ped, p1);
		} // 0x54B187F111D9C6F8 undefined b1207
		static void SET_PED_IS_DRUNK(Ped ped, BOOL toggle)
		{
			invoke<int>(0x95D2D383D5396B8A, ped, toggle);
		} // 0x95D2D383D5396B8A 0xD2EA77A3 b1207
		static void N0x3A00D87B20A2A5E4(Any p0, Any p1)
		{
			invoke<int>(0x3A00D87B20A2A5E4, p0, p1);
		} // 0x3A00D87B20A2A5E4 undefined b1207
		static void N0xD47D47EFBF103FB8(Any p0, Any p1)
		{
			invoke<int>(0xD47D47EFBF103FB8, p0, p1);
		} // 0xD47D47EFBF103FB8 undefined b1207
		static void PLAY_ANIMAL_VOCALIZATION(Ped ped, const char* vocalizationName, BOOL p2)
		{
			invoke<int>(0xEE066C7006C49C0A, ped, vocalizationName, p2);
		} // 0xEE066C7006C49C0A 0x498849F3 b1207
		static void PLAY_ANIMAL_VOCALIZATION_PHEROMONE_VIAL_RESPONSE_(Ped ped, Hash p1, BOOL p2)
		{
			invoke<int>(0x0E53530D9B2DB01D, ped, p1, p2);
		} // 0x0E53530D9B2DB01D undefined b1311
		static BOOL IS_ANIMAL_VOCALIZATION_PLAYING(Ped pedHandle)
		{
			return invoke<BOOL>(0xC265DF9FB44A9FBD, pedHandle);
		} // 0xC265DF9FB44A9FBD 0x0CBAF2EF b1207
		// Not implemented.
		static void SET_ANIMAL_MOOD(Ped animal, int mood)
		{
			invoke<int>(0xCC97B29285B1DC3B, animal, mood);
		} // 0xCC97B29285B1DC3B 0x3EA7C6CB b1207
		static void N0xFCDEC42B1C78B7F8(Any p0, Any p1)
		{
			invoke<int>(0xFCDEC42B1C78B7F8, p0, p1);
		} // 0xFCDEC42B1C78B7F8 undefined b1207
		static void N0xEB4D592620B8C209(Any p0)
		{
			invoke<int>(0xEB4D592620B8C209, p0);
		} // 0xEB4D592620B8C209 undefined b1207
		static void N0xA6847BBA4FCDD13F(Any p0, Any p1)
		{
			invoke<int>(0xA6847BBA4FCDD13F, p0, p1);
		} // 0xA6847BBA4FCDD13F undefined b1207
		static void SET_STATIC_EMITTER_ENABLED(const char* emitterName, BOOL toggle)
		{
			invoke<int>(0x399D2D3B33F1B8EB, emitterName, toggle);
		} // 0x399D2D3B33F1B8EB 0x91F72E92 b1207
		static void PLAY_END_CREDITS_MUSIC(BOOL play)
		{
			invoke<int>(0xCD536C4D33DCC900, play);
		} // 0xCD536C4D33DCC900 0x8E88B3CC b1207
		static Any N0x7678FE0455ED1145(Any p0, Any p1, Any p2)
		{
			return invoke<Any>(0x7678FE0455ED1145, p0, p1, p2);
		} // 0x7678FE0455ED1145 undefined b1207
		static Any N0xFFE9C53DEEA3DB0B(Any p0, Any p1, float x, float y, float z, BOOL isSrlLoaded, Any p6)
		{
			return invoke<Any>(0xFFE9C53DEEA3DB0B, p0, p1, x, y, z, isSrlLoaded, p6);
		} // 0xFFE9C53DEEA3DB0B undefined b1207
		static void N0x5E3CCF03995388B5(Any p0, Any p1, Any p2, Any p3)
		{
			invoke<int>(0x5E3CCF03995388B5, p0, p1, p2, p3);
		} // 0x5E3CCF03995388B5 undefined b1207
		static void N0x43037ABFE214A851()
		{
			invoke<int>(0x43037ABFE214A851);
		} // 0x43037ABFE214A851 undefined b1207
		static void SET_AMBIENT_ZONE_STATE(const char* zoneName, BOOL isEnabled, BOOL p2)
		{
			invoke<int>(0xBDA07E5950085E46, zoneName, isEnabled, p2);
		} // 0xBDA07E5950085E46 0x2849CAC9 b1207
		static void CLEAR_AMBIENT_ZONE_STATE(const char* zoneName, BOOL p1)
		{
			invoke<int>(0x218DD44AAAC964FF, zoneName, p1);
		} // 0x218DD44AAAC964FF 0xCDFF3C82 b1207
		static void SET_AMBIENT_ZONE_LIST_STATE(const char* ambientZone, BOOL p1, BOOL p2)
		{
			invoke<int>(0x9748FA4DE50CCE3E, ambientZone, p1, p2);
		} // 0x9748FA4DE50CCE3E 0xBF80B412 b1207
		static void CLEAR_AMBIENT_ZONE_LIST_STATE(const char* ambientZone, BOOL p1)
		{
			invoke<int>(0x120C48C614909FA4, ambientZone, p1);
		} // 0x120C48C614909FA4 0x38B9B8D4 b1207
		static void SET_AMBIENT_ZONE_STATE_PERSISTENT(const char* ambientZone, BOOL p1, BOOL p2)
		{
			invoke<int>(0x1D6650420CEC9D3B, ambientZone, p1, p2);
		} // 0x1D6650420CEC9D3B 0xC1FFB672 b1207
		static void SET_AMBIENT_ZONE_LIST_STATE_PERSISTENT(const char* ambientZone, BOOL p1, BOOL p2)
		{
			invoke<int>(0xF3638DAE8C4045E1, ambientZone, p1, p2);
		} // 0xF3638DAE8C4045E1 0x5F5A2605 b1207
		static void SET_AMBIENT_ZONE_POSITION_(const char* ambientZone, float x, float y, float z, float heading)
		{
			invoke<int>(0x3743CE6948194349, ambientZone, x, y, z, heading);
		} // 0x3743CE6948194349 undefined b1207
		// Checks whether the horn of a vehicle is currently played.
		static BOOL IS_HORN_ACTIVE(Vehicle vehicle)
		{
			return invoke<BOOL>(0x9D6BFC12B05C6121, vehicle);
		} // 0x9D6BFC12B05C6121 0x20E2BDD0 b1207
		static void N0xFD461D0ABA5559B1(Any p0, Any p1)
		{
			invoke<int>(0xFD461D0ABA5559B1, p0, p1);
		} // 0xFD461D0ABA5559B1 undefined b1207
		static BOOL IS_STREAM_PLAYING(int streamId)
		{
			return invoke<BOOL>(0xD11FA52EB849D978, streamId);
		} // 0xD11FA52EB849D978 0xF1F51A14 b1207
		static BOOL LOAD_STREAM(const char* streamName, const char* soundSet)
		{
			return invoke<BOOL>(0x1F1F957154EC51DF, streamName, soundSet);
		} // 0x1F1F957154EC51DF 0x0D89599D b1207
		static void PLAY_STREAM_FROM_PED(Ped ped, int streamId)
		{
			invoke<int>(0x89049DD63C08B5D1, ped, streamId);
		} // 0x89049DD63C08B5D1 0xA1D7FABE b1207
		static void PLAY_STREAM_FRONTEND(int streamId)
		{
			invoke<int>(0x58FCE43488F9F5F4, streamId);
		} // 0x58FCE43488F9F5F4 0x2C2A16BC b1207
		static void PLAY_STREAM_FROM_POSITION(float x, float y, float z, int streamId)
		{
			invoke<int>(0x21442F412E8DE56B, x, y, z, streamId);
		} // 0x21442F412E8DE56B 0x6FE5D865 b1207
		static void N0x3A3BE6B920525237(Any p0, Any p1)
		{
			invoke<int>(0x3A3BE6B920525237, p0, p1);
		} // 0x3A3BE6B920525237 undefined b1207
		static void STOP_STREAM(int streamId)
		{
			invoke<int>(0xA4718A1419D18151, streamId);
		} // 0xA4718A1419D18151 0xD1E364DE b1207
		static void STOP_PED_SPEAKING(Ped ped, BOOL shaking)
		{
			invoke<int>(0x9D64D7405520E3D3, ped, shaking);
		} // 0x9D64D7405520E3D3 0xFF92B49D b1207
		static void DISABLE_PED_PAIN_AUDIO(Ped ped, BOOL toggle)
		{
			invoke<int>(0xA9A41C1E940FB0E8, ped, toggle);
		} // 0xA9A41C1E940FB0E8 0x3B8E2D5F b1207
		static BOOL IS_AMBIENT_SPEECH_DISABLED(Ped ped)
		{
			return invoke<BOOL>(0x932C2D096A2C3FFF, ped);
		} // 0x932C2D096A2C3FFF 0x109D1F89 b1207
		static Any SET_IS_SCRIPTED_SPEECH_DISABLED(Ped ped, BOOL disabled)
		{
			return invoke<Any>(0xB2DE3AEBE31150E2, ped, disabled);
		} // 0xB2DE3AEBE31150E2 undefined b1207
		static void BLOCK_SPEECH_CONTEXT_(const char* context, BOOL block)
		{
			invoke<int>(0x6378A235374B852F, context, block);
		} // 0x6378A235374B852F undefined b1207
		// _UNLOAD_[A-C]* - USE_*
		static void UNLOAD_SPEECH_CONTEXT_(const char* speechContext)
		{
			invoke<int>(0x87E6302FC61208CC, speechContext);
		} // 0x87E6302FC61208CC undefined b1207
		static void SET_HORN_ENABLED(Vehicle vehicle, BOOL toggle)
		{
			invoke<int>(0x76D683C108594D0E, vehicle, toggle);
		} // 0x76D683C108594D0E 0x6EB92D05 b1207
		static void SET_AUDIO_VEHICLE_PRIORITY(Vehicle vehicle, Any p1)
		{
			invoke<int>(0xE5564483E407F914, vehicle, p1);
		} // 0xE5564483E407F914 0x271A9766 b1207
		static void N0x259ACC5B52A2B2D9(Any p0, Any p1)
		{
			invoke<int>(0x259ACC5B52A2B2D9, p0, p1);
		} // 0x259ACC5B52A2B2D9 undefined b1207
		// Old name: _FORCE_VEHICLE_ENGINE_AUDIO
		static void FORCE_USE_AUDIO_GAME_OBJECT(Vehicle vehicle, const char* audioName)
		{
			invoke<int>(0x4F0C413926060B38, vehicle, audioName);
		} // 0x4F0C413926060B38 0x33B0B007 b1207
		// nullsub, doesn't do anything
		static void SET_GPS_ACTIVE(BOOL active)
		{
			invoke<int>(0x3BD3F52BA9B1E4E8, active);
		} // 0x3BD3F52BA9B1E4E8 0x0FC3379A b1207
		static BOOL START_AUDIO_SCENESET_(const char* audioName, const char* sceneset)
		{
			return invoke<BOOL>(0x6339C1EA3979B5F7, audioName, sceneset);
		} // 0x6339C1EA3979B5F7 undefined b1207
		static void STOP_AUDIO_SCENESET_(const char* sceneset)
		{
			invoke<int>(0x9428447DED71FC7E, sceneset);
		} // 0x9428447DED71FC7E undefined b1207
		static BOOL SET_AUDIO_SCENESET_(const char* audioName, const char* sceneset)
		{
			return invoke<BOOL>(0xAC84686C06184B0D, audioName, sceneset);
		} // 0xAC84686C06184B0D undefined b1207
		static BOOL START_AUDIO_SCENE(const char* scene)
		{
			return invoke<BOOL>(0x013A80FC08F6E4F2, scene);
		} // 0x013A80FC08F6E4F2 0xE48D757B b1207
		static Any N0xDC2F83A0612CA34D(Any p0)
		{
			return invoke<Any>(0xDC2F83A0612CA34D, p0);
		} // 0xDC2F83A0612CA34D undefined b1207
		static void STOP_AUDIO_SCENE(const char* scene)
		{
			invoke<int>(0xDFE8422B3B94E688, scene);
		} // 0xDFE8422B3B94E688 0xA08D8C58 b1207
		// _STOP_AUDIO_*
		static void N0x6AB944DF68B512D3(Any p0)
		{
			invoke<int>(0x6AB944DF68B512D3, p0);
		} // 0x6AB944DF68B512D3 undefined b1207
		static void STOP_AUDIO_SCENES()
		{
			invoke<int>(0xBAC7FC81A75EC1A1);
		} // 0xBAC7FC81A75EC1A1 0xF6C7342A b1207
		static BOOL IS_AUDIO_SCENE_ACTIVE(const char* scene)
		{
			return invoke<BOOL>(0xB65B60556E2A9225, scene);
		} // 0xB65B60556E2A9225 0xACBED05C b1207
		static void SET_AUDIO_SCENE_VARIABLE(const char* scene, const char* variable, float value)
		{
			invoke<int>(0xEF21A9EF089A2668, scene, variable, value);
		} // 0xEF21A9EF089A2668 0x19BB3CE8 b1207
		static Hash GET_ENTITY_AUDIO_MIX_GROUP_(Entity entity)
		{
			return invoke<Hash>(0x8B25A18E390F75BF, entity);
		} // 0x8B25A18E390F75BF undefined b1207
		static void ADD_ENTITY_TO_AUDIO_MIX_GROUP(Entity entity, const char* groupName, float p2)
		{
			invoke<int>(0x153973AB99FE8980, entity, groupName, p2);
		} // 0x153973AB99FE8980 0x2BC93264 b1207
		static Any N0x131EC9247E7A2903(Any p0)
		{
			return invoke<Any>(0x131EC9247E7A2903, p0);
		} // 0x131EC9247E7A2903 undefined b1207
		static void REMOVE_ENTITY_FROM_AUDIO_MIX_GROUP(Entity entity, float p1)
		{
			invoke<int>(0x18EB48CFC41F2EA0, entity, p1);
		} // 0x18EB48CFC41F2EA0 0x308ED0EC b1207
		static Any N0xE600F61F54A444A6()
		{
			return invoke<Any>(0xE600F61F54A444A6);
		} // 0xE600F61F54A444A6 undefined b1207
		// Old name: AUDIO_IS_SCRIPTED_MUSIC_PLAYING
		static BOOL AUDIO_IS_MUSIC_PLAYING()
		{
			return invoke<BOOL>(0x845FFC3A4FEEFA3E);
		} // 0x845FFC3A4FEEFA3E  b1207
		// Checks for MOONSHINE_BAND
		static Hash N0xBE28DB99556FF8D9(Entity entity)
		{
			return invoke<Hash>(0xBE28DB99556FF8D9, entity);
		} // 0xBE28DB99556FF8D9 undefined b1207
		static void N0x8E901B65206C2D3E(Ped ped)
		{
			invoke<int>(0x8E901B65206C2D3E, ped);
		} // 0x8E901B65206C2D3E undefined b1207
		static void N0xC4CFCE4C656EF480(Ped ped)
		{
			invoke<int>(0xC4CFCE4C656EF480, ped);
		} // 0xC4CFCE4C656EF480 undefined b1207
		static void N0xABDB4863D3D72021(Entity entity, Any p1, Any p2, float p3, Any p4)
		{
			invoke<int>(0xABDB4863D3D72021, entity, p1, p2, p3, p4);
		} // 0xABDB4863D3D72021 undefined b1207
		// Used in Script Function NET_CAMP_CLIENT_UPDATE_PED_ROLE_STATE_SHOP: hash exists! Playing hash
		static void N0xB93A769B8B726950(Ped ped, Hash p1)
		{
			invoke<int>(0xB93A769B8B726950, ped, p1);
		} // 0xB93A769B8B726950 undefined b1207
		static void N0xE891504B2F0E2DBA(Any p0, Any p1)
		{
			invoke<int>(0xE891504B2F0E2DBA, p0, p1);
		} // 0xE891504B2F0E2DBA undefined b1207
		static void N0x9EB779765E68C52E(Any p0, Any p1)
		{
			invoke<int>(0x9EB779765E68C52E, p0, p1);
		} // 0x9EB779765E68C52E undefined b1207
		static void N0xE9694B2D6CB87B06(Entity entity, Any p1)
		{
			invoke<int>(0xE9694B2D6CB87B06, entity, p1);
		} // 0xE9694B2D6CB87B06 undefined b1232
		static Any N0x886657C5B3D8EDE3(Entity entity)
		{
			return invoke<Any>(0x886657C5B3D8EDE3, entity);
		} // 0x886657C5B3D8EDE3 undefined b1232
		static Any N0xC68C02DE259C927C(Any p0)
		{
			return invoke<Any>(0xC68C02DE259C927C, p0);
		} // 0xC68C02DE259C927C undefined b1232
		static Any N0x2FFF4A78384AFFDF(Entity entity)
		{
			return invoke<Any>(0x2FFF4A78384AFFDF, entity);
		} // 0x2FFF4A78384AFFDF undefined b1436
		static AnimScene N0x62377977E4F08668(Entity entity)
		{
			return invoke<AnimScene>(0x62377977E4F08668, entity);
		} // 0x62377977E4F08668 undefined b1436
		static Any GET_PED_SONG_INDEX_HOST_(Ped ped)
		{
			return invoke<Any>(0x2DBBF0C5E19383EE, ped);
		} // 0x2DBBF0C5E19383EE undefined b1232
		static Any N0xD05A460328560477(Any p0)
		{
			return invoke<Any>(0xD05A460328560477, p0);
		} // 0xD05A460328560477 undefined b1232
		static void N0x8D29FDF565DED9AE(Any p0, Any p1, Any p2)
		{
			invoke<int>(0x8D29FDF565DED9AE, p0, p1, p2);
		} // 0x8D29FDF565DED9AE undefined b1232
		static void N0x448F2647DD6F2E27(Any p0, Any p1, Any p2, Any p3, Any p4)
		{
			invoke<int>(0x448F2647DD6F2E27, p0, p1, p2, p3, p4);
		} // 0x448F2647DD6F2E27 undefined b1232
		static void N0x139A4B9DF2D26CBF(Any p0, Any p1)
		{
			invoke<int>(0x139A4B9DF2D26CBF, p0, p1);
		} // 0x139A4B9DF2D26CBF undefined b1232
		static void N0x018ABE833CA64D2A(Any p0, Any p1)
		{
			invoke<int>(0x018ABE833CA64D2A, p0, p1);
		} // 0x018ABE833CA64D2A undefined b1232
		static void N0xBC07CA8FD710E7FD(Any p0, Any p1)
		{
			invoke<int>(0xBC07CA8FD710E7FD, p0, p1);
		} // 0xBC07CA8FD710E7FD undefined b1232
		static BOOL PREPARE_MUSIC_EVENT(const char* eventName)
		{
			return invoke<BOOL>(0x1E5185B72EF5158A, eventName);
		} // 0x1E5185B72EF5158A 0x534A5C1C b1207
		static BOOL CANCEL_MUSIC_EVENT(const char* eventName)
		{
			return invoke<BOOL>(0x5B17A90291133DA5, eventName);
		} // 0x5B17A90291133DA5 0x89FF942D b1207
		// https://github.com/femga/rdr3_discoveries/blob/master/audio/music_events/music_events.lua
		static BOOL TRIGGER_MUSIC_EVENT(const char* eventName)
		{
			return invoke<BOOL>(0x706D57B0F50DA710, eventName);
		} // 0x706D57B0F50DA710 0xB6094948 b1207
		static Any TRIGGER_MUSIC_EVENT_WITH_HASH_(Hash eventName)
		{
			return invoke<Any>(0x05D6195FB4D428F4, eventName);
		} // 0x05D6195FB4D428F4 undefined b1207
		static int GET_MUSIC_PLAYTIME()
		{
			return invoke<int>(0xE7A0D23DC414507B);
		} // 0xE7A0D23DC414507B 0xD633C809 b1207
		static void N0xF64034D533CE8AAC(Any p0, Any p1, Any p2)
		{
			invoke<int>(0xF64034D533CE8AAC, p0, p1, p2);
		} // 0xF64034D533CE8AAC undefined b1207
		// https://en.m.wikipedia.org/wiki/Walla
		static void SET_PED_WALLA_DENSITY(float p0, float p1)
		{
			invoke<int>(0x149AEE66F0CB3A99, p0, p1);
		} // 0x149AEE66F0CB3A99 0xE64F97A0 b1207
		static void N0xDAD6CD07CAA4F382()
		{
			invoke<int>(0xDAD6CD07CAA4F382);
		} // 0xDAD6CD07CAA4F382 undefined b1207
		static void SET_PED_INTERIOR_WALLA_DENSITY(float p0, float p1)
		{
			invoke<int>(0x8BF907833BE275DE, p0, p1);
		} // 0x8BF907833BE275DE 0x2CD26D69 b1207
		static void FORCE_PED_PANIC_WALLA()
		{
			invoke<int>(0x062D5EAD4DA2FA6A);
		} // 0x062D5EAD4DA2FA6A 0xD87AF337 b1207
		static void N0x138ADB94F8B90616()
		{
			invoke<int>(0x138ADB94F8B90616);
		} // 0x138ADB94F8B90616 undefined b1207
		static void USE_FOOTSTEP_SCRIPT_SWEETENERS(Ped ped, BOOL p1, Hash hash)
		{
			invoke<int>(0xBF4DC1784BE94DFA, ped, p1, hash);
		} // 0xBF4DC1784BE94DFA 0xD99E275B b1207
		// https://github.com/femga/rdr3_discoveries/tree/master/audio/audio_flags
		static void SET_AUDIO_FLAG(const char* flagName, BOOL toggle)
		{
			invoke<int>(0xB9EFD5C25018725A, flagName, toggle);
		} // 0xB9EFD5C25018725A 0x1C09C9E0 b1207
		static void N0x6DA15746D5CC1A92(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5)
		{
			invoke<int>(0x6DA15746D5CC1A92, p0, p1, p2, p3, p4, p5);
		} // 0x6DA15746D5CC1A92 undefined b1207
		static void N0x078F77FD1A43EAB3(Any p0, Any p1)
		{
			invoke<int>(0x078F77FD1A43EAB3, p0, p1);
		} // 0x078F77FD1A43EAB3 undefined b1207
		static void N0x3D0BBCCF401B5FDB()
		{
			invoke<int>(0x3D0BBCCF401B5FDB);
		} // 0x3D0BBCCF401B5FDB undefined b1207
		static void SET_PORTAL_SETTINGS_OVERRIDE(const char* p0, const char* p1)
		{
			invoke<int>(0x044DBAD7A7FA2BE5, p0, p1);
		} // 0x044DBAD7A7FA2BE5 0x8AD670EC b1207
		static void REMOVE_PORTAL_SETTINGS_OVERRIDE(const char* p0)
		{
			invoke<int>(0xB4BBFD9CD8B3922B, p0);
		} // 0xB4BBFD9CD8B3922B 0xD24B4D0C b1207
		static void N0xEA546C31FD45F8CD(Any p0)
		{
			invoke<int>(0xEA546C31FD45F8CD, p0);
		} // 0xEA546C31FD45F8CD undefined b1207
		static Any N0x44A5EEF54F62E823(Any p0)
		{
			return invoke<Any>(0x44A5EEF54F62E823, p0);
		} // 0x44A5EEF54F62E823 undefined b1207
		static void N0x017492B2201E3428(Any p0, Any p1, Any p2, Any p3)
		{
			invoke<int>(0x017492B2201E3428, p0, p1, p2, p3);
		} // 0x017492B2201E3428 undefined b1207
		static void N0xC886CD666ADD42E1(Any p0, Any p1)
		{
			invoke<int>(0xC886CD666ADD42E1, p0, p1);
		} // 0xC886CD666ADD42E1 undefined b1207
		static void N0x5AE0CB5F35F034FD(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7)
		{
			invoke<int>(0x5AE0CB5F35F034FD, p0, p1, p2, p3, p4, p5, p6, p7);
		} // 0x5AE0CB5F35F034FD undefined b1207
		static void N0x821C32C728B24477(Any p0, Any p1, Any p2)
		{
			invoke<int>(0x821C32C728B24477, p0, p1, p2);
		} // 0x821C32C728B24477 undefined b1207
		static void N0x06C5DF5EE444BC6B(Any p0, Any p1, Any p2, Any p3, Any p4)
		{
			invoke<int>(0x06C5DF5EE444BC6B, p0, p1, p2, p3, p4);
		} // 0x06C5DF5EE444BC6B undefined b1207
		static void N0x341CDD17EFC2472E(Any p0, Any p1)
		{
			invoke<int>(0x341CDD17EFC2472E, p0, p1);
		} // 0x341CDD17EFC2472E undefined b1207
		static void N0x7E176C676F8652A9(Any p0)
		{
			invoke<int>(0x7E176C676F8652A9, p0);
		} // 0x7E176C676F8652A9 undefined b1207
		static Any N0x2B9C37C01BF25EDB(Any p0)
		{
			return invoke<Any>(0x2B9C37C01BF25EDB, p0);
		} // 0x2B9C37C01BF25EDB undefined b1207
		static Any N0xA6A3A3F96B8B030E()
		{
			return invoke<Any>(0xA6A3A3F96B8B030E);
		} // 0xA6A3A3F96B8B030E undefined b1207
		// Creates stream and returns streamId handle to be used with PLAY_STREAM_* natives
		// https://github.com/femga/rdr3_discoveries/tree/master/audio/create_stream
		static int GET_LOADED_STREAM_ID_FROM_CREATION_(const char* streamName, const char* soundSet)
		{
			return invoke<int>(0x0556C784FA056628, streamName, soundSet);
		} // 0x0556C784FA056628 undefined b1207
		static Any N0xC369E2234E34A0CA(Any p0, Any p1)
		{
			return invoke<Any>(0xC369E2234E34A0CA, p0, p1);
		} // 0xC369E2234E34A0CA undefined b1207
		static void N0x35B8C070E0C16E2F(Any p0, Any p1)
		{
			invoke<int>(0x35B8C070E0C16E2F, p0, p1);
		} // 0x35B8C070E0C16E2F undefined b1207
		static void N0xE7E6CB8B713ED190()
		{
			invoke<int>(0xE7E6CB8B713ED190);
		} // 0xE7E6CB8B713ED190 undefined b1207
		static void N0x569ABC36E28DDEAA()
		{
			invoke<int>(0x569ABC36E28DDEAA);
		} // 0x569ABC36E28DDEAA undefined b1207
		static void N0x839C9F124BE74D94(Any p0, Any p1, Any p2, Any p3, Any p4)
		{
			invoke<int>(0x839C9F124BE74D94, p0, p1, p2, p3, p4);
		} // 0x839C9F124BE74D94 undefined b1207
		static void AUDIO_TRIGGER_EXPLOSION(const char* name, float x, float y, float z)
		{
			invoke<int>(0x374F0E716BFCDE82, name, x, y, z);
		} // 0x374F0E716BFCDE82 undefined b1207
		static void N0x3E98AC9D8C56C62C(Any p0)
		{
			invoke<int>(0x3E98AC9D8C56C62C, p0);
		} // 0x3E98AC9D8C56C62C undefined b1207
		static void N0xCBF2BEBB468A34F3(Any p0)
		{
			invoke<int>(0xCBF2BEBB468A34F3, p0);
		} // 0xCBF2BEBB468A34F3 undefined b1207
		static void N0xA2B851605748AD0E()
		{
			invoke<int>(0xA2B851605748AD0E);
		} // 0xA2B851605748AD0E undefined b1207
		static void N0xCFAD2C8CD1054523(Any p0, Any p1, Any p2, Any p3)
		{
			invoke<int>(0xCFAD2C8CD1054523, p0, p1, p2, p3);
		} // 0xCFAD2C8CD1054523 undefined b1207
		static void N0xD733528B6C35647A(Any p0, Any p1)
		{
			invoke<int>(0xD733528B6C35647A, p0, p1);
		} // 0xD733528B6C35647A undefined b1207
		static void N0x5BC885EBD75FAA7D(Any p0, Any p1)
		{
			invoke<int>(0x5BC885EBD75FAA7D, p0, p1);
		} // 0x5BC885EBD75FAA7D undefined b1207
		static void N0x6B7A88A61B41E589(Any p0)
		{
			invoke<int>(0x6B7A88A61B41E589, p0);
		} // 0x6B7A88A61B41E589 undefined b1207
		static void N0x4BE3EC91C01F0FE8()
		{
			invoke<int>(0x4BE3EC91C01F0FE8);
		} // 0x4BE3EC91C01F0FE8 undefined b1207
		static void SET_AUDIO_ONLINE_TRANSITION_STAGE(const char* p0)
		{
			invoke<int>(0x9B1FC259187C97C0, p0);
		} // 0x9B1FC259187C97C0 undefined b1207
		static void STOP_ALL_SCRIPTED_AUDIO_SOUNDS_()
		{
			invoke<int>(0x2E399EAFBEEA74D5);
		} // 0x2E399EAFBEEA74D5 undefined b1207
		static void N0x64B956F4E761DF5C(Any p0)
		{
			invoke<int>(0x64B956F4E761DF5C, p0);
		} // 0x64B956F4E761DF5C undefined b1207
	}

	namespace BOUNTY
	{
		static BOOL BOUNTY_REQUEST_PAY_OFF_BOUNTY_(Any* outRpcGuid)
		{
			return invoke<BOOL>(0x537CE992BD2D7BCB, outRpcGuid);
		} // 0x537CE992BD2D7BCB undefined b1207
		static BOOL BOUNTY_REQUEST_PAY_OFF_BOUNTY_EX_(Any* outRpcGuid, Hash p1, Hash costType)
		{
			return invoke<BOOL>(0x587BCEC31D64F382, outRpcGuid, p1, costType);
		} // 0x587BCEC31D64F382 undefined b1232
		// crimeType: see _REPORT_CRIME
		static BOOL BOUNTY_REQUEST_SELF_REPORT_CRIME_(Any* outRpcGuid, Hash crimeType, BOOL p2)
		{
			return invoke<BOOL>(0x188B748861B5BA17, outRpcGuid, crimeType, p2);
		} // 0x188B748861B5BA17 undefined b1207
		static BOOL BOUNTY_REQUEST_SELF_REPORT_KILLED_BY_BOUNTY_HUNTER_(Any* outRpcGuid)
		{
			return invoke<BOOL>(0xB462D69D406A2602, outRpcGuid);
		} // 0xB462D69D406A2602 undefined b1207
		static BOOL BOUNTY_GET_BOUNTY_ON_PLAYER(Any* gamerHandle, Any* bountyData)
		{
			return invoke<BOOL>(0x4EF23E04A0C8FF51, gamerHandle, bountyData);
		} // 0x4EF23E04A0C8FF51 undefined b1207
		static BOOL BOUNTY_IS_REQUEST_PENDING_(Any* rpcGuid)
		{
			return invoke<BOOL>(0x03B61CD51097DE60, rpcGuid);
		} // 0x03B61CD51097DE60 undefined b1207
		static BOOL BOUNTY_REQUEST_BEGIN_WANTED_POSTER_(Any* outRpcGuid, int p1)
		{
			return invoke<BOOL>(0xFFA13742E43507E3, outRpcGuid, p1);
		} // 0xFFA13742E43507E3 undefined b1207
		static BOOL N0x81847C2134039BDC(Any* p0)
		{
			return invoke<BOOL>(0x81847C2134039BDC, p0);
		} // 0x81847C2134039BDC undefined b1207
		static BOOL BOUNTY_REQUEST_COMPLETE_WANTED_POSTER_(Any* outRpcGuid, Any* p1)
		{
			return invoke<BOOL>(0x727AB6F008BB9F29, outRpcGuid, p1);
		} // 0x727AB6F008BB9F29 undefined b1207
		static BOOL BOUNTY_REQUEST_COMPLETE_SPLIT_WANTED_POSTER_(Any* outRpcGuid, Any* p1)
		{
			return invoke<BOOL>(0xFBD137BF0EC50FC9, outRpcGuid, p1);
		} // 0xFBD137BF0EC50FC9 undefined b1207
		static void BOUNTY_CANCEL_WANTED_POSTER_()
		{
			invoke<int>(0x6A9DF0FCD0C87FF9);
		} // 0x6A9DF0FCD0C87FF9 undefined b1207
		static BOOL BOUNTY_REQUEST_BEGIN_LEGENDARY_MISSION(Any* outRpcGuid, int p1, int p2)
		{
			return invoke<BOOL>(0xFC81D7C7A151CFAA, outRpcGuid, p1, p2);
		} // 0xFC81D7C7A151CFAA undefined b1207
		static BOOL BOUNTY_REQUEST_BEGIN_LEGENDARY_MISSION_FOR_POSSE(Any* outRpcGuid, int p1, int p2)
		{
			return invoke<BOOL>(0x48E4E23F1739E197, outRpcGuid, p1, p2);
		} // 0x48E4E23F1739E197 undefined b1311
		static BOOL BOUNTY_REQUEST_COMPLETE_LEGENDARY_MISSION_(Any* outRpcGuid, Any* p1)
		{
			return invoke<BOOL>(0xA7309AC0DCF6D950, outRpcGuid, p1);
		} // 0xA7309AC0DCF6D950 undefined b1207
		static void BOUNTY_CANCEL_LEGENDARY_MISSION_()
		{
			invoke<int>(0x2BA1BCC99826CDA2);
		} // 0x2BA1BCC99826CDA2 undefined b1207
		static BOOL BOUNTY_GET_WANTED_POSTER_SLOT(Hash p0, Hash p1, Any* p2)
		{
			return invoke<BOOL>(0xB395A44A0C7CA615, p0, p1, p2);
		} // 0xB395A44A0C7CA615 undefined b1207
		static BOOL BOUNTY_GET_LEGENDARY_TARGET(Any p0, Any* p1)
		{
			return invoke<BOOL>(0x85E4D7B225A30ED1, p0, p1);
		} // 0x85E4D7B225A30ED1 undefined b1207
		// _BOUNTY_C* or _BOUNTY_GET_*
		static BOOL N0x86EC5F83867C4B70(Any* p0)
		{
			return invoke<BOOL>(0x86EC5F83867C4B70, p0);
		} // 0x86EC5F83867C4B70 undefined b1436
		static BOOL BOUNTY_GET_COOLDOWN_COLLECTION(Any* p0)
		{
			return invoke<BOOL>(0x8FAF4D262FABA99C, p0);
		} // 0x8FAF4D262FABA99C undefined b1207
		static BOOL BOUNTY_REQUEST_BECOME_TARGET_OF_CHARACTER_BOUNTY_HUNT_(Any* outRpcGuid)
		{
			return invoke<BOOL>(0xB096547D61868254, outRpcGuid);
		} // 0xB096547D61868254 undefined b1207
		// _BOUNTY_IS_* or _BOUNTY_REQUEST_*
		static BOOL N0x27D3A0E1FE090A43(Any* p0)
		{
			return invoke<BOOL>(0x27D3A0E1FE090A43, p0);
		} // 0x27D3A0E1FE090A43 undefined b1207
		static BOOL BOUNTY_REQUEST_CLAIM_CHARACTER_BOUNTY_(Any* outRpcGuid, int p1, Any* p2)
		{
			return invoke<BOOL>(0xA9C3B0F746375162, outRpcGuid, p1, p2);
		} // 0xA9C3B0F746375162 undefined b1207
		static BOOL BOUNTY_REQUEST_POSSE_LEADER_CLAIM_CHARACTER_BOUNTY_(Any* outRpcGuid, int p1, Any* p2)
		{
			return invoke<BOOL>(0x5B53CA0E2AC3FF45, outRpcGuid, p1, p2);
		} // 0x5B53CA0E2AC3FF45 undefined b1207
		static BOOL BOUNTY_REQUEST_POSSE_MEMBER_CLAIM_CHARACTER_BOUNTY_SHARE_(Any* outRpcGuid, Any* p1)
		{
			return invoke<BOOL>(0x22D3A61CE053270C, outRpcGuid, p1);
		} // 0x22D3A61CE053270C undefined b1207
		static void BOUNTY_CLEAR_BEING_BOUNTY_HUNTER_()
		{
			invoke<int>(0xA59D1997ECD99F0A);
		} // 0xA59D1997ECD99F0A undefined b1207
		static BOOL BOUNTY_REQUEST_ESCAPED_CHARACTER_BOUNTY_HUNT_(Any* outRpcGuid)
		{
			return invoke<BOOL>(0x12E981D53B07BF48, outRpcGuid);
		} // 0x12E981D53B07BF48 undefined b1207
		static BOOL BOUNTY_REQUEST_POSSE_LEADER_ESCAPED_CHARACTER_BOUNTY_HUNT_(Any* outRpcGuid)
		{
			return invoke<BOOL>(0x2D874BA20E8E1F20, outRpcGuid);
		} // 0x2D874BA20E8E1F20 undefined b1207
		static BOOL BOUNTY_REQUEST_POSSE_MEMBER_ESCAPED_CHARACTER_BOUNTY_HUNT_(Any* outRpcGuid)
		{
			return invoke<BOOL>(0x8521C2E235558278, outRpcGuid);
		} // 0x8521C2E235558278 undefined b1207
		static void BOUNTY_CLEAR_BEING_TARGET_()
		{
			invoke<int>(0x932DB3C05A7465D1);
		} // 0x932DB3C05A7465D1 undefined b1207
		static BOOL BOUNTY_REQUEST_SERVED_FULL_JAIL_SENTENCE_(Any* outRpcGuid)
		{
			return invoke<BOOL>(0x3F73AED12A5EF0FF, outRpcGuid);
		} // 0x3F73AED12A5EF0FF undefined b1207
		static BOOL BOUNTY_REQUEST_BRIBE_JAIL_GUARD_(Any* outRpcGuid, int p1)
		{
			return invoke<BOOL>(0x28717806D3BDD0D0, outRpcGuid, p1);
		} // 0x28717806D3BDD0D0 undefined b1207
		// _BOUNTY_GET_*
		static int N0xF8BCC5ECA33AC9C1()
		{
			return invoke<int>(0xF8BCC5ECA33AC9C1);
		} // 0xF8BCC5ECA33AC9C1 undefined b1207
		// _BOUNTY_GET_*
		static int N0xD6A67E2FF373D0E3(int p0)
		{
			return invoke<int>(0xD6A67E2FF373D0E3, p0);
		} // 0xD6A67E2FF373D0E3 undefined b1355
	}

	namespace BRAIN
	{
		// Registers a script for any object with a specific model hash.
		static void REGISTER_OBJECT_SCRIPT_BRAIN(const char* scriptName, Hash modelHash, int p2, float activationRange, int p4, int p5)
		{
			invoke<int>(0x16AF9B4EEAC3B305, scriptName, modelHash, p2, activationRange, p4, p5);
		} // 0x16AF9B4EEAC3B305 0xB6BCC608 b1207
		// Returns threadId
		static int START_PRELOADED_SCRIPT_BRAIN_(Entity entity, const char* scriptName, int scriptStackSize, BOOL p3)
		{
			return invoke<int>(0x4E4507CC5E4DB869, entity, scriptName, scriptStackSize, p3);
		} // 0x4E4507CC5E4DB869 undefined b1207
		// Returns threadId
		static int START_SCRIPT_BRAIN_(Entity entity, const char* scriptName, int p2, Any* p3, int p4, BOOL p5)
		{
			return invoke<int>(0x6F62FAE266DCFC81, entity, scriptName, p2, p3, p4, p5);
		} // 0x6F62FAE266DCFC81 undefined b1207
		static void REMOVE_SCRIPT_BRAIN_ENTITY_(Entity entity)
		{
			invoke<int>(0x38F1E09224EECA09, entity);
		} // 0x38F1E09224EECA09 undefined b1311
		static Entity GET_SCRIPT_BRAIN_ENTITY_()
		{
			return invoke<Entity>(0x6818D1A194E29983);
		} // 0x6818D1A194E29983 undefined b1207
		// Common flags: 250, 99999
		// _SET_SCRIPT_BRAIN*
		static void N0xA6AC35DB4A7957A8(int flag)
		{
			invoke<int>(0xA6AC35DB4A7957A8, flag);
		} // 0xA6AC35DB4A7957A8 undefined b1207
		// Called with flag 0 before 0xA6AC35DB4A7957A8 in net_entity_brain
		// _SET_SCRIPT_BRAIN*
		static void N0x4AA5EA1EDFB25786(int flag)
		{
			invoke<int>(0x4AA5EA1EDFB25786, flag);
		} // 0x4AA5EA1EDFB25786 undefined b1207
		static void ENABLE_SCRIPT_BRAIN_SET(int brainSet)
		{
			invoke<int>(0x1CF6E5C6750EADBD, brainSet);
		} // 0x1CF6E5C6750EADBD 0x2765919F b1207
		static void DISABLE_SCRIPT_BRAIN_SET(int brainSet)
		{
			invoke<int>(0x3F44EA613A5B2676, brainSet);
		} // 0x3F44EA613A5B2676 0xFBD13FAD b1207
		// Called before starting a new thread_monitor script thread in startup_mp/startup_tlg
		// Alternative name _REGISTER_SCRIPT_BRAIN
		//
		// Old name: _PREPARE_SCRIPT_BRAIN
		static void REACTIVATE_ALL_OBJECT_BRAINS_THAT_ARE_WAITING_TILL_OUT_OF_RANGE()
		{
			invoke<int>(0xA32B0B05EFF75730);
		} // 0xA32B0B05EFF75730 0xF3A3AB08 b1207
		static void REACTIVATE_NAMED_OBJECT_BRAINS_WAITING_TILL_OUT_OF_RANGE(const char* scriptName)
		{
			invoke<int>(0x74C333E34DF74E8A, scriptName);
		} // 0x74C333E34DF74E8A 0x29CE8BAA b1207
	}

	namespace CAM
	{
		// ease - smooth transition between the camera's positions
		// easeTime - Time in milliseconds for the transition to happen
		//
		// If you have created a script (rendering) camera, and want to go back to the
		// character (gameplay) camera, call this native with render set to FALSE.
		// Setting ease to TRUE will smooth the transition.
		static void RENDER_SCRIPT_CAMS(BOOL render, BOOL ease, int easeTime, BOOL p3, BOOL p4, int p5)
		{
			invoke<int>(0x33281167E4942E4F, render, ease, easeTime, p3, p4, p5);
		} // 0x33281167E4942E4F 0x74337969 b1207
		// This native makes the gameplay camera zoom into first person/third person with a special effect.
		// blendBackSmoothingType: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eBlendBackSmoothing
		static void STOP_RENDERING_SCRIPT_CAMS_USING_CATCH_UP(BOOL render, float distance, int blendBackSmoothingType, BOOL p3, BOOL p4, BOOL p5)
		{
			invoke<int>(0x8C7C7FF7CF0E5153, render, distance, blendBackSmoothingType, p3, p4, p5);
		} // 0x8C7C7FF7CF0E5153 0xD3C08183 b1207
		static Cam CREATE_CAM(const char* camName, BOOL p1)
		{
			return invoke<Cam>(0xE72CDBA7F0A02DD6, camName, p1);
		} // 0xE72CDBA7F0A02DD6 0xE9BF2A7D b1207
		static Cam CREATE_CAM_WITH_PARAMS(const char* camName, float posX, float posY, float posZ, float rotX, float rotY, float rotZ, float fov, BOOL p8, int p9)
		{
			return invoke<Cam>(0x40C23491CE83708E, camName, posX, posY, posZ, rotX, rotY, rotZ, fov, p8, p9);
		} // 0x40C23491CE83708E 0x23B02F15 b1207
		static Cam CREATE_CAMERA(Hash camHash, BOOL p1)
		{
			return invoke<Cam>(0x57CDF879EA466C46, camHash, p1);
		} // 0x57CDF879EA466C46 0x5D6739AE b1207
		static Cam CREATE_CAMERA_WITH_PARAMS(Hash camHash, float posX, float posY, float posZ, float rotX, float rotY, float rotZ, float fov, BOOL p8, Any p9)
		{
			return invoke<Cam>(0x98B99B9F27E2D60B, camHash, posX, posY, posZ, rotX, rotY, rotZ, fov, p8, p9);
		} // 0x98B99B9F27E2D60B 0x0688BE9A b1207
		// BOOL param indicates whether the cam should be destroyed if it belongs to the calling script.
		static void DESTROY_CAM(Cam cam, BOOL p1)
		{
			invoke<int>(0x4E67E0B6D7FD5145, cam, p1);
		} // 0x4E67E0B6D7FD5145 0xC39302BD b1207
		// BOOL param indicates whether the cam should be destroyed if it belongs to the calling script.
		static void DESTROY_ALL_CAMS(BOOL p0)
		{
			invoke<int>(0x163600D6E136C9F8, p0);
		} // 0x163600D6E136C9F8 0x10C151CE b1207
		// Returns whether or not the passed camera handle exists.
		static BOOL DOES_CAM_EXIST(Cam cam)
		{
			return invoke<BOOL>(0x153AD457764FD704, cam);
		} // 0x153AD457764FD704 0x1EF89DC0 b1207
		// Set camera as active/inactive.
		static void SET_CAM_ACTIVE(Cam cam, BOOL active)
		{
			invoke<int>(0x87295BCA613800C8, cam, active);
		} // 0x87295BCA613800C8 0x064659C2 b1207
		// Returns whether or not the passed camera handle is active.
		static BOOL IS_CAM_ACTIVE(Cam cam)
		{
			return invoke<BOOL>(0x63EFCC7E1810B8E6, cam);
		} // 0x63EFCC7E1810B8E6 0x4B58F177 b1207
		static BOOL IS_CAM_RENDERING(Cam cam)
		{
			return invoke<BOOL>(0x4415F8A6C536D39F, cam);
		} // 0x4415F8A6C536D39F 0x6EC6B5B2 b1207
		static Cam GET_RENDERING_CAM()
		{
			return invoke<Cam>(0x03A8931ECC8015D6);
		} // 0x03A8931ECC8015D6 0x0FCF4DF1 b1207
		static Vector3 GET_CAM_COORD(Cam cam)
		{
			return invoke<Vector3>(0x6B12F11C2A9F0344, cam);
		} // 0x6B12F11C2A9F0344 0x7C40F09C b1207
		// rotationOrder: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eEulerRotationOrder
		static Vector3 GET_CAM_ROT(Cam cam, int rotationOrder)
		{
			return invoke<Vector3>(0x9BF96B57254E7889, cam, rotationOrder);
		} // 0x9BF96B57254E7889 0xDAC84C9F b1207
		static float GET_CAM_FOV(Cam cam)
		{
			return invoke<float>(0x8101D32A0A6B0F60, cam);
		} // 0x8101D32A0A6B0F60 0xD6E9FCF5 b1207
		static void SET_CAM_PARAMS(Cam cam, float posX, float posY, float posZ, float rotX, float rotY, float rotZ, float fieldOfView, Any p8, int p9, int p10, int p11, Any p12, Any p13)
		{
			invoke<int>(0xA47BBFFFB83D4D0A, cam, posX, posY, posZ, rotX, rotY, rotZ, fieldOfView, p8, p9, p10, p11, p12, p13);
		} // 0xA47BBFFFB83D4D0A 0x2167CEBF b1207
		// Sets the position of the cam.
		static void SET_CAM_COORD(Cam cam, float posX, float posY, float posZ)
		{
			invoke<int>(0xF9EE7D419EE49DE6, cam, posX, posY, posZ);
		} // 0xF9EE7D419EE49DE6 0x7A8053AF b1207
		// Sets the rotation of the cam.
		static void SET_CAM_ROT(Cam cam, float rotX, float rotY, float rotZ, int rotationOrder)
		{
			invoke<int>(0x63DFA6810AD78719, cam, rotX, rotY, rotZ, rotationOrder);
		} // 0x63DFA6810AD78719 0xEE38B3C1 b1207
		// Sets the field of view of the cam.
		//
		// Min: 1.0f
		// Max: 130.0f
		static void SET_CAM_FOV(Cam cam, float fieldOfView)
		{
			invoke<int>(0x27666E5988D9D429, cam, fieldOfView);
		} // 0x27666E5988D9D429 0xD3D5D74F b1207
		static void SET_CAM_NEAR_CLIP(Cam cam, float nearClip)
		{
			invoke<int>(0xA924028272A61364, cam, nearClip);
		} // 0xA924028272A61364 0x46DB13B1 b1207
		static void SET_CAM_FAR_CLIP(Cam cam, float farClip)
		{
			invoke<int>(0x5E32817BF6302111, cam, farClip);
		} // 0x5E32817BF6302111 0x0D23E381 b1207
		static void SET_CAM_MOTION_BLUR_STRENGTH(Cam cam, float strength)
		{
			invoke<int>(0x45FD891364181F9E, cam, strength);
		} // 0x45FD891364181F9E 0xFD6E0D67 b1207
		static void N0xFC3F638BE2B6BB02()
		{
			invoke<int>(0xFC3F638BE2B6BB02);
		} // 0xFC3F638BE2B6BB02 undefined b1207
		static void N0xE4B7945EF4F1BFB2(Cam cam, Any* args)
		{
			invoke<int>(0xE4B7945EF4F1BFB2, cam, args);
		} // 0xE4B7945EF4F1BFB2 undefined b1207
		static void N0x1FC6C727D30FFDDE(Any p0)
		{
			invoke<int>(0x1FC6C727D30FFDDE, p0);
		} // 0x1FC6C727D30FFDDE undefined b1207
		// Last param determines if its relative to the Entity
		static void ATTACH_CAM_TO_ENTITY(Cam cam, Entity entity, float xOffset, float yOffset, float zOffset, BOOL isRelative)
		{
			invoke<int>(0xFDC0DF7F6FB0A592, cam, entity, xOffset, yOffset, zOffset, isRelative);
		} // 0xFDC0DF7F6FB0A592 0xAD7C45F6 b1207
		// boneIndex: https://github.com/femga/rdr3_discoveries/tree/master/boneNames
		static void ATTACH_CAM_TO_PED_BONE(Cam cam, Ped ped, int boneIndex, float x, float y, float z, BOOL heading)
		{
			invoke<int>(0xDFC1E4A44C0324CA, cam, ped, boneIndex, x, y, z, heading);
		} // 0xDFC1E4A44C0324CA 0x506BB35C b1207
		static void DETACH_CAM(Cam cam)
		{
			invoke<int>(0x05B41DDBEB559556, cam);
		} // 0x05B41DDBEB559556 0xF4FBF14A b1207
		static void POINT_CAM_AT_COORD(Cam cam, float x, float y, float z)
		{
			invoke<int>(0x948B39341C3A40C2, cam, x, y, z);
		} // 0x948B39341C3A40C2 0x914BC21A b1207
		static void POINT_CAM_AT_ENTITY(Cam cam, Entity entity, float p2, float p3, float p4, BOOL p5)
		{
			invoke<int>(0xFC2867E6074D3A61, cam, entity, p2, p3, p4, p5);
		} // 0xFC2867E6074D3A61 0x7597A0F7 b1207
		static void STOP_CAM_POINTING(Cam cam)
		{
			invoke<int>(0xCA1B30A3357C71F1, cam);
		} // 0xCA1B30A3357C71F1 0x5435F6A5 b1207
		static void SET_CAM_FOCUS_DISTANCE_(Cam cam, float distance)
		{
			invoke<int>(0x11F32BB61B756732, cam, distance);
		} // 0x11F32BB61B756732 undefined b1207
		static void PAUSE_CAMERA_FOCUS_(Cam cam, BOOL pause)
		{
			invoke<int>(0x9F97E85EC142255E, cam, pause);
		} // 0x9F97E85EC142255E undefined b1207
		// Allows you to aim and shoot at the direction the camera is facing.
		static void SET_CAM_AFFECTS_AIMING(Cam cam, BOOL toggle)
		{
			invoke<int>(0x3CB9E8BDE5E76F33, cam, toggle);
		} // 0x3CB9E8BDE5E76F33 0x0C74F9AF b1207
		static void SET_CAM_CONTROLS_MINI_MAP_HEADING(Cam cam, BOOL p1)
		{
			invoke<int>(0x1B8F3CE5A6001298, cam, p1);
		} // 0x1B8F3CE5A6001298 0xE1A0B2F1 b1207
		static void ALLOW_MOTION_BLUR_DECAY(Cam cam, BOOL p1)
		{
			invoke<int>(0x42ED56B02E05D109, cam, p1);
		} // 0x42ED56B02E05D109 0x43220969 b1207
		// p7 (length) determines the length of the spline, affects camera path and duration of transition between previous node and this one
		//
		// p8 big values ~100 will slow down the camera movement before reaching this node
		//
		// p9 != 0 seems to override the rotation/pitch (bool?)
		static void ADD_CAM_SPLINE_NODE(Cam camera, float x, float y, float z, float xRot, float yRot, float zRot, int length, int p8, int p9)
		{
			invoke<int>(0xF1F57F9D230F9CD1, camera, x, y, z, xRot, yRot, zRot, length, p8, p9);
		} // 0xF1F57F9D230F9CD1 0xAD3C7EAA b1207
		static void SET_CAM_SPLINE_PHASE(Cam cam, float p1)
		{
			invoke<int>(0xF1898A68E7C15636, cam, p1);
		} // 0xF1898A68E7C15636 0xF0AED233 b1207
		// Can use this with SET_CAM_SPLINE_PHASE to set the float it this native returns.
		//
		// (returns 1.0f when no nodes has been added, reached end of non existing spline)
		static float GET_CAM_SPLINE_PHASE(Cam cam)
		{
			return invoke<float>(0x095EDCD24D90033A, cam);
		} // 0x095EDCD24D90033A 0x39784DD9 b1207
		static void SET_CAM_SPLINE_DURATION(Cam cam, int timeDuration)
		{
			invoke<int>(0xFF6311652CA91015, cam, timeDuration);
		} // 0xFF6311652CA91015 0x3E91FC8A b1207
		static void SET_CAM_SPLINE_SMOOTHING_STYLE(Cam cam, int smoothingStyle)
		{
			invoke<int>(0x84B3645618E726B0, cam, smoothingStyle);
		} // 0x84B3645618E726B0 0x15E141CE b1207
		static void SET_CAM_ACTIVE_WITH_INTERP(Cam camTo, Cam camFrom, int duration, int easeLocation, int easeRotation)
		{
			invoke<int>(0x8B15AE2987C1AC8F, camTo, camFrom, duration, easeLocation, easeRotation);
		} // 0x8B15AE2987C1AC8F 0x7983E7F0 b1207
		static BOOL IS_CAM_INTERPOLATING(Cam cam)
		{
			return invoke<BOOL>(0x578F8F1CAA17BD2B, cam);
		} // 0x578F8F1CAA17BD2B 0x7159CB5D b1207
		static void SHAKE_CAM(Cam cam, const char* type, float amplitude)
		{
			invoke<int>(0xF9A7BCF5D050D4E7, cam, type, amplitude);
		} // 0xF9A7BCF5D050D4E7 0x1D4211B0 b1207
		static BOOL IS_CAM_SHAKING(Cam cam)
		{
			return invoke<BOOL>(0x2EEB402BD7320159, cam);
		} // 0x2EEB402BD7320159 0x0961FD9B b1207
		static void STOP_CAM_SHAKING(Cam cam, BOOL p1)
		{
			invoke<int>(0xB78CC4B4706614B0, cam, p1);
		} // 0xB78CC4B4706614B0 0x40D0EB87 b1207
		static BOOL PLAY_CAM_ANIM(Cam cam, const char* animName, const char* animDictionary, float x, float y, float z, float xRot, float yRot, float zRot, int animFlags, int rotOrder)
		{
			return invoke<BOOL>(0xA263DDF694D563F6, cam, animName, animDictionary, x, y, z, xRot, yRot, zRot, animFlags, rotOrder);
		} // 0xA263DDF694D563F6 0xBCEFB87E b1207
		static void N0xCF69EA05CD9C33C9()
		{
			invoke<int>(0xCF69EA05CD9C33C9);
		} // 0xCF69EA05CD9C33C9 undefined b1207
		// Only used in R* Script camera_photomode
		static BOOL IS_ANIM_SCENE_CAM_ACTIVE_()
		{
			return invoke<BOOL>(0x20389408F0E93B9A);
		} // 0x20389408F0E93B9A undefined b1207
		static BOOL IS_SCREEN_FADED_OUT()
		{
			return invoke<BOOL>(0xF5472C80DF2FF847);
		} // 0xF5472C80DF2FF847 0x9CAA05FA b1207
		static BOOL IS_SCREEN_FADED_IN()
		{
			return invoke<BOOL>(0x37F9A426FBCF4AF2);
		} // 0x37F9A426FBCF4AF2 0x4F37276D b1207
		static BOOL IS_SCREEN_FADING_OUT()
		{
			return invoke<BOOL>(0x02F39BEFE7B88D00);
		} // 0x02F39BEFE7B88D00 0x79275A57 b1207
		static BOOL IS_SCREEN_FADING_IN()
		{
			return invoke<BOOL>(0x0CECCC63FFA2EF24);
		} // 0x0CECCC63FFA2EF24 0xC7C82800 b1207
		// Fades the screen in.
		//
		// duration: The time the fade should take, in milliseconds.
		static void DO_SCREEN_FADE_IN(int duration)
		{
			invoke<int>(0x6A053CF596F67DF7, duration);
		} // 0x6A053CF596F67DF7 0x66C1BDEE b1207
		// Fades the screen out.
		//
		// duration: The time the fade should take, in milliseconds.
		static void DO_SCREEN_FADE_OUT(int duration)
		{
			invoke<int>(0x40C719A5E410B9E4, duration);
		} // 0x40C719A5E410B9E4 0x89D01805 b1207
		// More info: https://en.wikipedia.org/wiki/Letterboxing_(filming)
		static BOOL HAS_LETTER_BOX()
		{
			return invoke<BOOL>(0x81DCFD13CF39920E);
		} // 0x81DCFD13CF39920E undefined b1207
		// Creates Cinematic Black Bars (at top and bottom)
		// Disable instantly: false/false, Enable instantly: true/true
		static void REQUEST_LETTER_BOX_NOW_(BOOL p0, BOOL p1)
		{
			invoke<int>(0x69D65E89FFD72313, p0, p1);
		} // 0x69D65E89FFD72313 undefined b1207
		static void REQUEST_LETTER_BOX_OVERTIME_(int p0, int p1, BOOL p2, int p3, BOOL p4, BOOL p5)
		{
			invoke<int>(0xE296208C273BD7F0, p0, p1, p2, p3, p4, p5);
		} // 0xE296208C273BD7F0 undefined b1207
		static void FORCE_LETTER_BOX_THIS_UPDATE_()
		{
			invoke<int>(0xC64ABC0676AF262B);
		} // 0xC64ABC0676AF262B undefined b1207
		// More info: see HAS_LETTER_BOX
		static float GET_LETTER_BOX_RATIO()
		{
			return invoke<float>(0xA2B1C7EF759A63CE);
		} // 0xA2B1C7EF759A63CE undefined b1207
		static Any N0x73FF6BE63DC18819()
		{
			return invoke<Any>(0x73FF6BE63DC18819);
		} // 0x73FF6BE63DC18819 undefined b1207
		static Any N0x450769C833D58844()
		{
			return invoke<Any>(0x450769C833D58844);
		} // 0x450769C833D58844 undefined b1207
		static void SET_WIDESCREEN_BORDERS(BOOL p0, int p1)
		{
			invoke<int>(0xD7F4D54CF80AFA34, p0, p1);
		} // 0xD7F4D54CF80AFA34 0x1A75DC9A b1207
		static Vector3 GET_GAMEPLAY_CAM_COORD()
		{
			return invoke<Vector3>(0x595320200B98596E);
		} // 0x595320200B98596E 0x9388CF79 b1207
		static Vector3 GET_GAMEPLAY_CAM_ROT(int rotationOrder)
		{
			return invoke<Vector3>(0x0252D2B5582957A6, rotationOrder);
		} // 0x0252D2B5582957A6 0x13A010B5 b1207
		static float GET_GAMEPLAY_CAM_FOV()
		{
			return invoke<float>(0xF6A96E5ACEEC6E50);
		} // 0xF6A96E5ACEEC6E50 0x4D6B3BFA b1207
		static void SET_GAMEPLAY_CAM_MAX_MOTION_BLUR_STRENGTH_THIS_UPDATE(float p0)
		{
			invoke<int>(0x8459B3E64257B21D, p0);
		} // 0x8459B3E64257B21D 0x1126E37C b1207
		static float GET_GAMEPLAY_CAM_RELATIVE_HEADING()
		{
			return invoke<float>(0xC4ABF536048998AA);
		} // 0xC4ABF536048998AA 0xCAF839C2 b1207
		// Sets the camera position relative to heading in float from -360 to +360.
		//
		// Heading is always 0 in aiming camera.
		static void SET_GAMEPLAY_CAM_RELATIVE_HEADING(float heading, float p1)
		{
			invoke<int>(0x5D1EB123EAC5D071, heading, p1);
		} // 0x5D1EB123EAC5D071 0x20C6217C b1207
		static float GET_GAMEPLAY_CAM_RELATIVE_PITCH()
		{
			return invoke<float>(0x99AADEBBA803F827);
		} // 0x99AADEBBA803F827 0xFC5A4946 b1207
		// Sets the camera pitch.
		//
		// Parameters:
		// x = pitches the camera on the x axis.
		// Value2 = always seems to be hex 0x3F800000 (1.000000 float).
		static void SET_GAMEPLAY_CAM_RELATIVE_PITCH(float x, float Value2)
		{
			invoke<int>(0xFB760AF4F537B8BF, x, Value2);
		} // 0xFB760AF4F537B8BF 0x6381B963 b1207
		static void N0x0961B089947BA6D0(Any p0)
		{
			invoke<int>(0x0961B089947BA6D0, p0);
		} // 0x0961B089947BA6D0 undefined b1207
		static void N0x04084490CC302CFB()
		{
			invoke<int>(0x04084490CC302CFB);
		} // 0x04084490CC302CFB undefined b1207
		static void SET_SCRIPTED_CAMERA_IS_FIRST_PERSON_THIS_FRAME(BOOL p0)
		{
			invoke<int>(0x1DD95A8D6B24A0C9, p0);
		} // 0x1DD95A8D6B24A0C9  b1207
		// Returns true if player is in first person
		static BOOL IS_IN_FULL_FIRST_PERSON_MODE_()
		{
			return invoke<BOOL>(0xD1BA66940E94C547);
		} // 0xD1BA66940E94C547 undefined b1207
		static void SHAKE_GAMEPLAY_CAM(const char* shakeName, float intensity)
		{
			invoke<int>(0xD9B31B4650520529, shakeName, intensity);
		} // 0xD9B31B4650520529 0xF2EFE660 b1207
		// shakeName: REINFORCED_LASSO_STRUGGLE_SHAKE
		// _RES*
		static void N0xC3E9E5D4F413B773(const char* shakeName, float intensity)
		{
			invoke<int>(0xC3E9E5D4F413B773, shakeName, intensity);
		} // 0xC3E9E5D4F413B773 undefined b1207
		static BOOL IS_GAMEPLAY_CAM_SHAKING()
		{
			return invoke<BOOL>(0xEA4C5F4AA0A4DBEF);
		} // 0xEA4C5F4AA0A4DBEF 0x3457D681 b1207
		// shakeNames in script_rel: CORRECTOR_SHAKE, MINIGAME_BOUNTY_SHAKE, POV_DRUNK_SHAKE, DRUNK_SHAKE, MINIGAME_TRAIN_SHAKE
		// _IS_GAMEPLAY_*
		static BOOL N0x0060B31968E60E41(const char* shakeName)
		{
			return invoke<BOOL>(0x0060B31968E60E41, shakeName);
		} // 0x0060B31968E60E41 undefined b1207
		// Sets the amplitude for the gameplay (i.e. 3rd or 1st) camera to shake.
		static void SET_GAMEPLAY_CAM_SHAKE_AMPLITUDE(float amplitude)
		{
			invoke<int>(0x570E35F5C4A44838, amplitude);
		} // 0x570E35F5C4A44838 0x9219D44A b1207
		// _SET_GAMEPLAY_P* - _SET_GAMEPLAY_V*
		static void N0xFEFDDC6E8FDF8A75(const char* shakeName, float intensity)
		{
			invoke<int>(0xFEFDDC6E8FDF8A75, shakeName, intensity);
		} // 0xFEFDDC6E8FDF8A75 undefined b1207
		static void STOP_GAMEPLAY_CAM_SHAKING(BOOL p0)
		{
			invoke<int>(0xE0DE43D290FB65F9, p0);
		} // 0xE0DE43D290FB65F9 0xFD569E4E b1207
		// script_rel: DRUNK_SHAKE, REINFORCED_LASSO_STRUGGLE_SHAKE, CORRECTOR_SHAKE, MINIGAME_BOUNTY_SHAKE, HAND_SHAKE, MINIGAME_TRAIN_SHAKE
		// script_mp_rel: DRUNK_SHAKE, REINFORCED_LASSO_STRUGGLE_SHAKE
		// _STOP_GAMEPLAY_CAM* - _STOP_I*
		static void STOP_GAMEPLAY_CAM_SHAKING_WITH_NAME_(const char* shakeName, BOOL p1)
		{
			invoke<int>(0x4285804FD65D8066, shakeName, p1);
		} // 0x4285804FD65D8066 undefined b1207
		// Forces gameplay cam to specified ped as if you were the ped or spectating it
		static void SET_GAMEPLAY_CAM_FOLLOW_PED_THIS_UPDATE(Ped ped)
		{
			invoke<int>(0x82E41D6ADE924FCA, ped);
		} // 0x82E41D6ADE924FCA 0x7D3007A2 b1207
		static BOOL IS_GAMEPLAY_CAM_RENDERING()
		{
			return invoke<BOOL>(0x8660EA714834E412);
		} // 0x8660EA714834E412 0x0EF276DA b1207
		static BOOL IS_INTERPOLATING_FROM_SCRIPT_CAMS()
		{
			return invoke<BOOL>(0x251241CAEC707106);
		} // 0x251241CAEC707106 0xC0B00C20 b1207
		static BOOL IS_INTERPOLATING_TO_SCRIPT_CAMS()
		{
			return invoke<BOOL>(0x43AB9D5A7D415478);
		} // 0x43AB9D5A7D415478 0x60C23785 b1207
		static BOOL IS_GAMEPLAY_CAM_LOOKING_BEHIND()
		{
			return invoke<BOOL>(0x8FE0D24FFD04D5A2);
		} // 0x8FE0D24FFD04D5A2 0x33C83F17 b1207
		// Old name: _DISABLE_CAM_COLLISION_FOR_ENTITY
		static void SET_GAMEPLAY_CAM_IGNORE_ENTITY_COLLISION_THIS_UPDATE(Entity entity)
		{
			invoke<int>(0xD904F75DBD7AB865, entity);
		} // 0xD904F75DBD7AB865 0x2701A9AD b1207
		static void DISABLE_CAM_COLLISION_FOR_OBJECT(Entity entity)
		{
			invoke<int>(0x7E3F546ACFE6C8D9, entity);
		} // 0x7E3F546ACFE6C8D9 0xC4736ED3 b1207
		static void N0x39073DA4EDDBC91D(Any p0)
		{
			invoke<int>(0x39073DA4EDDBC91D, p0);
		} // 0x39073DA4EDDBC91D undefined b1207
		static void N0x70A6658D476C6187()
		{
			invoke<int>(0x70A6658D476C6187);
		} // 0x70A6658D476C6187 undefined b1207
		static void N0x18C3DFAC458783BB()
		{
			invoke<int>(0x18C3DFAC458783BB);
		} // 0x18C3DFAC458783BB undefined b1207
		static void N0xF1A6FEEDF3776EF9()
		{
			invoke<int>(0xF1A6FEEDF3776EF9);
		} // 0xF1A6FEEDF3776EF9 undefined b1207
		static void N0xE6F364DE6C2FDEFE()
		{
			invoke<int>(0xE6F364DE6C2FDEFE);
		} // 0xE6F364DE6C2FDEFE undefined b1207
		// NPLOI_UPDATE__GUN_SPINNING_PREVIEW - Adjusting Camera / Ped Reset Flags This Frame
		// _DISABLE_*
		static void N0x0F1FFEF5D54AE832()
		{
			invoke<int>(0x0F1FFEF5D54AE832);
		} // 0x0F1FFEF5D54AE832 undefined b1207
		static void N0x3C8F74E8FE751614()
		{
			invoke<int>(0x3C8F74E8FE751614);
		} // 0x3C8F74E8FE751614 undefined b1207
		static void N0x06557F6D96C86881()
		{
			invoke<int>(0x06557F6D96C86881);
		} // 0x06557F6D96C86881 undefined b1207
		static BOOL IS_SPHERE_VISIBLE(float x, float y, float z, float radius)
		{
			return invoke<BOOL>(0x2E941B5FFA2989C6, x, y, z, radius);
		} // 0x2E941B5FFA2989C6 0xDD1329E2 b1207
		static Any N0x190F7DA1AC09A8EF()
		{
			return invoke<Any>(0x190F7DA1AC09A8EF);
		} // 0x190F7DA1AC09A8EF undefined b1207
		// Used in Script Function SHOP_CAMERA_SUPPORT_START_NEW_ORBIT
		static void SET_GAMEPLAY_CAM_INITIAL_ZOOM_(float camInitialZoom)
		{
			invoke<int>(0xBCDA0BA8762FACB9, camInitialZoom);
		} // 0xBCDA0BA8762FACB9 undefined b1207
		static void SET_GAMEPLAY_CAM_INITIAL_HEADING_(float camInitialHeading)
		{
			invoke<int>(0x6C1053C433A573CF, camInitialHeading);
		} // 0x6C1053C433A573CF undefined b1207
		static void SET_GAMEPLAY_CAM_INITIAL_PITCH_(float camInitialPitch)
		{
			invoke<int>(0x449995EA846D3FC2, camInitialPitch);
		} // 0x449995EA846D3FC2 undefined b1207
		// minimum: Degrees between -180f and 180f.
		// maximum: Degrees between -180f and 180f.
		//
		// Clamps the gameplay camera's current yaw.
		//
		// Eg. _CLAMP_GAMEPLAY_CAM_YAW(0.0f, 0.0f) will set the horizontal angle directly behind the player.
		//
		// Old name: _CLAMP_GAMEPLAY_CAM_YAW
		static void SET_THIRD_PERSON_CAM_RELATIVE_HEADING_LIMITS_THIS_UPDATE(float minimum, float maximum)
		{
			invoke<int>(0x14F3947318CA8AD2, minimum, maximum);
		} // 0x14F3947318CA8AD2 0x749909AC b1207
		// minimum: Degrees between -90f and 90f.
		// maximum: Degrees between -90f and 90f.
		//
		// Clamps the gameplay camera's current pitch.
		//
		// Eg. _CLAMP_GAMEPLAY_CAM_PITCH(0.0f, 0.0f) will set the vertical angle directly behind the player.
		//
		// Old name: _CLAMP_GAMEPLAY_CAM_PITCH
		static void SET_THIRD_PERSON_CAM_RELATIVE_PITCH_LIMITS_THIS_UPDATE(float minimum, float maximum)
		{
			invoke<int>(0x326C7AA308F3DF6A, minimum, maximum);
		} // 0x326C7AA308F3DF6A 0xFA3A16E7 b1207
		// Old name: _ANIMATE_GAMEPLAY_CAM_ZOOM
		static void SET_THIRD_PERSON_CAM_ORBIT_DISTANCE_LIMITS_THIS_UPDATE(float p0, float distance)
		{
			invoke<int>(0x2126C740A4AC370B, p0, distance);
		} // 0x2126C740A4AC370B 0x77340650 b1207
		// Forces gameplay cam to specified vehicle as if you were in it
		static void SET_IN_VEHICLE_CAM_STATE_THIS_UPDATE(Vehicle vehicle, int p1)
		{
			invoke<int>(0xFA1D5E8D1C3CCD67, vehicle, p1);
		} // 0xFA1D5E8D1C3CCD67 0x4B22C5CB b1207
		// Old name: _DISABLE_FIRST_PERSON_CAM_THIS_FRAME
		static void DISABLE_ON_FOOT_FIRST_PERSON_VIEW_THIS_UPDATE()
		{
			invoke<int>(0x9C473089A934C930);
		} // 0x9C473089A934C930  b1207
		// nullsub, doesn't do anything
		static void DISABLE_FIRST_PERSON_FLASH_EFFECT_THIS_UPDATE()
		{
			invoke<int>(0x77D65669A05D1A1A);
		} // 0x77D65669A05D1A1A  b1207
		static void DISABLE_CINEMATIC_MODE_THIS_FRAME_()
		{
			invoke<int>(0x8910C24B7E0046EC);
		} // 0x8910C24B7E0046EC undefined b1207
		static BOOL IS_IN_CINEMATIC_MODE_()
		{
			return invoke<BOOL>(0x74F1D22EFA71FAB8);
		} // 0x74F1D22EFA71FAB8 undefined b1207
		static void N0x718C6ECF5E8CBDD4()
		{
			invoke<int>(0x718C6ECF5E8CBDD4);
		} // 0x718C6ECF5E8CBDD4 undefined b1207
		// Forces camera position to second furthest 3rd person
		static void FORCE_THIRD_PERSON_CAM_THIS_FRAME_()
		{
			invoke<int>(0x8370D34BD2E60B73);
		} // 0x8370D34BD2E60B73 undefined b1207
		// Forces camera position to furthest 3rd person
		static void FORCE_THIRD_PERSON_CAM_FAR_THIS_FRAME_()
		{
			invoke<int>(0x1CFB749AD4317BDE);
		} // 0x1CFB749AD4317BDE undefined b1207
		// Returns true if first person camera is active in saloon1.ysc
		static BOOL FORCE_FIRST_PERSON_CAM_THIS_FRAME_()
		{
			return invoke<BOOL>(0x90DA5BA5C2635416);
		} // 0x90DA5BA5C2635416 undefined b1207
		// Does the same as 0x9C473089A934C930 (DISABLE_ON_FOOT_FIRST_PERSON_VIEW_THIS_UPDATE)
		static void DISABLE_ON_FOOT_FIRST_PERSON_VIEW_THIS_UPDATE_2_()
		{
			invoke<int>(0x05AB44D906738426);
		} // 0x05AB44D906738426 undefined b1207
		// Zooms in the gameplay camera to the next zoom level?
		// USE_* - WAS_*
		static void N0x632BE8D84846FA56()
		{
			invoke<int>(0x632BE8D84846FA56);
		} // 0x632BE8D84846FA56 undefined b1207
		static void N0x71D71E08A7ED5BD7(Any p0)
		{
			invoke<int>(0x71D71E08A7ED5BD7, p0);
		} // 0x71D71E08A7ED5BD7 undefined b1207
		static BOOL IS_FOLLOW_VEHICLE_CAM_ACTIVE()
		{
			return invoke<BOOL>(0xA40C2F51FB589E9A);
		} // 0xA40C2F51FB589E9A 0x8DD49B77 b1207
		static void N0x7E40A01B11398FCB()
		{
			invoke<int>(0x7E40A01B11398FCB);
		} // 0x7E40A01B11398FCB undefined b1207
		static BOOL IS_AIM_CAM_ACTIVE()
		{
			return invoke<BOOL>(0x698F456FB909E077);
		} // 0x698F456FB909E077 0xC24B4F6F b1232
		static BOOL IS_FIRST_PERSON_AIM_CAM_ACTIVE()
		{
			return invoke<BOOL>(0xF63134C54B6EC212);
		} // 0xF63134C54B6EC212 0xD6280468 b1207
		static BOOL IS_FIRST_PERSON_CAMERA_ACTIVE(Any p0, Any p1, Any p2)
		{
			return invoke<BOOL>(0xA24C1D341C6E0D53, p0, p1, p2);
		} // 0xA24C1D341C6E0D53 undefined b1207
		static Any N0xDC62CD70658E7A02()
		{
			return invoke<Any>(0xDC62CD70658E7A02);
		} // 0xDC62CD70658E7A02 undefined b1207
		static Any N0x796085220ADCC847()
		{
			return invoke<Any>(0x796085220ADCC847);
		} // 0x796085220ADCC847 undefined b1207
		static Any N0xB6A80E1E3A5444F1()
		{
			return invoke<Any>(0xB6A80E1E3A5444F1);
		} // 0xB6A80E1E3A5444F1 undefined b1311
		static Any N0x8B1A5FE7E41E52B2()
		{
			return invoke<Any>(0x8B1A5FE7E41E52B2);
		} // 0x8B1A5FE7E41E52B2 undefined b1311
		static float GET_FIRST_PERSON_AIM_CAM_ZOOM_FACTOR()
		{
			return invoke<float>(0xB4132CA1B0EE1365);
		} // 0xB4132CA1B0EE1365 0x33951005 b1207
		static void SET_FIRST_PERSON_AIM_CAM_RELATIVE_HEADING_LIMITS_THIS_UPDATE(float p0, float p1)
		{
			invoke<int>(0x05BD5E4088B30A66, p0, p1);
		} // 0x05BD5E4088B30A66 0x2F29F0D5 b1207
		// Old name: _SET_FIRST_PERSON_CAM_PITCH_RANGE
		static void SET_FIRST_PERSON_AIM_CAM_RELATIVE_PITCH_LIMITS_THIS_UPDATE(float p0, float p1)
		{
			invoke<int>(0x715B7F5E8BED32A2, p0, p1);
		} // 0x715B7F5E8BED32A2 0x76DAC96C b1207
		static void N0xC205B3C54C6A4E37(Any p0)
		{
			invoke<int>(0xC205B3C54C6A4E37, p0);
		} // 0xC205B3C54C6A4E37 undefined b1207
		static Vector3 GET_FINAL_RENDERED_CAM_COORD()
		{
			return invoke<Vector3>(0x5352E025EC2B416F);
		} // 0x5352E025EC2B416F 0x9C84BDA0 b1207
		static Vector3 GET_FINAL_RENDERED_CAM_ROT(int rotationOrder)
		{
			return invoke<Vector3>(0x602685BD85DD26CA, rotationOrder);
		} // 0x602685BD85DD26CA 0x1FFBEFC5 b1207
		static float GET_FINAL_RENDERED_CAM_FOV()
		{
			return invoke<float>(0x04AF77971E508F6A);
		} // 0x04AF77971E508F6A 0x721B763B b1207
		// Hash used in finale1.ysc: 1726668277
		static void SET_GAMEPLAY_COORD_HINT(float x, float y, float z, int duration, int blendOutDuration, int blendInDuration, Hash p6)
		{
			invoke<int>(0xFA33B8C69A4A6A0F, x, y, z, duration, blendOutDuration, blendInDuration, p6);
		} // 0xFA33B8C69A4A6A0F 0xF27483C9 b1207
		static void SET_GAMEPLAY_PED_HINT(Ped p0, float x1, float y1, float z1, BOOL p4, Any p5, Any p6, Any p7)
		{
			invoke<int>(0x90FB951648851733, p0, x1, y1, z1, p4, p5, p6, p7);
		} // 0x90FB951648851733 0x7C27343E b1207
		static void SET_GAMEPLAY_VEHICLE_HINT(Any p0, float p1, float p2, float p3, BOOL p4, Any p5, Any p6, Any p7)
		{
			invoke<int>(0xE2B2BB7DAC280515, p0, p1, p2, p3, p4, p5, p6, p7);
		} // 0xE2B2BB7DAC280515 0x2C9A11D8 b1207
		static void SET_GAMEPLAY_OBJECT_HINT(Any p0, float p1, float p2, float p3, BOOL p4, Any p5, Any p6, Any p7)
		{
			invoke<int>(0xC40551D65F2BF297, p0, p1, p2, p3, p4, p5, p6, p7);
		} // 0xC40551D65F2BF297 0x2ED5E2F8 b1207
		// p6 & p7 - possibly length or time
		static void SET_GAMEPLAY_ENTITY_HINT(Entity entity, float xOffset, float yOffset, float zOffset, BOOL p4, int p5, int p6, int p7, Any p8)
		{
			invoke<int>(0xD1F7F32640ADFD12, entity, xOffset, yOffset, zOffset, p4, p5, p6, p7, p8);
		} // 0xD1F7F32640ADFD12 0x66C32306 b1207
		static BOOL IS_GAMEPLAY_HINT_ACTIVE()
		{
			return invoke<BOOL>(0x2E04AB5FEE042D4A);
		} // 0x2E04AB5FEE042D4A 0xAD8DA205 b1207
		static void STOP_GAMEPLAY_HINT(BOOL p0)
		{
			invoke<int>(0x1BCEC33D54CFCA8A, p0);
		} // 0x1BCEC33D54CFCA8A 0x1BC28B7B b1207
		static void STOP_CODE_GAMEPLAY_HINT(BOOL p0)
		{
			invoke<int>(0x93759A83D0D844E7, p0);
		} // 0x93759A83D0D844E7  b1207
		// UPDATE_PLAYER_PLAYING_STATE - Releasing Lasso Hint Cam
		// Return type char in ida
		// _SET_GAMEPLAY_HINT_*
		static void N0x88544C0E3291DCAE(BOOL p0)
		{
			invoke<int>(0x88544C0E3291DCAE, p0);
		} // 0x88544C0E3291DCAE undefined b1207
		static void SET_GAMEPLAY_HINT_FOV(float FOV)
		{
			invoke<int>(0x661E58BC6F00A49A, FOV);
		} // 0x661E58BC6F00A49A 0x96FD173B b1207
		static void SET_GAMEPLAY_HINT_FOLLOW_DISTANCE_SCALAR(float p0)
		{
			invoke<int>(0xDDDC54181868F81F, p0);
		} // 0xDDDC54181868F81F 0x72E8CD3A b1207
		static void SET_GAMEPLAY_HINT_BASE_ORBIT_PITCH_OFFSET(float p0)
		{
			invoke<int>(0x421192A2DA48FD01, p0);
		} // 0x421192A2DA48FD01 0x79472AE3 b1207
		// Old name: _SET_GAMEPLAY_HINT_ANIM_OFFSETX
		static void SET_GAMEPLAY_HINT_CAMERA_RELATIVE_SIDE_OFFSET(float p0)
		{
			invoke<int>(0xF86B6F93727C59C9, p0);
		} // 0xF86B6F93727C59C9 0xFC7464A0 b1207
		// Old name: _SET_GAMEPLAY_HINT_ANIM_OFFSETY
		static void SET_GAMEPLAY_HINT_CAMERA_RELATIVE_VERTICAL_OFFSET(float p0)
		{
			invoke<int>(0x29E74F819150CC32, p0);
		} // 0x29E74F819150CC32 0x3554AA0E b1207
		static void N0xF48664E9C83825E3(Any p0, Any p1)
		{
			invoke<int>(0xF48664E9C83825E3, p0, p1);
		} // 0xF48664E9C83825E3 undefined b1207
		static void N0x1F6EBD94680252CE(Any p0, Any p1)
		{
			invoke<int>(0x1F6EBD94680252CE, p0, p1);
		} // 0x1F6EBD94680252CE undefined b1207
		static void N0xE28F73212A813E82(Any p0, Any p1, Any p2, Any p3)
		{
			invoke<int>(0xE28F73212A813E82, p0, p1, p2, p3);
		} // 0xE28F73212A813E82 undefined b1207
		static void N0x4D2F46D1B28D90FB(Any p0, Any p1)
		{
			invoke<int>(0x4D2F46D1B28D90FB, p0, p1);
		} // 0x4D2F46D1B28D90FB undefined b1207
		// [SHOP_CAMERA_SUPPORT_START_NEW_ORBIT]
		// p0: struct<32> /*256*/
		static void START_CAMERA_ORBIT_(Any* p0)
		{
			invoke<int>(0x65B205BF30C13DDB, p0);
		} // 0x65B205BF30C13DDB undefined b1207
		static void N0x641092322A8852AB()
		{
			invoke<int>(0x641092322A8852AB);
		} // 0x641092322A8852AB undefined b1207
		static void N0xDB382FE20C2DA222(Any p0)
		{
			invoke<int>(0xDB382FE20C2DA222, p0);
		} // 0xDB382FE20C2DA222 undefined b1207
		static void N0x2DD3149DC34A3F4C(Any p0)
		{
			invoke<int>(0x2DD3149DC34A3F4C, p0);
		} // 0x2DD3149DC34A3F4C undefined b1207
		static void FREEZE_GAMEPLAY_CAM_THIS_FRAME_()
		{
			invoke<int>(0x027CAB2C3AF27010);
		} // 0x027CAB2C3AF27010 undefined b1207
		static void N0x3C486E334520579D()
		{
			invoke<int>(0x3C486E334520579D);
		} // 0x3C486E334520579D undefined b1207
		static void N0x41E452A3C580D1A7()
		{
			invoke<int>(0x41E452A3C580D1A7);
		} // 0x41E452A3C580D1A7 undefined b1207
		static void SET_CINEMATIC_BUTTON_ACTIVE(BOOL p0)
		{
			invoke<int>(0xB90411F480457A6C, p0);
		} // 0xB90411F480457A6C 0x3FBC5D00 b1207
		static BOOL IS_CINEMATIC_CAM_RENDERING()
		{
			return invoke<BOOL>(0xBF7C780731AADBF8);
		} // 0xBF7C780731AADBF8 0x80471AD9 b1207
		// Old name: _DISABLE_VEHICLE_FIRST_PERSON_CAM_THIS_FRAME
		static void DISABLE_CINEMATIC_BONNET_CAMERA_THIS_UPDATE()
		{
			invoke<int>(0xA5929C2E57AC90D1);
		} // 0xA5929C2E57AC90D1 0x5AC6DAC9 b1207
		// Old name: _INVALIDATE_VEHICLE_IDLE_CAM
		static void INVALIDATE_CINEMATIC_VEHICLE_IDLE_MODE()
		{
			invoke<int>(0x634F4A0562CF19B8);
		} // 0x634F4A0562CF19B8 0x65DDE8AF b1207
		static void FORCE_CINEMATIC_RENDERING_THIS_UPDATE(BOOL p0)
		{
			invoke<int>(0x702B75DC9D3EDE56, p0);
		} // 0x702B75DC9D3EDE56 0xFBB85E02 b1207
		static void N0x9AC65A36D3C0C189(Any p0)
		{
			invoke<int>(0x9AC65A36D3C0C189, p0);
		} // 0x9AC65A36D3C0C189 undefined b1207
		// _IS_SCRIPTED_S*
		static BOOL N0x975F6EBB62632FE3()
		{
			return invoke<BOOL>(0x975F6EBB62632FE3);
		} // 0x975F6EBB62632FE3 undefined b1207
		static void SET_CINEMATIC_MODE_ACTIVE(BOOL p0)
		{
			invoke<int>(0xCE7A90B160F75046, p0);
		} // 0xCE7A90B160F75046 0x2009E747 b1207
		static BOOL N0x1811A02277A9E49D()
		{
			return invoke<BOOL>(0x1811A02277A9E49D);
		} // 0x1811A02277A9E49D undefined b1207
		// Used for DUELING_MANAGE_DEATH_CAMERA - Initializing death camera
		// Params: targetPed = death cam focuses on it
		static void FORCE_CINEMATIC_DEATH_CAM_ON_PED_(Ped targetPed)
		{
			invoke<int>(0xE3639DB78B3B5400, targetPed);
		} // 0xE3639DB78B3B5400 undefined b1207
		// Used to enable headshot kill replay when you headshot set ped.
		// Params: p1 seems to be 0 or 1 in R* Scripts
		static void REACTIVATE_PED_HEADSHOT_EXECUTE_SLOWCAM_(Ped ped, int p1)
		{
			invoke<int>(0x986F7A51EE3E1F92, ped, p1);
		} // 0x986F7A51EE3E1F92 undefined b1207
		static void N0x5B637D6F3B67716A(Any p0)
		{
			invoke<int>(0x5B637D6F3B67716A, p0);
		} // 0x5B637D6F3B67716A undefined b1207
		static void N0xC252C0CC969AF79A(Any p0)
		{
			invoke<int>(0xC252C0CC969AF79A, p0);
		} // 0xC252C0CC969AF79A undefined b1207
		static void N0xE2BB2D6A9FE2ECDE(Any p0)
		{
			invoke<int>(0xE2BB2D6A9FE2ECDE, p0);
		} // 0xE2BB2D6A9FE2ECDE undefined b1207
		// Used for DUELING_MANAGE_DEATH_CAMERA - Initializing death camera
		// _SET_P* - _SET_S*
		static void SET_START_CINEMATIC_DEATH_CAM_(BOOL p0)
		{
			invoke<int>(0x6E969927CF632608, p0);
		} // 0x6E969927CF632608 undefined b1207
		static Any N0x6072B7420A83A03F()
		{
			return invoke<Any>(0x6072B7420A83A03F);
		} // 0x6072B7420A83A03F undefined b1207
		// Used for DUELING_LOCK_CAMERA_CONTROLS_THIS_FRAME: Disabling look/aim controls
		// _IS_SC(REEN_)* (?)
		static BOOL N0x1204EB53A5FBC63D()
		{
			return invoke<BOOL>(0x1204EB53A5FBC63D);
		} // 0x1204EB53A5FBC63D undefined b1207
		static void N0x6519238858AF5479(Any p0)
		{
			invoke<int>(0x6519238858AF5479, p0);
		} // 0x6519238858AF5479 undefined b1207
		// Creates Kill Cam for specified Ped Handle
		static void CREATE_KILL_CAM_(Ped ped)
		{
			invoke<int>(0x2F994CC29CAA9D22, ped);
		} // 0x2F994CC29CAA9D22 undefined b1207
		static BOOL IS_CAM_PHOTOFX_RUNNING_()
		{
			return invoke<BOOL>(0xA14D5FE82BCB1D9E);
		} // 0xA14D5FE82BCB1D9E undefined b1207
		static Any N0x6DFD37E586D4F44F()
		{
			return invoke<Any>(0x6DFD37E586D4F44F);
		} // 0x6DFD37E586D4F44F undefined b1207
		static Any N0x80D7A3E39B120BC4()
		{
			return invoke<Any>(0x80D7A3E39B120BC4);
		} // 0x80D7A3E39B120BC4 undefined b1207
		// Maintains the death camera after respawn
		static void N0x63E5841A9264D016(BOOL toggle)
		{
			invoke<int>(0x63E5841A9264D016, toggle);
		} // 0x63E5841A9264D016 undefined b1207
		static void TRIGGER_MISSION_FAILED_CAM_()
		{
			invoke<int>(0x9A92C06ACBAF9731);
		} // 0x9A92C06ACBAF9731 undefined b1207
		static void N0x16E9ABDD34DDD931()
		{
			invoke<int>(0x16E9ABDD34DDD931);
		} // 0x16E9ABDD34DDD931 undefined b1207
		static BOOL IS_DEATH_FAIL_CAMERA_RUNNING()
		{
			return invoke<BOOL>(0x139EFB0A71DD9011);
		} // 0x139EFB0A71DD9011 undefined b1207
		static Any N0x7CE9DC58E3E4755F()
		{
			return invoke<Any>(0x7CE9DC58E3E4755F);
		} // 0x7CE9DC58E3E4755F undefined b1207
		static void N0x3B8E3AD9677CE12B(Any p0, Any p1, Any p2)
		{
			invoke<int>(0x3B8E3AD9677CE12B, p0, p1, p2);
		} // 0x3B8E3AD9677CE12B undefined b1207
		static void N0xDF7F5BE9150E47E4(Any p0)
		{
			invoke<int>(0xDF7F5BE9150E47E4, p0);
		} // 0xDF7F5BE9150E47E4 undefined b1207
		static void N0xB85C13E0BF1F2A1C(Any p0)
		{
			invoke<int>(0xB85C13E0BF1F2A1C, p0);
		} // 0xB85C13E0BF1F2A1C undefined b1207
		static void N0x066167C63111D8CF(Any p0, Any p1, Any p2, Any p3, Any p4)
		{
			invoke<int>(0x066167C63111D8CF, p0, p1, p2, p3, p4);
		} // 0x066167C63111D8CF undefined b1207
		// NPLOI_UPDATE__GUN_SPINNING_PREVIEW - Adjusting Camera / Ped Reset Flags This Frame
		// _DISABLE_*
		static void N0xA8BA2E0204D8486F()
		{
			invoke<int>(0xA8BA2E0204D8486F);
		} // 0xA8BA2E0204D8486F undefined b1355
		// Camera will be or is running
		static void N0xC3742F1FDF0A6824()
		{
			invoke<int>(0xC3742F1FDF0A6824);
		} // 0xC3742F1FDF0A6824 undefined b1355
		static void N0x0FF7125F07DEB84F(Any p0, Any p1)
		{
			invoke<int>(0x0FF7125F07DEB84F, p0, p1);
		} // 0x0FF7125F07DEB84F undefined b1207
		static void N0x6CAB0BA160B168D2()
		{
			invoke<int>(0x6CAB0BA160B168D2);
		} // 0x6CAB0BA160B168D2 undefined b1207
		static void LOAD_CINEMATIC_CAM_LOCATION_(const char* locationDictName)
		{
			invoke<int>(0x1B3C2D961F5FC0E1, locationDictName);
		} // 0x1B3C2D961F5FC0E1 undefined b1207
		static void UNLOAD_CINEMATIC_CAMERA_LOCATION_(const char* dictionaryName)
		{
			invoke<int>(0x2412216FCC7B4E3E, dictionaryName);
		} // 0x2412216FCC7B4E3E undefined b1207
		static BOOL IS_CINEMATIC_CAM_LOCATION_LOADED_(const char* sLocationDictName)
		{
			return invoke<BOOL>(0xAA235E2F2C09E952, sLocationDictName);
		} // 0xAA235E2F2C09E952 undefined b1207
		// Checks data related to Cinematic Cam Locations, if the check fails, the location is being loaded using 0x1B3C2D961F5FC0E1.
		static BOOL IS_CINEMATIC_CAM_LOCATION_LOADED_2_(const char* locationDictName)
		{
			return invoke<BOOL>(0x595550376B7EA230, locationDictName);
		} // 0x595550376B7EA230 undefined b1207
		static Any N0x465F04F68AD38197(const char* dictionary, const char* shotName, int duration)
		{
			return invoke<Any>(0x465F04F68AD38197, dictionary, shotName, duration);
		} // 0x465F04F68AD38197 undefined b1207
		static Any N0xEA113BF9B0C0C5D7(const char* dictionary, const char* shotName, int duration)
		{
			return invoke<Any>(0xEA113BF9B0C0C5D7, dictionary, shotName, duration);
		} // 0xEA113BF9B0C0C5D7 undefined b1207
		static void CINEMATIC_LOCATION_TRIGGER_SCRIPTED_SHOT_EVENT_2_(const char* dictionary, const char* shotName, int duration)
		{
			invoke<int>(0xBC016635D6A73B31, dictionary, shotName, duration);
		} // 0xBC016635D6A73B31 undefined b1207
		static void CINEMATIC_LOCATION_TRIGGER_SCRIPTED_SHOT_EVENT(const char* dictionary, const char* shotName, const char* cameraName, Any p3)
		{
			invoke<int>(0x02389579A53C3276, dictionary, shotName, cameraName, p3);
		} // 0x02389579A53C3276 undefined b1207
		static void N0xA54D643D0773EB65(const char* dictionary, const char* shotName, int duration)
		{
			invoke<int>(0xA54D643D0773EB65, dictionary, shotName, duration);
		} // 0xA54D643D0773EB65 undefined b1207
		static void CINEMATIC_LOCATION_STOP_SCRIPTED_SHOT_EVENT(Any p0, Any p1, Any p2)
		{
			invoke<int>(0x6D4D25C2137FF511, p0, p1, p2);
		} // 0x6D4D25C2137FF511 undefined b1207
		static BOOL N0xC3AEBB276825A359(const char* dictionary, const char* shotName, int duration)
		{
			return invoke<BOOL>(0xC3AEBB276825A359, dictionary, shotName, duration);
		} // 0xC3AEBB276825A359 undefined b1436
		static BOOL N0x1D931B7CC0EE3956(const char* dictionary, const char* shotName, const char* cameraName)
		{
			return invoke<BOOL>(0x1D931B7CC0EE3956, dictionary, shotName, cameraName);
		} // 0x1D931B7CC0EE3956 undefined b1436
		static void CINEMATIC_LOCATION_SET_LOCATION_AND_ROTATION_(const char* name, float x, float y, float z, float rotX, float rotY, float rotZ)
		{
			invoke<int>(0x0E94C95EC3185FA9, name, x, y, z, rotX, rotY, rotZ);
		} // 0x0E94C95EC3185FA9 undefined b1207
		// Only used in R* Script fm_mission_controller
		static void CINEMATIC_LOCATION_OVERRIDE_TARGET_ENTITY_THIS_UPDATE(const char* name, Entity entity)
		{
			invoke<int>(0x0B0F914459731F60, name, entity);
		} // 0x0B0F914459731F60 undefined b1311
		static void LOAD_CAMERA_DATA_DICT_(const char* cameraDictionary)
		{
			invoke<int>(0x6A4D224FC7643941, cameraDictionary);
		} // 0x6A4D224FC7643941 undefined b1207
		static void UNLOAD_CAMERA_DATA_DICT_(const char* cameraDictionary)
		{
			invoke<int>(0x798BE43C9393632B, cameraDictionary);
		} // 0x798BE43C9393632B undefined b1207
		static BOOL IS_CAM_DATA_DICT_LOADED_(const char* cameraDictionary)
		{
			return invoke<BOOL>(0xDD0B7C5AE58F721D, cameraDictionary);
		} // 0xDD0B7C5AE58F721D undefined b1207
		static BOOL N0xC285FD21294A1C49(const char* cameraDictionary)
		{
			return invoke<BOOL>(0xC285FD21294A1C49, cameraDictionary);
		} // 0xC285FD21294A1C49 undefined b1207
		static void CAM_CREATE_(const char* cameraDictionary)
		{
			invoke<int>(0xB8B207C34285E978, cameraDictionary);
		} // 0xB8B207C34285E978 undefined b1207
		static void CAM_DESTROY_(const char* cameraDictionary)
		{
			invoke<int>(0x0A5A4F1979ABB40E, cameraDictionary);
		} // 0x0A5A4F1979ABB40E undefined b1207
		static BOOL IS_CAMERA_AVAILABLE_(const char* cameraDictionary)
		{
			return invoke<BOOL>(0x927B810E43E99932, cameraDictionary);
		} // 0x927B810E43E99932 undefined b1207
		static Any N0x4138EE36BC3DC0A7(Any p0, Any p1)
		{
			return invoke<Any>(0x4138EE36BC3DC0A7, p0, p1);
		} // 0x4138EE36BC3DC0A7 undefined b1207
		static void N0xFEB8646818294C75(Any p0, Any p1)
		{
			invoke<int>(0xFEB8646818294C75, p0, p1);
		} // 0xFEB8646818294C75 undefined b1207
		static void N0x29E6655DF3590B0D(Any p0)
		{
			invoke<int>(0x29E6655DF3590B0D, p0);
		} // 0x29E6655DF3590B0D undefined b1207
		static void N0xAC77757C05DE9E5A(const char* cameraDictionary)
		{
			invoke<int>(0xAC77757C05DE9E5A, cameraDictionary);
		} // 0xAC77757C05DE9E5A undefined b1207
		static void N0x8E036B41C37D0E5F(Any p0)
		{
			invoke<int>(0x8E036B41C37D0E5F, p0);
		} // 0x8E036B41C37D0E5F undefined b1207
		static void N0x1D9F72DD4FD9A9D7(Any p0)
		{
			invoke<int>(0x1D9F72DD4FD9A9D7, p0);
		} // 0x1D9F72DD4FD9A9D7 undefined b1207
		static void CAM_CREATE_2_(const char* cameraDictionary)
		{
			invoke<int>(0x7B0279170961A73F, cameraDictionary);
		} // 0x7B0279170961A73F undefined b1207
		static void N0x728491FB3DFFEF99(Any p0)
		{
			invoke<int>(0x728491FB3DFFEF99, p0);
		} // 0x728491FB3DFFEF99 undefined b1207
		static Any N0x14C4A49E36C29E49()
		{
			return invoke<Any>(0x14C4A49E36C29E49);
		} // 0x14C4A49E36C29E49 undefined b1207
		static Any N0xF824530B612FE0CE()
		{
			return invoke<Any>(0xF824530B612FE0CE);
		} // 0xF824530B612FE0CE undefined b1207
		static Any N0xEF9A3132A0AA6B19()
		{
			return invoke<Any>(0xEF9A3132A0AA6B19);
		} // 0xEF9A3132A0AA6B19 undefined b1207
		static Any N0x5060FA977CEA4455()
		{
			return invoke<Any>(0x5060FA977CEA4455);
		} // 0x5060FA977CEA4455 undefined b1207
		static float GET_PHOTO_MODE_FOCAL_LENGTH_()
		{
			return invoke<float>(0x2533BAFFBE737E54);
		} // 0x2533BAFFBE737E54 undefined b1207
		static float GET_PHOTO_MODE_FOCUS_DISTANCE_()
		{
			return invoke<float>(0x18FC740FFDCD7454);
		} // 0x18FC740FFDCD7454 undefined b1207
		static float GET_PHOTO_MODE_DOF_()
		{
			return invoke<float>(0x4653A741D17F2CD0);
		} // 0x4653A741D17F2CD0 undefined b1207
		static Any N0x2AB7C81B3F70570C()
		{
			return invoke<Any>(0x2AB7C81B3F70570C);
		} // 0x2AB7C81B3F70570C undefined b1207
		static void N0x8505E05FC8822843(Any p0)
		{
			invoke<int>(0x8505E05FC8822843, p0);
		} // 0x8505E05FC8822843 undefined b1207
	}

	namespace CLOCK
	{
		// SET_CLOCK_TIME(12, 34, 56);
		static void SET_CLOCK_TIME(int hour, int minute, int second)
		{
			invoke<int>(0x3A52C59FFB2DEED8, hour, minute, second);
		} // 0x3A52C59FFB2DEED8 0x26F6AF14 b1207
		static void PAUSE_CLOCK(BOOL toggle, Any unused)
		{
			invoke<int>(0x4D1A590C92BF377E, toggle, unused);
		} // 0x4D1A590C92BF377E 0xB02D6124 b1207
		static void PAUSE_CLOCK_THIS_FRAME_(BOOL toggle)
		{
			invoke<int>(0x568D998A9FF96774, toggle);
		} // 0x568D998A9FF96774 undefined b1207
		static void ADVANCE_CLOCK_TIME_TO(int hour, int minute, int second)
		{
			invoke<int>(0x0184750AE88D0B1D, hour, minute, second);
		} // 0x0184750AE88D0B1D 0x57B8DA7C b1207
		static void ADD_TO_CLOCK_TIME(int hours, int minutes, int seconds)
		{
			invoke<int>(0xAB7C251C7701D336, hours, minutes, seconds);
		} // 0xAB7C251C7701D336 0xCC40D20D b1207
		// Gets the current ingame hour, expressed without zeros. (09:34 will be represented as 9)
		static int GET_CLOCK_HOURS()
		{
			return invoke<int>(0xC82CF208C2B19199);
		} // 0xC82CF208C2B19199 0x7EF8316F b1207
		// Gets the current ingame clock minute.
		static int GET_CLOCK_MINUTES()
		{
			return invoke<int>(0x4E162231B823DBBF);
		} // 0x4E162231B823DBBF 0x94AAC486 b1207
		// Gets the current ingame clock second. Note that ingame clock seconds change really fast since a day in RDR is only 48 minutes in real life.
		static int GET_CLOCK_SECONDS()
		{
			return invoke<int>(0xB6101ABE62B5F080);
		} // 0xB6101ABE62B5F080 0x099C927E b1207
		static void SET_MILLISECONDS_PER_GAME_MINUTE_(int ms)
		{
			invoke<int>(0x04EEDB3848DACF68, ms);
		} // 0x04EEDB3848DACF68 undefined b1207
		// Base year is 1898.
		static int GET_SECONDS_SINCE_BASE_YEAR_()
		{
			return invoke<int>(0x78FD8BE812E436B2);
		} // 0x78FD8BE812E436B2 undefined b1207
		static void SET_CLOCK_DATE(int day, int month, int year)
		{
			invoke<int>(0x02AD3092562941E2, day, month, year);
		} // 0x02AD3092562941E2 0x96891C94 b1207
		// Gets the current day of the week.
		//
		// 0: Sunday
		// 1: Monday
		// 2: Tuesday
		// 3: Wednesday
		// 4: Thursday
		// 5: Friday
		// 6: Saturday
		static int GET_CLOCK_DAY_OF_WEEK()
		{
			return invoke<int>(0x4DD02D4C7FB30076);
		} // 0x4DD02D4C7FB30076 0x84E4A289 b1207
		static int GET_CLOCK_DAY_OF_MONTH()
		{
			return invoke<int>(0xDF2FD796C54480A5);
		} // 0xDF2FD796C54480A5 0xC7A5ACB7 b1207
		static int GET_CLOCK_MONTH()
		{
			return invoke<int>(0x2D44E8FC79EAB1AC);
		} // 0x2D44E8FC79EAB1AC 0x3C48A3D5 b1207
		static int GET_CLOCK_YEAR()
		{
			return invoke<int>(0xE136DCA28C4A48BA);
		} // 0xE136DCA28C4A48BA 0xB8BECF15 b1207
		static int GET_MILLISECONDS_PER_GAME_MINUTE()
		{
			return invoke<int>(0xE4CB8D126501EC52);
		} // 0xE4CB8D126501EC52 0x3B74095C b1207
		static void GET_POSIX_TIME(int* year, int* month, int* day, int* hour, int* minute, int* second)
		{
			invoke<int>(0x90338AD4A784E455, year, month, day, hour, minute, second);
		} // 0x90338AD4A784E455 0xE15A5281 b1207
		// Same as GET_POSIX_TIME except that it takes a single pointer to a struct.
		static void GET_POSIX_TIME_STRUCT_(Any* outTime)
		{
			invoke<int>(0x86A68E84E5884951, outTime);
		} // 0x86A68E84E5884951 undefined b1207
		static void ADD_TIME_TO_DATE_TIME_(Any* inDateTime, Any* timeToAdd, Any* outDateTime)
		{
			invoke<int>(0x28EEACE9B43D9597, inDateTime, timeToAdd, outDateTime);
		} // 0x28EEACE9B43D9597 undefined b1207
	}

	namespace COLLECTION
	{
		// Used in Script Function NET_COLLECTABLES_HANDLE_ITEM_ADDED
		// Returns collectableCategory Hash
		static Hash COLLECTABLE_GET_CATEGORY_(Hash collectableItem)
		{
			return invoke<Hash>(0x725D52F21A5E9EF6, collectableItem);
		} // 0x725D52F21A5E9EF6 undefined b1207
		static Hash COLLECTABLE_GET_SUBCATEGORY_(Hash collectableItem)
		{
			return invoke<Hash>(0x6052B4DE6657684F, collectableItem);
		} // 0x6052B4DE6657684F undefined b1207
		static Hash COLLECTABLE_GET_IPL_(Hash collectableItem)
		{
			return invoke<Hash>(0x922A79CD4A033B8B, collectableItem);
		} // 0x922A79CD4A033B8B undefined b1207
		static Vector3 COLLECTABLE_GET_PLACEMENT_LOCATION_(Hash collectableItem)
		{
			return invoke<Vector3>(0x1F1DD794908C2BFA, collectableItem);
		} // 0x1F1DD794908C2BFA undefined b1207
		static int COLLECTABLE_GET_NUM_FOUND_(Hash collectableItem)
		{
			return invoke<int>(0xF83D3DDA4D3C8169, collectableItem);
		} // 0xF83D3DDA4D3C8169 undefined b1207
		static int COLLECTABLE_GET_NUM_TURNED_IN_(Hash collectableItem)
		{
			return invoke<int>(0x9A03F22AD446EEAC, collectableItem);
		} // 0x9A03F22AD446EEAC undefined b1207
		static void COLLECTABLE_INCREMENT_NUM_FOUND_(Hash collectableItem, int amount)
		{
			invoke<int>(0x3EA62E56F386C997, collectableItem, amount);
		} // 0x3EA62E56F386C997 undefined b1207
		static void COLLECTABLE_INCREMENT_NUM_TURNED_IN_(Hash collectableItem, int amount)
		{
			invoke<int>(0x398FAB9C96A81924, collectableItem, amount);
		} // 0x398FAB9C96A81924 undefined b1207
		static int COLLECTABLE_CATEGORY_GET_NUM_COLLECTABLES_(Hash collectableCategory, Hash collectableSubcategory)
		{
			return invoke<int>(0x62CAB7DB62EAD434, collectableCategory, collectableSubcategory);
		} // 0x62CAB7DB62EAD434 undefined b1207
		static Hash COLLECTABLE_GET_COLLECTABLE_ITEM_HASH_(int index, Hash collectableCategory, Hash collectableSubcategory)
		{
			return invoke<Hash>(0x126CBEBBA46693CF, index, collectableCategory, collectableSubcategory);
		} // 0x126CBEBBA46693CF undefined b1207
		static int COLLECTABLE_CATEGORY_GET_NUM_FOUND_(Hash collectableCategory, Hash collectableSubcategory)
		{
			return invoke<int>(0x5461C821D00FE15A, collectableCategory, collectableSubcategory);
		} // 0x5461C821D00FE15A undefined b1207
		static int COLLECTABLE_CATEGORY_GET_NUM_TURNED_IN_(Hash collectableCategory, Hash collectableSubcategory)
		{
			return invoke<int>(0x3A65F4844913A047, collectableCategory, collectableSubcategory);
		} // 0x3A65F4844913A047 undefined b1207
		static int N0x33825A7388A6B9F6(Hash collectableCategory, int p1)
		{
			return invoke<int>(0x33825A7388A6B9F6, collectableCategory, p1);
		} // 0x33825A7388A6B9F6 undefined b1207
		// Returns p2 (index?) for 0xB9020EC89C07DF04
		static int N0x755901C7598B97BC(Hash collectableCategory, int p1)
		{
			return invoke<int>(0x755901C7598B97BC, collectableCategory, p1);
		} // 0x755901C7598B97BC undefined b1207
		// Accepts more hashes than 0xCC644BC1DD655269
		// Such as: CAROLINA_PARAKEETS, DINO_BONES, EGRET_FEATHERS, ...
		static Any N0xB9020EC89C07DF04(Hash collectableCategory, int p1, int index)
		{
			return invoke<Any>(0xB9020EC89C07DF04, collectableCategory, p1, index);
		} // 0xB9020EC89C07DF04 undefined b1207
		static BOOL N0xFC832B06127D8E99(Hash collectableCategory, int p1)
		{
			return invoke<BOOL>(0xFC832B06127D8E99, collectableCategory, p1);
		} // 0xFC832B06127D8E99 undefined b1207
		static void COLLECTABLE_CATEGORY_SET_HAS_RECEIVED_LIST(Any p0, Any p1, Any p2)
		{
			invoke<int>(0x0B6D275D2F242E17, p0, p1, p2);
		} // 0x0B6D275D2F242E17 undefined b1207
		// Params: collectableCategory = WEEKLY_COLLECTABLES
		static BOOL N0x6BAB7ACED1017204(Hash collectableCategory, int p1)
		{
			return invoke<BOOL>(0x6BAB7ACED1017204, collectableCategory, p1);
		} // 0x6BAB7ACED1017204 undefined b1207
		// Params: collectableCategory = WEEKLY_COLLECTABLES
		static BOOL N0x61BEFBA3CE7A3BC8(Hash collectableCategory, int p1)
		{
			return invoke<BOOL>(0x61BEFBA3CE7A3BC8, collectableCategory, p1);
		} // 0x61BEFBA3CE7A3BC8 undefined b1232
		static Any N0xC4AC39719C1BB559(Hash collectableCategory, Any p1)
		{
			return invoke<Any>(0xC4AC39719C1BB559, collectableCategory, p1);
		} // 0xC4AC39719C1BB559 undefined b1232
		static Any N0x93F2E7B5DB85657B(Any p0, Any p1)
		{
			return invoke<Any>(0x93F2E7B5DB85657B, p0, p1);
		} // 0x93F2E7B5DB85657B undefined b1207
		// collectableCategory: ANTIQUE_BOTTLES, BIRD_EGGS, ARROWHEADS, FAMILY_HEIRLOOMS, WILD_FLOWERS, COINS, LOST_JEWELRY_RINGS, LOST_JEWELRY_BRACELETS, LOST_JEWELRY_EARRINGS, LOST_JEWELRY_NECKLACES, TAROT_CARDS_CUPS, TAROT_CARDS_PENTACLES, TAROT_CARDS_SWORDS, TAROT_CARDS_WANDS, FOSSILS_COMMON, FOSSILS_UNCOMMON, FOSSILS_RARE
		static Hash COLLECTABLE_GET_CATEGORY_ITEM_SET_BUY_AWARD(Hash collectableCategory, Hash p1)
		{
			return invoke<Hash>(0xCC644BC1DD655269, collectableCategory, p1);
		} // 0xCC644BC1DD655269 undefined b1207
		// Params: collectableCategory = WEEKLY_COLLECTABLES
		static Hash N0x9ADEE485726025D4(Hash collectableCategory)
		{
			return invoke<Hash>(0x9ADEE485726025D4, collectableCategory);
		} // 0x9ADEE485726025D4 undefined b1207
		static Any N0xD1806FB3EDED6D11(Hash collectableCategory, int p1)
		{
			return invoke<Any>(0xD1806FB3EDED6D11, collectableCategory, p1);
		} // 0xD1806FB3EDED6D11 undefined b1232
		static Any N0x3FD91F1A148A0468(Hash collectableCategory, int p1)
		{
			return invoke<Any>(0x3FD91F1A148A0468, collectableCategory, p1);
		} // 0x3FD91F1A148A0468 undefined b1232
		static Any N0xC3CA424E1F12ED0C(Hash collectableCategory, int p1)
		{
			return invoke<Any>(0xC3CA424E1F12ED0C, collectableCategory, p1);
		} // 0xC3CA424E1F12ED0C undefined b1232
		static Hash COLLECTABLE_CATEGORY_GET_TOAST_TEXTURE_NAME_(Hash collectableCategory, Hash collectableSubcategory)
		{
			return invoke<Hash>(0xD52D20B0C76BB26D, collectableCategory, collectableSubcategory);
		} // 0xD52D20B0C76BB26D undefined b1207
		static Hash COLLECTABLE_CATEGORY_GET_TOAST_TEXTURE_DICTIONARY_(Hash collectableCategory, Hash collectableSubcategory)
		{
			return invoke<Hash>(0x13AAECDA43318BFE, collectableCategory, collectableSubcategory);
		} // 0x13AAECDA43318BFE undefined b1207
		static Any N0xD297F68928A58130(Hash collectableCategory, int p1)
		{
			return invoke<Any>(0xD297F68928A58130, collectableCategory, p1);
		} // 0xD297F68928A58130 undefined b1232
		static Any N0x775FA1FC87666847(Hash collectableCategory, int p1)
		{
			return invoke<Any>(0x775FA1FC87666847, collectableCategory, p1);
		} // 0x775FA1FC87666847 undefined b1232
		static Any N0xEC3959E9950BF56B(int p0)
		{
			return invoke<Any>(0xEC3959E9950BF56B, p0);
		} // 0xEC3959E9950BF56B undefined b1207
	}

	namespace COMPANION
	{
		static void N0xD730281E496621FB(Ped ped, Hash p1)
		{
			invoke<int>(0xD730281E496621FB, ped, p1);
		} // 0xD730281E496621FB undefined b1207
		static void N0xBF6583E926D13890(Any p0, Any p1)
		{
			invoke<int>(0xBF6583E926D13890, p0, p1);
		} // 0xBF6583E926D13890 undefined b1207
		static void N0x0A8FD91EDE7B328A(Any p0, Any p1)
		{
			invoke<int>(0x0A8FD91EDE7B328A, p0, p1);
		} // 0x0A8FD91EDE7B328A undefined b1207
		static void N0x991E3346D788F20F(Any p0, Any p1)
		{
			invoke<int>(0x991E3346D788F20F, p0, p1);
		} // 0x991E3346D788F20F undefined b1207
		static void N0xCE27824B5968B79A(Any p0, Any p1)
		{
			invoke<int>(0xCE27824B5968B79A, p0, p1);
		} // 0xCE27824B5968B79A undefined b1207
		static void N0xF06CBB8CCCA823C0(Any p0, Any p1)
		{
			invoke<int>(0xF06CBB8CCCA823C0, p0, p1);
		} // 0xF06CBB8CCCA823C0 undefined b1207
		static void N0x2917E634206B9E17(Ped ped, int p1)
		{
			invoke<int>(0x2917E634206B9E17, ped, p1);
		} // 0x2917E634206B9E17 undefined b1207
		static void N0xD428C3F92FC3F6F8(Ped ped, const char* p1)
		{
			invoke<int>(0xD428C3F92FC3F6F8, ped, p1);
		} // 0xD428C3F92FC3F6F8 undefined b1207
		// Used for Script Function NET_FETCH_CLIENT_ACTIVATE_COMAPNION_ANALYSIS: Hiding! Ped
		static void ADD_COMPANION_FLAG_(Ped ped, int p1)
		{
			invoke<int>(0xDEB369F6AD168C58, ped, p1);
		} // 0xDEB369F6AD168C58 undefined b1207
		static void REMOVE_COMPANION_FLAG_(Ped ped, int p1)
		{
			invoke<int>(0x1740E3DEE0AE4D27, ped, p1);
		} // 0x1740E3DEE0AE4D27 undefined b1207
		static void N0x0DE02DA3C0F66955(Ped ped, Hash p1)
		{
			invoke<int>(0x0DE02DA3C0F66955, ped, p1);
		} // 0x0DE02DA3C0F66955 undefined b1207
		// enum _0x18F77396
		static void SET_COMPANION_ACTIVITY_(int groupId, Hash activity)
		{
			invoke<int>(0x0F1CD8CA9E65D5F6, groupId, activity);
		} // 0x0F1CD8CA9E65D5F6 undefined b1207
		// enum _0x18F77396
		static Hash GET_COMPANION_ACTIVITY_(int groupId)
		{
			return invoke<Hash>(0xB7E0590C86E1711F, groupId);
		} // 0xB7E0590C86E1711F undefined b1207
		static void N0xA079FF7CFB9AC8BD(Any p0, Any p1)
		{
			invoke<int>(0xA079FF7CFB9AC8BD, p0, p1);
		} // 0xA079FF7CFB9AC8BD undefined b1207
		static void N0x61BDA07407754A5C(Any p0, Any p1, Any p2, Any p3)
		{
			invoke<int>(0x61BDA07407754A5C, p0, p1, p2, p3);
		} // 0x61BDA07407754A5C undefined b1207
		static void N0xD55A871E1CE3481B(Any p0, Any p1, Any p2, Any p3)
		{
			invoke<int>(0xD55A871E1CE3481B, p0, p1, p2, p3);
		} // 0xD55A871E1CE3481B undefined b1207
		static void N0x0C6A00DAE896614C(Any p0, Any p1)
		{
			invoke<int>(0x0C6A00DAE896614C, p0, p1);
		} // 0x0C6A00DAE896614C undefined b1207
		static void N0x8FB98B719AA0075A(Any p0, Any p1, Any p2, Any p3, Any p4)
		{
			invoke<int>(0x8FB98B719AA0075A, p0, p1, p2, p3, p4);
		} // 0x8FB98B719AA0075A undefined b1207
		static void N0x9C902084F48D2E6C(Any p0)
		{
			invoke<int>(0x9C902084F48D2E6C, p0);
		} // 0x9C902084F48D2E6C undefined b1207
		static void N0xD747979C053EFA7A(Any p0)
		{
			invoke<int>(0xD747979C053EFA7A, p0);
		} // 0xD747979C053EFA7A undefined b1207
		static void N0x3CAAD93FA5B9579A(Volume volume, int p1, int p2)
		{
			invoke<int>(0x3CAAD93FA5B9579A, volume, p1, p2);
		} // 0x3CAAD93FA5B9579A undefined b1207
		static void N0x7274F84B1501B523(Any p0)
		{
			invoke<int>(0x7274F84B1501B523, p0);
		} // 0x7274F84B1501B523 undefined b1207
		static Any N0x722FBE08EF5B87BD(Any p0, Any p1, Any p2, Any p3, Any p4)
		{
			return invoke<Any>(0x722FBE08EF5B87BD, p0, p1, p2, p3, p4);
		} // 0x722FBE08EF5B87BD undefined b1207
		static void ACTIVATE_COMPANION_ANALYSIS_(int groupId)
		{
			invoke<int>(0xCBD9EC60495C728C, groupId);
		} // 0xCBD9EC60495C728C undefined b1207
		static void DEACTIVATE_COMPANION_ANALYSIS_(int groupId)
		{
			invoke<int>(0x72B7F65F11FC8896, groupId);
		} // 0x72B7F65F11FC8896 undefined b1207
	}

	namespace COMPENDIUM
	{
		// Only used in R* SP Scripts, category = GANGS
		// _COMPENDIUM_GET_*
		static float N0x725D52F21A5E9E22(Hash category)
		{
			return invoke<float>(0x725D52F21A5E9E22, category);
		} // 0x725D52F21A5E9E22 undefined b1207
		static int COMPENDIUM_GET_NUM_OF_ENTRIES_IN_CATEGORY_(Hash category)
		{
			return invoke<int>(0x729D52F61A5A9E22, category);
		} // 0x729D52F61A5A9E22 undefined b1207
		// Only used in R* SP Scripts, category = GANGS
		// _COMPENDIUM_GET_NUM_OF_ENTRIES_IN_*
		static int N0x729D52461AEA9E22(Hash category)
		{
			return invoke<int>(0x729D52461AEA9E22, category);
		} // 0x729D52461AEA9E22 undefined b1207
		static Hash COMPENDIUM_GET_SHORT_DESCRIPTION_FROM_PED(Ped ped)
		{
			return invoke<Hash>(0x6C5E5D48E48B4C65, ped);
		} // 0x6C5E5D48E48B4C65 undefined b1207
		static Hash COMPENDIUM_GET_SUBCATEGORY_PED_IS_IN(Hash category, Ped ped)
		{
			return invoke<Hash>(0x9B657550DF55EC96, category, ped);
		} // 0x9B657550DF55EC96 undefined b1311
		static Hash COMPENDIUM_GET_SUBCATEGORY_HASH_FROM_ANIMAL_TYPE_(Hash category, Hash animalType)
		{
			return invoke<Hash>(0xCD278B6BFBDBDC22, category, animalType);
		} // 0xCD278B6BFBDBDC22 undefined b1355
		static int COMPENDIUM_GET_NUM_ENTRIES_IN_SUBCATEGORY(Hash category, Hash subcategory)
		{
			return invoke<int>(0xF58A0C0E086E8E36, category, subcategory);
		} // 0xF58A0C0E086E8E36 undefined b1311
		static int COMPENDIUM_GET_ENTRY_BY_INDEX_IN_SUBCATEGORY(Hash category, Hash subcategory, int count)
		{
			return invoke<int>(0x5CEB63B2E3D9895F, category, subcategory, count);
		} // 0x5CEB63B2E3D9895F undefined b1311
		static int COMPENDIUM_GET_ENTRY_BY_PED_INDEX(Hash category, Ped ped)
		{
			return invoke<int>(0x1CFA0219D8E1CF25, category, ped);
		} // 0x1CFA0219D8E1CF25 undefined b1311
		static int COMPENDIUM_GET_ENTRY_BY_STAT_ITEM(Hash category, Hash animalType)
		{
			return invoke<int>(0x66EC938394D76C85, category, animalType);
		} // 0x66EC938394D76C85 undefined b1355
		static Any COMPENDIUM_GET_SUBCATEGORY_TOAST_APP_ID(Hash category, Hash subcategory)
		{
			return invoke<Any>(0x2BF30D9D4D680112, category, subcategory);
		} // 0x2BF30D9D4D680112 undefined b1311
		static Hash COMPENDIUM_GET_MAP_DISCOVERABLE_FROM_STAT_ITEM(Hash animalStatItem, float x, float y, float z)
		{
			return invoke<Hash>(0x729D54121A5E9E20, animalStatItem, x, y, z);
		} // 0x729D54121A5E9E20 undefined b1207
		static void COMPENDIUM_ANIMAL_OBSERVED_BY_STAT_NAME(Hash animalType, BOOL disableCompendiumToast)
		{
			invoke<int>(0x725D52F26A5E9E10, animalType, disableCompendiumToast);
		} // 0x725D52F26A5E9E10 undefined b1207
		static BOOL COMPENDIUM_WAS_ANIMAL_OBSERVED(Ped ped)
		{
			return invoke<BOOL>(0x23B5E9C5160BC04F, ped);
		} // 0x23B5E9C5160BC04F undefined b1311
		static void COMPENDIUM_ANIMAL_SET_DISCOVERED(int compendiumEntry)
		{
			invoke<int>(0x67F35C7C9F2BDCFE, compendiumEntry);
		} // 0x67F35C7C9F2BDCFE undefined b1311
		static Any COMPENDIUM_GET_STUDY_AWARD_ID(Ped ped)
		{
			return invoke<Any>(0x9F678782720349E4, ped);
		} // 0x9F678782720349E4 undefined b1311
		static Any COMPENDIUM_ANIMAL_GET_SAMPLE_INVENTORY_ITEM(int compendiumEntry)
		{
			return invoke<Any>(0x4E4ACAE1C671A9DA, compendiumEntry);
		} // 0x4E4ACAE1C671A9DA undefined b1311
		static BOOL COMPENDIUM_ANIMAL_HAS_SAMPLE(int compendiumEntry)
		{
			return invoke<BOOL>(0x6FC24625E4FCAC27, compendiumEntry);
		} // 0x6FC24625E4FCAC27 undefined b1311
		static BOOL COMPENDIUM_ANIMAL_HAS_STAMP(int compendiumEntry)
		{
			return invoke<BOOL>(0xBCF569FC32FFF456, compendiumEntry);
		} // 0xBCF569FC32FFF456 undefined b1311
		static const char* COMPENDIUM_GET_SUBCATEGORY_SAMPLE_TOAST_TITLE(Hash category, Hash subcategory)
		{
			return invoke<const char*>(0x5E50C67EB60951E6, category, subcategory);
		} // 0x5E50C67EB60951E6 undefined b1311
		static const char* COMPENDIUM_GET_SUBCATEGORY_SAMPLE_TOAST_DESC_PROGRESS(Hash category, Hash subcategory)
		{
			return invoke<const char*>(0x82BFB5B367957699, category, subcategory);
		} // 0x82BFB5B367957699 undefined b1311
		static const char* COMPENDIUM_GET_SUBCATEGORY_SAMPLE_TOAST_DESC_COMPLETE(Hash category, Hash subcategory)
		{
			return invoke<const char*>(0x59D4D68CDB82427C, category, subcategory);
		} // 0x59D4D68CDB82427C undefined b1311
		static void COMPENDIUM_FISH_CAUGHT(Ped ped, Hash category)
		{
			invoke<int>(0x725D52F21A5E9E00, ped, category);
		} // 0x725D52F21A5E9E00 undefined b1207
		static int COMPENDIUM_FISH_GET_LURE_SUITABILITY_BY_STAT_ITEM(Hash animalType, Hash baitType)
		{
			return invoke<int>(0x725D52F21A5E9E81, animalType, baitType);
		} // 0x725D52F21A5E9E81 undefined b1207
		static void COMPENDIUM_GANG_CAMP_FOUND(Any p0, Any p1)
		{
			invoke<int>(0x725D52F21A5E9E03, p0, p1);
		} // 0x725D52F21A5E9E03 undefined b1207
		static void COMPENDIUM_GANG_AMBUSH_SURVIVED(Any p0)
		{
			invoke<int>(0x725D52F21A5E9E04, p0);
		} // 0x725D52F21A5E9E04 undefined b1207
		static void COMPENDIUM_GANG_ENCOUNTERED(Any p0)
		{
			invoke<int>(0x725D52F21A5E9E05, p0);
		} // 0x725D52F21A5E9E05 undefined b1207
		static void COMPENDIUM_GANG_BOUNTY_CAPTURED(Any p0)
		{
			invoke<int>(0x725D52F21A5E9E06, p0);
		} // 0x725D52F21A5E9E06 undefined b1207
		static void COMPENDIUM_GANG_MEMBER_KILLED(Any p0)
		{
			invoke<int>(0x725D52F21A5E9E07, p0);
		} // 0x725D52F21A5E9E07 undefined b1207
		static void COMPENDIUM_GANG_HIDEOUT_FOUND(Any p0, Any p1)
		{
			invoke<int>(0x725D52F21A5E9E08, p0, p1);
		} // 0x725D52F21A5E9E08 undefined b1207
		// herbType: https://alloc8or.re/rdr3/doc/enums/eHerbType.txt
		// Vector3: Player Location
		static void COMPENDIUM_HERB_PICKED(Hash herbType, float x, float y, float z)
		{
			invoke<int>(0x725D52F21A5E9E09, herbType, x, y, z);
		} // 0x725D52F21A5E9E09 undefined b1207
		static void COMPENDIUM_HORSE_BONDING(Ped ped, int bondingLevel)
		{
			invoke<int>(0x725D52F21A5E9E50, ped, bondingLevel);
		} // 0x725D52F21A5E9E50 undefined b1207
		// NET_PLAYER_HORSE_PROCESS_EVENT_HORSE_BREAKING
		static void COMPENDIUM_HORSE_WILD_BROKEN(Ped ped)
		{
			invoke<int>(0x725852D21A2E9E50, ped);
		} // 0x725852D21A2E9E50 undefined b1207
		// Only gets called if bSetObserved is true and animalType is matching
		static void COMPENDIUM_HORSE_OBSERVED(Ped ped, BOOL disableCompendiumToast)
		{
			invoke<int>(0x725D58F2125E5E50, ped, disableCompendiumToast);
		} // 0x725D58F2125E5E50 undefined b1207
	}

	namespace CRASHLOG
	{
		static void N0x0FD3ECF9D0C8655F(const char* p0)
		{
			invoke<int>(0x0FD3ECF9D0C8655F, p0);
		} // 0x0FD3ECF9D0C8655F undefined b1207
		static void N0xCA0BAC376C541978(const char* p0)
		{
			invoke<int>(0xCA0BAC376C541978, p0);
		} // 0xCA0BAC376C541978 undefined b1207
		static BOOL N0x3A66F1963B223F61(const char* p0)
		{
			return invoke<BOOL>(0x3A66F1963B223F61, p0);
		} // 0x3A66F1963B223F61 undefined b1207
		static BOOL N0x7C680FF55617F82F()
		{
			return invoke<BOOL>(0x7C680FF55617F82F);
		} // 0x7C680FF55617F82F undefined b1207
		static BOOL N0xD8E3D22AA4F0E0A5(const char* p0)
		{
			return invoke<BOOL>(0xD8E3D22AA4F0E0A5, p0);
		} // 0xD8E3D22AA4F0E0A5 undefined b1207
		static BOOL N0xA67F0B039D9CD513(BOOL p0)
		{
			return invoke<BOOL>(0xA67F0B039D9CD513, p0);
		} // 0xA67F0B039D9CD513 undefined b1207
		static BOOL N0xE72E234B30DA7B7A(int p0)
		{
			return invoke<BOOL>(0xE72E234B30DA7B7A, p0);
		} // 0xE72E234B30DA7B7A undefined b1207
		static BOOL N0x87F005C969EF1563(float p0)
		{
			return invoke<BOOL>(0x87F005C969EF1563, p0);
		} // 0x87F005C969EF1563 undefined b1207
		static BOOL N0x23CCAB8F40B9CBEE(float x, float y, float z)
		{
			return invoke<BOOL>(0x23CCAB8F40B9CBEE, x, y, z);
		} // 0x23CCAB8F40B9CBEE undefined b1207
		static BOOL N0xF0D545C1EEAD614A()
		{
			return invoke<BOOL>(0xF0D545C1EEAD614A);
		} // 0xF0D545C1EEAD614A undefined b1207
		static BOOL N0x33C1D63E55FA4284(const char* p0)
		{
			return invoke<BOOL>(0x33C1D63E55FA4284, p0);
		} // 0x33C1D63E55FA4284 undefined b1207
		static void N0x4E42CA5BCD45444A()
		{
			invoke<int>(0x4E42CA5BCD45444A);
		} // 0x4E42CA5BCD45444A undefined b1207
		// unused = true
		static void N0xDA05310EA94DC8C6(const char* p0, const char* p1)
		{
			invoke<int>(0xDA05310EA94DC8C6, p0, p1);
		} // 0xDA05310EA94DC8C6 undefined b1436
	}

	namespace CREW
	{
		static BOOL NETWORK_FIND_GAMERS_IN_CREW(int crewId)
		{
			return invoke<BOOL>(0xE532D6811B3A4D2A, crewId);
		} // 0xE532D6811B3A4D2A 0x7771AB83 b1207
		static BOOL NETWORK_CLAN_SERVICE_IS_VALID()
		{
			return invoke<BOOL>(0x579CCED0265D4896);
		} // 0x579CCED0265D4896 0xF5F4BD95 b1207
		static BOOL NETWORK_CLAN_PLAYER_IS_ACTIVE(Any* gamerHandle)
		{
			return invoke<BOOL>(0xB124B57F571D8F18, gamerHandle);
		} // 0xB124B57F571D8F18 0xAB8319A3 b1207
		static BOOL NETWORK_CLAN_PLAYER_GET_DESC(Any* clanDesc, int bufferSize, Any* gamerHandle)
		{
			return invoke<BOOL>(0xEEE6EACBE8874FBA, clanDesc, bufferSize, gamerHandle);
		} // 0xEEE6EACBE8874FBA 0x6EE4A282 b1207
		static int NETWORK_CLAN_GET_LOCAL_MEMBERSHIPS_COUNT()
		{
			return invoke<int>(0x1F471B79ACC90BEF);
		} // 0x1F471B79ACC90BEF 0x807B3450 b1207
		static BOOL NETWORK_CLAN_GET_MEMBERSHIP_DESC(Any* memberDesc, int p1)
		{
			return invoke<BOOL>(0x48DE78AF2C8885B8, memberDesc, p1);
		} // 0x48DE78AF2C8885B8 0x3369DD1F b1207
		static BOOL N0x58D378AF2C8765B7(Any p0)
		{
			return invoke<BOOL>(0x58D378AF2C8765B7, p0);
		} // 0x58D378AF2C8765B7 undefined b1207
		static BOOL NETWORK_CLAN_INVITE_PLAYER_(Any p0)
		{
			return invoke<BOOL>(0xC685B014CE3D988B, p0);
		} // 0xC685B014CE3D988B undefined b1207
		static BOOL NETWORK_ACCEPT_CLAN_INVITE_(int crewInviteIndex)
		{
			return invoke<BOOL>(0x8E2143144B8E188D, crewInviteIndex);
		} // 0x8E2143144B8E188D undefined b1207
		static BOOL NETWORK_CLAN_REQUEST_EMBLEM(Any p0)
		{
			return invoke<BOOL>(0x13518FF1C6B28938, p0);
		} // 0x13518FF1C6B28938 0x7963FA4D b1207
		static BOOL NETWORK_CLAN_IS_EMBLEM_READY(Any p0, Any* p1)
		{
			return invoke<BOOL>(0xA134777FF7F33331, p0, p1);
		} // 0xA134777FF7F33331 0x88B13CDC b1207
		static void NETWORK_CLAN_RELEASE_EMBLEM(Any p0)
		{
			invoke<int>(0x113E6E3E50E286B0, p0);
		} // 0x113E6E3E50E286B0 0xD6E3D5EA b1207
		static Any NETWORK_GET_PRIMARY_CLAN_DATA_CLEAR()
		{
			return invoke<Any>(0x9AA46BADAD0E27ED);
		} // 0x9AA46BADAD0E27ED 0xE22445DA b1207
		static BOOL NETWORK_GET_PRIMARY_CLAN_DATA_START(Any* p0, Any p1)
		{
			return invoke<BOOL>(0xCE86D8191B762107, p0, p1);
		} // 0xCE86D8191B762107 0x89DB0EC7 b1207
		static Any NETWORK_GET_PRIMARY_CLAN_DATA_PENDING()
		{
			return invoke<Any>(0xB5074DB804E28CE7);
		} // 0xB5074DB804E28CE7 0xA4EF02F3 b1207
		static Any NETWORK_GET_PRIMARY_CLAN_DATA_SUCCESS()
		{
			return invoke<Any>(0x5B4F04F19376A0BA);
		} // 0x5B4F04F19376A0BA 0x068A054E b1207
		static BOOL NETWORK_GET_PRIMARY_CLAN_DATA_NEW(Any* p0, Any* p1)
		{
			return invoke<BOOL>(0xC080FF658B2E41DA, p0, p1);
		} // 0xC080FF658B2E41DA 0x9B8631EB b1207
		static Any NETWORK_CLAN_SET_ACTIVE_(Any p0)
		{
			return invoke<Any>(0xC080FF658B2E51DA, p0);
		} // 0xC080FF658B2E51DA undefined b1207
	}

	namespace DATABINDING
	{
		static Any DATABINDING_GET_DATA_CONTAINER_FROM_PATH_(const char* p0)
		{
			return invoke<Any>(0x0C827D175F1292F2, p0);
		} // 0x0C827D175F1292F2 undefined b1207
		static Any DATABINDING_GET_DATA_CONTAINER_FROM_CHILD_INDEX_(Hash entryId, int p1)
		{
			return invoke<Any>(0x0C827D175F1292F3, entryId, p1);
		} // 0x0C827D175F1292F3 undefined b1207
		static Any N0xD7DB94AB78E8EBE4(const char* p0, Hash p1)
		{
			return invoke<Any>(0xD7DB94AB78E8EBE4, p0, p1);
		} // 0xD7DB94AB78E8EBE4 undefined b1207
		static Any DATABINDING_ADD_DATA_CONTAINER_FROM_PATH_(const char* p0, const char* p1)
		{
			return invoke<Any>(0x0C827D175F1292F4, p0, p1);
		} // 0x0C827D175F1292F4 undefined b1207
		static Any DATABINDING_ADD_DATA_CONTAINER_BY_HASH_(Any p0, Hash p1)
		{
			return invoke<Any>(0x98BB14345BB68257, p0, p1);
		} // 0x98BB14345BB68257 undefined b1207
		// Returns entryId Hash
		static Hash DATABINDING_ADD_DATA_CONTAINER_(Hash entryId, const char* p1)
		{
			return invoke<Hash>(0xEB4F9A3537EEABCD, entryId, p1);
		} // 0xEB4F9A3537EEABCD undefined b1207
		static Any DATABINDING_ADD_DATA_BOOL_FROM_PATH_(const char* p0, const char* p1, BOOL p2)
		{
			return invoke<Any>(0x37BB86A751148A6A, p0, p1, p2);
		} // 0x37BB86A751148A6A undefined b1207
		static Any DATABINDING_ADD_DATA_BOOL_BY_HASH_(Any p0, Hash p1, BOOL p2)
		{
			return invoke<Any>(0xBC95D3AE2ECA70D6, p0, p1, p2);
		} // 0xBC95D3AE2ECA70D6 undefined b1207
		static Any DATABINDING_ADD_DATA_BOOL_(Any p0, const char* p1, BOOL p2)
		{
			return invoke<Any>(0x58BAA5F635DA2FF4, p0, p1, p2);
		} // 0x58BAA5F635DA2FF4 undefined b1207
		static Any DATABINDING_ADD_DATA_INT_BY_HASH_(Any p0, Hash p1, int p2)
		{
			return invoke<Any>(0x267F9527F4350ADE, p0, p1, p2);
		} // 0x267F9527F4350ADE undefined b1207
		static Any DATABINDING_ADD_DATA_INT_(Any p0, const char* p1, Hash p2)
		{
			return invoke<Any>(0x307A3247C5457BDE, p0, p1, p2);
		} // 0x307A3247C5457BDE undefined b1207
		static Any DATABINDING_ADD_DATA_FLOAT_(Any p0, const char* p1, float p2)
		{
			return invoke<Any>(0x5154228273ADB9A6, p0, p1, p2);
		} // 0x5154228273ADB9A6 undefined b1207
		static Any DATABINDING_ADD_DATA_HASH_BY_HASH_(Any p0, Hash p1, Hash p2)
		{
			return invoke<Any>(0x8E173DFB041993C6, p0, p1, p2);
		} // 0x8E173DFB041993C6 undefined b1207
		static Any DATABINDING_ADD_DATA_HASH_(Any p0, const char* p1, Hash p2)
		{
			return invoke<Any>(0x8538F1205D60ECA6, p0, p1, p2);
		} // 0x8538F1205D60ECA6 undefined b1207
		static Any DATABINDING_ADD_DATA_STRING_FROM_PATH_(const char* p0, const char* p1, const char* p2)
		{
			return invoke<Any>(0xA381DE86EE170C4A, p0, p1, p2);
		} // 0xA381DE86EE170C4A undefined b1207
		static Any DATABINDING_ADD_DATA_STRING_BY_HASH_(Any p0, Hash p1, const char* p2)
		{
			return invoke<Any>(0xEAD09E76E22630C3, p0, p1, p2);
		} // 0xEAD09E76E22630C3 undefined b1207
		static Any DATABINDING_ADD_DATA_STRING_(Any p0, const char* p1, const char* p2)
		{
			return invoke<Any>(0x617FCA1C5652BBAD, p0, p1, p2);
		} // 0x617FCA1C5652BBAD undefined b1207
		static Any DATABINDING_ADD_DATA_GANG_ID_(Any p0, const char* p1, Any gangId)
		{
			return invoke<Any>(0x7D0F2014DB28DD00, p0, p1, gangId);
		} // 0x7D0F2014DB28DD00 undefined b1207
		static Any DATABINDING_ADD_DATA_POSSE_ID_(Any p0, const char* p1, Any posseId)
		{
			return invoke<Any>(0x7D0F2014DB28DD01, p0, p1, posseId);
		} // 0x7D0F2014DB28DD01 undefined b1207
		static Any N0x294AF5323F44B053(Any p0, const char* p1, Any p2)
		{
			return invoke<Any>(0x294AF5323F44B053, p0, p1, p2);
		} // 0x294AF5323F44B053 undefined b1207
		static Any DATABINDING_ADD_UI_ITEM_LIST_FROM_PATH_(const char* p0, const char* p1)
		{
			return invoke<Any>(0xDB5B9A474148F699, p0, p1);
		} // 0xDB5B9A474148F699 undefined b1207
		static Any DATABINDING_ADD_UI_ITEM_LIST_BY_HASH_(Any p0, Hash p1)
		{
			return invoke<Any>(0x3C7799283325181B, p0, p1);
		} // 0x3C7799283325181B undefined b1207
		static Any DATABINDING_ADD_UI_ITEM_LIST_(Any p0, const char* p1)
		{
			return invoke<Any>(0xFE74FA57E0CE6824, p0, p1);
		} // 0xFE74FA57E0CE6824 undefined b1207
		static void DATABINDING_INSERT_UI_ITEM_TO_LIST_FROM_CONTEXT_STRING_ALIAS_(Any p0, int index, const char* p2, Any p3)
		{
			invoke<int>(0x5859E970794D92F3, p0, index, p2, p3);
		} // 0x5859E970794D92F3 undefined b1207
		static void DATABINDING_INSERT_UI_ITEM_TO_LIST_FROM_CONTEXT_HASH_ALIAS_(Any p0, int index, Hash p2, Any p3)
		{
			invoke<int>(0xEE97A05C05F16E41, p0, index, p2, p3);
		} // 0xEE97A05C05F16E41 undefined b1207
		static void DATABINDING_INSERT_UI_ITEM_TO_LIST_FROM_PATH_STRING_ALIAS_(Any p0, Any p1, const char* p2, Any p3)
		{
			invoke<int>(0x5740774F608E4FC8, p0, p1, p2, p3);
		} // 0x5740774F608E4FC8 undefined b1207
		static void N0x6318FB3BE37E11B3(Hash entryId, int index)
		{
			invoke<int>(0x6318FB3BE37E11B3, entryId, index);
		} // 0x6318FB3BE37E11B3 undefined b1207
		static void DATABINDING_REMOVE_BINDING_ARRAY_ITEM_BY_DATA_CONTEXT_ID_(Any p0, Hash entryId)
		{
			invoke<int>(0xF68B1726EAF7B285, p0, entryId);
		} // 0xF68B1726EAF7B285 undefined b1207
		static void DATABINDING_CLEAR_BINDING_ARRAY_(Hash entryId)
		{
			invoke<int>(0xA1F15C1D03DF802D, entryId);
		} // 0xA1F15C1D03DF802D undefined b1207
		static Any DATABINDING_GET_ITEM_CONTEXT_BY_INDEX_(Any p0, int index)
		{
			return invoke<Any>(0xE96D7F9FEFCC105F, p0, index);
		} // 0xE96D7F9FEFCC105F undefined b1207
		static void DATABINDING_SET_TEMPLATED_UI_ITEM_LIST_SIZE_(Any p0, int p1)
		{
			invoke<int>(0xFE74FA57E0CE6825, p0, p1);
		} // 0xFE74FA57E0CE6825 undefined b1207
		static void DATABINDING_SET_TEMPLATED_UI_ITEM_HASH_ALIAS_(Any p0, int p1, Hash p2)
		{
			invoke<int>(0x0AE7138D0541F2DE, p0, p1, p2);
		} // 0x0AE7138D0541F2DE undefined b1207
		static Any N0xD48993A61938C64D(Any p0, const char* p1)
		{
			return invoke<Any>(0xD48993A61938C64D, p0, p1);
		} // 0xD48993A61938C64D undefined b1207
		static Any DATABINDING_ADD_HASH_ARRAY_(Any p0, const char* p1)
		{
			return invoke<Any>(0x52F5F08278EA5D75, p0, p1);
		} // 0x52F5F08278EA5D75 undefined b1207
		static Any DATABINDING_ADD_STRING_ARRAY_(Any p0, const char* p1)
		{
			return invoke<Any>(0x1B23E0627BDBFE85, p0, p1);
		} // 0x1B23E0627BDBFE85 undefined b1207
		static void N0x1919D59E60FD516E(Any p0, int p1, int p2)
		{
			invoke<int>(0x1919D59E60FD516E, p0, p1, p2);
		} // 0x1919D59E60FD516E undefined b1207
		static void N0x7FC60C94C83C5CD7(Any p0, Hash p1, int p2)
		{
			invoke<int>(0x7FC60C94C83C5CD7, p0, p1, p2);
		} // 0x7FC60C94C83C5CD7 undefined b1207
		static void N0xC900CEC8A172375B(Any p0, const char* p1, int p2)
		{
			invoke<int>(0xC900CEC8A172375B, p0, p1, p2);
		} // 0xC900CEC8A172375B undefined b1207
		static Any N0x02B21B6BEEDD83CC(Hash entryId, int p1)
		{
			return invoke<Any>(0x02B21B6BEEDD83CC, entryId, p1);
		} // 0x02B21B6BEEDD83CC undefined b1207
		static Any N0xF47E33F8D2523825(Any p0, int p1)
		{
			return invoke<Any>(0xF47E33F8D2523825, p0, p1);
		} // 0xF47E33F8D2523825 undefined b1207
		static void N0x3BF0767CF33FCC88(Hash entryId)
		{
			invoke<int>(0x3BF0767CF33FCC88, entryId);
		} // 0x3BF0767CF33FCC88 undefined b1207
		static Any DATABINDING_GET_ARRAY_COUNT_(Hash entryId)
		{
			return invoke<Any>(0xD23F5DE04FE717E2, entryId);
		} // 0xD23F5DE04FE717E2 undefined b1207
		static void DATABINDING_WRITE_DATA_BOOL_(Any p0, BOOL p1)
		{
			invoke<int>(0xAB888B4B91046770, p0, p1);
		} // 0xAB888B4B91046770 undefined b1207
		static void DATABINDING_WRITE_DATA_BOOL_FROM_PARENT_(Any p0, const char* p1, BOOL p2)
		{
			invoke<int>(0xBDFE546E4C2D0E21, p0, p1, p2);
		} // 0xBDFE546E4C2D0E21 undefined b1207
		// _DATABINDING_WRITE_DATA_*
		static void N0xBFC83DA249BEFCC9(Any p0, Hash p1, Any p2)
		{
			invoke<int>(0xBFC83DA249BEFCC9, p0, p1, p2);
		} // 0xBFC83DA249BEFCC9 undefined b1207
		static void DATABINDING_WRITE_DATA_INT_(Any p0, int p1)
		{
			invoke<int>(0x335C3F6B3766B8D9, p0, p1);
		} // 0x335C3F6B3766B8D9 undefined b1207
		static void DATABINDING_WRITE_DATA_INT_FROM_PARENT_(Any p0, const char* p1, int p2)
		{
			invoke<int>(0x9EFA98238BA08FC4, p0, p1, p2);
		} // 0x9EFA98238BA08FC4 undefined b1207
		static void DATABINDING_WRITE_DATA_INT_FROM_PARENT_BY_HASH_(Any p0, Hash p1, Any p2)
		{
			invoke<int>(0x9D6E10A41D6ED6EC, p0, p1, p2);
		} // 0x9D6E10A41D6ED6EC undefined b1207
		static void DATABINDING_WRITE_DATA_FLOAT_(Any p0, float p1)
		{
			invoke<int>(0xDF504BECEB15DA93, p0, p1);
		} // 0xDF504BECEB15DA93 undefined b1207
		// _DATABINDING_WRITE_DATA_*
		static void N0x05AC9E1E02975AFB(Any p0, const char* p1, float p2)
		{
			invoke<int>(0x05AC9E1E02975AFB, p0, p1, p2);
		} // 0x05AC9E1E02975AFB undefined b1207
		static void DATABINDING_WRITE_DATA_HASH_STRING_(Any p0, Hash p1)
		{
			invoke<int>(0xACDEF586BD71B1FD, p0, p1);
		} // 0xACDEF586BD71B1FD undefined b1207
		static void DATABINDING_WRITE_DATA_HASH_STRING_FROM_PARENT_(Any p0, const char* p1, Hash p2)
		{
			invoke<int>(0x0971F04E1EAA7AE8, p0, p1, p2);
		} // 0x0971F04E1EAA7AE8 undefined b1207
		static void DATABINDING_WRITE_DATA_HASH_STRING_FROM_PARENT_BY_HASH_(Any p0, Hash p1, Any p2)
		{
			invoke<int>(0x20209529689E0953, p0, p1, p2);
		} // 0x20209529689E0953 undefined b1207
		static void DATABINDING_WRITE_DATA_STRING_(Any p0, const char* p1)
		{
			invoke<int>(0xE1BD342F2872AEE9, p0, p1);
		} // 0xE1BD342F2872AEE9 undefined b1207
		static void DATABINDING_WRITE_STRING_FROM_PARENT(Any p0, const char* p1, const char* p2)
		{
			invoke<int>(0x4FF713B2F17A391E, p0, p1, p2);
		} // 0x4FF713B2F17A391E undefined b1207
		static void DATABINDING_WRITE_STRING_FROM_HASH_(Any p0, Hash p1, const char* p2)
		{
			invoke<int>(0xA3BD6FF95E713EE5, p0, p1, p2);
		} // 0xA3BD6FF95E713EE5 undefined b1207
		static void DATABINDING_WRITE_DATA_GANG_ID_(Any p0, const char* p1, Any gangId)
		{
			invoke<int>(0xC70041408E16BE2D, p0, p1, gangId);
		} // 0xC70041408E16BE2D undefined b1207
		static void DATABINDING_WRITE_DATA_POSSE_ID_(Any p0, const char* p1, Any posseId)
		{
			invoke<int>(0xC70041408E16BE2E, p0, p1, posseId);
		} // 0xC70041408E16BE2E undefined b1207
		static void N0x422179C7F6AD9304(Any p0, Any* gamerHandle)
		{
			invoke<int>(0x422179C7F6AD9304, p0, gamerHandle);
		} // 0x422179C7F6AD9304 undefined b1207
		static Any DATABINDING_READ_DATA_BOOL_(Any p0)
		{
			return invoke<Any>(0x5EEFBD4B6D7CD6EB, p0);
		} // 0x5EEFBD4B6D7CD6EB undefined b1207
		static Any DATABINDING_READ_DATA_BOOL_FROM_PARENT_(Any p0, const char* p1)
		{
			return invoke<Any>(0xA8EDE09FE07BD77F, p0, p1);
		} // 0xA8EDE09FE07BD77F undefined b1207
		static Any DATABINDING_READ_DATA_BOOL_FROM_PARENT_BY_HASH_(Any p0, Hash p1)
		{
			return invoke<Any>(0x4CDC3FDDFAE07EB3, p0, p1);
		} // 0x4CDC3FDDFAE07EB3 undefined b1207
		static int DATABINDING_READ_INT(Any p0)
		{
			return invoke<int>(0x570784D782597512, p0);
		} // 0x570784D782597512 undefined b1207
		static Any DATABINDING_READ_DATA_INT_FROM_PARENT_(Any p0, const char* p1)
		{
			return invoke<Any>(0xFFC566A4801F6B40, p0, p1);
		} // 0xFFC566A4801F6B40 undefined b1207
		static Any DATABINDING_READ_DATA_INT_FROM_PARENT_BY_HASH_(Any p0, Hash p1)
		{
			return invoke<Any>(0xB5F668B648EC0970, p0, p1);
		} // 0xB5F668B648EC0970 undefined b1207
		static float DATABINDING_READ_FLOAT_(Hash entryId)
		{
			return invoke<float>(0x5FE444EB67C70AD4, entryId);
		} // 0x5FE444EB67C70AD4 undefined b1207
		static Hash DATABINDING_READ_HASH_(Hash entryId)
		{
			return invoke<Hash>(0x81D7183E7A8ECA72, entryId);
		} // 0x81D7183E7A8ECA72 undefined b1207
		static Any DATABINDING_READ_DATA_HASH_STRING_FROM_PARENT_(Any p0, const char* p1)
		{
			return invoke<Any>(0x9B535990B01B62DE, p0, p1);
		} // 0x9B535990B01B62DE undefined b1207
		static Any DATABINDING_READ_DATA_HASH_STRING_FROM_PARENT_BY_HASH_(Any p0, Hash p1)
		{
			return invoke<Any>(0x1F43BC25A119B252, p0, p1);
		} // 0x1F43BC25A119B252 undefined b1207
		static Any DATABINDING_READ_DATA_STRING_(Any p0)
		{
			return invoke<Any>(0x3D290B5FFA7C5151, p0);
		} // 0x3D290B5FFA7C5151 undefined b1207
		static Any DATABINDING_READ_DATA_STRING_FROM_PARENT_(Any p0, const char* p1)
		{
			return invoke<Any>(0x6323AD277C4A2AFB, p0, p1);
		} // 0x6323AD277C4A2AFB undefined b1207
		static Any N0x6329C34BEE5BFF4B(Any p0, Hash p1)
		{
			return invoke<Any>(0x6329C34BEE5BFF4B, p0, p1);
		} // 0x6329C34BEE5BFF4B undefined b1207
		static Any N0xE6AAB897120492D6(Any p0, const char* p1)
		{
			return invoke<Any>(0xE6AAB897120492D6, p0, p1);
		} // 0xE6AAB897120492D6 undefined b1207
		static void N0xE6AAB897120492D7(Any p0, const char* p1, Any p2)
		{
			invoke<int>(0xE6AAB897120492D7, p0, p1, p2);
		} // 0xE6AAB897120492D7 undefined b1207
		static void N0xB138CA787F3DD858(Any p0, const char* p1, Any p2)
		{
			invoke<int>(0xB138CA787F3DD858, p0, p1, p2);
		} // 0xB138CA787F3DD858 undefined b1207
		static BOOL DATABINDING_IS_ENTRY_VALID(Hash entryId)
		{
			return invoke<BOOL>(0x1E7130793AAAAB8D, entryId);
		} // 0x1E7130793AAAAB8D undefined b1207
		static void DATABINDING_REMOVE_DATA_ENTRY_(Hash entryId)
		{
			invoke<int>(0x0AE9938D0541F2DA, entryId);
		} // 0x0AE9938D0541F2DA undefined b1207
		static void VIRTUAL_COLLECTION_SET_SIZE_(Any p0, int size)
		{
			invoke<int>(0x9DCE9B01A93B58BC, p0, size);
		} // 0x9DCE9B01A93B58BC undefined b1207
		static void VIRTUAL_COLLECTION_SET_INTEREST_INDEX_(Any p0, int interestIndex)
		{
			invoke<int>(0x49A8447533308BCF, p0, interestIndex);
		} // 0x49A8447533308BCF undefined b1207
		static void VIRTUAL_COLLECTION_ITEM_ADD_(Any p0, int index, Hash p2, Any p3)
		{
			invoke<int>(0x6DCBF187221CF73D, p0, index, p2, p3);
		} // 0x6DCBF187221CF73D undefined b1207
		static void VIRTUAL_COLLECTION_RESET_(Any p0)
		{
			invoke<int>(0x09D95666ED2B5F60, p0);
		} // 0x09D95666ED2B5F60 undefined b1207
		static Any VIRTUAL_COLLECTION_EXISTS_(Any p0)
		{
			return invoke<Any>(0x37963B56755BFB35, p0);
		} // 0x37963B56755BFB35 undefined b1207
	}

	namespace DATAFILE
	{
		// Adds the given request ID to the watch list.
		static void DATAFILE_WATCH_REQUEST_ID(int id)
		{
			invoke<int>(0xA5834834CA8FD7FC, id);
		} // 0xA5834834CA8FD7FC 0x621388FF b1207
		static BOOL DATAFILE_HAS_LOADED_FILE_DATA(Any p0)
		{
			return invoke<BOOL>(0x17279C820464CEE0, p0);
		} // 0x17279C820464CEE0 0x36FB8B3F b1207
		static BOOL DATAFILE_HAS_VALID_FILE_DATA(Any p0)
		{
			return invoke<BOOL>(0xE60100389E50EADE, p0);
		} // 0xE60100389E50EADE 0x2A9411DA b1207
		static BOOL DATAFILE_SELECT_ACTIVE_FILE(Any p0, Any p1)
		{
			return invoke<BOOL>(0x46102A0989AD80B5, p0, p1);
		} // 0x46102A0989AD80B5 0xB41064A4 b1207
		static BOOL DATAFILE_DELETE_REQUESTED_FILE(Any p0)
		{
			return invoke<BOOL>(0x604B8ED1A482F9DF, p0);
		} // 0x604B8ED1A482F9DF 0x9DB63CFF b1207
		static Any UGC2_SET_PLAYER_DATA(Any p0, Any p1, Any p2, Any p3)
		{
			return invoke<Any>(0xE79C70E77E0973C7, p0, p1, p2, p3);
		} // 0xE79C70E77E0973C7 undefined b1207
		// Reloops value returned by UGC_QUERY_GET_CONTENT_NUM
		static Any DATAFILE_UGC_SELECT_DATA(Any ugcRequestId, int index, Any p2)
		{
			return invoke<Any>(0x790EC421078F5C4E, ugcRequestId, index, p2);
		} // 0x790EC421078F5C4E undefined b1207
		static void DATAFILE_CREATE(int index)
		{
			invoke<int>(0x56B7291FB953DD51, index);
		} // 0x56B7291FB953DD51 0x95F8A221 b1207
		static void DATAFILE_DELETE(int index)
		{
			invoke<int>(0x9FB90EEDEA9F2D5C, index);
		} // 0x9FB90EEDEA9F2D5C 0xDEF31B0A b1207
		static Any* DATAFILE_GET_FILE_DICT(int index)
		{
			return invoke<Any*>(0xBBD8CF823CAE557C, index);
		} // 0xBBD8CF823CAE557C 0x86DDF9C2 b1207
		static BOOL DATADICT_IS_DICT_VALID(Any* fileDict)
		{
			return invoke<BOOL>(0x4607D57C5F7D332A, fileDict);
		} // 0x4607D57C5F7D332A undefined b1207
		static BOOL DATADICT_IS_ARRAY_VALID(Any* fileDict)
		{
			return invoke<BOOL>(0xB04B69CF277D15C0, fileDict);
		} // 0xB04B69CF277D15C0 undefined b1207
		static void DATADICT_SET_INT(Any* objectData, const char* key, int value)
		{
			invoke<int>(0x26FDF5E99AA2F3E9, objectData, key, value);
		} // 0x26FDF5E99AA2F3E9 0xEFCF554A b1207
		static BOOL DATADICT_GET_BOOL(Any* objectData, const char* key)
		{
			return invoke<BOOL>(0x175E915A486EE548, objectData, key);
		} // 0x175E915A486EE548 0x8876C872 b1207
		static int DATADICT_GET_INT(Any* objectData, const char* key)
		{
			return invoke<int>(0x9D896A3B87D96E2B, objectData, key);
		} // 0x9D896A3B87D96E2B 0xA6C68693 b1207
		static float DATADICT_GET_FLOAT(Any* objectData, const char* key)
		{
			return invoke<float>(0x814643ECA258ADF5, objectData, key);
		} // 0x814643ECA258ADF5 0xA92C1AF4 b1207
		static const char* DATADICT_GET_STRING(Any* objectData, const char* key)
		{
			return invoke<const char*>(0xE37B38C0B4E95DFA, objectData, key);
		} // 0xE37B38C0B4E95DFA 0x942160EC b1207
		static Vector3 DATADICT_GET_VECTOR(Any* objectData, const char* key)
		{
			return invoke<Vector3>(0xE459C941431E0FFA, objectData, key);
		} // 0xE459C941431E0FFA 0xE84A127A b1207
		static Any* DATADICT_GET_DICT(Any* objectData, const char* key)
		{
			return invoke<Any*>(0x4D7A30130F46AC9C, objectData, key);
		} // 0x4D7A30130F46AC9C 0xC9C13D8D b1207
		static Any* DATADICT_GET_ARRAY(Any* objectData, const char* key)
		{
			return invoke<Any*>(0x1B5447CF18544B18, objectData, key);
		} // 0x1B5447CF18544B18 0x1F2F7D00 b1207
		// Types:
		// 1 = Boolean
		// 2 = Integer
		// 3 = Float
		// 4 = String
		// 5 = Vector3
		// 6 = Object
		// 7 = Array
		static int DATADICT_GET_TYPE(Any* objectData, const char* key)
		{
			return invoke<int>(0x92E11E3CA4C7CDF0, objectData, key);
		} // 0x92E11E3CA4C7CDF0 0x2678342A b1207
		static void N0xBC0DF006A4952C68(Any p0, Any p1, Any p2)
		{
			invoke<int>(0xBC0DF006A4952C68, p0, p1, p2);
		} // 0xBC0DF006A4952C68 undefined b1207
		static void N0x9F130129EBC31B34(Any p0, Any p1, Any p2)
		{
			invoke<int>(0x9F130129EBC31B34, p0, p1, p2);
		} // 0x9F130129EBC31B34 undefined b1207
		static void N0x277251C161B4C3F4(Any p0, Any p1, Any p2)
		{
			invoke<int>(0x277251C161B4C3F4, p0, p1, p2);
		} // 0x277251C161B4C3F4 undefined b1207
		static void N0x1C65CC931C0F946F(Any p0, Any p1, Any p2)
		{
			invoke<int>(0x1C65CC931C0F946F, p0, p1, p2);
		} // 0x1C65CC931C0F946F undefined b1207
		static void N0x7681B677400C7071(Any p0, Any p1, Any p2, Any p3, Any p4)
		{
			invoke<int>(0x7681B677400C7071, p0, p1, p2, p3, p4);
		} // 0x7681B677400C7071 undefined b1207
		static BOOL DATAARRAY_GET_BOOL(Any* arrayData, int arrayIndex)
		{
			return invoke<BOOL>(0xAB1231D2DE52F2D3, arrayData, arrayIndex);
		} // 0xAB1231D2DE52F2D3 0xA2E5F921 b1207
		static int DATAARRAY_GET_INT(Any* arrayData, int arrayIndex)
		{
			return invoke<int>(0x96DEA500B6EBBE53, arrayData, arrayIndex);
		} // 0x96DEA500B6EBBE53 0xBB120CFC b1207
		static float DATAARRAY_GET_FLOAT(Any* arrayData, int arrayIndex)
		{
			return invoke<float>(0xA9D003CF419CB81E, arrayData, arrayIndex);
		} // 0xA9D003CF419CB81E 0x08AD2CC2 b1207
		static const char* DATAARRAY_GET_STRING(Any* arrayData, int arrayIndex)
		{
			return invoke<const char*>(0xB6790A8FF80F889F, arrayData, arrayIndex);
		} // 0xB6790A8FF80F889F 0x93F985A6 b1207
		static Vector3 DATAARRAY_GET_VECTOR(Any* arrayData, int arrayIndex)
		{
			return invoke<Vector3>(0x850DA2750DA14E9A, arrayData, arrayIndex);
		} // 0x850DA2750DA14E9A 0x80E3DA55 b1207
		static Any* DATAARRAY_GET_DICT(Any* arrayData, int arrayIndex)
		{
			return invoke<Any*>(0xA010655985853485, arrayData, arrayIndex);
		} // 0xA010655985853485 0xECE81278 b1207
		static int DATAARRAY_GET_COUNT(Any* arrayData)
		{
			return invoke<int>(0x6A885BF69239E539, arrayData);
		} // 0x6A885BF69239E539 0xA8A21766 b1207
		// Types:
		// 1 = Boolean
		// 2 = Integer
		// 3 = Float
		// 4 = String
		// 5 = Vector3
		// 6 = Object
		// 7 = Array
		static int DATAARRAY_GET_TYPE(Any* arrayData, int arrayIndex)
		{
			return invoke<int>(0x151DAFE6B3B9888F, arrayData, arrayIndex);
		} // 0x151DAFE6B3B9888F 0xFA2402C8 b1207
		static Any N0x4F9E3ED7617123AC(Any p0)
		{
			return invoke<Any>(0x4F9E3ED7617123AC, p0);
		} // 0x4F9E3ED7617123AC undefined b1207
		static Any N0xCA56DD6AB7A39F64(Any p0)
		{
			return invoke<Any>(0xCA56DD6AB7A39F64, p0);
		} // 0xCA56DD6AB7A39F64 undefined b1207
		// LOAD_PARSEDDATA_FILE_FAILSAFE_HASH
		// Returns parseddata script fileHandle
		static int PARSEDDATA_LOAD_FILE_HASH_(Hash p0)
		{
			return invoke<int>(0xD97D8D905F1562F2, p0);
		} // 0xD97D8D905F1562F2 undefined b1207
		static void PARSEDDATA_UNLOAD_FILE_(int fileHandle)
		{
			invoke<int>(0x129567F0C05F81B9, fileHandle);
		} // 0x129567F0C05F81B9 undefined b1207
		static BOOL PARSEDDATA_IS_FILE_VALID(int fileHandle)
		{
			return invoke<BOOL>(0x7907969497EA92F5, fileHandle);
		} // 0x7907969497EA92F5 undefined b1207
		static BOOL PARSEDDATA_IS_FILE_LOADED(int fileHandle)
		{
			return invoke<BOOL>(0x603AC35FD4602C76, fileHandle);
		} // 0x603AC35FD4602C76 undefined b1207
		// nullsub, doesn't do anything
		static void N0x3168BA5D6DECE323()
		{
			invoke<int>(0x3168BA5D6DECE323);
		} // 0x3168BA5D6DECE323 undefined b1207
		static Any PARSEDDATA_REGISTER_QUERY_(Any p0, Any p1, Any p2)
		{
			return invoke<Any>(0xAE156A747C39A741, p0, p1, p2);
		} // 0xAE156A747C39A741 undefined b1207
		// Old name: _DATAFILE_GET_DATA_NODE_INDEX
		static BOOL PARSEDDATA_RQ_FILLOUT_NODE(int* p0, Any* p1)
		{
			return invoke<BOOL>(0x83C3ED532B6E5D07, p0, p1);
		} // 0x83C3ED532B6E5D07 undefined b1207
		static Any PARSEDDATA_RQ_GET_NUM_NODES_(Any p0)
		{
			return invoke<Any>(0xDF01B1F7A886B42D, p0);
		} // 0xDF01B1F7A886B42D undefined b1207
		static int N0xE13634BB6BAF0734(int p0, int p1)
		{
			return invoke<int>(0xE13634BB6BAF0734, p0, p1);
		} // 0xE13634BB6BAF0734 undefined b1207
		static Any PARSEDDATA_GET_NUM_CHILDREN_(Any p0, Any p1)
		{
			return invoke<Any>(0x6BEB168D5195E7AB, p0, p1);
		} // 0x6BEB168D5195E7AB undefined b1207
		// Old name: _DATAFILE_GET_HASH
		static BOOL PARSEDDATA_RQ_FILLOUT_HASH(Hash* p0, Any* p1)
		{
			return invoke<BOOL>(0xFBFF3FF2F5E80C0B, p0, p1);
		} // 0xFBFF3FF2F5E80C0B undefined b1207
		// Old name: _DATAFILE_GET_STRING
		static BOOL PARSEDDATA_RQ_FILLOUT_STRING_63_(char* p0, Any* p1)
		{
			return invoke<BOOL>(0x08EAF8E9F2EB7B2E, p0, p1);
		} // 0x08EAF8E9F2EB7B2E undefined b1207
		static BOOL PARSEDDATA_RQ_FILLOUT_STRING_127(char* p0, Any* p1)
		{
			return invoke<BOOL>(0x951327435DC5164B, p0, p1);
		} // 0x951327435DC5164B undefined b1232
		// Old name: _DATAFILE_GET_VECTOR
		static BOOL PARSEDDATA_RQ_FILLOUT_VECTOR_(Vector3* p0, Any* p1)
		{
			return invoke<BOOL>(0x06FBF89B12DA279C, p0, p1);
		} // 0x06FBF89B12DA279C undefined b1207
		// Old name: _DATAFILE_GET_FLOAT
		static BOOL PARSEDDATA_RQ_FILLOUT_FLOAT_(float* p0, Any* p1)
		{
			return invoke<BOOL>(0x7F034FC3E891B57A, p0, p1);
		} // 0x7F034FC3E891B57A undefined b1207
		// Old name: _DATAFILE_GET_INT
		static BOOL PARSEDDATA_RQ_FILLOUT_INT_(int* p0, Any* p1)
		{
			return invoke<BOOL>(0xEF44ACC657352A35, p0, p1);
		} // 0xEF44ACC657352A35 undefined b1207
		// Old name: _DATAFILE_GET_BOOL
		static BOOL PARSEDDATA_RQ_FILLOUT_BOOL_(BOOL* p0, Any* p1)
		{
			return invoke<BOOL>(0x0D9138F3F8261DF7, p0, p1);
		} // 0x0D9138F3F8261DF7 undefined b1207
		// Opens file.
		static void PARSEDDATA_GET_FILE_(Any* p0)
		{
			invoke<int>(0x91DED5DD64BB2691, p0);
		} // 0x91DED5DD64BB2691 undefined b1207
		// Returns false when there are no entries.
		static BOOL PARSEDDATA_GET_ENTRIES_(Any* p0)
		{
			return invoke<BOOL>(0xED4413CEE1BF142C, p0);
		} // 0xED4413CEE1BF142C undefined b1207
		static BOOL PARSEDDATA_GET_FLOAT_(Any* p0, Any* p1, Hash p2)
		{
			return invoke<BOOL>(0xB2B42607F7867576, p0, p1, p2);
		} // 0xB2B42607F7867576 undefined b1207
		static BOOL PARSEDDATA_GET_INT_(Any* p0, Any* p1, Hash p2)
		{
			return invoke<BOOL>(0x52FC26D2D2FC2987, p0, p1, p2);
		} // 0x52FC26D2D2FC2987 undefined b1207
		static BOOL PARSEDDATA_GET_SECTION_(Any* p0, Any* p1, Hash section)
		{
			return invoke<BOOL>(0x44B3A36933AC009C, p0, p1, section);
		} // 0x44B3A36933AC009C undefined b1207
		static BOOL PARSEDDATA_GET_BOOL_(BOOL* p0, Any* p1, Hash p2)
		{
			return invoke<BOOL>(0xA63CD20F19B961AB, p0, p1, p2);
		} // 0xA63CD20F19B961AB undefined b1207
	}

	namespace DEBUG
	{
		// nullsub, doesn't do anything
		static Any N0xACF9CB705BEFA8CB()
		{
			return invoke<Any>(0xACF9CB705BEFA8CB);
		} // 0xACF9CB705BEFA8CB undefined b1207
		// nullsub, doesn't do anything
		static Any N0xA8D970D8A72640A6()
		{
			return invoke<Any>(0xA8D970D8A72640A6);
		} // 0xA8D970D8A72640A6 undefined b1207
		// Return example: 1207.69_dev_pc, 1436.28_dev_live_tu
		//
		// Old name: _GET_GAME_BUILD_STRING
		static const char* GET_GAME_VERSION_NAME()
		{
			return invoke<const char*>(0x05A5F662AD35C573);
		} // 0x05A5F662AD35C573 undefined b1207
	}

	namespace DECORATOR
	{
		// This function sets metadata of type bool to specified entity.
		//
		static BOOL DECOR_SET_BOOL(Entity entity, const char* propertyName, BOOL value)
		{
			return invoke<BOOL>(0xFE26E4609B1C3772, entity, propertyName, value);
		} // 0xFE26E4609B1C3772 0x8E101F5C b1207
		static BOOL DECOR_SET_FLOAT(Entity entity, const char* propertyName, float value)
		{
			return invoke<BOOL>(0x238F8B0C1C7FE834, entity, propertyName, value);
		} // 0x238F8B0C1C7FE834 0xBC7BD5CB b1207
		// Sets property to int.
		static BOOL DECOR_SET_INT(Entity entity, const char* propertyName, int value)
		{
			return invoke<BOOL>(0xE88F4D7F52A6090F, entity, propertyName, value);
		} // 0xE88F4D7F52A6090F 0xDB718B21 b1207
		static BOOL DECOR_SET_UINT8_(Entity entity, const char* propertyName, int value)
		{
			return invoke<BOOL>(0x4BDC83150D43772D, entity, propertyName, value);
		} // 0x4BDC83150D43772D undefined b1207
		static BOOL DECOR_SET_STRING(Entity entity, const char* propertyName, const char* value)
		{
			return invoke<BOOL>(0x0671C1A3FF7AFDFC, entity, propertyName, value);
		} // 0x0671C1A3FF7AFDFC undefined b1207
		static BOOL DECOR_GET_BOOL(Entity entity, const char* propertyName)
		{
			return invoke<BOOL>(0xDEF3F1B071ABB197, entity, propertyName);
		} // 0xDEF3F1B071ABB197 0xDBCE51E0 b1207
		static float DECOR_GET_FLOAT(Entity entity, const char* propertyName)
		{
			return invoke<float>(0xE5FF70CD842CA9D4, entity, propertyName);
		} // 0xE5FF70CD842CA9D4 0x8DE5382F b1207
		static int DECOR_GET_INT(Entity entity, const char* propertyName)
		{
			return invoke<int>(0x44DB62727762FD9B, entity, propertyName);
		} // 0x44DB62727762FD9B 0xDDDE59B5 b1207
		static int DECOR_GET_UINT8_(Entity entity, const char* propertyName)
		{
			return invoke<int>(0xB1682B2443F0540B, entity, propertyName);
		} // 0xB1682B2443F0540B undefined b1207
		// Returns whether or not the specified property is set for the entity.
		static BOOL DECOR_EXIST_ON(Entity entity, const char* propertyName)
		{
			return invoke<BOOL>(0xD9D1CDBF3464DCDF, entity, propertyName);
		} // 0xD9D1CDBF3464DCDF 0x74EF9C40 b1207
		static BOOL DECOR_REMOVE(Entity entity, const char* propertyName)
		{
			return invoke<BOOL>(0x2BA7F5877A088A1D, entity, propertyName);
		} // 0x2BA7F5877A088A1D 0xE0E2640B b1207
		static BOOL DECOR_REMOVE_ALL(Entity entity)
		{
			return invoke<BOOL>(0x88942780E0ADEA42, entity);
		} // 0x88942780E0ADEA42 undefined b1207
		static void DECOR_REGISTER(const char* propertyName, int type)
		{
			invoke<int>(0x0B253D644E3C36B3, propertyName, type);
		} // 0x0B253D644E3C36B3 0x68BD42A9 b1207
		static void DECOR_REGISTER_2_(const char* propertyName, int type, BOOL p2)
		{
			invoke<int>(0x4587374F88B7F6C2, propertyName, type, p2);
		} // 0x4587374F88B7F6C2 undefined b1207
		// type: see DECOR_REGISTER
		static BOOL DECOR_IS_REGISTERED_AS_TYPE(const char* propertyName, int type)
		{
			return invoke<BOOL>(0x72355278C069F272, propertyName, type);
		} // 0x72355278C069F272 0x7CF0971D b1207
	}

	namespace DLC
	{
		static BOOL IS_DLC_PRESENT(Hash dlcHash)
		{
			return invoke<BOOL>(0x2763DC12BBE2BB6F, dlcHash);
		} // 0x2763DC12BBE2BB6F 0x1F321943 b1207
		static BOOL GET_IS_LOADING_SCREEN_ACTIVE()
		{
			return invoke<BOOL>(0x71D4BF5890659B0C);
		} // 0x71D4BF5890659B0C 0x517B601B b1207
		static BOOL GET_SPECIAL_EDITION_CORE_STATS_BONUS_ENABLED_()
		{
			return invoke<BOOL>(0xA16B4FBA7887D7BA);
		} // 0xA16B4FBA7887D7BA undefined b1207
		static BOOL GET_SPECIAL_EDITION_CASH_CAMP_BONUS_ENABLED_()
		{
			return invoke<BOOL>(0x1DB9D61E505AE3FC);
		} // 0x1DB9D61E505AE3FC undefined b1207
	}

	namespace ENTITY
	{
		// Checks if the Entity exists
		static BOOL DOES_ENTITY_EXIST(Entity entity)
		{
			return invoke<BOOL>(0xD42BD6EB2E0F1677, entity);
		} // 0xD42BD6EB2E0F1677 0x3AC90869 b1207
		static BOOL DOES_ENTITY_BELONG_TO_THIS_SCRIPT(Entity entity, BOOL p1)
		{
			return invoke<BOOL>(0x622B1980CBE13332, entity, p1);
		} // 0x622B1980CBE13332 0xACFEB3F9 b1207
		static BOOL DOES_ENTITY_HAVE_DRAWABLE(Entity entity)
		{
			return invoke<BOOL>(0x20487F0DA9AF164A, entity);
		} // 0x20487F0DA9AF164A 0xA5B33300 b1207
		static BOOL DOES_ENTITY_HAVE_PHYSICS(Entity entity)
		{
			return invoke<BOOL>(0xA512B3F1B2A0B51C, entity);
		} // 0xA512B3F1B2A0B51C 0x9BCD2979 b1207
		static BOOL HAS_ENTITY_BEEN_DAMAGED_BY_ANY_OBJECT(Entity entity)
		{
			return invoke<BOOL>(0x73BB763880CD23A6, entity);
		} // 0x73BB763880CD23A6 0x6B74582E b1207
		static BOOL HAS_ENTITY_BEEN_DAMAGED_BY_ANY_PED(Entity entity)
		{
			return invoke<BOOL>(0x9934E9C42D52D87E, entity);
		} // 0x9934E9C42D52D87E 0x53FD4A25 b1207
		static BOOL HAS_ENTITY_BEEN_DAMAGED_BY_ANY_VEHICLE(Entity entity)
		{
			return invoke<BOOL>(0x695D7C26DE65C423, entity);
		} // 0x695D7C26DE65C423 0x878C2CE0 b1207
		static BOOL HAS_ENTITY_BEEN_DAMAGED_BY_ENTITY(Entity entity1, Entity entity2, BOOL p2, BOOL p3)
		{
			return invoke<BOOL>(0x7B6E7BEC1143AC86, entity1, entity2, p2, p3);
		} // 0x7B6E7BEC1143AC86 0x07FC77E0 b1207
		// Used in Script Function DUELING_DID_PLAYER_DISARM_OPPONENT
		static BOOL N0x3EC28DA1FFAC9DDD(Entity entity1, Entity entity2, Any p2, Any p3)
		{
			return invoke<BOOL>(0x3EC28DA1FFAC9DDD, entity1, entity2, p2, p3);
		} // 0x3EC28DA1FFAC9DDD undefined b1207
		static Entity N0xAF72EC7E1B54539B(Entity entity)
		{
			return invoke<Entity>(0xAF72EC7E1B54539B, entity);
		} // 0xAF72EC7E1B54539B undefined b1311
		static BOOL HAS_ENTITY_CLEAR_LOS_TO_ENTITY(Entity entity1, Entity entity2, int traceType)
		{
			return invoke<BOOL>(0xFCDFF7B72D23A1AC, entity1, entity2, traceType);
		} // 0xFCDFF7B72D23A1AC 0x53576FA7 b1207
		static BOOL HAS_ENTITY_CLEAR_LOS_TO_COORD(Entity entity, float x, float y, float z, int flags)
		{
			return invoke<BOOL>(0x0C9DBF48C6BA6E4C, entity, x, y, z, flags);
		} // 0x0C9DBF48C6BA6E4C undefined b1207
		// Has the entity1 got a clear line of sight to the other entity2 from the direction entity1 is facing.
		static BOOL HAS_ENTITY_CLEAR_LOS_TO_ENTITY_IN_FRONT(Entity entity1, Entity entity2, int traceType)
		{
			return invoke<BOOL>(0xE88F19660651D566, entity1, entity2, traceType);
		} // 0xE88F19660651D566 0x210D87C8 b1207
		static BOOL HAS_ENTITY_COLLIDED_WITH_ANYTHING(Entity entity)
		{
			return invoke<BOOL>(0xDF18751EC74F90FF, entity);
		} // 0xDF18751EC74F90FF 0x662A2F41 b1207
		static float N0x6D58167F62238284(Vehicle vehicle)
		{
			return invoke<float>(0x6D58167F62238284, vehicle);
		} // 0x6D58167F62238284 undefined b1207
		static float N0xDFC2B226D56D85F6(Any p0, Any p1)
		{
			return invoke<float>(0xDFC2B226D56D85F6, p0, p1);
		} // 0xDFC2B226D56D85F6 undefined b1207
		static float GET_ANIM_DURATION(const char* animDict, const char* animName)
		{
			return invoke<float>(0x9FFAF4940A54CC09, animDict, animName);
		} // 0x9FFAF4940A54CC09 0x8B5E3E3D b1207
		static Entity GET_ENTITY_ATTACHED_TO(Entity entity)
		{
			return invoke<Entity>(0x56D713888A566481, entity);
		} // 0x56D713888A566481 0xFE1589F9 b1207
		// Gets the current coordinates for a specified entity.
		// `entity` = The entity to get the coordinates from.
		// `alive` = Unused by the game, potentially used by debug builds in order to assert whether or not an entity was alive.
		//
		// If entity is a ped and it's in a vehicle or on a mount the coords of that entity are returned. Set 'realCoords' to true when you need the true ped coords.
		static Vector3 GET_ENTITY_COORDS(Entity entity, BOOL alive, BOOL realCoords)
		{
			return invoke<Vector3>(0xA86D5F069399F44D, entity, alive, realCoords);
		} // 0xA86D5F069399F44D 0x1647F1CB b1207
		// Gets the entity's forward vector in XY(Z) eulers.
		static Vector3 GET_ENTITY_FORWARD_VECTOR(Entity entity)
		{
			return invoke<Vector3>(0x2412D9C05BB09B97, entity);
		} // 0x2412D9C05BB09B97 0x84DCECBF b1207
		// Gets the X-component of the entity's forward vector.
		static float GET_ENTITY_FORWARD_X(Entity entity)
		{
			return invoke<float>(0xDB0954E9960F6457, entity);
		} // 0xDB0954E9960F6457 0x49FAE914 b1207
		// Gets the Y-component of the entity's forward vector.
		static float GET_ENTITY_FORWARD_Y(Entity entity)
		{
			return invoke<float>(0x9A5C073ECBDA7EE7, entity);
		} // 0x9A5C073ECBDA7EE7 0x9E2F917C b1207
		// Gets the entity's forward vector in YX(Z) eulers. Similar to GET_ENTITY_FORWARD_VECTOR
		static Vector3 GET_ENTITY_FORWARD_VECTOR_YX_(Entity entity)
		{
			return invoke<Vector3>(0x935A30AA88FB1014, entity);
		} // 0x935A30AA88FB1014 undefined b1207
		// Returns the heading of the entity in degrees. Also know as the "Yaw" of an entity.
		static float GET_ENTITY_HEADING(Entity entity)
		{
			return invoke<float>(0xC230DD956E2F5507, entity);
		} // 0xC230DD956E2F5507 0x972CC383 b1207
		static int GET_ENTITY_HEALTH(Entity entity)
		{
			return invoke<int>(0x82368787EA73C0F7, entity);
		} // 0x82368787EA73C0F7 0x8E3222B7 b1207
		// Returns (CUR_HEALTH / MAX_HEALTH)
		static float GET_ENTITY_HEALTH_FLOAT_(Entity entity)
		{
			return invoke<float>(0x96C638784DB4C815, entity);
		} // 0x96C638784DB4C815 undefined b1207
		// Alters entity's health by 'amount'. Can be negative (to drain health).
		// In the scripts entity2 and weaponHash are unused (zero).
		static BOOL CHANGE_ENTITY_HEALTH_(Entity entity, float amount, Entity entity2, Hash weaponHash)
		{
			return invoke<BOOL>(0x835F131E7DC8F97A, entity, amount, entity2, weaponHash);
		} // 0x835F131E7DC8F97A undefined b1207
		static int GET_ENTITY_MAX_HEALTH(Entity entity, BOOL p1)
		{
			return invoke<int>(0x15D757606D170C3C, entity, p1);
		} // 0x15D757606D170C3C 0xC7AE6AA1 b1207
		static void SET_ENTITY_MAX_HEALTH(Entity entity, int value)
		{
			invoke<int>(0x166E7CF68597D8B5, entity, value);
		} // 0x166E7CF68597D8B5 0x96F84DF8 b1207
		static float GET_ENTITY_HEIGHT(Entity entity, float X, float Y, float Z, BOOL atTop, BOOL inWorldCoords)
		{
			return invoke<float>(0x296DEBC84474B375, entity, X, Y, Z, atTop, inWorldCoords);
		} // 0x296DEBC84474B375 0xEE443481 b1207
		static float GET_ENTITY_HEIGHT_ABOVE_GROUND(Entity entity)
		{
			return invoke<float>(0x0D3B5BAEA08F63E9, entity);
		} // 0x0D3B5BAEA08F63E9 0x57F56A4D b1207
		static void GET_ENTITY_WORLD_POSITION_OF_DIMENSIONS_(Entity entity, Vector3* minimum, Vector3* maximum)
		{
			invoke<int>(0xF3FDA9A617A15145, entity, minimum, maximum);
		} // 0xF3FDA9A617A15145 undefined b1207
		static void GET_ENTITY_MATRIX(Entity entity, Vector3* rightVector, Vector3* forwardVector, Vector3* upVector, Vector3* position)
		{
			invoke<int>(0x3A9B1120AF13FBF2, entity, rightVector, forwardVector, upVector, position);
		} // 0x3A9B1120AF13FBF2 0xEB9EB001 b1207
		// Returns the model hash from the entity
		static Hash GET_ENTITY_MODEL(Entity entity)
		{
			return invoke<Hash>(0xDA76A9F39210D365, entity);
		} // 0xDA76A9F39210D365 0xDAFCB3EC b1207
		// Returns the ped's animal type hash: https://alloc8or.re/rdr3/doc/enums/eAnimalType.txt
		// Combine this with GET_STRING_FROM_HASH_KEY to display localized entity names
		static Hash GET_PED_ANIMAL_TYPE_(Ped ped)
		{
			return invoke<Hash>(0x964000D355219FC0, ped);
		} // 0x964000D355219FC0 undefined b1207
		static BOOL GET_IS_ANIMAL(Entity entity)
		{
			return invoke<BOOL>(0x9A100F1CF4546629, entity);
		} // 0x9A100F1CF4546629 undefined b1207
		static BOOL GET_IS_BIRD_(Entity entity)
		{
			return invoke<BOOL>(0xC346A546612C49A9, entity);
		} // 0xC346A546612C49A9 undefined b1207
		static BOOL GET_IS_PREDATOR_(Entity entity)
		{
			return invoke<BOOL>(0x5594AFE9DE0C01B7, entity);
		} // 0x5594AFE9DE0C01B7 undefined b1207
		static Vector3 GET_OFFSET_FROM_ENTITY_GIVEN_WORLD_COORDS(Entity entity, float posX, float posY, float posZ)
		{
			return invoke<Vector3>(0x497C6B1A2C9AE69C, entity, posX, posY, posZ);
		} // 0x497C6B1A2C9AE69C 0x6477EC9E b1207
		// Offset values are relative to the entity.
		//
		// x = left/right
		// y = forward/backward
		// z = up/down
		static Vector3 GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(Entity entity, float offsetX, float offsetY, float offsetZ)
		{
			return invoke<Vector3>(0x1899F328B0E12848, entity, offsetX, offsetY, offsetZ);
		} // 0x1899F328B0E12848 0xABCF043A b1207
		static float GET_ENTITY_PITCH(Entity entity)
		{
			return invoke<float>(0xEF355ABEFF7F5005, entity);
		} // 0xEF355ABEFF7F5005 0xFCE6ECE5 b1207
		// Displays the current ROLL axis of the entity [-180.0000/180.0000+]
		// (Sideways Roll) such as a vehicle tipped on its side
		static float GET_ENTITY_ROLL(Entity entity)
		{
			return invoke<float>(0xBF966536FA8B6879, entity);
		} // 0xBF966536FA8B6879 0x36610842 b1207
		static Vector3 GET_ENTITY_ROTATION(Entity entity, int rotationOrder)
		{
			return invoke<Vector3>(0xE09CAF86C32CB48F, entity, rotationOrder);
		} // 0xE09CAF86C32CB48F 0x8FF45B04 b1207
		static Hash GET_ENTITY_SCRIPT_(Entity entity, Any* argStruct)
		{
			return invoke<Hash>(0x2A08A32B6D49906F, entity, argStruct);
		} // 0x2A08A32B6D49906F undefined b1207
		// Result is in meters per second (m/s)
		static float GET_ENTITY_SPEED(Entity entity)
		{
			return invoke<float>(0xFB6BA510A533DF81, entity);
		} // 0xFB6BA510A533DF81 0x9E1E4798 b1207
		static Vector3 GET_ENTITY_SPEED_VECTOR(Entity entity, BOOL relative)
		{
			return invoke<Vector3>(0xF2DB09816A419DC5, entity, relative);
		} // 0xF2DB09816A419DC5 0x3ED2B997 b1207
		static float GET_ENTITY_UPRIGHT_VALUE(Entity entity)
		{
			return invoke<float>(0x56398BE65160C3BE, entity);
		} // 0x56398BE65160C3BE 0xF4268190 b1207
		static Vector3 GET_ENTITY_VELOCITY(Entity entity, int p1)
		{
			return invoke<Vector3>(0x4805D2B1D8CF94A9, entity, p1);
		} // 0x4805D2B1D8CF94A9 0xC14C9B6B b1207
		// Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
		static Object GET_OBJECT_INDEX_FROM_ENTITY_INDEX(Entity entity)
		{
			return invoke<Object>(0x280BBE5601EAA983, entity);
		} // 0x280BBE5601EAA983 0xBC5A9C58 b1207
		// Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
		static Ped GET_PED_INDEX_FROM_ENTITY_INDEX(Entity entity)
		{
			return invoke<Ped>(0x0F16D042BD640EA3, entity);
		} // 0x0F16D042BD640EA3 0xC46F74AC b1207
		// Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
		static Vehicle GET_VEHICLE_INDEX_FROM_ENTITY_INDEX(Entity entity)
		{
			return invoke<Vehicle>(0xDF1E5AAC561AFC59, entity);
		} // 0xDF1E5AAC561AFC59 0xC69CF43D b1207
		// Returns the coordinates of an entity-bone.
		// https://github.com/femga/rdr3_discoveries/tree/master/boneNames
		static Vector3 GET_WORLD_POSITION_OF_ENTITY_BONE(Entity entity, int boneIndex)
		{
			return invoke<Vector3>(0x82CFA50E34681CA5, entity, boneIndex);
		} // 0x82CFA50E34681CA5 0x7C6339DF b1207
		// Attaches scenario to bone with an offset
		// _GET_I* - _GET_M*
		static Vector3 N0x5E214112806591EA(Entity entity, int boneIndex)
		{
			return invoke<Vector3>(0x5E214112806591EA, entity, boneIndex);
		} // 0x5E214112806591EA undefined b1207
		static Vector3 N0x3AB3A77672F6473F(Any p0, Any p1, Any p2, Any p3)
		{
			return invoke<Vector3>(0x3AB3A77672F6473F, p0, p1, p2, p3);
		} // 0x3AB3A77672F6473F undefined b1207
		static Player GET_NEAREST_PLAYER_TO_ENTITY(Entity entity, Ped playerPedToIgnore, int flags)
		{
			return invoke<Player>(0x990E294FC387FB88, entity, playerPedToIgnore, flags);
		} // 0x990E294FC387FB88 0xCE17FDEC b1207
		static Player GET_NEAREST_PLAYER_TO_ENTITY_ON_TEAM(Entity entity, int team, Ped playerPedToIgnore, int flags)
		{
			return invoke<Player>(0xB2C30C3B4AFF718C, entity, team, playerPedToIgnore, flags);
		} // 0xB2C30C3B4AFF718C 0xB1808F56 b1207
		static Player GET_NEAREST_PARTICIPANT_TO_ENTITY(Entity entity)
		{
			return invoke<Player>(0x6888A43C35A5F630, entity);
		} // 0x6888A43C35A5F630 undefined b1207
		static BOOL PLACE_ENTITY_ON_GROUND_PROPERLY(Entity entity, BOOL p1)
		{
			return invoke<BOOL>(0x9587913B9E772D29, entity, p1);
		} // 0x9587913B9E772D29 undefined b1207
		// Returns entityType: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eEntityType
		static int GET_ENTITY_TYPE(Entity entity)
		{
			return invoke<int>(0x97F696ACA466B4E0, entity);
		} // 0x97F696ACA466B4E0 0x0B1BD08D b1207
		static int GET_ENTITY_POPULATION_TYPE(Entity entity)
		{
			return invoke<int>(0xADE28862B6D7B85B, entity);
		} // 0xADE28862B6D7B85B 0xFC30DDFF b1207
		static BOOL IS_AN_ENTITY(ScrHandle handle)
		{
			return invoke<BOOL>(0x27CFF3E5A286D3DF, handle);
		} // 0x27CFF3E5A286D3DF 0xD4B9715A b1207
		static BOOL IS_ENTITY_A_PED(Entity entity)
		{
			return invoke<BOOL>(0xCF8176912DDA4EA5, entity);
		} // 0xCF8176912DDA4EA5 0x55D33EAB b1207
		static BOOL IS_ENTITY_A_MISSION_ENTITY(Entity entity)
		{
			return invoke<BOOL>(0x138190F64DB4BBD1, entity);
		} // 0x138190F64DB4BBD1 0x2632E124 b1207
		static BOOL IS_ENTITY_A_VEHICLE(Entity entity)
		{
			return invoke<BOOL>(0xC3D96AF45FCCEC4C, entity);
		} // 0xC3D96AF45FCCEC4C 0xBE800B01 b1207
		static BOOL IS_ENTITY_AN_OBJECT(Entity entity)
		{
			return invoke<BOOL>(0x0A27A546A375FDEF, entity);
		} // 0x0A27A546A375FDEF 0x3F52E561 b1207
		// Checks if entity is within x/y/zSize distance of x/y/z.
		//
		// Last three are unknown ints, almost always p7 = 0, p8 = 1, p9 = 0
		static BOOL IS_ENTITY_AT_COORD(Entity entity, float xPos, float yPos, float zPos, float xSize, float ySize, float zSize, BOOL p7, BOOL p8, int p9)
		{
			return invoke<BOOL>(0x5E58342602E94718, entity, xPos, yPos, zPos, xSize, ySize, zSize, p7, p8, p9);
		} // 0x5E58342602E94718 0xD749B606 b1207
		// Checks if entity1 is within the box defined by x/y/zSize of entity2.
		//
		// Last three parameters are almost always p5 = 0, p6 = 1, p7 = 0
		static BOOL IS_ENTITY_AT_ENTITY(Entity entity1, Entity entity2, float xSize, float ySize, float zSize, BOOL p5, BOOL p6, int p7)
		{
			return invoke<BOOL>(0xC057F02B837A27F6, entity1, entity2, xSize, ySize, zSize, p5, p6, p7);
		} // 0xC057F02B837A27F6 0xDABDCB52 b1207
		static BOOL IS_ENTITY_ATTACHED(Entity entity)
		{
			return invoke<BOOL>(0xEE6AD63ABF59C0B7, entity);
		} // 0xEE6AD63ABF59C0B7 0xEC1479D5 b1207
		static BOOL IS_ENTITY_ATTACHED_TO_ANY_OBJECT(Entity entity)
		{
			return invoke<BOOL>(0x306C1F6178F01AB3, entity);
		} // 0x306C1F6178F01AB3 0x0B5DE340 b1207
		static BOOL IS_ENTITY_ATTACHED_TO_ANY_PED(Entity entity)
		{
			return invoke<BOOL>(0xC841153DED2CA89A, entity);
		} // 0xC841153DED2CA89A 0x9D7A609C b1207
		static BOOL IS_ENTITY_ATTACHED_TO_ANY_VEHICLE(Entity entity)
		{
			return invoke<BOOL>(0x12DF6E0D2E736749, entity);
		} // 0x12DF6E0D2E736749 0xDE5C995E b1207
		static BOOL IS_ENTITY_ATTACHED_TO_ENTITY(Entity from, Entity to)
		{
			return invoke<BOOL>(0x154A3C529497053E, from, to);
		} // 0x154A3C529497053E 0xB0ABFEA8 b1207
		static BOOL IS_ENTITY_OWNED_BY_PERSISTENCE_SYSTEM_(Entity entity)
		{
			return invoke<BOOL>(0xA7E51B53309EAC97, entity);
		} // 0xA7E51B53309EAC97 undefined b1207
		static BOOL IS_ENTITY_DEAD(Entity entity)
		{
			return invoke<BOOL>(0x7D5B1F88E7504BBA, entity);
		} // 0x7D5B1F88E7504BBA 0xB6F7CBAC b1207
		static BOOL IS_ENTITY_IN_AIR(Entity entity, Any p1)
		{
			return invoke<BOOL>(0x886E37EC497200B6, entity, p1);
		} // 0x886E37EC497200B6 0xA4157987 b1207
		// Creates a spherical cone at origin that extends to surface with the angle specified. Then returns true if the entity is inside the spherical cone
		//
		// Angle is measured in degrees.
		static BOOL IS_ENTITY_IN_ANGLED_AREA(Entity entity, float originX, float originY, float originZ, float edgeX, float edgeY, float edgeZ, float angle, BOOL p8, BOOL p9, Any p10)
		{
			return invoke<BOOL>(0xD3151E53134595E5, entity, originX, originY, originZ, edgeX, edgeY, edgeZ, angle, p8, p9, p10);
		} // 0xD3151E53134595E5 0x883622FA b1207
		static BOOL IS_ENTITY_IN_AREA(Entity entity, float x1, float y1, float z1, float x2, float y2, float z2, BOOL p7, BOOL p8, Any p9)
		{
			return invoke<BOOL>(0x0C2634C40A16193E, entity, x1, y1, z1, x2, y2, z2, p7, p8, p9);
		} // 0x0C2634C40A16193E 0x8C2DFA9D b1207
		static BOOL IS_ENTITY_IN_VOLUME(Entity entity, ScrHandle volume, BOOL p2, int p3)
		{
			return invoke<BOOL>(0x5A5526BC09C06623, entity, volume, p2, p3);
		} // 0x5A5526BC09C06623 undefined b1207
		static BOOL IS_ENTITY_IN_WATER(Entity entity)
		{
			return invoke<BOOL>(0xDDE5C125AC446723, entity);
		} // 0xDDE5C125AC446723 0x4C3C2508 b1207
		static BOOL IS_ENTITY_UNDERWATER_(Entity entity, BOOL p1)
		{
			return invoke<BOOL>(0xD4E5C1E93C466127, entity, p1);
		} // 0xD4E5C1E93C466127 undefined b1207
		// Get how much of the entity is submerged.  1.0f is whole entity.
		static float GET_ENTITY_SUBMERGED_LEVEL(Entity entity)
		{
			return invoke<float>(0x4A77C3F73FD9E831, entity);
		} // 0x4A77C3F73FD9E831 0x0170F68C b1207
		static void SET_ENTITY_REQUIRES_MORE_EXPENSIVE_RIVER_CHECK(Entity entity, BOOL toggle)
		{
			invoke<int>(0x850C940EE3E7B8B5, entity, toggle);
		} // 0x850C940EE3E7B8B5 0x40C84A74 b1207
		static void N0x7A49D40DE437BC8D(Any p0, Any p1)
		{
			invoke<int>(0x7A49D40DE437BC8D, p0, p1);
		} // 0x7A49D40DE437BC8D undefined b1207
		static void N0x978AA2323ED32209(Any p0, Any p1)
		{
			invoke<int>(0x978AA2323ED32209, p0, p1);
		} // 0x978AA2323ED32209 undefined b1207
		static void N0x002AAC783ED323ED(Any p0, Any p1)
		{
			invoke<int>(0x002AAC783ED323ED, p0, p1);
		} // 0x002AAC783ED323ED undefined b1207
		static void N0x007AAC783ED323ED(Any p0, Any p1, Any p2)
		{
			invoke<int>(0x007AAC783ED323ED, p0, p1, p2);
		} // 0x007AAC783ED323ED undefined b1207
		static BOOL IS_ENTITY_ON_SCREEN(Entity entity)
		{
			return invoke<BOOL>(0x613C15D5D8DB781F, entity);
		} // 0x613C15D5D8DB781F 0xC1FEC5ED b1207
		static BOOL IS_ENTITY_PLAYING_ANIM(Entity entity, const char* animDict, const char* animName, int animType)
		{
			return invoke<BOOL>(0xDEE49D5CA6C49148, entity, animDict, animName, animType);
		} // 0xDEE49D5CA6C49148 0x0D130D34 b1207
		// Params: p1 (probably animType) = 1, 0
		static BOOL IS_ENTITY_PLAYING_ANY_ANIM_(Entity entity, int p1)
		{
			return invoke<BOOL>(0x0B7CB1300CBFE19C, entity, p1);
		} // 0x0B7CB1300CBFE19C undefined b1207
		static BOOL IS_ENTITY_STATIC(Entity entity)
		{
			return invoke<BOOL>(0x86468ADFA0F6B861, entity);
		} // 0x86468ADFA0F6B861 0x928E12E9 b1207
		static BOOL IS_ENTITY_TOUCHING_ENTITY(Entity entity, Entity targetEntity)
		{
			return invoke<BOOL>(0x9A2304A64C3C8423, entity, targetEntity);
		} // 0x9A2304A64C3C8423 0x6B931477 b1207
		static BOOL IS_ENTITY_TOUCHING_MODEL(Entity entity, Hash modelHash)
		{
			return invoke<BOOL>(0x2AE3EBC8DEB9768B, entity, modelHash);
		} // 0x2AE3EBC8DEB9768B 0x307E7611 b1207
		static BOOL IS_ENTITY_UPRIGHT(Entity entity, float angle)
		{
			return invoke<BOOL>(0xF6F6AFD8D4FB2658, entity, angle);
		} // 0xF6F6AFD8D4FB2658 0x3BCDF4E1 b1207
		static BOOL IS_ENTITY_UPSIDEDOWN(Entity entity)
		{
			return invoke<BOOL>(0x109DE3DA41AAD94A, entity);
		} // 0x109DE3DA41AAD94A 0x5ACAA48F b1207
		static BOOL IS_ENTITY_VISIBLE(Entity entity)
		{
			return invoke<BOOL>(0xFFC96ECB7FA404CA, entity);
		} // 0xFFC96ECB7FA404CA 0x120B4ED5 b1207
		// SET_ENTITY_LO*
		static void N0xFF9965C47FA404DA(Entity entity, BOOL toggle)
		{
			invoke<int>(0xFF9965C47FA404DA, entity, toggle);
		} // 0xFF9965C47FA404DA undefined b1207
		static BOOL IS_ENTITY_VISIBLE_TO_SCRIPT(Entity entity)
		{
			return invoke<BOOL>(0xF213C724E77F321A, entity);
		} // 0xF213C724E77F321A 0x5D240E9D b1207
		static void N0x3F08C6163A4AB1D6(Any p0)
		{
			invoke<int>(0x3F08C6163A4AB1D6, p0);
		} // 0x3F08C6163A4AB1D6 undefined b1207
		static void N0x0DB41D59E0F1502B(Any p0)
		{
			invoke<int>(0x0DB41D59E0F1502B, p0);
		} // 0x0DB41D59E0F1502B undefined b1207
		static BOOL IS_TRACKED_ENTITY_VISIBLE_(Entity entity)
		{
			return invoke<BOOL>(0xC8CCDB712FBCBA92, entity);
		} // 0xC8CCDB712FBCBA92 undefined b1207
		static BOOL IS_ENTITY_OCCLUDED(Entity entity)
		{
			return invoke<BOOL>(0x140188E884645624, entity);
		} // 0x140188E884645624 0x46BC5B40 b1207
		static BOOL WOULD_ENTITY_BE_OCCLUDED(Hash entityModelHash, float x, float y, float z, BOOL p4)
		{
			return invoke<BOOL>(0x3546FAB293FF2981, entityModelHash, x, y, z, p4);
		} // 0x3546FAB293FF2981 0xEA127CBC b1207
		static BOOL IS_ENTITY_WAITING_FOR_WORLD_COLLISION(Entity entity)
		{
			return invoke<BOOL>(0x5E1CC2E8DC3111DD, entity);
		} // 0x5E1CC2E8DC3111DD 0x00AB7A4A b1207
		static BOOL IS_ENTITY_ON_TRAIN_TRACK_(Entity entity)
		{
			return invoke<BOOL>(0x857ACB0AB4BD0D55, entity);
		} // 0x857ACB0AB4BD0D55 undefined b1207
		static void N0xCDB682BB47C02F0A(Entity entity, Hash p1)
		{
			invoke<int>(0xCDB682BB47C02F0A, entity, p1);
		} // 0xCDB682BB47C02F0A undefined b1207
		static void N0xE19035EB65AB2932(Any p0, Any p1)
		{
			invoke<int>(0xE19035EB65AB2932, p0, p1);
		} // 0xE19035EB65AB2932 undefined b1207
		// Sets the loot table an entity will carry. Returns true if loot table has been successfully set. Returns false if entity is not a ped or object.
		// https://github.com/femga/rdr3_discoveries/blob/master/AI/EVENTS/loot_rewards.lua
		static BOOL SCRIPT_OVERRIDE_ENTITY_LOOT_TABLE_PERMANENT(Entity entity, Hash lootTable)
		{
			return invoke<BOOL>(0x8C03CD6B5E0E85E8, entity, lootTable);
		} // 0x8C03CD6B5E0E85E8 undefined b1207
		// Returns false if entity is not a ped or object.
		static BOOL GET_SCRIPT_OVERRIDE_ENTITY_LOOT_TABLE_PERMANENT_(Entity entity, Hash* lootTable)
		{
			return invoke<BOOL>(0x1E804EA9B12030A4, entity, lootTable);
		} // 0x1E804EA9B12030A4 undefined b1207
		static BOOL REQUEST_ENTITY_LOOT_LIST_(Ped mount, Any* argStruct, Hash visiblelootslotrequestType, int flag, int p4, BOOL p5)
		{
			return invoke<BOOL>(0xA88E215CEB0435C0, mount, argStruct, visiblelootslotrequestType, flag, p4, p5);
		} // 0xA88E215CEB0435C0 undefined b1207
		static Any N0xE31FC20319874CB3(Any p0, Any p1, Any p2)
		{
			return invoke<Any>(0xE31FC20319874CB3, p0, p1, p2);
		} // 0xE31FC20319874CB3 undefined b1207
		static Any N0x582F73ACFE969571(Any p0, Any p1, Any p2)
		{
			return invoke<Any>(0x582F73ACFE969571, p0, p1, p2);
		} // 0x582F73ACFE969571 undefined b1207
		static Any N0xBA2A089E60ED1163(Any p0, Any p1, Any p2, Any p3, Any p4)
		{
			return invoke<Any>(0xBA2A089E60ED1163, p0, p1, p2, p3, p4);
		} // 0xBA2A089E60ED1163 undefined b1207
		// enum eCarriableState
		// {
		// 	CARRIABLE_STATE_NONE,
		// 	CARRIABLE_STATE_TRANSITIONING_TO_HOGTIED,
		// 	CARRIABLE_STATE_CARRIABLE_INTRO,
		// 	CARRIABLE_STATE_CARRIABLE,
		// 	CARRIABLE_STATE_BEING_PICKED_UP_FROM_GROUND,
		// 	CARRIABLE_STATE_CARRIED_BY_HUMAN,
		// 	CARRIABLE_STATE_BEING_PLACED_ON_GROUND,
		// 	CARRIABLE_STATE_CARRIED_BY_MOUNT,
		// 	CARRIABLE_STATE_BEING_PLACED_ON_MOUNT,
		// 	CARRIABLE_STATE_BEING_PICKED_UP_FROM_MOUNT,
		// 	CARRIABLE_STATE_BEING_CUT_FREE,
		// 	CARRIABLE_STATE_BEING_PLACED_ON_GROUND_ESCAPE,
		// 	CARRIABLE_STATE_BEING_PLACED_IN_VEHICLE
		// };
		static int GET_CARRIABLE_ENTITY_STATE(Entity entity)
		{
			return invoke<int>(0x61914209C36EFDDB, entity);
		} // 0x61914209C36EFDDB undefined b1207
		static Any N0xD46BF94C4C66FAB0(Any p0, Any p1, Any p2, Any p3)
		{
			return invoke<Any>(0xD46BF94C4C66FAB0, p0, p1, p2, p3);
		} // 0xD46BF94C4C66FAB0 undefined b1207
		// Valid indices: 0 - 3
		// Index 1 always returns a `hogtied` config, doesn't matter the entity.
		// It's for humans only and the ped must be resurrected first if it's dead.
		static Hash GET_OPTIMAL_CARRY_CONFIG_(Entity entity, int index)
		{
			return invoke<Hash>(0x34F008A7E48C496B, entity, index);
		} // 0x34F008A7E48C496B undefined b1207
		static Any N0xD21C7418C590BB40(Any p0)
		{
			return invoke<Any>(0xD21C7418C590BB40, p0);
		} // 0xD21C7418C590BB40 undefined b1207
		// Returns zero if the entity is not a carriable
		static Hash GET_ENTITY_CARRY_CONFIG_(Entity entity)
		{
			return invoke<Hash>(0x0FD25587BB306C86, entity);
		} // 0x0FD25587BB306C86 undefined b1207
		static BOOL IS_CARRIABLE_MODEL_(Hash model)
		{
			return invoke<BOOL>(0x5AFFA9DDC87846F8, model);
		} // 0x5AFFA9DDC87846F8 undefined b1207
		// Returns a hash of an entity's name. (Alternative Name: _GET_ENTITY_PROMPT_NAME_HASH)
		static Hash GET_CARRIABLE_FROM_ENTITY_(Entity entity)
		{
			return invoke<Hash>(0x31FEF6A20F00B963, entity);
		} // 0x31FEF6A20F00B963 undefined b1207
		// Changes type and quality of skins
		// type hashes: https://pastebin.com/C1WvQjCy
		static void SET_ENTITY_CARCASS_TYPE_(Entity entity, Hash type)
		{
			invoke<int>(0x399657ED871B3A6C, entity, type);
		} // 0x399657ED871B3A6C undefined b1207
		static Any N0x2A77EF9BEC8518F4(Any p0)
		{
			return invoke<Any>(0x2A77EF9BEC8518F4, p0);
		} // 0x2A77EF9BEC8518F4 undefined b1207
		static void DELETE_CARRIABLE_(Entity* entity)
		{
			invoke<int>(0x0D0DB2B6AF19A987, entity);
		} // 0x0D0DB2B6AF19A987 undefined b1207
		static BOOL IS_ENTITY_FULLY_LOOTED_(Entity entity)
		{
			return invoke<BOOL>(0x8DE41E9902E85756, entity);
		} // 0x8DE41E9902E85756 undefined b1207
		static void SET_ENTITY_FULLY_LOOTED_(Entity entity, BOOL looted)
		{
			invoke<int>(0x6BCF5F3D8FFE988D, entity, looted);
		} // 0x6BCF5F3D8FFE988D undefined b1207
		static Ped N0xEF2D9ED7CE684F08(Ped ped)
		{
			return invoke<Ped>(0xEF2D9ED7CE684F08, ped);
		} // 0xEF2D9ED7CE684F08 undefined b1207
		static Any N0x0CCEFC6C2C95DA2A(Any p0, Any p1, Any p2, Any p3)
		{
			return invoke<Any>(0x0CCEFC6C2C95DA2A, p0, p1, p2, p3);
		} // 0x0CCEFC6C2C95DA2A undefined b1207
		// Used when checking if ped is in water
		static BOOL N0x383F64263F946E45(int* p0, Entity entity, int p2, Ped ped, Any p4, int p5)
		{
			return invoke<BOOL>(0x383F64263F946E45, p0, entity, p2, ped, p4, p5);
		} // 0x383F64263F946E45 undefined b1207
		static Any N0x8E10DF0FFA63FB65(Any p0, Any p1, Any p2, Any p3, Any p4)
		{
			return invoke<Any>(0x8E10DF0FFA63FB65, p0, p1, p2, p3, p4);
		} // 0x8E10DF0FFA63FB65 undefined b1207
		// flagId: see _SET_ENTITY_CARRYING_FLAG
		static BOOL GET_ENTITY_CARRYING_FLAG_(Entity entity, int flagId)
		{
			return invoke<BOOL>(0x808077647856DE62, entity, flagId);
		} // 0x808077647856DE62 undefined b1207
		// flagId: https://github.com/femga/rdr3_discoveries/tree/master/AI/CARRYING_FLAGS
		// https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/CCarryingFlags__Flags
		//
		// enum eCarryingFlag
		// {
		// 	CARRYING_FLAG_CAN_BE_CUT_FREE = 1,
		// 	CARRYING_FLAG_CAN_BE_CARRIED_ON_FOOT = 2,
		// 	CARRYING_FLAG_CAN_BE_DROPPED = 4,
		// 	CARRYING_FLAG_CAN_BE_CARRIED_WHEN_DEAD = 7,
		// 	CARRYING_FLAG_CAN_CARRY_ANYTHING = 9,
		// 	CARRYING_FLAG_DISABLE_PROMPT_LOS_CHECKS = 19,
		// 	CARRYING_FLAG_FORCE_ALLOW_WARP_TO_SAFE_GROUND_LOCATION = 23,
		// 	CARRYING_FLAG_PICKUPS_IGNORE_HEIGHT_RESTRICTIONS = 26,
		// 	CARRYING_FLAG_CLEAN_UP_WHEN_NOT_CARRIED = 27,
		// 	CARRYING_FLAG_BLOCK_KNOCK_OFF_PED_VARIATIONS_FROM_CARRIABLE_INTERACTIONS = 29,
		// 	CARRYING_FLAG_HIT_WHEN_CARRIABLE = 31,
		// 	CARRYING_FLAG_DISABLE_CARRIABLE_INTERACTIONS_ON_THIS_MOUNT = 34,
		// 	CARRYING_FLAG_FORCE_HIDE_PROMPT_GROUP = 37,
		// };
		static void SET_ENTITY_CARRYING_FLAG_(Entity entity, int flagId, BOOL value)
		{
			invoke<int>(0x18FF3110CF47115D, entity, flagId, value);
		} // 0x18FF3110CF47115D undefined b1207
		// Returns BOOL in ida
		static void N0xC3ABCFBC7D74AFA5(Ped ped, int p1, BOOL p2)
		{
			invoke<int>(0xC3ABCFBC7D74AFA5, ped, p1, p2);
		} // 0xC3ABCFBC7D74AFA5 undefined b1207
		// Called if entity is in water and submerged level is larger than 1f. If CARRYING_FLAG_FORCE_ALLOW_WARP_TO_SAFE_GROUND_LOCATION is true, it gets disabled as well.
		static void N0x371D179701D9C082(Entity entity)
		{
			invoke<int>(0x371D179701D9C082, entity);
		} // 0x371D179701D9C082 undefined b1436
		static void N0xA48E4801DEBDF7E4(Entity entity, BOOL p1)
		{
			invoke<int>(0xA48E4801DEBDF7E4, entity, p1);
		} // 0xA48E4801DEBDF7E4 undefined b1207
		static BOOL GET_IS_CARRIABLE_PELT_(Entity entity)
		{
			return invoke<BOOL>(0x255B6DB4E3AD3C3E, entity);
		} // 0x255B6DB4E3AD3C3E undefined b1207
		static Any N0xF59FDE7B4D31A630(Any p0)
		{
			return invoke<Any>(0xF59FDE7B4D31A630, p0);
		} // 0xF59FDE7B4D31A630 undefined b1207
		static Any N0x120376C23F019C6C(Any p0, Any p1)
		{
			return invoke<Any>(0x120376C23F019C6C, p0, p1);
		} // 0x120376C23F019C6C undefined b1207
		static Any N0x5744562E973E33CD(Any p0, Any p1, Any p2, Any p3, Any p4)
		{
			return invoke<Any>(0x5744562E973E33CD, p0, p1, p2, p3, p4);
		} // 0x5744562E973E33CD undefined b1207
		static void N0xDD03FC2089AD093C(Any p0, Any p1, Any p2, Any p3)
		{
			invoke<int>(0xDD03FC2089AD093C, p0, p1, p2, p3);
		} // 0xDD03FC2089AD093C undefined b1207
		static Any N0xB16C780C51E51E2B(Any p0)
		{
			return invoke<Any>(0xB16C780C51E51E2B, p0);
		} // 0xB16C780C51E51E2B undefined b1207
		static void N0xEF259AA1E097E0AD(Entity entity, Any p1)
		{
			invoke<int>(0xEF259AA1E097E0AD, entity, p1);
		} // 0xEF259AA1E097E0AD undefined b1207
		static void N0xBD94CECFB2D65119(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5)
		{
			invoke<int>(0xBD94CECFB2D65119, p0, p1, p2, p3, p4, p5);
		} // 0xBD94CECFB2D65119 undefined b1207
		static void SET_ENTITY_CUSTOM_PICKUP_RADIUS_(Entity entity, float radius)
		{
			invoke<int>(0x482D17E45665DA44, entity, radius);
		} // 0x482D17E45665DA44 undefined b1207
		static void N0xE75EEA8DB59A9F39(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5)
		{
			invoke<int>(0xE75EEA8DB59A9F39, p0, p1, p2, p3, p4, p5);
		} // 0xE75EEA8DB59A9F39 undefined b1207
		static Any N0x188736456D1DEDE6(Any p0, Any p1)
		{
			return invoke<Any>(0x188736456D1DEDE6, p0, p1);
		} // 0x188736456D1DEDE6 undefined b1207
		static void N0xC6A1A3D63F122DE7(Any p0, Any p1)
		{
			invoke<int>(0xC6A1A3D63F122DE7, p0, p1);
		} // 0xC6A1A3D63F122DE7 undefined b1311
		// p6/relative - makes the xyz force not relative to world coords, but to something else
		// p7/highForce - setting false will make the force really low
		static void APPLY_FORCE_TO_ENTITY_CENTER_OF_MASS(Entity entity, int forceType, float x, float y, float z, int component, BOOL isDirectionRel, BOOL isForceRel, BOOL p8)
		{
			invoke<int>(0x31DA7CEC5334DB37, entity, forceType, x, y, z, component, isDirectionRel, isForceRel, p8);
		} // 0x31DA7CEC5334DB37 0x28924E98 b1207
		static void APPLY_FORCE_TO_ENTITY(Entity entity, int forceFlags, float x, float y, float z, float offX, float offY, float offZ, int boneIndex, BOOL isDirectionRel, BOOL ignoreUpVec, BOOL isForceRel, BOOL p12, BOOL p13)
		{
			invoke<int>(0xF15E8F5D333F09C4, entity, forceFlags, x, y, z, offX, offY, offZ, boneIndex, isDirectionRel, ignoreUpVec, isForceRel, p12, p13);
		} // 0xF15E8F5D333F09C4 0xC1C0855A b1207
		// Attaches entity1 to bone (boneIndex) of entity2.
		//
		// boneIndex - this is different to boneID, use GET_PED_BONE_INDEX to get the index from the ID. use the index for attaching to specific bones. entity1 will be attached to entity2's centre if bone index given doesn't correspond to bone indexes for that entity type.
		// https://github.com/femga/rdr3_discoveries/tree/master/boneNames
		//
		// useSoftPinning - if set to false attached entity will not detach when fixed
		// collision - controls collision between the two entities (FALSE disables collision).
		// isPed - pitch doesn't work when false and roll will only work on negative numbers (only peds)
		// vertexIndex - position of vertex
		// fixedRot - if false it ignores entity vector
		static void ATTACH_ENTITY_TO_ENTITY(Entity entity1, Entity entity2, int boneIndex, float xPos, float yPos, float zPos, float xRot, float yRot, float zRot, BOOL p9, BOOL useSoftPinning, BOOL collision, BOOL isPed, int vertexIndex, BOOL fixedRot, BOOL p15, BOOL p16)
		{
			invoke<int>(0x6B9BBD38AB0796DF, entity1, entity2, boneIndex, xPos, yPos, zPos, xRot, yRot, zRot, p9, useSoftPinning, collision, isPed, vertexIndex, fixedRot, p15, p16);
		} // 0x6B9BBD38AB0796DF 0xEC024237 b1207
		static void ATTACH_ENTITY_TO_ENTITY_PHYSICALLY(Entity entity1, Entity entity2, int p2, int boneIndex, float offsetX, float offsetY, float offsetZ, float p7, float p8, float p9, float p10, float p11, float p12, float p13, BOOL p14, BOOL p15, BOOL p16, BOOL p17, int p18, BOOL p19, float p20, float p21)
		{
			invoke<int>(0xB629A43CA1643481, entity1, entity2, p2, boneIndex, offsetX, offsetY, offsetZ, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21);
		} // 0xB629A43CA1643481 0x0547417F b1207
		static void N0x445D7D8EA66E373E(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9, Any p10, Any p11, Any p12, Any p13, Any p14, Any p15)
		{
			invoke<int>(0x445D7D8EA66E373E, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15);
		} // 0x445D7D8EA66E373E undefined b1207
		static void N0x16908E859C3AB698(Any p0, Any p1, Any p2, Any p3, Any p4)
		{
			invoke<int>(0x16908E859C3AB698, p0, p1, p2, p3, p4);
		} // 0x16908E859C3AB698 undefined b1207
		static int GET_ENTITY_BONE_INDEX_BY_NAME(Entity entity, const char* boneName)
		{
			return invoke<int>(0xBACA8FE9C76C124E, entity, boneName);
		} // 0xBACA8FE9C76C124E 0xE4ECAC22 b1207
		static void CLEAR_ENTITY_LAST_DAMAGE_ENTITY(Entity entity)
		{
			invoke<int>(0xBB19AC7D4DCEFD0F, entity);
		} // 0xBB19AC7D4DCEFD0F 0x2B83F43B b1207
		// Deletes the specified entity, then sets the handle pointed to by the pointer to NULL.
		static void DELETE_ENTITY(Entity* entity)
		{
			invoke<int>(0x4CD38C78BD19A497, entity);
		} // 0x4CD38C78BD19A497 0xFAA3D236 b1207
		// Must be called from a background script, otherwise it will do nothing.
		static void DELETE_ENTITY_2_(Entity* entity)
		{
			invoke<int>(0x5E94EA09E7207C16, entity);
		} // 0x5E94EA09E7207C16 undefined b1207
		static void DETACH_ENTITY(Entity entity, BOOL p1, BOOL collision)
		{
			invoke<int>(0x64CDE9D6BF8ECAD3, entity, p1, collision);
		} // 0x64CDE9D6BF8ECAD3 0xC8EFCB41 b1207
		// Getter for FREEZE_ENTITY_POSITION
		static BOOL IS_ENTITY_FROZEN_(Entity entity)
		{
			return invoke<BOOL>(0x083D497D57B7400F, entity);
		} // 0x083D497D57B7400F undefined b1207
		static void FREEZE_ENTITY_POSITION(Entity entity, BOOL toggle)
		{
			invoke<int>(0x7D9EFB7AD6B19754, entity, toggle);
		} // 0x7D9EFB7AD6B19754 0x65C16D57 b1207
		// Old name: _SET_ENTITY_CLEANUP_BY_ENGINE
		static void SET_ENTITY_SHOULD_FREEZE_WAITING_ON_COLLISION(Entity entity, BOOL toggle)
		{
			invoke<int>(0x740CB4F3F602C9F4, entity, toggle);
		} // 0x740CB4F3F602C9F4 0xD3850671 b1207
		// Makes the specified entity (ped, vehicle or object) persistent. Persistent entities will not automatically be removed by the engine.
		static void SET_ENTITY_AS_MISSION_ENTITY(Entity entity, BOOL p1, BOOL p2)
		{
			invoke<int>(0xDC19C288082E586E, entity, p1, p2);
		} // 0xDC19C288082E586E 0x5D1F9E0F b1207
		// Marks the specified entity (ped, vehicle or object) as no longer needed.
		// Entities marked as no longer needed, will be deleted as the engine sees fit.
		static void SET_ENTITY_AS_NO_LONGER_NEEDED(Entity* entity)
		{
			invoke<int>(0x4971D2F8162B9674, entity);
		} // 0x4971D2F8162B9674 0xADF2267C b1207
		// This is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED.
		static void SET_PED_AS_NO_LONGER_NEEDED(Ped* ped)
		{
			invoke<int>(0x2595DD4236549CE3, ped);
		} // 0x2595DD4236549CE3 0x9A388380 b1207
		// This is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED.
		static void SET_VEHICLE_AS_NO_LONGER_NEEDED(Vehicle* vehicle)
		{
			invoke<int>(0x629BFA74418D6239, vehicle);
		} // 0x629BFA74418D6239 0x9B0E10BE b1207
		// This is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED.
		static void SET_OBJECT_AS_NO_LONGER_NEEDED(Object* object)
		{
			invoke<int>(0x3AE22DEB5BA5A3E6, object);
		} // 0x3AE22DEB5BA5A3E6 0x3F6B949F b1207
		static void N0x20FAEE47427A4497()
		{
			invoke<int>(0x20FAEE47427A4497);
		} // 0x20FAEE47427A4497 undefined b1207
		// Returns true if calling script owns specified entity
		static BOOL DOES_THREAD_OWN_THIS_ENTITY_(Entity entity)
		{
			return invoke<BOOL>(0x88AD6CC10D8D35B2, entity);
		} // 0x88AD6CC10D8D35B2 undefined b1207
		static void N0x56E0735D6273B227(Any p0, Any p1)
		{
			invoke<int>(0x56E0735D6273B227, p0, p1);
		} // 0x56E0735D6273B227 undefined b1207
		// SET_ENTITY_A*
		static void N0xC0EDEF16D90661EE(Entity entity, float p1)
		{
			invoke<int>(0xC0EDEF16D90661EE, entity, p1);
		} // 0xC0EDEF16D90661EE undefined b1207
		static void N0x0FD7D7C232876E72(Any p0)
		{
			invoke<int>(0x0FD7D7C232876E72, p0);
		} // 0x0FD7D7C232876E72 undefined b1207
		static void N0x0939E773925C4719()
		{
			invoke<int>(0x0939E773925C4719);
		} // 0x0939E773925C4719 undefined b1207
		static void SET_ENTITY_CAN_BE_DAMAGED(Entity entity, BOOL toggle)
		{
			invoke<int>(0x0D06D522B90E861F, entity, toggle);
		} // 0x0D06D522B90E861F 0x60B6E744 b1207
		static BOOL GET_ENTITY_CAN_BE_DAMAGED_(Entity entity)
		{
			return invoke<BOOL>(0x75DF9E73F2F005FD, entity);
		} // 0x75DF9E73F2F005FD undefined b1207
		static void SET_ENTITY_CAN_BE_DAMAGED_BY_RELATIONSHIP_GROUP(Entity entity, BOOL bCanBeDamaged, Hash relGroup)
		{
			invoke<int>(0x0EF1AFB18649E015, entity, bCanBeDamaged, relGroup);
		} // 0x0EF1AFB18649E015 0x34165B5D b1207
		static void N0xFF83AF534156B399(Any p0, Any p1)
		{
			invoke<int>(0xFF83AF534156B399, p0, p1);
		} // 0xFF83AF534156B399 undefined b1207
		// Sets whether the entity can be targeted without being in line-of-sight.
		static void SET_ENTITY_CAN_BE_TARGETED_WITHOUT_LOS(Entity entity, BOOL toggle)
		{
			invoke<int>(0x6D09F32E284D0FB7, entity, toggle);
		} // 0x6D09F32E284D0FB7 0x3B13797C b1207
		static BOOL GET_ENTITY_COLLISION_DISABLED(Entity entity)
		{
			return invoke<BOOL>(0xAA2FADD30F45A9DA, entity);
		} // 0xAA2FADD30F45A9DA 0xE8C0C629 b1207
		static void SET_ENTITY_COLLISION(Entity entity, BOOL toggle, BOOL keepPhysics)
		{
			invoke<int>(0xF66F820909453B8C, entity, toggle, keepPhysics);
		} // 0xF66F820909453B8C 0x139FD37D b1207
		static void SET_ENTITY_COMPLETELY_DISABLE_COLLISION(Entity entity, BOOL toggle, BOOL keepPhysics)
		{
			invoke<int>(0xE0580EC84813875A, entity, toggle, keepPhysics);
		} // 0xE0580EC84813875A 0xBD0D4831 b1207
		static void SET_ENTITY_COORDS(Entity entity, float xPos, float yPos, float zPos, BOOL xAxis, BOOL yAxis, BOOL zAxis, BOOL clearArea)
		{
			invoke<int>(0x06843DA7060A026B, entity, xPos, yPos, zPos, xAxis, yAxis, zAxis, clearArea);
		} // 0x06843DA7060A026B 0xDF70B41B b1207
		// Axis - Invert Axis Flags
		static void SET_ENTITY_COORDS_NO_OFFSET(Entity entity, float xPos, float yPos, float zPos, BOOL xAxis, BOOL yAxis, BOOL zAxis)
		{
			invoke<int>(0x239A3351AC1DA385, entity, xPos, yPos, zPos, xAxis, yAxis, zAxis);
		} // 0x239A3351AC1DA385 0x4C83DE8D b1207
		static void SET_ENTITY_DYNAMIC(Entity entity, BOOL toggle)
		{
			invoke<int>(0xFBFC4473F66CE344, entity, toggle);
		} // 0xFBFC4473F66CE344 0x236F525B b1207
		static void SET_ENTITY_HEADING(Entity entity, float heading)
		{
			invoke<int>(0xCF2B9C0645C4651B, entity, heading);
		} // 0xCF2B9C0645C4651B 0xE0FF064D b1207
		static void SET_ENTITY_COORDS_AND_HEADING_(Entity entity, float xPos, float yPos, float zPos, float heading, BOOL xAxis, BOOL yAxis, BOOL zAxis)
		{
			invoke<int>(0x203BEFFDBE12E96A, entity, xPos, yPos, zPos, heading, xAxis, yAxis, zAxis);
		} // 0x203BEFFDBE12E96A undefined b1207
		static void SET_ENTITY_COORDS_AND_HEADING_NO_OFFSET_(Entity entity, float xPos, float yPos, float zPos, float heading, BOOL p5, BOOL p6)
		{
			invoke<int>(0x0918E3565C20F03C, entity, xPos, yPos, zPos, heading, p5, p6);
		} // 0x0918E3565C20F03C undefined b1207
		// Sets the entity's health. healthAmount sets the health value to that, and sets the maximum health core value. Setting healthAmount to 0 will kill the entity. entityKilledBy parameter can also be 0
		static void SET_ENTITY_HEALTH(Entity entity, int healthAmount, Entity entityKilledBy)
		{
			invoke<int>(0xAC2767ED8BDFAB15, entity, healthAmount, entityKilledBy);
		} // 0xAC2767ED8BDFAB15 undefined b1207
		// Sets a ped or an object totally invincible. It doesn't take any kind of damage. Peds will not ragdoll on explosions.
		static void SET_ENTITY_INVINCIBLE(Entity entity, BOOL toggle)
		{
			invoke<int>(0xA5C38736C426FCB8, entity, toggle);
		} // 0xA5C38736C426FCB8 0xC1213A21 b1207
		// SET_ENTITY_LO*
		static void N0xAF7F3099B9FEB535(Entity entity, float p1, float p2, float p3)
		{
			invoke<int>(0xAF7F3099B9FEB535, entity, p1, p2, p3);
		} // 0xAF7F3099B9FEB535 undefined b1207
		static void SET_ENTITY_IS_TARGET_PRIORITY(Entity entity, BOOL p1, float p2)
		{
			invoke<int>(0x0A5D170C44CB2189, entity, p1, p2);
		} // 0x0A5D170C44CB2189 0x9729EE32 b1207
		static void N0xB38A29CCD5447783(Any p0, Any p1, Any p2)
		{
			invoke<int>(0xB38A29CCD5447783, p0, p1, p2);
		} // 0xB38A29CCD5447783 undefined b1207
		// tier: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eEntityThreatTier
		static void SET_ENTITY_THREAT_TIER_(Entity entity, int tier, BOOL p2)
		{
			invoke<int>(0x4B436BAC8CBE9B07, entity, tier, p2);
		} // 0x4B436BAC8CBE9B07 undefined b1207
		static int GET_ENTITY_THREAT_TIER_(Entity entity)
		{
			return invoke<int>(0xE12F56CB25D9CE23, entity);
		} // 0xE12F56CB25D9CE23 undefined b1207
		static void N0x2D40BCBFE9305DEA(Any p0, Any p1)
		{
			invoke<int>(0x2D40BCBFE9305DEA, p0, p1);
		} // 0x2D40BCBFE9305DEA undefined b1207
		static void SET_ENTITY_LIGHTS_ENABLED_(Entity entity, BOOL enabled)
		{
			invoke<int>(0xEBDC12861D079ABA, entity, enabled);
		} // 0xEBDC12861D079ABA undefined b1207
		static void SET_ENTITY_LOAD_COLLISION_FLAG(Entity entity, BOOL toggle)
		{
			invoke<int>(0x9B9EE31AED48072E, entity, toggle);
		} // 0x9B9EE31AED48072E 0xC52F295B b1207
		static BOOL HAS_COLLISION_LOADED_AROUND_ENTITY(Entity entity)
		{
			return invoke<BOOL>(0xBEB1600952B9CF5C, entity);
		} // 0xBEB1600952B9CF5C 0x851687F9 b1207
		// Old name: _HAS_COLLISION_LOADED_AT_COORDS
		static BOOL HAS_COLLISION_LOADED_AROUND_POSITION(float xPos, float yPos, float zPos)
		{
			return invoke<BOOL>(0x6BFBDC46139C45AB, xPos, yPos, zPos);
		} // 0x6BFBDC46139C45AB undefined b1207
		static void SET_ENTITY_ONLY_DAMAGED_BY_PLAYER(Entity entity, BOOL toggle)
		{
			invoke<int>(0x473598683095D430, entity, toggle);
		} // 0x473598683095D430 0x4B707F50 b1207
		static void SET_ENTITY_ONLY_DAMAGED_BY_RELATIONSHIP_GROUP(Entity entity, BOOL p1, Hash relationshipGroup)
		{
			invoke<int>(0x6C1F6AA2F0ADD104, entity, p1, relationshipGroup);
		} // 0x6C1F6AA2F0ADD104 0x202237E2 b1207
		// https://github.com/femga/rdr3_discoveries/tree/master/AI/ENTITY_PROOFS
		// BOOL p2: handles an additional special proofs flag, so it simply indicates whether it should be enabled or disabled, not sure what exactly it proofs the entity from though
		static void SET_ENTITY_PROOFS(Entity entity, int proofsBitset, BOOL specialFlag)
		{
			invoke<int>(0xFAEE099C6F890BB8, entity, proofsBitset, specialFlag);
		} // 0xFAEE099C6F890BB8 0x7E9EAB66 b1207
		// Note: this native was removed in 1232 but added back in 1311
		static int GET_ENTITY_PROOFS_(Entity entity)
		{
			return invoke<int>(0x6CF0DAD7FA1088EA, entity);
		} // 0x6CF0DAD7FA1088EA undefined b1207
		static void SET_ENTITY_QUATERNION(Entity entity, float x, float y, float z, float w)
		{
			invoke<int>(0x100E7007D13E3687, entity, x, y, z, w);
		} // 0x100E7007D13E3687 0x83B6046F b1207
		static void SET_ENTITY_ROTATION(Entity entity, float pitch, float roll, float yaw, int rotationOrder, BOOL p5)
		{
			invoke<int>(0x9CC8314DFEDE441E, entity, pitch, roll, yaw, rotationOrder, p5);
		} // 0x9CC8314DFEDE441E 0x0A345EFE b1207
		static void N0xD45BB89B53FC0CFD(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7)
		{
			invoke<int>(0xD45BB89B53FC0CFD, p0, p1, p2, p3, p4, p5, p6, p7);
		} // 0xD45BB89B53FC0CFD undefined b1207
		static void SET_ENTITY_VISIBLE(Entity entity, BOOL toggle)
		{
			invoke<int>(0x1794B4FCC84D812F, entity, toggle);
		} // 0x1794B4FCC84D812F 0xD043E8E1 b1207
		static void N0x80FDEB3A9E9AA578(Entity entity, BOOL p1)
		{
			invoke<int>(0x80FDEB3A9E9AA578, entity, p1);
		} // 0x80FDEB3A9E9AA578 undefined b1207
		static void N0x9C6906EF8CB20C5F(Entity entity)
		{
			invoke<int>(0x9C6906EF8CB20C5F, entity);
		} // 0x9C6906EF8CB20C5F undefined b1436
		// Note that the third parameter(denoted as z) is "up and down" with positive numbers encouraging upwards movement.
		static void SET_ENTITY_VELOCITY(Entity entity, float x, float y, float z)
		{
			invoke<int>(0x1C99BB7B6E96D16F, entity, x, y, z);
		} // 0x1C99BB7B6E96D16F 0xFF5A1988 b1207
		static void SET_ENTITY_HAS_GRAVITY(Entity entity, BOOL toggle)
		{
			invoke<int>(0x0CEDB728A1083FA7, entity, toggle);
		} // 0x0CEDB728A1083FA7 0xE2F262BF b1207
		// LOD distance can be 0 to 0xFFFF (higher values will result in 0xFFFF) as it is actually stored as a 16-bit value (aka uint16_t).
		static void SET_ENTITY_LOD_DIST(Entity entity, int value)
		{
			invoke<int>(0x5FB407F0A7C877BF, entity, value);
		} // 0x5FB407F0A7C877BF 0xD7ACC7AD b1207
		// Returns the LOD distance of an entity.
		static int GET_ENTITY_LOD_DIST(Entity entity)
		{
			return invoke<int>(0xDF240D0C2A948683, entity);
		} // 0xDF240D0C2A948683 0x4DA3D51F b1207
		// skin - everything alpha except skin
		// Set entity alpha level. Ranging from 0 to 255 but changes occur after every 20 percent (after every 51).
		static void SET_ENTITY_ALPHA(Entity entity, int alphaLevel, BOOL skin)
		{
			invoke<int>(0x0DF7692B1D9E7BA7, entity, alphaLevel, skin);
		} // 0x0DF7692B1D9E7BA7 0xAE667CB0 b1207
		static int GET_ENTITY_ALPHA(Entity entity)
		{
			return invoke<int>(0x1BB501624FAF2BEA, entity);
		} // 0x1BB501624FAF2BEA 0x1560B017 b1207
		static void RESET_ENTITY_ALPHA(Entity entity)
		{
			invoke<int>(0x744B9EF44779D9AB, entity);
		} // 0x744B9EF44779D9AB 0x8A30761C b1207
		static void SET_ENTITY_FADE_IN_(Entity entity)
		{
			invoke<int>(0xA91E6CF94404E8C9, entity);
		} // 0xA91E6CF94404E8C9 undefined b1207
		static void SET_ENTITY_ALWAYS_PRERENDER(Entity entity, BOOL toggle)
		{
			invoke<int>(0xACAD101E1FB66689, entity, toggle);
		} // 0xACAD101E1FB66689 0xD8FF798A b1207
		static void SET_ENTITY_RENDER_SCORCHED(Entity entity, BOOL toggle)
		{
			invoke<int>(0x85B8A7534E44BC23, entity, toggle);
		} // 0x85B8A7534E44BC23 0xAAC9317B b1207
		// Seems to return true if entity is burned / scorched
		// _GET_ENTITY_*
		static Any N0x37B01666BAE8F7EF(Entity entity)
		{
			return invoke<Any>(0x37B01666BAE8F7EF, entity);
		} // 0x37B01666BAE8F7EF undefined b1207
		static void N0xA9E6D8F2DDFC4DB9(Any p0, Any p1)
		{
			invoke<int>(0xA9E6D8F2DDFC4DB9, p0, p1);
		} // 0xA9E6D8F2DDFC4DB9 undefined b1207
		// Only works with objects!
		static void CREATE_MODEL_SWAP(float x, float y, float z, float radius, Hash originalModel, Hash newModel, BOOL p6)
		{
			invoke<int>(0x10B2218320B6F5AC, x, y, z, radius, originalModel, newModel, p6);
		} // 0x10B2218320B6F5AC 0x0BC12F9E b1207
		static void REMOVE_MODEL_SWAP(float x, float y, float z, float radius, Hash originalModel, Hash newModel, BOOL p6)
		{
			invoke<int>(0x824E1C26A14CB817, x, y, z, radius, originalModel, newModel, p6);
		} // 0x824E1C26A14CB817 0xCE0AA8BC b1207
		static void CREATE_MODEL_HIDE(float x, float y, float z, float radius, Hash model, BOOL p5)
		{
			invoke<int>(0x069848B3FB3C4426, x, y, z, radius, model, p5);
		} // 0x069848B3FB3C4426 0x7BD5CF2F b1207
		static void CREATE_MODEL_HIDE_EXCLUDING_SCRIPT_OBJECTS(float x, float y, float z, float radius, Hash model, BOOL p5)
		{
			invoke<int>(0xD136090A9AAAB17D, x, y, z, radius, model, p5);
		} // 0xD136090A9AAAB17D 0x07AAF22C b1207
		static void REMOVE_MODEL_HIDE(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5)
		{
			invoke<int>(0x3F38A98576F6213A, p0, p1, p2, p3, p4, p5);
		} // 0x3F38A98576F6213A 0x993DBC10 b1207
		static Any N0xD4636C2EDB0DEA8A(Any p0)
		{
			return invoke<Any>(0xD4636C2EDB0DEA8A, p0);
		} // 0xD4636C2EDB0DEA8A undefined b1207
		static void CREATE_FORCED_OBJECT(float x, float y, float z, Any p3, Hash modelHash, BOOL p5)
		{
			invoke<int>(0x0961A905AFBC34C7, x, y, z, p3, modelHash, p5);
		} // 0x0961A905AFBC34C7 0x335190A2 b1207
		static void REMOVE_FORCED_OBJECT(Any p0, Any p1, Any p2, Any p3, Any p4)
		{
			invoke<int>(0x553FA683F2BCD814, p0, p1, p2, p3, p4);
		} // 0x553FA683F2BCD814 0xAED73ADD b1207
		static void SET_ENTITY_NO_COLLISION_ENTITY(Entity entity1, Entity entity2, BOOL thisFrameOnly)
		{
			invoke<int>(0xE037BF068223C38D, entity1, entity2, thisFrameOnly);
		} // 0xE037BF068223C38D 0x1E11BFE9 b1207
		static void SET_ENTITY_MOTION_BLUR(Entity entity, BOOL toggle)
		{
			invoke<int>(0x516C6ABD18322B63, entity, toggle);
		} // 0x516C6ABD18322B63 0xE90005B8 b1207
		static void SET_CAN_AUTO_VAULT_ON_ENTITY(Entity entity, BOOL toggle)
		{
			invoke<int>(0x80646744FA88F9D7, entity, toggle);
		} // 0x80646744FA88F9D7 0x44767B31 b1207
		static void SET_CAN_CLIMB_ON_ENTITY(Entity entity, BOOL toggle)
		{
			invoke<int>(0x24AED2A608F93C4C, entity, toggle);
		} // 0x24AED2A608F93C4C 0xE224A6A5 b1207
		// Old name: _SET_ENTITY_DECALS_DISABLED
		static void SET_ENTITY_NOWEAPONDECALS(Entity entity, BOOL toggle)
		{
			invoke<int>(0xC64E597783BE9A1D, entity, toggle);
		} // 0xC64E597783BE9A1D  b1207
		static int GET_ENTITIES_NEAR_POINT_(float x, float y, float z, float radius, ItemSet itemSet, int p5)
		{
			return invoke<int>(0x59B57C4B06531E1E, x, y, z, radius, itemSet, p5);
		} // 0x59B57C4B06531E1E undefined b1207
		static int GET_MATCHING_ENTITIES(Volume volume, ItemSet itemSet, int entityType, Any p3, Hash p4, const char* p5)
		{
			return invoke<int>(0x84CCF9A12942C83D, volume, itemSet, entityType, p3, p4, p5);
		} // 0x84CCF9A12942C83D undefined b1207
		static int GET_ENTITIES_IN_VOLUME_(Volume volume, ItemSet itemSet, int entityType)
		{
			return invoke<int>(0x886171A12F400B89, volume, itemSet, entityType);
		} // 0x886171A12F400B89 undefined b1207
		// Alternative Name: _GET_ENTITY_FROM_MAP_OBJECT; You can get existing objects and manipulate them using this native.
		static Entity SEARCH_BUILDING_POOL_FOR_ENTITY_WITH_THIS_MODEL_(Hash modelHash)
		{
			return invoke<Entity>(0x66B2B83B94B22458, modelHash);
		} // 0x66B2B83B94B22458 undefined b1207
		static Any N0xC2E71D7E0A7B4C89(Any p0)
		{
			return invoke<Any>(0xC2E71D7E0A7B4C89, p0);
		} // 0xC2E71D7E0A7B4C89 undefined b1207
		static void N0x6C31B06E91518269(Any p0, Any p1)
		{
			invoke<int>(0x6C31B06E91518269, p0, p1);
		} // 0x6C31B06E91518269 undefined b1207
		static void N0x119A5714578F4E05(Any p0, Any p1)
		{
			invoke<int>(0x119A5714578F4E05, p0, p1);
		} // 0x119A5714578F4E05 undefined b1207
		// Params: p1 = 0 in R* Scripts (GET_DOOR_ENTITY_FROM_ID)
		// https://github.com/femga/rdr3_discoveries/blob/master/doorHashes/doorhashes.lua
		static Entity GET_ENTITY_BY_DOORHASH_(Hash doorHash, int p1)
		{
			return invoke<Entity>(0xF7424890E4A094C0, doorHash, p1);
		} // 0xF7424890E4A094C0 undefined b1207
		static BOOL FIND_ANIM_EVENT_PHASE(const char* animDictionary, const char* animName, const char* p2, Any* p3, Any* p4)
		{
			return invoke<BOOL>(0x42718CC559BD7776, animDictionary, animName, p2, p3, p4);
		} // 0x42718CC559BD7776 0xC41DDA62 b1207
		static void FORCE_ENTITY_AI_AND_ANIMATION_UPDATE(Entity entity, BOOL p1)
		{
			invoke<int>(0x4C9E96473D4F1A88, entity, p1);
		} // 0x4C9E96473D4F1A88 0x58D9775F b1207
		static float GET_ENTITY_ANIM_CURRENT_TIME_(Entity entity, const char* animDict, const char* animName)
		{
			return invoke<float>(0x627520389E288A73, entity, animDict, animName);
		} // 0x627520389E288A73 undefined b1207
		// Used in Script Function GENERIC_ITEM_HAS_ANIM_COMPLETED
		// _GET_ENTITY_*
		static float N0x8E46E18AA828334F(Entity entity, const char* animDict, const char* animClip)
		{
			return invoke<float>(0x8E46E18AA828334F, entity, animDict, animClip);
		} // 0x8E46E18AA828334F undefined b1207
		// Hardcoded to return zero/false.
		static Any N0xDF8E49EA89A01DB1(Any p0, Any p1, Any p2)
		{
			return invoke<Any>(0xDF8E49EA89A01DB1, p0, p1, p2);
		} // 0xDF8E49EA89A01DB1 undefined b1207
		static BOOL HAS_ANIM_EVENT_FIRED(Entity entity, Hash actionHash)
		{
			return invoke<BOOL>(0x5851CC48405F4A07, entity, actionHash);
		} // 0x5851CC48405F4A07 0x66571CA0 b1207
		static BOOL HAS_ENTITY_ANIM_FINISHED(Entity entity, const char* animDict, const char* animName, int p3)
		{
			return invoke<BOOL>(0xAEB40615337EF1E3, entity, animDict, animName, p3);
		} // 0xAEB40615337EF1E3 0x1D9CAB92 b1207
		// https://github.com/femga/rdr3_discoveries/tree/master/animations
		static BOOL PLAY_ENTITY_ANIM(Entity entity, const char* animName, const char* animDict, float p3, BOOL loop, BOOL stayInAnim, BOOL p6, float delta, Any bitset)
		{
			return invoke<BOOL>(0xDC6D22FAB76D4874, entity, animName, animDict, p3, loop, stayInAnim, p6, delta, bitset);
		} // 0xDC6D22FAB76D4874 0x878753D5 b1207
		// https://gfycat.com/amazingmiserlyamericanquarterhorse
		static void SET_ENTITY_ANIM_CURRENT_TIME_(Entity entity, const char* animDict, const char* animName, float time)
		{
			invoke<int>(0x11CDABDC7783B2BC, entity, animDict, animName, time);
		} // 0x11CDABDC7783B2BC undefined b1207
		static void SET_ENTITY_ANIM_SPEED_(Entity entity, const char* animDict, const char* animName, float speedMultiplier)
		{
			invoke<int>(0xEAA885BA3CEA4E4A, entity, animDict, animName, speedMultiplier);
		} // 0xEAA885BA3CEA4E4A undefined b1207
		static Any STOP_ENTITY_ANIM(Entity entity, const char* animation, const char* animGroup, float p3)
		{
			return invoke<Any>(0x786591D986DE9159, entity, animation, animGroup, p3);
		} // 0x786591D986DE9159 0xC4769830 b1207
		static void N0x669655FFB29EF1A9(Any p0, Any p1, Any p2, Any p3)
		{
			invoke<int>(0x669655FFB29EF1A9, p0, p1, p2, p3);
		} // 0x669655FFB29EF1A9 undefined b1207
		static void ADD_ENTITY_TRACKING_TRAILS_(Entity entity)
		{
			invoke<int>(0x1AD922AB5038DEF3, entity);
		} // 0x1AD922AB5038DEF3 undefined b1207
		// _REMOVE_DECALS_* - _REMOVE_FORCED*
		static void N0x5826EFD6D73C4DE5(Entity entity)
		{
			invoke<int>(0x5826EFD6D73C4DE5, entity);
		} // 0x5826EFD6D73C4DE5 undefined b1207
		static void PAUSE_ENTITY_TRACKING_(Entity entity, BOOL pause)
		{
			invoke<int>(0x36EB4D34D4A092C5, entity, pause);
		} // 0x36EB4D34D4A092C5 undefined b1207
		static Any CREATE_FOOTPATH_TRAIL_(Any p0, const char* waypointRecord, BOOL bUseSnowOffset, float p3, float p4, Any p5, Any p6, Any p7, Any p8, Any p9, Any p10, BOOL bInit)
		{
			return invoke<Any>(0x29BA9F78321E5A6C, p0, waypointRecord, bUseSnowOffset, p3, p4, p5, p6, p7, p8, p9, p10, bInit);
		} // 0x29BA9F78321E5A6C undefined b1207
		static void N0xC76E94A78127412B(Any p0, Any p1, Any p2)
		{
			invoke<int>(0xC76E94A78127412B, p0, p1, p2);
		} // 0xC76E94A78127412B undefined b1207
		static void N0x7F20092547B4DDEA(Any p0)
		{
			invoke<int>(0x7F20092547B4DDEA, p0);
		} // 0x7F20092547B4DDEA undefined b1207
		static void N0xF41E2979D5BC5370(Any p0)
		{
			invoke<int>(0xF41E2979D5BC5370, p0);
		} // 0xF41E2979D5BC5370 undefined b1207
		static Any N0xAAACB74442C1BED3(Any p0)
		{
			return invoke<Any>(0xAAACB74442C1BED3, p0);
		} // 0xAAACB74442C1BED3 undefined b1207
		static Any PIN_CLOSEST_MAP_ENTITY(Hash modelHash, float x, float y, float z, int flags)
		{
			return invoke<Any>(0x6F3068258A499E52, modelHash, x, y, z, flags);
		} // 0x6F3068258A499E52 undefined b1207
		static void UNPIN_MAP_ENTITY_(Entity entity)
		{
			invoke<int>(0xD2B9C78537ED5759, entity);
		} // 0xD2B9C78537ED5759 undefined b1207
		static BOOL IS_MAP_ENTITY_PINNED(Any p0)
		{
			return invoke<BOOL>(0x1FF441D7954F8709, p0);
		} // 0x1FF441D7954F8709 undefined b1207
		static Entity GET_PINNED_MAP_ENTITY_(Any p0)
		{
			return invoke<Entity>(0x4735E2A4BB83D9DA, p0);
		} // 0x4735E2A4BB83D9DA undefined b1207
		static void N0xEAB3D91D30A344F1(Any p0)
		{
			invoke<int>(0xEAB3D91D30A344F1, p0);
		} // 0xEAB3D91D30A344F1 undefined b1207
		static void N0x37CEB637BA3B1A47(Any p0)
		{
			invoke<int>(0x37CEB637BA3B1A47, p0);
		} // 0x37CEB637BA3B1A47 undefined b1207
		static Any N0x350E9211074955AF(Any p0, Any p1)
		{
			return invoke<Any>(0x350E9211074955AF, p0, p1);
		} // 0x350E9211074955AF undefined b1207
		static void N0x898586729DB5221D(Ped ped)
		{
			invoke<int>(0x898586729DB5221D, ped);
		} // 0x898586729DB5221D undefined b1207
		static void N0xE9E7A0BAC7F57746(Any p0, Any p1)
		{
			invoke<int>(0xE9E7A0BAC7F57746, p0, p1);
		} // 0xE9E7A0BAC7F57746 undefined b1207
	}

	namespace EVENT
	{
		static void SET_DECISION_MAKER(Ped ped, Hash name)
		{
			invoke<int>(0x8AE2F981CDDB8FA4, ped, name);
		} // 0x8AE2F981CDDB8FA4 0x19CEAC9E b1207
		static void SET_DECISION_MAKER_TO_DEFAULT(Ped ped)
		{
			invoke<int>(0x6B9C5C38838FB6E6, ped);
		} // 0x6B9C5C38838FB6E6 undefined b1207
		static ScrHandle CREATE_SHOCKING_EVENT_(Any* args)
		{
			return invoke<ScrHandle>(0xCA1315C33B9A2847, args);
		} // 0xCA1315C33B9A2847 undefined b1207
		// eventType: https://alloc8or.re/rdr3/doc/enums/eEventType.txt
		// https://github.com/femga/rdr3_discoveries/blob/master/AI/EVENTS
		static ScrHandle ADD_SHOCKING_EVENT_AT_POSITION(Hash eventType, float x, float y, float z, float p4, float p5, float p6, float p7, float p8, int p9, int p10)
		{
			return invoke<ScrHandle>(0xD9F8455409B525E9, eventType, x, y, z, p4, p5, p6, p7, p8, p9, p10);
		} // 0xD9F8455409B525E9 0x0B30F779 b1207
		// eventType: https://alloc8or.re/rdr3/doc/enums/eEventType.txt
		static ScrHandle ADD_SHOCKING_EVENT_FOR_ENTITY(Hash eventType, Entity entity, float p2, float p3, float p4, float p5, float p6, float p7, BOOL p8, BOOL p9, int p10, int p11)
		{
			return invoke<ScrHandle>(0x7FD8F3BE76F89422, eventType, entity, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11);
		} // 0x7FD8F3BE76F89422 0xA81B5B71 b1207
		// eventType: https://alloc8or.re/rdr3/doc/enums/eEventType.txt
		static BOOL IS_SHOCKING_EVENT_IN_SPHERE(Hash eventType, float x, float y, float z, float radius)
		{
			return invoke<BOOL>(0x9DB47E16060D6354, eventType, x, y, z, radius);
		} // 0x9DB47E16060D6354 0x2F98823E b1207
		static BOOL REMOVE_SHOCKING_EVENT(ScrHandle event)
		{
			return invoke<BOOL>(0xE8BB3CC253A34559, event);
		} // 0xE8BB3CC253A34559 0xF82D5A87 b1207
		static void REMOVE_ALL_SHOCKING_EVENTS(BOOL p0)
		{
			invoke<int>(0xD47A168C2AB90DC4, p0);
		} // 0xD47A168C2AB90DC4 0x64DF6282 b1207
		static void REMOVE_ALL_SHOCKING_EVENTS_IN_AREA_(float x, float y, float z, float radius, BOOL p4)
		{
			invoke<int>(0xB4C71BA9CAB097BD, x, y, z, radius, p4);
		} // 0xB4C71BA9CAB097BD undefined b1207
		// eventType: https://alloc8or.re/rdr3/doc/enums/eEventType.txt
		static void REMOVE_ALL_SHOCKING_EVENTS_OF_TYPE_IN_AREA_(Hash eventType, float x, float y, float z, float radius, BOOL p5)
		{
			invoke<int>(0x6A648D42BF271DC7, eventType, x, y, z, radius, p5);
		} // 0x6A648D42BF271DC7 undefined b1207
		// eventType: https://alloc8or.re/rdr3/doc/enums/eEventType.txt
		static void REMOVE_ALL_SHOCKING_EVENTS_OF_TYPE(Hash eventType, BOOL p1)
		{
			invoke<int>(0x118873DD538490B4, eventType, p1);
		} // 0x118873DD538490B4 undefined b1207
		static void REMOVE_SHOCKING_EVENT_SPAWN_BLOCKING_AREAS()
		{
			invoke<int>(0xDB249021652420C5);
		} // 0xDB249021652420C5 0xA0CE89C8 b1207
		// _ADD* (_ADD_SHOCKING_EVENT_* ?)
		static Any N0x36D0F2BA2C0D9BDE(Entity entity, int p1)
		{
			return invoke<Any>(0x36D0F2BA2C0D9BDE, entity, p1);
		} // 0x36D0F2BA2C0D9BDE undefined b1207
		// Only used in R* SP Scripts
		// Hash only used in R* Script mob3.ysc: ROBBERY
		// _ADD_PED*
		static void N0x7C511E91738A0828(Ped ped1, Ped ped2, int p2, Hash p3)
		{
			invoke<int>(0x7C511E91738A0828, ped1, ped2, p2, p3);
		} // 0x7C511E91738A0828 undefined b1207
		static void SUPPRESS_SHOCKING_EVENTS_NEXT_FRAME()
		{
			invoke<int>(0x84994FAD4E4E4E69);
		} // 0x84994FAD4E4E4E69 0x4CC674B5 b1207
		// _S* (_SUPPRESS_EVENTS_NEXT_FRAME?)
		static void N0xB6F4825153920582()
		{
			invoke<int>(0xB6F4825153920582);
		} // 0xB6F4825153920582 undefined b1207
		// Only used in R* SP Script coachrobberies
		// _SET_S*
		static void N0x4B2B1A891D437CA7(float p0)
		{
			invoke<int>(0x4B2B1A891D437CA7, p0);
		} // 0x4B2B1A891D437CA7 undefined b1207
		// _SET_P*
		static void N0x9520175B35E2268D(Ped ped, BOOL p1)
		{
			invoke<int>(0x9520175B35E2268D, ped, p1);
		} // 0x9520175B35E2268D undefined b1207
		// Only used in R* SP Script beat_rat_infestation and homeinvasion
		static Any N0x18E93EBFC1FCFA48(Volume volume, BOOL p1, BOOL p2)
		{
			return invoke<Any>(0x18E93EBFC1FCFA48, volume, p1, p2);
		} // 0x18E93EBFC1FCFA48 undefined b1207
		// Only used in R* SP Script beat_rat_infestation
		// Params: p0 = value returned by 0x18E93EBFC1FCFA48
		static void N0x56B3410626A473E7(Any p0)
		{
			invoke<int>(0x56B3410626A473E7, p0);
		} // 0x56B3410626A473E7 undefined b1207
		// Models used in the scripts: P_REGISTER05X, P_REGISTER06X, P_REGISTER03X, PLAYER_ZERO, PLAYER_THREE, A_C_HORSE_MORGAN_FLAXENCHESTNUT
		static void ADD_MODEL_TO_EVENT_MONITOR_(Hash model, BOOL p1, BOOL p2)
		{
			invoke<int>(0x608AD36A644A97FE, model, p1, p2);
		} // 0x608AD36A644A97FE undefined b1207
		static void N0x4465C3D1475BD3FD(Hash model)
		{
			invoke<int>(0x4465C3D1475BD3FD, model);
		} // 0x4465C3D1475BD3FD undefined b1207
		static Any N0x2DD42FAD06E6F19E(Object object, BOOL p1, BOOL p2)
		{
			return invoke<Any>(0x2DD42FAD06E6F19E, object, p1, p2);
		} // 0x2DD42FAD06E6F19E undefined b1207
		static void N0xA86B0EE9B39D15D6(Object object)
		{
			invoke<int>(0xA86B0EE9B39D15D6, object);
		} // 0xA86B0EE9B39D15D6 undefined b1207
		static BOOL N0x26054EB81AC0893B(Object object)
		{
			return invoke<BOOL>(0x26054EB81AC0893B, object);
		} // 0x26054EB81AC0893B undefined b1207
		static void SET_EVENT_TRACKER_FOR_PED_(Ped ped, const char* eventName, int p2)
		{
			invoke<int>(0xBB1E41DD3D3C6250, ped, eventName, p2);
		} // 0xBB1E41DD3D3C6250 undefined b1207
		// Might return time since some (?) event.
		static int N0xAD17A18215DD23D6(Entity entity, int p1, int p2)
		{
			return invoke<int>(0xAD17A18215DD23D6, entity, p1, p2);
		} // 0xAD17A18215DD23D6 undefined b1207
		static int EVENT_GET_TIME_SINCE_EVENT_(Entity entity, Hash eventType, int p2, int p3)
		{
			return invoke<int>(0xC6A7DC546E94FED5, entity, eventType, p2, p3);
		} // 0xC6A7DC546E94FED5 undefined b1207
		// Returns eventType
		static Hash EVENT_GET_RECENT_EVENT_(Entity entity, int p1, int p2)
		{
			return invoke<Hash>(0x796EECFF0C6D39BE, entity, p1, p2);
		} // 0x796EECFF0C6D39BE undefined b1207
		static BOOL IS_EVENT_TRACKER_ACTIVE_(const char* eventName, Hash shockingEvent)
		{
			return invoke<BOOL>(0x797B3D4D92E56094, eventName, shockingEvent);
		} // 0x797B3D4D92E56094 undefined b1207
		static Entity EVENT_GET_SOURCE_ENTITY_FROM_EVENT_(Entity entity, Hash eventType, int p2, int p3)
		{
			return invoke<Entity>(0x822A001BCEA5BD81, entity, eventType, p2, p3);
		} // 0x822A001BCEA5BD81 undefined b1207
		static Entity EVENT_GET_TARGET_ENTITY_FROM_EVENT_(Entity entity, Hash eventType, int p2, int p3)
		{
			return invoke<Entity>(0x38497F139981C5C9, entity, eventType, p2, p3);
		} // 0x38497F139981C5C9 undefined b1207
		// _GET*
		static Any N0x1D1B448D719415AB(Ped ped)
		{
			return invoke<Any>(0x1D1B448D719415AB, ped);
		} // 0x1D1B448D719415AB undefined b1207
		// _GET*
		static Any N0x83D43F0FD5276E4D(Entity entity, int p1)
		{
			return invoke<Any>(0x83D43F0FD5276E4D, entity, p1);
		} // 0x83D43F0FD5276E4D undefined b1207
		// HAS_ACTOR_RECEIVED_TRACKED_EVENT_THAT_SHOULD_ALERT - iTimeSinceEvent >= iTimeLimitMS
		static void N0xE28D7FC9FD32ABEB(Entity entity, Hash eventType, int p2)
		{
			invoke<int>(0xE28D7FC9FD32ABEB, entity, eventType, p2);
		} // 0xE28D7FC9FD32ABEB undefined b1311
		// AGGRO_CHECK_PROPERTY_DAMAGE: Property damage found with event
		static void N0x1A5C5D350068A673(Ped ped, int p1)
		{
			invoke<int>(0x1A5C5D350068A673, ped, p1);
		} // 0x1A5C5D350068A673 undefined b1207
		static void EVENT_FLUSH_ALL_EVENT_TRACKERS_(Ped ped)
		{
			invoke<int>(0xAD8F2424C6E1E3A8, ped);
		} // 0xAD8F2424C6E1E3A8 undefined b1207
		static void N0xE2C2FBB7825FFC66()
		{
			invoke<int>(0xE2C2FBB7825FFC66);
		} // 0xE2C2FBB7825FFC66 undefined b1207
	}

	namespace FIRE
	{
		// Starts a fire:
		//
		// xyz: Location of fire
		// maxChildren: The max amount of times a fire can spread to other objects. Must be 25 or less, or the function will do nothing.
		// isGasFire: Whether or not the fire is powered by gasoline.
		static FireId START_SCRIPT_FIRE(float x, float y, float z, int p3, float p4, BOOL p5, const char* soundsetName, float p7, int p8)
		{
			return invoke<FireId>(0x6B83617E04503888, x, y, z, p3, p4, p5, soundsetName, p7, p8);
		} // 0x6B83617E04503888 0xE7529357 b1207
		static void REMOVE_SCRIPT_FIRE(FireId fireHandle)
		{
			invoke<int>(0x790125C36E194069, fireHandle);
		} // 0x790125C36E194069 0x6B21FE26 b1207
		static void START_ENTITY_FIRE(Any p0, Any p1, Any p2, Any p3)
		{
			invoke<int>(0xC4DC7418A44D6822, p0, p1, p2, p3);
		} // 0xC4DC7418A44D6822 0x8928428E b1207
		static void STOP_ENTITY_FIRE(Any p0, Any p1)
		{
			invoke<int>(0x8390751DC40C1E98, p0, p1);
		} // 0x8390751DC40C1E98 0xCE8C9066 b1207
		static BOOL IS_ENTITY_ON_FIRE(Entity entity)
		{
			return invoke<BOOL>(0x1BD7C371CE257C3E, entity);
		} // 0x1BD7C371CE257C3E 0x8C73E64F b1207
		static void N0x754937C28271BC65(Any p0)
		{
			invoke<int>(0x754937C28271BC65, p0);
		} // 0x754937C28271BC65 undefined b1207
		static int GET_NUMBER_OF_FIRES_IN_RANGE(float x, float y, float z, float radius)
		{
			return invoke<int>(0xF9617BC6FAE61E08, x, y, z, radius);
		} // 0xF9617BC6FAE61E08 0x654D93B7 b1207
		static void STOP_FIRE_IN_RANGE(float x, float y, float z, float radius)
		{
			invoke<int>(0xDB38F247BD421708, x, y, z, radius);
		} // 0xDB38F247BD421708 0x725C7205 b1207
		static void STOP_FIRE_IN_BOX_(float posX, float posY, float posZ, float rotX, float rotY, float rotZ, float scaleX, float scaleY, float scaleZ)
		{
			invoke<int>(0xB7C7BDC375AEA9A4, posX, posY, posZ, rotX, rotY, rotZ, scaleX, scaleY, scaleZ);
		} // 0xB7C7BDC375AEA9A4 undefined b1207
		static BOOL GET_CLOSEST_FIRE_POS(Vector3* outPosition, float x, float y, float z)
		{
			return invoke<BOOL>(0xB646FB657F448261, outPosition, x, y, z);
		} // 0xB646FB657F448261 0xC4977B47 b1207
		static Any N0x559FC1D310813031(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9)
		{
			return invoke<Any>(0x559FC1D310813031, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
		} // 0x559FC1D310813031 undefined b1232
		static Any N0x41B87A6495EE13DD(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9)
		{
			return invoke<Any>(0x41B87A6495EE13DD, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
		} // 0x41B87A6495EE13DD undefined b1232
		static Any N0xA4454592DCF7C992(Any p0)
		{
			return invoke<Any>(0xA4454592DCF7C992, p0);
		} // 0xA4454592DCF7C992 undefined b1207
		static BOOL IS_ENTITY_CONSUMED_BY_FIRE_(Entity entity)
		{
			return invoke<BOOL>(0xCDC25355C0D65963, entity);
		} // 0xCDC25355C0D65963 undefined b1207
		// https://github.com/femga/rdr3_discoveries/tree/master/graphics/explosions
		//
		// explosionType:
		// enum eExplosionTag
		// {
		// 	EXP_TAG_DONTCARE = -1,
		// 	EXP_TAG_GRENADE,
		// 	EXP_TAG_STICKYBOMB,
		// 	EXP_TAG_MOLOTOV,
		// 	EXP_TAG_MOLOTOV_VOLATILE,
		// 	EXP_TAG_HI_OCTANE,
		// 	EXP_TAG_CAR,
		// 	EXP_TAG_PLANE,
		// 	EXP_TAG_PETROL_PUMP,
		// 	EXP_TAG_DIR_STEAM,
		// 	EXP_TAG_DIR_FLAME,
		// 	EXP_TAG_DIR_WATER_HYDRANT,
		// 	EXP_TAG_BOAT,
		// 	EXP_TAG_BULLET,
		// 	EXP_TAG_SMOKEGRENADE,
		// 	EXP_TAG_BZGAS,
		// 	EXP_TAG_GAS_CANISTER,
		// 	EXP_TAG_EXTINGUISHER,
		// 	EXP_TAG_TRAIN,
		// 	EXP_TAG_DIR_FLAME_EXPLODE,
		// 	EXP_TAG_VEHICLE_BULLET,
		// 	EXP_TAG_BIRD_CRAP,
		// 	EXP_TAG_FIREWORK,
		// 	EXP_TAG_TORPEDO,
		// 	EXP_TAG_TORPEDO_UNDERWATER,
		// 	EXP_TAG_LANTERN,
		// 	EXP_TAG_DYNAMITE,
		// 	EXP_TAG_DYNAMITESTACK,
		// 	EXP_TAG_DYNAMITE_VOLATILE,
		// 	EXP_TAG_RIVER_BLAST,
		// 	EXP_TAG_PLACED_DYNAMITE,
		// 	EXP_TAG_FIRE_ARROW,
		// 	EXP_TAG_DYNAMITE_ARROW,
		// 	EXP_TAG_PHOSPHOROUS_BULLET,
		// 	EXP_TAG_LIGHTNING_STRIKE,
		// 	EXP_TAG_TRACKING_ARROW,
		// 	EXP_TAG_POISON_BOTTLE
		// };
		static void ADD_EXPLOSION(float x, float y, float z, int explosionType, float damageScale, BOOL isAudible, BOOL isInvisible, float cameraShake)
		{
			invoke<int>(0x7D6F58F69DA92530, x, y, z, explosionType, damageScale, isAudible, isInvisible, cameraShake);
		} // 0x7D6F58F69DA92530 0x10AF5258 b1207
		// explosionType: see ADD_EXPLOSION
		static void ADD_OWNED_EXPLOSION(Ped ped, float x, float y, float z, int explosionType, float damageScale, BOOL isAudible, BOOL isInvisible, float cameraShake)
		{
			invoke<int>(0xD84A917A64D4D016, ped, x, y, z, explosionType, damageScale, isAudible, isInvisible, cameraShake);
		} // 0xD84A917A64D4D016 0x27EE0D67 b1207
		// _ADD_EXPLOSION_*(ON ENTITY?)
		static void N0xB7DF150605EEDC9B(Entity entity, int p1, float x, float y, float z, int explosionType, float damageScale, BOOL isAudible, BOOL isInvisible, float cameraShake)
		{
			invoke<int>(0xB7DF150605EEDC9B, entity, p1, x, y, z, explosionType, damageScale, isAudible, isInvisible, cameraShake);
		} // 0xB7DF150605EEDC9B undefined b1207
		// explosionType: see ADD_EXPLOSION
		// Change explosionFx (Visual Effect) for specified explosionType
		static void ADD_EXPLOSION_WITH_USER_VFX(float x, float y, float z, int explosionType, Hash explosionFx, float damageScale, BOOL isAudible, BOOL isInvisible, float cameraShake)
		{
			invoke<int>(0x53BA259F3A67A99E, x, y, z, explosionType, explosionFx, damageScale, isAudible, isInvisible, cameraShake);
		} // 0x53BA259F3A67A99E 0xCF358946 b1207
		static void N0x34AE85C7CA4857AA(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9, Any p10)
		{
			invoke<int>(0x34AE85C7CA4857AA, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
		} // 0x34AE85C7CA4857AA undefined b1207
		// explosionType: see ADD_EXPLOSION
		static BOOL IS_EXPLOSION_IN_AREA(int explosionType, float x1, float y1, float z1, float x2, float y2, float z2)
		{
			return invoke<BOOL>(0x8391BA4313A25AD3, explosionType, x1, y1, z1, x2, y2, z2);
		} // 0x8391BA4313A25AD3 0xFB40075B b1207
		// explosionType: see ADD_EXPLOSION
		static BOOL IS_EXPLOSION_ACTIVE_IN_AREA(int explosionType, float x1, float y1, float z1, float x2, float y2, float z2)
		{
			return invoke<BOOL>(0xD96E82AEBFFAAFF0, explosionType, x1, y1, z1, x2, y2, z2);
		} // 0xD96E82AEBFFAAFF0 0x37C388DB b1207
		// explosionType: see ADD_EXPLOSION
		static BOOL IS_EXPLOSION_IN_SPHERE(int explosionType, float x, float y, float z, float radius)
		{
			return invoke<BOOL>(0xD62DD846D82CBB90, explosionType, x, y, z, radius);
		} // 0xD62DD846D82CBB90 0xD455A7F3 b1207
		// explosionType: see ADD_EXPLOSION
		static BOOL IS_EXPLOSION_IN_ANGLED_AREA(int explosionType, float x1, float y1, float z1, float x2, float y2, float z2, float angle)
		{
			return invoke<BOOL>(0x5AE661ECD18524C9, explosionType, x1, y1, z1, x2, y2, z2, angle);
		} // 0x5AE661ECD18524C9 0x0128FED9 b1207
		// explosionType: see ADD_EXPLOSION
		static BOOL IS_EXPLOSION_IN_VOLUME_(int explosionType, Volume volume)
		{
			return invoke<BOOL>(0xE24822A4CFC9107A, explosionType, volume);
		} // 0xE24822A4CFC9107A undefined b1207
		// explosionType: see ADD_EXPLOSION
		static Entity GET_OWNER_OF_EXPLOSION_IN_ANGLED_AREA(int explosionType, float x1, float y1, float z1, float x2, float y2, float z2, float radius)
		{
			return invoke<Entity>(0x8002DDAB58594D78, explosionType, x1, y1, z1, x2, y2, z2, radius);
		} // 0x8002DDAB58594D78 0xAEC0D176 b1207
		static void N0x68F6A75FDF5A70D6(float x, float y, float z, float p3)
		{
			invoke<int>(0x68F6A75FDF5A70D6, x, y, z, p3);
		} // 0x68F6A75FDF5A70D6 undefined b1207
		// Only used in R* SP Related Camp Scripts
		static void N0x24DB6B9F2B719043(float p0)
		{
			invoke<int>(0x24DB6B9F2B719043, p0);
		} // 0x24DB6B9F2B719043 undefined b1207
		// Tested with fire & dynamite. Only returns true using value p1 = 1 and when the ped is affected by fire.
		static BOOL IS_PED_SHOCKING_EVENT_ACTIVE_(Ped ped, int p1)
		{
			return invoke<BOOL>(0xAB7993BA61A4674F, ped, p1);
		} // 0xAB7993BA61A4674F undefined b1232
	}

	namespace FLOCK
	{
		static float GET_SPECIES_TUNING_FLOAT_PARAM(Hash p0, int p1, int p2)
		{
			return invoke<float>(0xE108489621422F91, p0, p1, p2);
		} // 0xE108489621422F91 undefined b1207
		static void SET_SPECIES_TUNING_FLOAT_PARAM(Hash p0, int p1, int p2, float p3)
		{
			invoke<int>(0x963240B6C252BA49, p0, p1, p2, p3);
		} // 0x963240B6C252BA49 undefined b1207
		static void SET_SPECIES_TUNING_BOOL_PARAM(Hash p0, int p1, int p2, BOOL p3)
		{
			invoke<int>(0x6D1D94C2459B42EE, p0, p1, p2, p3);
		} // 0x6D1D94C2459B42EE undefined b1207
		// index: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eAnimalTuningFloats
		// https://github.com/femga/rdr3_discoveries/tree/master/AI/ANIMAL_TUNING_FLOAT_PARAMS
		static float GET_ANIMAL_TUNING_FLOAT_PARAM(Ped animal, int index)
		{
			return invoke<float>(0x4BC3ECFDA0297E27, animal, index);
		} // 0x4BC3ECFDA0297E27 undefined b1207
		static void SET_ANIMAL_TUNING_FLOAT_PARAM(Ped animal, int index, float value)
		{
			invoke<int>(0xCBDA22C87977244F, animal, index, value);
		} // 0xCBDA22C87977244F undefined b1207
		static void RESET_ANIMAL_TUNING_FLOAT_PARAM(Ped animal, int index)
		{
			invoke<int>(0xE776A195488FC520, animal, index);
		} // 0xE776A195488FC520 undefined b1355
		// index: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eAnimalTuningBools
		// https://github.com/femga/rdr3_discoveries/tree/master/AI/ANIMAL_TUNING_BOOL_PARAMS
		static BOOL GET_ANIMAL_TUNING_BOOL_PARAM(Ped animal, int index)
		{
			return invoke<BOOL>(0x1C1993824A396603, animal, index);
		} // 0x1C1993824A396603 undefined b1207
		static void SET_ANIMAL_TUNING_BOOL_PARAM(Ped animal, int index, BOOL value)
		{
			invoke<int>(0x9FF1E042FA597187, animal, index, value);
		} // 0x9FF1E042FA597187 undefined b1207
		static void RESET_ANIMAL_TUNING_BOOL_PARAM(Ped animal, int index)
		{
			invoke<int>(0x96AA1304D30E6BC3, animal, index);
		} // 0x96AA1304D30E6BC3 undefined b1355
		static Any N0x8049B17BEC937662(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6)
		{
			return invoke<Any>(0x8049B17BEC937662, p0, p1, p2, p3, p4, p5, p6);
		} // 0x8049B17BEC937662 undefined b1207
		static Any N0xE93415B3307208E5(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8)
		{
			return invoke<Any>(0xE93415B3307208E5, p0, p1, p2, p3, p4, p5, p6, p7, p8);
		} // 0xE93415B3307208E5 undefined b1207
		static Any N0x19870C40C7EE15BE(Any p0, Any p1)
		{
			return invoke<Any>(0x19870C40C7EE15BE, p0, p1);
		} // 0x19870C40C7EE15BE undefined b1207
		static void N0x0816C31480764AB0(Any p0, Any p1, Any p2, Any p3)
		{
			invoke<int>(0x0816C31480764AB0, p0, p1, p2, p3);
		} // 0x0816C31480764AB0 undefined b1207
		static void N0xC3D581A34BC0A1F0(Any p0, Any p1)
		{
			invoke<int>(0xC3D581A34BC0A1F0, p0, p1);
		} // 0xC3D581A34BC0A1F0 undefined b1207
		// species: SPECIES_BIRD_CROW
		static void N0xF2CCA7B68CFAB2B9(Hash species, float x1, float y1, float z1, float x2, float y2, float z2, float x3, float y3, float z3, float p10, float p11, float p12, float p13)
		{
			invoke<int>(0xF2CCA7B68CFAB2B9, species, x1, y1, z1, x2, y2, z2, x3, y3, z3, p10, p11, p12, p13);
		} // 0xF2CCA7B68CFAB2B9 undefined b1207
		static void N0xFB16F08F47B83B4C(Any p0)
		{
			invoke<int>(0xFB16F08F47B83B4C, p0);
		} // 0xFB16F08F47B83B4C undefined b1207
		// Ped (horse) will run away from players and mounting will trigger them to buck until disabled.
		// Used for: REL_DOMESTICATED_ANIMAL
		static BOOL GET_ANIMAL_IS_WILD_(Ped ped)
		{
			return invoke<BOOL>(0x3B005FF0538ED2A9, ped);
		} // 0x3B005FF0538ED2A9 undefined b1207
		static void SET_ANIMAL_IS_WILD_(Ped ped, BOOL toggle)
		{
			invoke<int>(0xAEB97D84CDF3C00B, ped, toggle);
		} // 0xAEB97D84CDF3C00B undefined b1207
		// enum eAnimalRarityLevel
		// {
		// 	ARL_COMMON,
		// 	ARL_RARE,
		// 	ARL_LEGENDARY,
		// 	ARL_NUMRARITYLEVELS
		// };
		static int GET_ANIMAL_RARITY_(Ped ped)
		{
			return invoke<int>(0xF8B48A361DC388AE, ped);
		} // 0xF8B48A361DC388AE undefined b1207
		// rarityLevel: see _GET_ANIMAL_RARITY
		static void SET_ANIMAL_RARITY_(Ped ped, int rarityLevel)
		{
			invoke<int>(0x8B6F0F59B1B99801, ped, rarityLevel);
		} // 0x8B6F0F59B1B99801 undefined b1207
		static void N0xFF1E339CE40EAAAF(Any p0, Any p1)
		{
			invoke<int>(0xFF1E339CE40EAAAF, p0, p1);
		} // 0xFF1E339CE40EAAAF undefined b1207
		static BOOL IS_HERD_VALID_(ScrHandle herdHandle)
		{
			return invoke<BOOL>(0x8D913E493BAFE0A3, herdHandle);
		} // 0x8D913E493BAFE0A3 undefined b1207
		static ScrHandle CREATE_HERD_()
		{
			return invoke<ScrHandle>(0xCB4EF7EDAE2E16F1);
		} // 0xCB4EF7EDAE2E16F1 undefined b1207
		static void N0xE0961AED72642B80(Any p0)
		{
			invoke<int>(0xE0961AED72642B80, p0);
		} // 0xE0961AED72642B80 undefined b1207
		static void ADD_PED_TO_FLOCK_(Any p0, Ped ped)
		{
			invoke<int>(0x933E5D31A7D13069, p0, ped);
		} // 0x933E5D31A7D13069 undefined b1207
		static void N0x408D1149C5E39C1E(Any p0, Any p1)
		{
			invoke<int>(0x408D1149C5E39C1E, p0, p1);
		} // 0x408D1149C5E39C1E undefined b1207
		static Any N0x9E13ACC38BA8F9C3(Any p0, Any p1)
		{
			return invoke<Any>(0x9E13ACC38BA8F9C3, p0, p1);
		} // 0x9E13ACC38BA8F9C3 undefined b1207
		static Any N0x34B9C4D86DF2C2F3(Any p0)
		{
			return invoke<Any>(0x34B9C4D86DF2C2F3, p0);
		} // 0x34B9C4D86DF2C2F3 undefined b1207
		static Vector3 N0x1DA6CB02071055D5(Any p0)
		{
			return invoke<Vector3>(0x1DA6CB02071055D5, p0);
		} // 0x1DA6CB02071055D5 undefined b1207
		static void N0xC95611869E14F8AF(Any p0, Any p1, Any p2, Any p3)
		{
			invoke<int>(0xC95611869E14F8AF, p0, p1, p2, p3);
		} // 0xC95611869E14F8AF undefined b1207
		static Any N0x09EE00B8F858E0BE(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6)
		{
			return invoke<Any>(0x09EE00B8F858E0BE, p0, p1, p2, p3, p4, p5, p6);
		} // 0x09EE00B8F858E0BE undefined b1207
		static void N0xE36D2CB540597EF7(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7)
		{
			invoke<int>(0xE36D2CB540597EF7, p0, p1, p2, p3, p4, p5, p6, p7);
		} // 0xE36D2CB540597EF7 undefined b1207
		static Any N0xD95F04A4E73BE85E(Any p0, Any p1)
		{
			return invoke<Any>(0xD95F04A4E73BE85E, p0, p1);
		} // 0xD95F04A4E73BE85E undefined b1207
		static void N0x17E3E5C46ECCD308(Any p0, Any p1, Any p2)
		{
			invoke<int>(0x17E3E5C46ECCD308, p0, p1, p2);
		} // 0x17E3E5C46ECCD308 undefined b1207
		static void N0xC72CE37081DAE625(Any p0, Any p1, Any p2, Any p3)
		{
			invoke<int>(0xC72CE37081DAE625, p0, p1, p2, p3);
		} // 0xC72CE37081DAE625 undefined b1207
		static void N0x67A43EA3F6FE0076(Any p0)
		{
			invoke<int>(0x67A43EA3F6FE0076, p0);
		} // 0x67A43EA3F6FE0076 undefined b1207
		static Any N0x36486AF7DA93A464(Any p0)
		{
			return invoke<Any>(0x36486AF7DA93A464, p0);
		} // 0x36486AF7DA93A464 undefined b1207
		static void N0x6C57BEA886A20C6B(Any p0, Any p1)
		{
			invoke<int>(0x6C57BEA886A20C6B, p0, p1);
		} // 0x6C57BEA886A20C6B undefined b1207
		static void N0x1520626FFAFFFA8F(Any p0, Any p1)
		{
			invoke<int>(0x1520626FFAFFFA8F, p0, p1);
		} // 0x1520626FFAFFFA8F undefined b1207
		static void N0xFA821997794F48E7(Any p0, Any p1, Any p2)
		{
			invoke<int>(0xFA821997794F48E7, p0, p1, p2);
		} // 0xFA821997794F48E7 undefined b1207
		static void N0xCC6B5AAFC87BFC7B(Any p0, Any p1, Any p2)
		{
			invoke<int>(0xCC6B5AAFC87BFC7B, p0, p1, p2);
		} // 0xCC6B5AAFC87BFC7B undefined b1207
		static void N0xFDB008B3BCF5992F(Any p0, Any p1, Any p2)
		{
			invoke<int>(0xFDB008B3BCF5992F, p0, p1, p2);
		} // 0xFDB008B3BCF5992F undefined b1207
		static void N0x2DF3D457D86F8E57(Any p0, Any p1)
		{
			invoke<int>(0x2DF3D457D86F8E57, p0, p1);
		} // 0x2DF3D457D86F8E57 undefined b1207
		static void N0x706B434FEFAD6A24(Any p0)
		{
			invoke<int>(0x706B434FEFAD6A24, p0);
		} // 0x706B434FEFAD6A24 undefined b1207
		static void N0xA881F5C77A560906(Any p0)
		{
			invoke<int>(0xA881F5C77A560906, p0);
		} // 0xA881F5C77A560906 undefined b1207
		static Any N0x53187E563F938E76(Any p0)
		{
			return invoke<Any>(0x53187E563F938E76, p0);
		} // 0x53187E563F938E76 undefined b1207
	}

	namespace GRAPHICS
	{
		static void FREE_MEMORY_FOR_MISSION_CREATOR_PHOTO()
		{
			invoke<int>(0x7DFF8F94937D2659);
		} // 0x7DFF8F94937D2659 0x9E553002 b1207
		static BOOL LOAD_MISSION_CREATOR_PHOTO(Any* p0, Any p1, Any p2, Any p3)
		{
			return invoke<BOOL>(0x84F0BA7462FF8D58, p0, p1, p2, p3);
		} // 0x84F0BA7462FF8D58 0x56C1E488 b1207
		// contentId: returned by NETWORK::_UGC_QUERY_GET_CREATOR_PHOTO(uVar0, 0, sParam3)
		static int GET_STATUS_OF_LOAD_MISSION_CREATOR_PHOTO(const char* contentId)
		{
			return invoke<int>(0xC71B50AE58D07369, contentId);
		} // 0xC71B50AE58D07369 0x226B08EA b1207
		static BOOL BEGIN_TAKE_HIGH_QUALITY_PHOTO()
		{
			return invoke<BOOL>(0xA15BFFC0A01B34E1);
		} // 0xA15BFFC0A01B34E1 0x47B0C137 b1207
		static int GET_STATUS_OF_TAKE_HIGH_QUALITY_PHOTO()
		{
			return invoke<int>(0x4A3DA74C3CCB1725);
		} // 0x4A3DA74C3CCB1725 0x65376C9B b1207
		static void FREE_MEMORY_FOR_HIGH_QUALITY_PHOTO()
		{
			invoke<int>(0xD45547D8396F002A);
		} // 0xD45547D8396F002A 0x9CBA682A b1207
		static void SET_PHOTO_SELF_STAT_(BOOL p0)
		{
			invoke<int>(0x2705D18C11B61046, p0);
		} // 0x2705D18C11B61046 undefined b1207
		static void SET_PHOTO_STUDIO_STAT_(int p0)
		{
			invoke<int>(0x8E6AFF353C09652E, p0);
		} // 0x8E6AFF353C09652E undefined b1207
		static void SET_POSSE_ID_FOR_PHOTO_(Any posseId)
		{
			invoke<int>(0x564837D4A9EDE296, posseId);
		} // 0x564837D4A9EDE296 undefined b1207
		static void N0x9F6D859C80708B26(BOOL p0, BOOL p1)
		{
			invoke<int>(0x9F6D859C80708B26, p0, p1);
		} // 0x9F6D859C80708B26 undefined b1311
		static BOOL IS_PHOTO_FRAME()
		{
			return invoke<BOOL>(0x86076AE35CBBE55F);
		} // 0x86076AE35CBBE55F undefined b1355
		static void SET_PHOTO_IN_PHOTOMODE_STAT_(BOOL p0)
		{
			invoke<int>(0xFA91736933AB3D93, p0);
		} // 0xFA91736933AB3D93 undefined b1207
		static void SET_PHOTO_OVERLAY_EFFECT_STAT_(int p0)
		{
			invoke<int>(0x8B3296278328B5EB, p0);
		} // 0x8B3296278328B5EB undefined b1207
		// Gets set to 1 when GET_STATUS_OF_TAKE_HIGH_QUALITY_PHOTO = PHOTO_OPERATION_SUCCEEDED
		static void N0x0D5B19C34068FEE7(Any p0)
		{
			invoke<int>(0x0D5B19C34068FEE7, p0);
		} // 0x0D5B19C34068FEE7 undefined b1311
		static void SET_PLAYER_APPEAR_IN_PHOTO_(Player player)
		{
			invoke<int>(0x75D568607909333E, player);
		} // 0x75D568607909333E undefined b1232
		static void SET_REGION_PHOTO_TAKEN_STAT_(const char* p0)
		{
			invoke<int>(0xD1031B83AC093BC7, p0);
		} // 0xD1031B83AC093BC7 undefined b1207
		static void SET_DISTRICT_PHOTO_TAKEN_STAT_(const char* p0)
		{
			invoke<int>(0x9937FACBBF267244, p0);
		} // 0x9937FACBBF267244 undefined b1207
		static void SET_STATE_PHOTO_TAKEN_STAT_(const char* p0)
		{
			invoke<int>(0x8952E857696B8A79, p0);
		} // 0x8952E857696B8A79 undefined b1207
		static BOOL SAVE_HIGH_QUALITY_PHOTO(int unused)
		{
			return invoke<BOOL>(0x57639FD876B68A91, unused);
		} // 0x57639FD876B68A91 0x3B15D33C b1207
		// 0 = succeeded
		// 1 = getting status
		// 2 = failed
		static int GET_STATUS_OF_SAVE_HIGH_QUALITY_PHOTO()
		{
			return invoke<int>(0xD6663EC374092383);
		} // 0xD6663EC374092383 0xEC5D0317 b1207
		// Called together with FREE_MEMORY_FOR_LOW_QUALITY_PHOTO
		static BOOL BEGIN_CREATE_LOW_QUALITY_COPY_OF_PHOTO(int p0)
		{
			return invoke<BOOL>(0x494A9874F17A7D50, p0);
		} // 0x494A9874F17A7D50 0x25D569EB b1207
		// Old name: _GET_STATUS_OF_DRAW_LOW_QUALITY_PHOTO
		static int GET_STATUS_OF_CREATE_LOW_QUALITY_COPY_OF_PHOTO(Any p0)
		{
			return invoke<int>(0x13430D3D5A45F14B, p0);
		} // 0x13430D3D5A45F14B 0xCFCDC518 b1207
		static void FREE_MEMORY_FOR_LOW_QUALITY_PHOTO()
		{
			invoke<int>(0x614682E715ADBAAC);
		} // 0x614682E715ADBAAC 0x108F36CC b1207
		// nullsub, doesn't do anything (GTA5 leftover, there is no phone in RDR3)
		static void DRAW_LOW_QUALITY_PHOTO_TO_PHONE(BOOL p0, int photoRotation)
		{
			invoke<int>(0xF1142E5D64B47802, p0, photoRotation);
		} // 0xF1142E5D64B47802 0xE9F2B68F b1207
		// Always returns 200.
		static int GET_MAX_NUMBER_OF_LOCAL_PHOTOS_()
		{
			return invoke<int>(0x8E587FCD30E05592);
		} // 0x8E587FCD30E05592 undefined b1207
		static int GET_CURRENT_NUMBER_OF_LOCAL_PHOTOS_()
		{
			return invoke<int>(0x78C56B8A7B1D000C);
		} // 0x78C56B8A7B1D000C undefined b1207
		static Any QUEUE_OPERATION_TO_CREATE_SORTED_LIST_OF_PHOTOS()
		{
			return invoke<Any>(0xA42EDF1E88734A7E);
		} // 0xA42EDF1E88734A7E 0x199FABF0 b1207
		// 0 = succeeded
		// 1 = getting status
		// 2 = failed
		static int GET_STATUS_OF_SORTED_LIST_OPERATION()
		{
			return invoke<int>(0xB28894CD7408BD0C);
		} // 0xB28894CD7408BD0C 0x596B900D b1207
		static void DRAW_LIGHT_WITH_RANGE(float posX, float posY, float posZ, int colorR, int colorG, int colorB, float range, float intensity)
		{
			invoke<int>(0xD2D9E04C0DF927F4, posX, posY, posZ, colorR, colorG, colorB, range, intensity);
		} // 0xD2D9E04C0DF927F4 0x6A396E9A b1207
		static void UPDATE_LIGHTS_ON_ENTITY(Entity entity)
		{
			invoke<int>(0xBDBACB52A03CC760, entity);
		} // 0xBDBACB52A03CC760 0xC12AC47A b1207
		// https://gfycat.com/meagerfaireyra
		static void SET_LIGHTS_COLOR_FOR_ENTITY_(Entity entity, int red, int green, int blue)
		{
			invoke<int>(0x6EC2A67962296F49, entity, red, green, blue);
		} // 0x6EC2A67962296F49 undefined b1207
		static void SET_LIGHTS_INTENSITY_FOR_ENTITY_(Entity entity, float intensity)
		{
			invoke<int>(0x07C0F87AAC57F2E4, entity, intensity);
		} // 0x07C0F87AAC57F2E4 undefined b1207
		// type must be less than or equal to 20
		static void SET_LIGHTS_TYPE_FOR_ENTITY_(Entity entity, int type)
		{
			invoke<int>(0xAB72C67163DC4DB4, entity, type);
		} // 0xAB72C67163DC4DB4 undefined b1207
		// https://github.com/femga/rdr3_discoveries/blob/master/graphics/markers/marker_types.lua
		static void DRAW_MARKER_(Hash type, float posX, float posY, float posZ, float dirX, float dirY, float dirZ, float rotX, float rotY, float rotZ, float scaleX, float scaleY, float scaleZ, int red, int green, int blue, int alpha, BOOL bobUpAndDown, BOOL faceCamera, int p19, BOOL rotate, const char* textureDict, const char* textureName, BOOL drawOnEnts)
		{
			invoke<int>(0x2A32FAA57B937173, type, posX, posY, posZ, dirX, dirY, dirZ, rotX, rotY, rotZ, scaleX, scaleY, scaleZ, red, green, blue, alpha, bobUpAndDown, faceCamera, p19, rotate, textureDict, textureName, drawOnEnts);
		} // 0x2A32FAA57B937173 undefined b1207
		static int CREATE_CHECKPOINT_WITH_NAMEHASH(Hash typeHash, float posX1, float posY1, float posZ1, float posX2, float posY2, float posZ2, float radius, int red, int green, int blue, int alpha, int reserved)
		{
			return invoke<int>(0x175668836B44CBB0, typeHash, posX1, posY1, posZ1, posX2, posY2, posZ2, radius, red, green, blue, alpha, reserved);
		} // 0x175668836B44CBB0 undefined b1207
		static BOOL DOES_CHECKPOINT_HAVE_FX_(int checkpoint)
		{
			return invoke<BOOL>(0x4C11CCACB7C02B6E, checkpoint);
		} // 0x4C11CCACB7C02B6E undefined b1207
		// Sets the checkpoint color.
		static void SET_CHECKPOINT_RGBA(int checkpoint, int red, int green, int blue, int alpha)
		{
			invoke<int>(0xCAAFC225E33B1D15, checkpoint, red, green, blue, alpha);
		} // 0xCAAFC225E33B1D15 0xEF9C8CB3 b1207
		// Sets the checkpoint icon color.
		static void SET_CHECKPOINT_RGBA2(int checkpoint, int red, int green, int blue, int alpha)
		{
			invoke<int>(0x99AFF17222D4DEB4, checkpoint, red, green, blue, alpha);
		} // 0x99AFF17222D4DEB4 0xA5456DBB b1207
		static void N0xCC3B787E73E64160(Any p0, Any p1, Any p2, Any p3, Any p4)
		{
			invoke<int>(0xCC3B787E73E64160, p0, p1, p2, p3, p4);
		} // 0xCC3B787E73E64160 undefined b1207
		static void N0x171C18E994C1A395(Any p0, Any p1, Any p2, Any p3, Any p4)
		{
			invoke<int>(0x171C18E994C1A395, p0, p1, p2, p3, p4);
		} // 0x171C18E994C1A395 undefined b1207
		static void DELETE_CHECKPOINT(int checkpoint)
		{
			invoke<int>(0x0DED5B0C8EBAAE12, checkpoint);
		} // 0x0DED5B0C8EBAAE12 0xB66CF3CA b1207
		// Draws a rectangle on the screen.
		//
		// -x: The relative X point of the center of the rectangle. (0.0-1.0, 0.0 is the left edge of the screen, 1.0 is the right edge of the screen)
		//
		// -y: The relative Y point of the center of the rectangle. (0.0-1.0, 0.0 is the top edge of the screen, 1.0 is the bottom edge of the screen)
		//
		// -width: The relative width of the rectangle. (0.0-1.0, 1.0 means the whole screen width)
		//
		// -height: The relative height of the rectangle. (0.0-1.0, 1.0 means the whole screen height)
		//
		// -R: Red part of the color. (0-255)
		//
		// -G: Green part of the color. (0-255)
		//
		// -B: Blue part of the color. (0-255)
		//
		// -A: Alpha part of the color. (0-255, 0 means totally transparent, 255 means totally opaque)
		static void DRAW_RECT(float x, float y, float width, float height, int red, int green, int blue, int alpha, BOOL p8, BOOL p9)
		{
			invoke<int>(0x405224591DF02025, x, y, width, height, red, green, blue, alpha, p8, p9);
		} // 0x405224591DF02025 0xDD2BFC77 b1207
		// Sets a flag defining whether or not script draw commands should continue being drawn behind the pause menu. This is usually used for draw commands that are used with a world render target.
		static void SET_SCRIPT_GFX_DRAW_BEHIND_PAUSEMENU(BOOL toggle)
		{
			invoke<int>(0x906B86E6D7896B9E, toggle);
		} // 0x906B86E6D7896B9E 0xF8FBCC25 b1207
		// Sets the draw order for script draw commands.
		static void SET_SCRIPT_GFX_DRAW_ORDER(int drawOrder)
		{
			invoke<int>(0xCFCC78391C8B3814, drawOrder);
		} // 0xCFCC78391C8B3814 0xADF81D24 b1207
		// Draws a 2D sprite on the screen.
		//
		// Parameters:
		// textureDict - Name of texture dictionary to load texture from
		//
		// textureName - Name of texture to load from texture dictionary
		//
		// screenX/Y - Screen offset (0.5 = center)
		// scaleX/Y - Texture scaling. Negative values can be used to flip the texture on that axis. (0.5 = half)
		//
		// heading - Texture rotation in degrees (default = 0.0) positive is clockwise, measured in degrees
		//
		// red,green,blue - Sprite color (default = 255/255/255)
		//
		// alpha - opacity level
		//
		// https://github.com/femga/rdr3_discoveries/tree/master/useful_info_from_rpfs/textures
		static void DRAW_SPRITE(const char* textureDict, const char* textureName, float screenX, float screenY, float width, float height, float heading, int red, int green, int blue, int alpha, BOOL p11)
		{
			invoke<int>(0xC9884ECADE94CB34, textureDict, textureName, screenX, screenY, width, height, heading, red, green, blue, alpha, p11);
		} // 0xC9884ECADE94CB34 0x1FEC16B0 b1207
		static void ATTACH_TV_AUDIO_TO_ENTITY(Entity entity)
		{
			invoke<int>(0x40866A418EB8EFDE, entity);
		} // 0x40866A418EB8EFDE 0x784944DB b1207
		// Probably changes tvs from being a 3d audio to being "global" audio
		static void SET_TV_AUDIO_FRONTEND(BOOL toggle)
		{
			invoke<int>(0x64437C98FCC5F291, toggle);
		} // 0x64437C98FCC5F291 0x2E0DFA35 b1207
		// Hardcoded to always set x to 1280 and y to 720.
		static void GET_SCREEN_RESOLUTION(int* x, int* y)
		{
			invoke<int>(0x66773C92835D0909, x, y);
		} // 0x66773C92835D0909 0x29F3572F b1207
		static void N0xA04EF43030593ABC(Any p0, Any p1)
		{
			invoke<int>(0xA04EF43030593ABC, p0, p1);
		} // 0xA04EF43030593ABC undefined b1207
		static void N0xA21AF60C9F99CCC5()
		{
			invoke<int>(0xA21AF60C9F99CCC5);
		} // 0xA21AF60C9F99CCC5 undefined b1207
		static Any N0xC28F62AC9774FC1B()
		{
			return invoke<Any>(0xC28F62AC9774FC1B);
		} // 0xC28F62AC9774FC1B undefined b1207
		static void N0xEB48CE48EEC41FD4(Any p0)
		{
			invoke<int>(0xEB48CE48EEC41FD4, p0);
		} // 0xEB48CE48EEC41FD4 undefined b1207
		static BOOL GET_SCREEN_COORD_FROM_WORLD_COORD(float worldX, float worldY, float worldZ, float* screenX, float* screenY)
		{
			return invoke<BOOL>(0xCB50D7AFCC8B0EC6, worldX, worldY, worldZ, screenX, screenY);
		} // 0xCB50D7AFCC8B0EC6 0x1F950E4B b1207
		static BOOL IS_TEXTURE_IN_DICT_(Hash txdHash, Hash dict)
		{
			return invoke<BOOL>(0xA2A51869BDED733B, txdHash, dict);
		} // 0xA2A51869BDED733B undefined b1207
		// Does not affect weapons, particles, fire/explosions, flashlights or the sun.
		// When set to true, all emissive textures (including ped components that have light effects), street lights, building lights, vehicle lights, etc will all be turned off.
		//
		// state: True turns off all artificial light sources in the map: buildings, street lights, car lights, etc. False turns them back on.
		static void SET_ARTIFICIAL_LIGHTS_STATE(BOOL state)
		{
			invoke<int>(0xB2797619A7C7747B, state);
		} // 0xB2797619A7C7747B 0xAA2A0EAF b1207
		static void DISABLE_HDTEX_THIS_FRAME()
		{
			invoke<int>(0x98A7CD5EA379A854);
		} // 0x98A7CD5EA379A854  b1207
		// Used in shop scripts for CATALOG_BOOK
		// false = Normal -> [CATALOG_BOOK_SHUTDOWN]
		// true = Trees flickering? -> [CATALOG_BOOK_OPEN]
		static void N0x1A9F09AB458D49C6(BOOL p0)
		{
			invoke<int>(0x1A9F09AB458D49C6, p0);
		} // 0x1A9F09AB458D49C6 undefined b1207
		// Creates a tracked point, useful for checking the visibility of a 3D point on screen.
		static int CREATE_TRACKED_POINT()
		{
			return invoke<int>(0xFB405CB357C69CB9);
		} // 0xFB405CB357C69CB9 0x3129C31A b1207
		static void SET_TRACKED_POINT_INFO(int point, float x, float y, float z, float radius)
		{
			invoke<int>(0xF6FDA3D4404D4F2C, point, x, y, z, radius);
		} // 0xF6FDA3D4404D4F2C 0x28689AA4 b1207
		static BOOL IS_TRACKED_POINT_VISIBLE(int point)
		{
			return invoke<BOOL>(0xCBB056BA159FB48D, point);
		} // 0xCBB056BA159FB48D 0x0BFC4F64 b1207
		// Returns iNumPixels, iPixelsVisible
		static int N0xDFE332A5DA6FE7C9(int iTrackedPoint)
		{
			return invoke<int>(0xDFE332A5DA6FE7C9, iTrackedPoint);
		} // 0xDFE332A5DA6FE7C9 undefined b1207
		static void DESTROY_TRACKED_POINT(int point)
		{
			invoke<int>(0x37A59922109F8F1C, point);
		} // 0x37A59922109F8F1C 0x14AC675F b1207
		static BOOL IS_TRACKED_POINT_VALID_(int point)
		{
			return invoke<BOOL>(0xF2FDDCC8C6BAE1B3, point);
		} // 0xF2FDDCC8C6BAE1B3 undefined b1207
		// Returns handle to be used with REMOVE_GRASS_CULL_SPHERE
		static int SET_GRASS_CULL_SPHERE(float x, float y, float z, float p3, int p4)
		{
			return invoke<int>(0x27219300C36A8D40, x, y, z, p3, p4);
		} // 0x27219300C36A8D40  b1207
		static void REMOVE_GRASS_CULL_SPHERE(int handle)
		{
			invoke<int>(0xAE7BF7CA9E4BA48D, handle);
		} // 0xAE7BF7CA9E4BA48D  b1207
		// Adds Vegetation Blocking Zone, Added Snow Flattening veg mod Zone
		// Returns veg modifier handle
		static int ADD_VEG_MODIFIER_ZONE_(Volume volume, int p1, int flags, int p3)
		{
			return invoke<int>(0xBD3324281E8B9933, volume, p1, flags, p3);
		} // 0xBD3324281E8B9933 undefined b1207
		// Returns veg modifier handle
		static int ADD_VEG_MODIFIER_SPHERE(float x, float y, float z, float radius, int modType, int flags, int p6)
		{
			return invoke<int>(0xFA50F79257745E74, x, y, z, radius, modType, flags, p6);
		} // 0xFA50F79257745E74 undefined b1207
		static void REMOVE_VEG_MODIFIER_SPHERE(int vegModifierHandle, int p1)
		{
			invoke<int>(0x9CF1836C03FB67A2, vegModifierHandle, p1);
		} // 0x9CF1836C03FB67A2 undefined b1207
		static void ENABLE_STATIC_VEG_MODIFIER_(Hash p0)
		{
			invoke<int>(0xDFEA23EC90113657, p0);
		} // 0xDFEA23EC90113657 undefined b1207
		static void DISABLE_STATIC_VEG_MODIFIER_(Hash p0)
		{
			invoke<int>(0xDD0BC0EDCB2162F6, p0);
		} // 0xDD0BC0EDCB2162F6 undefined b1207
		static BOOL IS_STATIC_VEG_MODIFIER_ENABLED_(Hash p0)
		{
			return invoke<BOOL>(0xDE9BAD3292AA6D5E, p0);
		} // 0xDE9BAD3292AA6D5E undefined b1207
		static void N0xEC3F7F24EEEB3BA3()
		{
			invoke<int>(0xEC3F7F24EEEB3BA3);
		} // 0xEC3F7F24EEEB3BA3 undefined b1207
		static void N0x9F158A49B0D84C3C(Any p0)
		{
			invoke<int>(0x9F158A49B0D84C3C, p0);
		} // 0x9F158A49B0D84C3C undefined b1207
		static void N0x910E260AEAD855DE()
		{
			invoke<int>(0x910E260AEAD855DE);
		} // 0x910E260AEAD855DE undefined b1207
		static BOOL CREATE_SWATCH_TEXTURE_DICT_(int slots)
		{
			return invoke<BOOL>(0x3D084D5568FB4028, slots);
		} // 0x3D084D5568FB4028 undefined b1207
		static void DESTROY_SWATCH_TEXTURE_DICT_()
		{
			invoke<int>(0xDAD7FB8402651654);
		} // 0xDAD7FB8402651654 undefined b1207
		// Example: https://pastebin.com/tTgpER9A
		static void GENERATE_SWATCH_TEXTURE_DIRECTLY_(int slot, Any p1)
		{
			invoke<int>(0x646ED1A1D28487DF, slot, p1);
		} // 0x646ED1A1D28487DF undefined b1207
		// Example:
		// local hash = GetHashKey("CLOTHING_ITEM_M_EYES_001_TINT_001")
		// _GENERATE_SWATCH_TEXTURE(0, hash, 0, true)
		// metapedType: see 0xEC9A1261BF0CE510
		static void GENERATE_SWATCH_TEXTURE_(int slotId, Hash componentHash, int metapedType, BOOL p3)
		{
			invoke<int>(0x160921255327C591, slotId, componentHash, metapedType, p3);
		} // 0x160921255327C591 undefined b1207
		static void CASCADE_SHADOWS_SET_CASCADE_BOUNDS(Any p0, BOOL p1, float p2, float p3, float p4, float p5, BOOL p6, float p7)
		{
			invoke<int>(0xD9EDB2E4512D563E, p0, p1, p2, p3, p4, p5, p6, p7);
		} // 0xD9EDB2E4512D563E 0x84F05943 b1207
		// When this is set to ON, shadows only draw as you get nearer.
		//
		// When OFF, they draw from a further distance.
		static void CASCADE_SHADOWS_ENABLE_ENTITY_TRACKER(BOOL toggle)
		{
			invoke<int>(0x8FBFD2AEB196B369, toggle);
		} // 0x8FBFD2AEB196B369 0xFE903D0F b1207
		// Possible values:
		// "CSM_ST_POINT"
		// "CSM_ST_LINEAR"
		// "CSM_ST_BOX3x3"
		// "CSM_ST_BOX4x4"
		// "CSM_ST_DITHER2_LINEAR"
		// "CSM_ST_CUBIC"
		// "CSM_ST_POISSON16"
		// "CSM_ST_SOFT8"
		// "CSM_ST_SOFT16"
		// "CSM_ST_SOFT32"
		// "CSM_ST_DITHER16_RPDB"
		// "CSM_ST_POISSON16_RPDB_GNORM"
		// "CSM_ST_HIGHRES_BOX4x4"
		// "CSM_ST_ESM"
		static void CASCADE_SHADOWS_SET_SHADOW_SAMPLE_TYPE(const char* type)
		{
			invoke<int>(0xCE4774E0F9AD48D1, type);
		} // 0xCE4774E0F9AD48D1 0xDE10BA1F b1207
		static void CASCADE_SHADOWS_CLEAR_SHADOW_SAMPLE_TYPE()
		{
			invoke<int>(0xF7C29D7C12C36F03);
		} // 0xF7C29D7C12C36F03  b1207
		static void N0x503941F65DBA24EC(Any p0)
		{
			invoke<int>(0x503941F65DBA24EC, p0);
		} // 0x503941F65DBA24EC undefined b1207
		static void N0x815653A42C5ABE76()
		{
			invoke<int>(0x815653A42C5ABE76);
		} // 0x815653A42C5ABE76 undefined b1207
		static void N0xFF8018C778349234(Any p0)
		{
			invoke<int>(0xFF8018C778349234, p0);
		} // 0xFF8018C778349234 undefined b1207
		// Sets an unknown value related to timecycles.
		static void RESET_ADAPTATION(int unk)
		{
			invoke<int>(0x297B72E2AF094742, unk);
		} // 0x297B72E2AF094742 0xD8CC7221 b1207
		static void TOGGLE_PAUSED_RENDERPHASES(BOOL toggle)
		{
			invoke<int>(0xEF9E1C45732F55FA, toggle);
		} // 0xEF9E1C45732F55FA 0x30ADE541 b1207
		static BOOL GET_TOGGLE_PAUSED_RENDERPHASES_STATUS()
		{
			return invoke<BOOL>(0x86ED21BDB2791CE8);
		} // 0x86ED21BDB2791CE8 0xD4F5D07D b1207
		static void RESET_PAUSED_RENDERPHASES()
		{
			invoke<int>(0xCCD9AAD85E1B559E);
		} // 0xCCD9AAD85E1B559E 0x0113EAE4 b1207
		// Old name: _SET_HIDOF_ENV_BLUR_PARAMS
		static void SET_HIDOF_OVERRIDE(BOOL p0, BOOL p1, float p2, float p3, float p4, float p5)
		{
			invoke<int>(0xCC23AA1A7CBFE840, p0, p1, p2, p3, p4, p5);
		} // 0xCC23AA1A7CBFE840 0x513D444B b1207
		// Params: component - used in odriscolls1 and sean1 R* SP Script: COMPONENT_BINOCULARS_SCOPE01
		// Triggers the binocular scaleform
		static void N0x21F00E08CBB5F37B(const char* component)
		{
			invoke<int>(0x21F00E08CBB5F37B, component);
		} // 0x21F00E08CBB5F37B undefined b1207
		// Closes the the binocular scaleform
		static void N0x5AC6E0FA028369DE()
		{
			invoke<int>(0x5AC6E0FA028369DE);
		} // 0x5AC6E0FA028369DE undefined b1207
		static BOOL N0xEC3D8C228FE553D7(BOOL p0)
		{
			return invoke<BOOL>(0xEC3D8C228FE553D7, p0);
		} // 0xEC3D8C228FE553D7 undefined b1207
		static void N0xF5793BB386E1FF9C(Any p0)
		{
			invoke<int>(0xF5793BB386E1FF9C, p0);
		} // 0xF5793BB386E1FF9C undefined b1207
		static void N0x5CD6A2CCE5087161(Any p0)
		{
			invoke<int>(0x5CD6A2CCE5087161, p0);
		} // 0x5CD6A2CCE5087161 undefined b1311
		static void N0xC8D0611D9A0CF5D3(Any p0)
		{
			invoke<int>(0xC8D0611D9A0CF5D3, p0);
		} // 0xC8D0611D9A0CF5D3 undefined b1207
		static float GET_PHOTO_MODE_EXPOSURE_()
		{
			return invoke<float>(0x06C0D8BB6B04A709);
		} // 0x06C0D8BB6B04A709 undefined b1207
		static void N0x62B9F9A1272AED80(Any p0)
		{
			invoke<int>(0x62B9F9A1272AED80, p0);
		} // 0x62B9F9A1272AED80 undefined b1207
		static float GET_PHOTO_MODE_CONTRAST_()
		{
			return invoke<float>(0x98F4154989B81EC6);
		} // 0x98F4154989B81EC6 undefined b1207
		static void N0x9229ED770975BD9E()
		{
			invoke<int>(0x9229ED770975BD9E);
		} // 0x9229ED770975BD9E undefined b1311
		// https://github.com/femga/rdr3_discoveries/blob/master/graphics/ptfx/ptfx_assets_non_looped.lua
		static BOOL START_PARTICLE_FX_NON_LOOPED_AT_COORD(const char* effectName, float xPos, float yPos, float zPos, float xRot, float yRot, float zRot, float scale, BOOL xAxis, BOOL yAxis, BOOL zAxis)
		{
			return invoke<BOOL>(0x2E80BF72EF7C87AC, effectName, xPos, yPos, zPos, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis);
		} // 0x2E80BF72EF7C87AC 0xDD79D679 b1207
		static BOOL START_NETWORKED_PARTICLE_FX_NON_LOOPED_AT_COORD(const char* effectName, float xPos, float yPos, float zPos, float xRot, float yRot, float zRot, float scale, BOOL xAxis, BOOL yAxis, BOOL zAxis)
		{
			return invoke<BOOL>(0xFB97618457994A62, effectName, xPos, yPos, zPos, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis);
		} // 0xFB97618457994A62 0x633F8C48 b1207
		static BOOL START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE(const char* effectName, Ped ped, float offsetX, float offsetY, float offsetZ, float rotX, float rotY, float rotZ, int boneIndex, float scale, BOOL axisX, BOOL axisY, BOOL axisZ)
		{
			return invoke<BOOL>(0x3FAA72BD940C3AC0, effectName, ped, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, boneIndex, scale, axisX, axisY, axisZ);
		} // 0x3FAA72BD940C3AC0 0x53DAEF4E b1207
		static BOOL START_PARTICLE_FX_NON_LOOPED_ON_ENTITY(const char* effectName, Entity entity, float offsetX, float offsetY, float offsetZ, float rotX, float rotY, float rotZ, float scale, BOOL axisX, BOOL axisY, BOOL axisZ)
		{
			return invoke<BOOL>(0xFF4C64C513388C12, effectName, entity, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, scale, axisX, axisY, axisZ);
		} // 0xFF4C64C513388C12 0x9604DAD4 b1207
		static BOOL START_NETWORKED_PARTICLE_FX_NON_LOOPED_ON_ENTITY(const char* effectName, Entity entity, float offsetX, float offsetY, float offsetZ, float rotX, float rotY, float rotZ, float scale, BOOL axisX, BOOL axisY, BOOL axisZ)
		{
			return invoke<BOOL>(0xE6CFE43937061143, effectName, entity, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, scale, axisX, axisY, axisZ);
		} // 0xE6CFE43937061143 0x469A2B4A b1207
		static BOOL START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE_2_(const char* effectName, Ped ped, float offsetX, float offsetY, float offsetZ, float rotX, float rotY, float rotZ, int boneIndex, float scale, BOOL axisX, BOOL axisY, BOOL axisZ)
		{
			return invoke<BOOL>(0xC695870B8A149B96, effectName, ped, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, boneIndex, scale, axisX, axisY, axisZ);
		} // 0xC695870B8A149B96 undefined b1207
		static void SET_PARTICLE_FX_NON_LOOPED_COLOUR(float r, float g, float b)
		{
			invoke<int>(0x60B85BED6577A35B, r, g, b);
		} // 0x60B85BED6577A35B 0x7B689E20 b1207
		static void SET_PARTICLE_FX_NON_LOOPED_ALPHA(float alpha)
		{
			invoke<int>(0xE8A35938A7026CEA, alpha);
		} // 0xE8A35938A7026CEA 0x497EAFF2 b1311
		static void SET_PARTICLE_FX_NON_LOOPED_EMITTER_SCALE_(float p0, float p1, float p2)
		{
			invoke<int>(0x56C392C2BD78B024, p0, p1, p2);
		} // 0x56C392C2BD78B024 undefined b1311
		// https://github.com/femga/rdr3_discoveries/blob/master/graphics/ptfx/ptfx_assets_looped.lua
		static int START_PARTICLE_FX_LOOPED_AT_COORD(const char* effectName, float x, float y, float z, float xRot, float yRot, float zRot, float scale, BOOL xAxis, BOOL yAxis, BOOL zAxis, BOOL p11)
		{
			return invoke<int>(0xBA32867E86125D3A, effectName, x, y, z, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis, p11);
		} // 0xBA32867E86125D3A 0xD348E3E6 b1207
		static int START_PARTICLE_FX_LOOPED_ON_PED_BONE(const char* effectName, Ped ped, float xOffset, float yOffset, float zOffset, float xRot, float yRot, float zRot, int boneIndex, float scale, BOOL xAxis, BOOL yAxis, BOOL zAxis)
		{
			return invoke<int>(0xE689C1B1432BB8AF, effectName, ped, xOffset, yOffset, zOffset, xRot, yRot, zRot, boneIndex, scale, xAxis, yAxis, zAxis);
		} // 0xE689C1B1432BB8AF 0xF8FC196F b1207
		static int START_PARTICLE_FX_LOOPED_ON_ENTITY(const char* effectName, Entity entity, float xOffset, float yOffset, float zOffset, float xRot, float yRot, float zRot, float scale, BOOL xAxis, BOOL yAxis, BOOL zAxis)
		{
			return invoke<int>(0xBD41E1440CE39800, effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis);
		} // 0xBD41E1440CE39800 0x0D06FF62 b1207
		static int START_PARTICLE_FX_LOOPED_ON_ENTITY_BONE(const char* effectName, Entity entity, float xOffset, float yOffset, float zOffset, float xRot, float yRot, float zRot, int boneIndex, float scale, BOOL xAxis, BOOL yAxis, BOOL zAxis)
		{
			return invoke<int>(0xD3BA6EC7F2FBD5E9, effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, boneIndex, scale, xAxis, yAxis, zAxis);
		} // 0xD3BA6EC7F2FBD5E9 0x23BF0F9B b1207
		static int START_NETWORKED_PARTICLE_FX_LOOPED_ON_ENTITY(const char* effectName, Entity entity, float xOffset, float yOffset, float zOffset, float xRot, float yRot, float zRot, float scale, BOOL xAxis, BOOL yAxis, BOOL zAxis)
		{
			return invoke<int>(0x8F90AB32E1944BDE, effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis);
		} // 0x8F90AB32E1944BDE 0x110752B2 b1207
		static int START_NETWORKED_PARTICLE_FX_LOOPED_ON_ENTITY_BONE(const char* effectName, Entity entity, float xOffset, float yOffset, float zOffset, float xRot, float yRot, float zRot, int boneIndex, float scale, BOOL xAxis, BOOL yAxis, BOOL zAxis)
		{
			return invoke<int>(0x9C56621462FFE7A6, effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, boneIndex, scale, xAxis, yAxis, zAxis);
		} // 0x9C56621462FFE7A6 0xF478EFCF b1207
		static void STOP_PARTICLE_FX_LOOPED(int ptfxHandle, BOOL p1)
		{
			invoke<int>(0x22970F3A088B133B, ptfxHandle, p1);
		} // 0x22970F3A088B133B 0xD245455B b1207
		static BOOL DOES_PARTICLE_FX_LOOPED_EXIST(int ptfxHandle)
		{
			return invoke<BOOL>(0x9DD5AFF561E88F2A, ptfxHandle);
		} // 0x9DD5AFF561E88F2A 0xCBF91D2A b1207
		static void SET_PARTICLE_FX_LOOPED_OFFSETS(int ptfxHandle, float x, float y, float z, float rotX, float rotY, float rotZ)
		{
			invoke<int>(0xD3A4A95FC94FE83B, ptfxHandle, x, y, z, rotX, rotY, rotZ);
		} // 0xD3A4A95FC94FE83B 0x641F7790 b1207
		static void SET_PARTICLE_FX_LOOPED_EVOLUTION(int ptfxHandle, const char* propertyName, float amount, BOOL noNetwork)
		{
			invoke<int>(0x3674F389B0FACD80, ptfxHandle, propertyName, amount, noNetwork);
		} // 0x3674F389B0FACD80 0x1CBC1373 b1207
		static void SET_PARTICLE_FX_LOOPED_COLOUR(int ptfxHandle, float r, float g, float b, BOOL p4)
		{
			invoke<int>(0x239879FC61C610CC, ptfxHandle, r, g, b, p4);
		} // 0x239879FC61C610CC 0x5219D530 b1207
		static void SET_PARTICLE_FX_LOOPED_ALPHA(int ptfxHandle, float alpha)
		{
			invoke<int>(0x88786E76234F7054, ptfxHandle, alpha);
		} // 0x88786E76234F7054 0x5ED49BE1 b1207
		static void SET_PARTICLE_FX_LOOPED_SCALE(int ptfxHandle, float scale)
		{
			invoke<int>(0x1A9E1C0D98D093B7, ptfxHandle, scale);
		} // 0x1A9E1C0D98D093B7 0x099B8B49 b1207
		static void SET_PARTICLE_FX_LOOPED_FAR_CLIP_DIST(int ptfxHandle, float range)
		{
			invoke<int>(0x9B04D471DA0AD7AA, ptfxHandle, range);
		} // 0x9B04D471DA0AD7AA 0x233DE879 b1207
		// _SET_PARTICLE_FX_LOOPED_FA* - _SET_PARTICLE_FX_LOOPED_OF*
		static void SET_PARTICLE_FX_LOOPED_UPDATE_DISTANT_SMOKE_(int ptfxHandle, float scalar)
		{
			invoke<int>(0x9DDC222D85D5AF2A, ptfxHandle, scalar);
		} // 0x9DDC222D85D5AF2A undefined b1207
		static void REMOVE_PARTICLE_FX(int ptfxHandle, BOOL p1)
		{
			invoke<int>(0x459598F579C98929, ptfxHandle, p1);
		} // 0x459598F579C98929 0x6BA48C7E b1207
		static void REMOVE_PARTICLE_FX_FROM_ENTITY(Entity entity)
		{
			invoke<int>(0x92884B4A49D81325, entity);
		} // 0x92884B4A49D81325 0xCEDE52E9 b1207
		static void REMOVE_PARTICLE_FX_IN_RANGE(float X, float Y, float Z, float radius)
		{
			invoke<int>(0x87B5905ECA623B68, X, Y, Z, radius);
		} // 0x87B5905ECA623B68 0x7EB8F275 b1207
		// fxName: see data_0/data/effects/ptfx/fxlists/
		static void USE_PARTICLE_FX_ASSET(const char* fxName)
		{
			invoke<int>(0xA10DB07FC234DD12, fxName);
		} // 0xA10DB07FC234DD12 0x9C720B61 b1207
		static void SET_PARTICLE_FX_OVERRIDE(const char* oldAsset, const char* newAsset)
		{
			invoke<int>(0xBE711A169E9C7E95, oldAsset, newAsset);
		} // 0xBE711A169E9C7E95 0xC92719A7 b1207
		// Resets the effect of SET_PARTICLE_FX_OVERRIDE
		static void RESET_PARTICLE_FX_OVERRIDE(const char* name)
		{
			invoke<int>(0x274B3DABF7E72DEF, name);
		} // 0x274B3DABF7E72DEF 0x9E8D8B72 b1207
		// p1: AMB_ANN_COAL_CHUTE_DIVE, AMB_ANN_COAL_CHUTE
		// p2: EMIT
		// p3: either 0.0f or 1.0f
		static void N0x4FB67D172C4476F3(Entity entity, const char* p1, const char* p2, float p3)
		{
			invoke<int>(0x4FB67D172C4476F3, entity, p1, p2, p3);
		} // 0x4FB67D172C4476F3 undefined b1207
		// Related to Campfires.
		// p1: AMB_BONFIRE_MP, AMB_CAMPFIRE_LRG_MP
		static void SET_PARTICLE_FX_AMBIENT_COLOUR(Entity entity, const char* p1, float r, float g, float b)
		{
			invoke<int>(0x3C61B52B00848C26, entity, p1, r, g, b);
		} // 0x3C61B52B00848C26 undefined b1207
		// Only used in R* Script nb_stalking_hunter
		static void N0xD1472AFF30C103D6(float p0)
		{
			invoke<int>(0xD1472AFF30C103D6, p0);
		} // 0xD1472AFF30C103D6 undefined b1311
		static void SET_PARTICLE_FX_BULLET_IMPACT_SCALE(float scale)
		{
			invoke<int>(0xA53C8D7D0F8C74D0, scale);
		} // 0xA53C8D7D0F8C74D0 0xC1AD5DDF b1207
		static void SET_PARTICLE_FX_BULLET_IMPACT_LODRANGE_SCALE(float p0)
		{
			invoke<int>(0x8DCCC98DC0DBF9E4, p0);
		} // 0x8DCCC98DC0DBF9E4 0x3968E915 b1207
		static void SET_SNIPER_GLINTS_ENABLED_(BOOL enabled)
		{
			invoke<int>(0x6E8EB45A4F4460EB, enabled);
		} // 0x6E8EB45A4F4460EB undefined b1207
		static void SET_PARTICLE_FX_FOOT_LODRANGE_SCALE(float p0)
		{
			invoke<int>(0x2A1625858887D4E6, p0);
		} // 0x2A1625858887D4E6 0xE3880F5A b1207
		// _DISABLE_*
		static void N0x4046493D2EEACA0E()
		{
			invoke<int>(0x4046493D2EEACA0E);
		} // 0x4046493D2EEACA0E undefined b1207
		// https://imgur.com/a/I2swSDJ
		//
		// Old name: _SET_PICKUP_OBJECT_GLOW_ENABLED
		static void SET_PICKUP_LIGHT(Object object, BOOL toggle)
		{
			invoke<int>(0x7DFB49BCDB73089A, object, toggle);
		} // 0x7DFB49BCDB73089A undefined b1207
		static void BLOCK_PICKUP_OBJECT_LIGHT_(Object pickupObject, BOOL toggle)
		{
			invoke<int>(0x50C14328119E1DD1, pickupObject, toggle);
		} // 0x50C14328119E1DD1 undefined b1207
		static void BLOCK_PICKUP_PLACEMENT_LIGHT(Pickup pickup, BOOL toggle)
		{
			invoke<int>(0x0552AA3FFC5B87AA, pickup, toggle);
		} // 0x0552AA3FFC5B87AA undefined b1207
		static void ALLOW_PICKUP_LIGHT_SYNC(Object pickupObject, BOOL allow)
		{
			invoke<int>(0x7C348310A6E2FB91, pickupObject, allow);
		} // 0x7C348310A6E2FB91 undefined b1207
		// Enables/disables a kind of 'shiny' effect on metals.
		static void SET_PEARLESCENT_FX_ENABLED_(Object object, BOOL toggle)
		{
			invoke<int>(0x72E30372E7CC4415, object, toggle);
		} // 0x72E30372E7CC4415 undefined b1207
		// Removes all decals in range from a position, it includes the bullet holes, blood pools, petrol...
		static void REMOVE_DECALS_IN_RANGE(float x, float y, float z, float range)
		{
			invoke<int>(0x86DE59FA02902B40, x, y, z, range);
		} // 0x86DE59FA02902B40 0x06A619A0 b1207
		static void REMOVE_DECALS_FROM_OBJECT(Object obj)
		{
			invoke<int>(0xFB8972BAE0013140, obj);
		} // 0xFB8972BAE0013140 0x8B67DCA7 b1207
		static int ADD_DECAL(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9, Any p10, Any p11, Any p12, Any p13, Any p14, Any p15, Any p16, Any p17, Any p18, Any p19, Any p20, Any p21)
		{
			return invoke<int>(0x57CB267624EF85C0, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21);
		} // 0x57CB267624EF85C0 0xEAD0C412 b1207
		// https://i.imgur.com/ULQU9US.jpg
		// More rounded and small puddle
		static void ADD_BLOOD_POOL_(float x, float y, float z, BOOL unused)
		{
			invoke<int>(0xFA2ECC78A6014D4F, x, y, z, unused);
		} // 0xFA2ECC78A6014D4F undefined b1207
		// https://i.imgur.com/rPITUCV.jpg
		// More customizable and more like quadrants
		static void ADD_BLOOD_POOL_2_(float x, float y, float z, float p3, float size, float p5, BOOL permanent, float p7, BOOL p8)
		{
			invoke<int>(0xF708298675ABDC6A, x, y, z, p3, size, p5, permanent, p7, p8);
		} // 0xF708298675ABDC6A undefined b1207
		// Creates blood pools for the given ped in some interval for a few seconds.
		static void ADD_BLOOD_POOLS_FOR_PED_(Ped ped)
		{
			invoke<int>(0xDFCE8CE9F3EBE93F, ped);
		} // 0xDFCE8CE9F3EBE93F undefined b1207
		static void ADD_BLOOD_POOLS_FOR_PED_WITH_PARAMS_(Ped ped, float p1, float size, float p3)
		{
			invoke<int>(0xC349EE1E6EFA494B, ped, p1, size, p3);
		} // 0xC349EE1E6EFA494B undefined b1207
		static void START_PETROL_TRAIL_DECALS(Any p0, Any p1)
		{
			invoke<int>(0x46F246D6504F0031, p0, p1);
		} // 0x46F246D6504F0031 0xE3938B0B b1207
		static void ADD_PETROL_TRAIL_DECAL_INFO(float x, float y, float z, float p3)
		{
			invoke<int>(0x73354FB6D03D2E8A, x, y, z, p3);
		} // 0x73354FB6D03D2E8A 0xBAEC6ADD b1207
		static void END_PETROL_TRAIL_DECALS()
		{
			invoke<int>(0x0E126AAE933F3B56);
		} // 0x0E126AAE933F3B56 0xCCCA6855 b1207
		static Any N0xE63D68F455CA0B47(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6)
		{
			return invoke<Any>(0xE63D68F455CA0B47, p0, p1, p2, p3, p4, p5, p6);
		} // 0xE63D68F455CA0B47 undefined b1207
		static void REMOVE_DECAL(int decal)
		{
			invoke<int>(0x49A720552EB0BB88, decal);
		} // 0x49A720552EB0BB88 0xA4363188 b1207
		static BOOL IS_DECAL_ALIVE(int decal)
		{
			return invoke<BOOL>(0x3E4B4E5CF5D3EEB5, decal);
		} // 0x3E4B4E5CF5D3EEB5 0xCDD4A61A b1207
		static void SET_DISABLE_PETROL_DECALS_IGNITING_THIS_FRAME()
		{
			invoke<int>(0x53ED07BF368EDA59);
		} // 0x53ED07BF368EDA59 0xEAB6417C b1232
		// _SET_D* or _SET_E*
		static void N0xB032C085D9A03907()
		{
			invoke<int>(0xB032C085D9A03907);
		} // 0xB032C085D9A03907 undefined b1207
		// _DISABLE_*
		static void N0xFB680A9B33D0EDBE(BOOL p0)
		{
			invoke<int>(0xFB680A9B33D0EDBE, p0);
		} // 0xFB680A9B33D0EDBE undefined b1207
		// Used in CREATE_BEZIER_BLOOD_TRAIL_OF_TYPE
		static void N0x41F88A85A579A61D(float p0)
		{
			invoke<int>(0x41F88A85A579A61D, p0);
		} // 0x41F88A85A579A61D undefined b1207
		// p1: 0.3f in R* Scripts
		static void BLOOD_TRAIL_FOR_WAYPOINT_(const char* waypointRecording, float p1)
		{
			invoke<int>(0xB9C92616929CC25D, waypointRecording, p1);
		} // 0xB9C92616929CC25D undefined b1207
		static void ADD_BLOOD_TRAIL_POINT_(float x, float y, float z)
		{
			invoke<int>(0xDD9DC1AB63D513CE, x, y, z);
		} // 0xDD9DC1AB63D513CE undefined b1207
		// Used in CREATE_BEZIER_BLOOD_TRAIL_OF_TYPE
		// _ENABLE_*
		static void N0x812C1563185C6FB2()
		{
			invoke<int>(0x812C1563185C6FB2);
		} // 0x812C1563185C6FB2 undefined b1207
		// Used in CREATE_BEZIER_BLOOD_TRAIL_OF_TYPE
		static void N0x4BD66B4E3427689B(const char* p0)
		{
			invoke<int>(0x4BD66B4E3427689B, p0);
		} // 0x4BD66B4E3427689B undefined b1207
		static void ADD_BLOOD_TRAIL_SPLAT_(float x, float y, float z)
		{
			invoke<int>(0xF5E45CB1CF965D2D, x, y, z);
		} // 0xF5E45CB1CF965D2D undefined b1207
		static void N0xF2F543D48F319A3A()
		{
			invoke<int>(0xF2F543D48F319A3A);
		} // 0xF2F543D48F319A3A undefined b1207
		// _RESET_*
		static void N0x1460B644397453EB()
		{
			invoke<int>(0x1460B644397453EB);
		} // 0x1460B644397453EB undefined b1207
		// Only used in guama1 R* Script
		// Disables lod/distant lights when BOOL is set to true
		static void DISABLE_FAR_ARTIFICIAL_LIGHTS_(BOOL disable)
		{
			invoke<int>(0xCD284E2F6AC27EE9, disable);
		} // 0xCD284E2F6AC27EE9 undefined b1207
		static void N0x453D16D41FC51D3E(BOOL p0)
		{
			invoke<int>(0x453D16D41FC51D3E, p0);
		} // 0x453D16D41FC51D3E undefined b1207
		// Used in NET_CAMP_SPIRIT_ANIMAL_CLEAR_ANIMAL_VISIBILITY
		static void N0xC06F2F45A73EABCD(Entity entity)
		{
			invoke<int>(0xC06F2F45A73EABCD, entity);
		} // 0xC06F2F45A73EABCD undefined b1311
		// https://github.com/femga/rdr3_discoveries/blob/master/graphics/timecycles
		static void SET_TIMECYCLE_MODIFIER(const char* modifierName)
		{
			invoke<int>(0xFA08722A5EA82DA7, modifierName);
		} // 0xFA08722A5EA82DA7 0xA81F3638 b1207
		static void SET_TIMECYCLE_MODIFIER_STRENGTH(float strength)
		{
			invoke<int>(0xFDB74C9CC54C3F37, strength);
		} // 0xFDB74C9CC54C3F37 0x458F4F45 b1207
		static void SET_TRANSITION_TIMECYCLE_MODIFIER(const char* modifierName, float transitionBlend)
		{
			invoke<int>(0xFF927A09F481D80C, modifierName, transitionBlend);
		} // 0xFF927A09F481D80C 0xBB2BA72A b1207
		static void SET_TRANSITION_OUT_OF_TIMECYCLE_MODIFIER(float strength)
		{
			invoke<int>(0xBB6C707F20D955D4, strength);
		} // 0xBB6C707F20D955D4 0x56345F6B b1207
		static void CLEAR_TIMECYCLE_MODIFIER()
		{
			invoke<int>(0x0E3F4AF2D63491FB);
		} // 0x0E3F4AF2D63491FB 0x8D8DF8EE b1207
		static int GET_TIMECYCLE_MODIFIER_INDEX()
		{
			return invoke<int>(0xA705394293E2B3D3);
		} // 0xA705394293E2B3D3 0x594FEEC4 b1207
		static int GET_TIMECYCLE_TRANSITION_MODIFIER_INDEX()
		{
			return invoke<int>(0x2DA67BA3C8A6755D);
		} // 0x2DA67BA3C8A6755D 0x03C44E4B b1207
		static void N0x67B0778C62E74423(Any p0)
		{
			invoke<int>(0x67B0778C62E74423, p0);
		} // 0x67B0778C62E74423 undefined b1207
		static void N0x6C03118E9E5C1A14(Any p0)
		{
			invoke<int>(0x6C03118E9E5C1A14, p0);
		} // 0x6C03118E9E5C1A14 undefined b1207
		// _GET_C* - _GET_E*
		static float GET_MODIFIED_VISIBILITY_DISTANCE_()
		{
			return invoke<float>(0x25CA89B2A39DCC69);
		} // 0x25CA89B2A39DCC69 undefined b1207
		// Old name: _ENABLE_EXTRA_TIMECYCLE_MODIFIER_STRENGTH
		static void ENABLE_MOON_CYCLE_OVERRIDE(float strength)
		{
			invoke<int>(0x6FE93BCC7BF12B63, strength);
		} // 0x6FE93BCC7BF12B63  b1207
		static void SET_TV_CHANNEL(int channel)
		{
			invoke<int>(0x593FAF7FC9401A56, channel);
		} // 0x593FAF7FC9401A56 0x41A8A627 b1207
		static int GET_TV_CHANNEL()
		{
			return invoke<int>(0xF90FBFD68F3C59AE);
		} // 0xF90FBFD68F3C59AE 0x6B96145A b1207
		static void SET_TV_VOLUME(float volume)
		{
			invoke<int>(0x73A97068787D7231, volume);
		} // 0x73A97068787D7231 0xF3504F4D b1207
		static void DRAW_TV_CHANNEL(float xPos, float yPos, float xScale, float yScale, float rotation, int red, int green, int blue, int alpha)
		{
			invoke<int>(0xC0A145540254A840, xPos, yPos, xScale, yScale, rotation, red, green, blue, alpha);
		} // 0xC0A145540254A840 0x8129EF89 b1207
		static void SET_TV_CHANNEL_PLAYLIST(int tvChannel, const char* playlistName, BOOL restart)
		{
			invoke<int>(0xDEC6B25F5DC8925B, tvChannel, playlistName, restart);
		} // 0xDEC6B25F5DC8925B 0xB262DE67 b1207
		// Old name: _IS_TV_PLAYLIST_ITEM_PLAYING
		static BOOL IS_TVSHOW_CURRENTLY_PLAYING(Hash videoCliphash)
		{
			return invoke<BOOL>(0x4D562223E0EB65F3, videoCliphash);
		} // 0x4D562223E0EB65F3 0x4D1EB0FB b1207
		static Any N0x5C674EB487891F6B()
		{
			return invoke<Any>(0x5C674EB487891F6B);
		} // 0x5C674EB487891F6B undefined b1207
		// nullsub, doesn't do anything
		static void ENABLE_MOVIE_SUBTITLES(BOOL toggle)
		{
			invoke<int>(0x6FC9B065229C0787, toggle);
		} // 0x6FC9B065229C0787 0xC2DEBA3D b1207
		static void N0x32DE2BFFDA43E62A()
		{
			invoke<int>(0x32DE2BFFDA43E62A);
		} // 0x32DE2BFFDA43E62A undefined b1207
		static void N0xD543487A1F12828F(Any p0, Any p1, Any p2, Any p3)
		{
			invoke<int>(0xD543487A1F12828F, p0, p1, p2, p3);
		} // 0xD543487A1F12828F undefined b1207
		static void N0xD9BC98B55BCFAA9B(Any p0)
		{
			invoke<int>(0xD9BC98B55BCFAA9B, p0);
		} // 0xD9BC98B55BCFAA9B undefined b1207
		static void N0x48FE0DB54045B975(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6)
		{
			invoke<int>(0x48FE0DB54045B975, p0, p1, p2, p3, p4, p5, p6);
		} // 0x48FE0DB54045B975 undefined b1311
		static void N0x735762E8D7573E42(Any p0, Any p1, Any p2)
		{
			invoke<int>(0x735762E8D7573E42, p0, p1, p2);
		} // 0x735762E8D7573E42 undefined b1207
		static void N0x981C7D863980FA51()
		{
			invoke<int>(0x981C7D863980FA51);
		} // 0x981C7D863980FA51 undefined b1207
		static void ANIMPOSTFX_PRELOAD_POSTFX_(const char* effectName)
		{
			invoke<int>(0x5199405EABFBD7F0, effectName);
		} // 0x5199405EABFBD7F0 undefined b1207
		static BOOL ANIMPOSTFX_HAS_LOADED_(const char* effectName)
		{
			return invoke<BOOL>(0xBF2DD155B2ADCD0A, effectName);
		} // 0xBF2DD155B2ADCD0A undefined b1207
		static void ANIMPOSTFX_SET_TO_UNLOAD_(const char* effectName)
		{
			invoke<int>(0x37D7BDBA89F13959, effectName);
		} // 0x37D7BDBA89F13959 undefined b1207
		// https://github.com/femga/rdr3_discoveries/blob/master/graphics/animpostfx
		static void ANIMPOSTFX_PLAY(const char* effectName)
		{
			invoke<int>(0x4102732DF6B4005F, effectName);
		} // 0x4102732DF6B4005F 0x1D980479 b1207
		static void ANIMPOSTFX_PLAY_TIMED_(const char* effectName, int duration)
		{
			invoke<int>(0x3A9A281FF71249E9, effectName, duration);
		} // 0x3A9A281FF71249E9 undefined b1207
		static void ANIMPOSTFX_STOP(const char* effectName)
		{
			invoke<int>(0xB4FD7446BAB2F394, effectName);
		} // 0xB4FD7446BAB2F394 0x06BB5CDA b1207
		// effectName2, p2 and p3 are unused
		//
		// ANIMPOSTFX_*
		static void N0x26DD2FB0A88CC412(const char* effectName, const char* effectName2, Any p2, Any p3)
		{
			invoke<int>(0x26DD2FB0A88CC412, effectName, effectName2, p2, p3);
		} // 0x26DD2FB0A88CC412 undefined b1207
		static void ANIMPOSTFX_CLEAR_EFFECT_(const char* effectName)
		{
			invoke<int>(0xC5CB91D65852ED7E, effectName);
		} // 0xC5CB91D65852ED7E undefined b1207
		static BOOL ANIMPOSTFX_IS_RUNNING(const char* effectName)
		{
			return invoke<BOOL>(0x4A123E85D7C4CA0B, effectName);
		} // 0x4A123E85D7C4CA0B 0x089D5921 b1207
		static BOOL ANIMPOSTFX_IS_TAG_PLAYING_(const char* effectName)
		{
			return invoke<BOOL>(0x2D4F9C852CE8A253, effectName);
		} // 0x2D4F9C852CE8A253 undefined b1207
		static void ANIMPOSTFX_STOP_ALL()
		{
			invoke<int>(0x66560A0D4C64FD21);
		} // 0x66560A0D4C64FD21 0x4E6D875B b1207
		static void ANIMPOSTFX_STOP_TAG_(const char* effectName)
		{
			invoke<int>(0xAD74C22A541AB987, effectName);
		} // 0xAD74C22A541AB987 undefined b1207
		// must be called after ANIMPOSTFX_PLAY, strength 0.0f - 1.0f
		static void ANIMPOSTFX_SET_STRENGTH_(const char* effectName, float strength)
		{
			invoke<int>(0xCAB4DD2D5B2B7246, effectName, strength);
		} // 0xCAB4DD2D5B2B7246 undefined b1207
		// Health Core Effect Filter Potency: p1 = 1
		// Stamina Core Effect Filter Potency: p1 = 2
		// Multiple Core Effect Filter Potency: p1 = 3
		static void ANIMPOSTFX_SET_POTENCY_(const char* effectName, int p1, float potency)
		{
			invoke<int>(0xF972F0AB16DC5260, effectName, p1, potency);
		} // 0xF972F0AB16DC5260 undefined b1207
		static void ANIMPOSTFX_SET_POSTFX_COLOR_(const char* effectName, int p1, int red, int green, int blue, int alpha)
		{
			invoke<int>(0x63011D0C7C6519E0, effectName, p1, red, green, blue, alpha);
		} // 0x63011D0C7C6519E0 undefined b1311
		// ANIMPOSTFX_*
		static BOOL N0xB958D97A0DFAA0C2(const char* effectName)
		{
			return invoke<BOOL>(0xB958D97A0DFAA0C2, effectName);
		} // 0xB958D97A0DFAA0C2 undefined b1207
		// ANIMPOSTFX_*
		static void N0xA201A3D0AC087C37(const char* effectName)
		{
			invoke<int>(0xA201A3D0AC087C37, effectName);
		} // 0xA201A3D0AC087C37 undefined b1207
		// ANIMPOSTFX_*
		static BOOL N0xFBF161FCFEC8589E(const char* effectName, int p1, BOOL p2, BOOL* p3)
		{
			return invoke<BOOL>(0xFBF161FCFEC8589E, effectName, p1, p2, p3);
		} // 0xFBF161FCFEC8589E undefined b1207
		// Known effects: MP_Trans_SceneToPhoto
		// MP_Trans_WinLose
		// SpectateFilter
		// MP_CharacterCreatorPhoto
		// MP_Trans_PhotoToScene
		// InterrogationHit
		static Hash ANIMPOSTFX_GET_STACKHASH_(const char* effectName)
		{
			return invoke<Hash>(0x842CCC9491FFCD9B, effectName);
		} // 0x842CCC9491FFCD9B undefined b1207
		static void ANIMPOSTFX_PRELOAD_POSTFX_BY_STACKHASH_(Hash effectNameHash)
		{
			invoke<int>(0xF3E039322BFBD4D8, effectNameHash);
		} // 0xF3E039322BFBD4D8 undefined b1207
		static BOOL ANIMPOSTFX_IS_PRELOADING_BY_STACKHASH(Hash effectNameHash)
		{
			return invoke<BOOL>(0x59EA80079B86D8C7, effectNameHash);
		} // 0x59EA80079B86D8C7 undefined b1207
		// ANIMPOSTFX_*
		static void N0x38D9D50F2085E9B3(Hash effectNameHash)
		{
			invoke<int>(0x38D9D50F2085E9B3, effectNameHash);
		} // 0x38D9D50F2085E9B3 undefined b1207
		static void ANIMPOSTFX_PLAY_TAG_(Hash effectNameHash)
		{
			invoke<int>(0x9B8D5D4CB8AF58B3, effectNameHash);
		} // 0x9B8D5D4CB8AF58B3 undefined b1207
		// ANIMPOSTFX_*
		static void N0xC76FC4C2FC5F4405(Hash effectNameHash)
		{
			invoke<int>(0xC76FC4C2FC5F4405, effectNameHash);
		} // 0xC76FC4C2FC5F4405 undefined b1207
		static void ANIMPOSTFX_STOP_STACKHASH_POSTFX_(Hash effectNameHash)
		{
			invoke<int>(0xEDA5CBECF56E1386, effectNameHash);
		} // 0xEDA5CBECF56E1386 undefined b1207
		static BOOL ANIMPOSTFX_IS_STACKHASH_PLAYING_(Hash effectNameHash)
		{
			return invoke<BOOL>(0xEEF83A759AE06A27, effectNameHash);
		} // 0xEEF83A759AE06A27 undefined b1207
		// ANIMPOSTFX_*
		static BOOL N0xE75CDDEBF618C8FF(Hash effectNameHash)
		{
			return invoke<BOOL>(0xE75CDDEBF618C8FF, effectNameHash);
		} // 0xE75CDDEBF618C8FF undefined b1207
		// ANIMPOSTFX_*
		static void N0x71845905BCCDE781(Hash effectNameHash)
		{
			invoke<int>(0x71845905BCCDE781, effectNameHash);
		} // 0x71845905BCCDE781 undefined b1207
		static BOOL ANIMPOSTFX_HAS_EVENT_TRIGGERED_BY_STACKHASH(Hash effectNameHash, int p1, BOOL p2, BOOL* p3)
		{
			return invoke<BOOL>(0x9AB192A9EF980EED, effectNameHash, p1, p2, p3);
		} // 0x9AB192A9EF980EED undefined b1207
		// Returns whether the 'killFX' setting is enabled.
		//
		// ANIMPOSTFX_*
		static BOOL N0xFF584F097C17FA8F()
		{
			return invoke<BOOL>(0xFF584F097C17FA8F);
		} // 0xFF584F097C17FA8F undefined b1207
		// ANIMPOSTFX_*
		static BOOL N0x3DA7A10583A4BEC0()
		{
			return invoke<BOOL>(0x3DA7A10583A4BEC0);
		} // 0x3DA7A10583A4BEC0 undefined b1207
		// Doesn't actually return anything.
		//
		// ANIMPOSTFX_*
		static Any N0xC37792A3F9C90771()
		{
			return invoke<Any>(0xC37792A3F9C90771);
		} // 0xC37792A3F9C90771 undefined b1207
		static void N0xA0F4D12D6042F6D5(Any p0, Any p1)
		{
			invoke<int>(0xA0F4D12D6042F6D5, p0, p1);
		} // 0xA0F4D12D6042F6D5 undefined b1207
		static void N0x8996FA6AD9FE4E90(Any p0)
		{
			invoke<int>(0x8996FA6AD9FE4E90, p0);
		} // 0x8996FA6AD9FE4E90 undefined b1207
		// Only used in guama1 R* SP Script while spawning the ship
		// _SET_ENTITY_QUATERNION_* - SET_ENTITY_RENDER_*
		static void SET_ENTITY_RENDER_GUARMA_SHIP_(Vehicle vehicle, BOOL toggle)
		{
			invoke<int>(0xC38B4952B728397A, vehicle, toggle);
		} // 0xC38B4952B728397A undefined b1207
		static BOOL PEDSHOT_IS_AVAILABLE()
		{
			return invoke<BOOL>(0xAF6E67D073D2DCE2);
		} // 0xAF6E67D073D2DCE2 undefined b1207
		// R* Script spd_agnesdow1: p0 = SPD_AGNES_DOWD_01
		static BOOL N0xFD05B1DDE83749FA(const char* p0)
		{
			return invoke<BOOL>(0xFD05B1DDE83749FA, p0);
		} // 0xFD05B1DDE83749FA undefined b1207
		static void PEDSHOT_FINISH_CLEANUP_DATA_()
		{
			invoke<int>(0xC2B8164C3BE871A4);
		} // 0xC2B8164C3BE871A4 undefined b1207
		static void PEDSHOT_PREVIOUS_PERSONA_PHOTO_DATA_CLEANUP_()
		{
			invoke<int>(0x3E2FDDBE435A8787);
		} // 0x3E2FDDBE435A8787 undefined b1207
		static void PEDSHOT_INIT_CLEANUP_DATA_()
		{
			invoke<int>(0x55285F885F662169);
		} // 0x55285F885F662169 undefined b1207
		static BOOL PEDSHOT_GENERATE_PERSONA_PHOTO_(const char* texture, Ped ped, int playerSlot)
		{
			return invoke<BOOL>(0xD9C24F53631F2372, texture, ped, playerSlot);
		} // 0xD9C24F53631F2372 undefined b1207
		static void PEDSHOT_SET_PERSONA_PHOTO_TYPE_(int personaPhotoLocalCacheType)
		{
			invoke<int>(0x196D3ACBEBA4A44B, personaPhotoLocalCacheType);
		} // 0x196D3ACBEBA4A44B undefined b1207
		static void N0xA1A86055792FB249(int personaPhotoLocalCacheType)
		{
			invoke<int>(0xA1A86055792FB249, personaPhotoLocalCacheType);
		} // 0xA1A86055792FB249 undefined b1207
		// Only used in R* SP Script spd_agnesdown1
		static BOOL N0x402E1A61D2587FCD(Any p0, float x, float y, float z, float p4, float p5, float heading)
		{
			return invoke<BOOL>(0x402E1A61D2587FCD, p0, x, y, z, p4, p5, heading);
		} // 0x402E1A61D2587FCD undefined b1207
		// Only used in R* SP Script spd_agnesdown1
		static Any N0x5C9C3A466B3296A8(Any p0)
		{
			return invoke<Any>(0x5C9C3A466B3296A8, p0);
		} // 0x5C9C3A466B3296A8 undefined b1207
		static Any N0xA15CCAB8AD038291(Any p0, Any p1, Any p2, Any p3)
		{
			return invoke<Any>(0xA15CCAB8AD038291, p0, p1, p2, p3);
		} // 0xA15CCAB8AD038291 undefined b1207
		static Any N0x285438C26C732F9D()
		{
			return invoke<Any>(0x285438C26C732F9D);
		} // 0x285438C26C732F9D undefined b1207
		// state: false disables artificial interior light sources for specific proxyInteriorIndex
		static void SET_PROXY_INTERIOR_INDEX_ARTIFICIAL_LIGHTS_STATE_(int proxyInteriorIndex, BOOL state)
		{
			invoke<int>(0xBFCB17895BB99E4E, proxyInteriorIndex, state);
		} // 0xBFCB17895BB99E4E undefined b1207
		static BOOL IS_PROXY_INTERIOR_INDEX_ARTIFICIAL_LIGHTS_ENABLED_(int proxyInteriorIndex)
		{
			return invoke<BOOL>(0x113857D66A9CABE6, proxyInteriorIndex);
		} // 0x113857D66A9CABE6 undefined b1207
		// Returns proxyInteriorIndex
		static int GET_PROXY_INTERIOR_INDEX_(int interiorId)
		{
			return invoke<int>(0x5D1C5D8E62E8EE1C, interiorId);
		} // 0x5D1C5D8E62E8EE1C undefined b1207
		static void N0x9D1B0B5066205692()
		{
			invoke<int>(0x9D1B0B5066205692);
		} // 0x9D1B0B5066205692 undefined b1207
		static void N0xC489FE31AC726512(Any p0, Any p1)
		{
			invoke<int>(0xC489FE31AC726512, p0, p1);
		} // 0xC489FE31AC726512 undefined b1207
		static void SET_CLOUD_LAYER_(float x, float y, int p2)
		{
			invoke<int>(0xB8C984C0D47F4F07, x, y, p2);
		} // 0xB8C984C0D47F4F07 undefined b1207
		static void SET_CLOUD_NOISE_(float x, float y, float z)
		{
			invoke<int>(0xFE7966DF01452F32, x, y, z);
		} // 0xFE7966DF01452F32 undefined b1207
		// Only used in finale2, smuggler2, winter4
		// _SET_CLOUD_A* - _SET_CLOUD_H*
		static void SET_CLOUD_POSITION_(float x, float y, float z)
		{
			invoke<int>(0x10C1767B93257480, x, y, z);
		} // 0x10C1767B93257480 undefined b1207
		static void SET_CLOUD_HEIGHT_(float height)
		{
			invoke<int>(0xC332C91388F5580B, height);
		} // 0xC332C91388F5580B undefined b1207
		static void N0x085C5B61A0114F32(Any p0, Any p1)
		{
			invoke<int>(0x085C5B61A0114F32, p0, p1);
		} // 0x085C5B61A0114F32 undefined b1207
		static void N0x1FF8731BE1DFC0C0(Any p0, Any p1)
		{
			invoke<int>(0x1FF8731BE1DFC0C0, p0, p1);
		} // 0x1FF8731BE1DFC0C0 undefined b1207
		static Any N0xFC9B53C072F418E0()
		{
			return invoke<Any>(0xFC9B53C072F418E0);
		} // 0xFC9B53C072F418E0 undefined b1207
		// nullsub, doesn't do anything
		static void N0x94B261F1F35293E1(Any p0)
		{
			invoke<int>(0x94B261F1F35293E1, p0);
		} // 0x94B261F1F35293E1 undefined b1207
		static void ENABLE_ENTITYMASK()
		{
			invoke<int>(0xFAAD23DE7A54FC14);
		} // 0xFAAD23DE7A54FC14 undefined b1207
		static void DISABLE_ENTITYMASK()
		{
			invoke<int>(0x5C9978A2A3DC3D0D);
		} // 0x5C9978A2A3DC3D0D undefined b1207
		static void ADD_ENTITY_TO_ENTITY_MASK_(Entity entity, int mask)
		{
			invoke<int>(0xC6F81FCD15350323, entity, mask);
		} // 0xC6F81FCD15350323 undefined b1207
		static void ADD_ENTITY_TO_ENTITY_MASK_WITH_INTENSITY_(Entity entity, int mask, float intensity)
		{
			invoke<int>(0x958DEBD9353C0935, entity, mask, intensity);
		} // 0x958DEBD9353C0935 undefined b1207
		static void REMOVE_ENTITY_FROM_ENTITY_MASK_(Entity entity)
		{
			invoke<int>(0x56A786E87FF53478, entity);
		} // 0x56A786E87FF53478 undefined b1207
		static BOOL GET_ENTITY_MASK_LAYERS_(Entity entity, float* layer0, float* layer1, float* layer2, float* layer3)
		{
			return invoke<BOOL>(0xE8A8378BF651079C, entity, layer0, layer1, layer2, layer3);
		} // 0xE8A8378BF651079C undefined b1207
		static void SET_ENTITY_MASK_LAYERS_(Entity entity, float* layer0, float* layer1, float* layer2, float* layer3)
		{
			invoke<int>(0xE92012611461A42A, entity, layer0, layer1, layer2, layer3);
		} // 0xE92012611461A42A undefined b1207
		// Used for script function RPG_GLOBAL_STATS__PRIVATE__ACTIVATE_STAT_FLAG - Quite and Inspiration Aura equip
		// Params: 0f, 2f, 2f
		static void SET_ENTITY_AURA_(float p0, float p1, float p2)
		{
			invoke<int>(0x249CD6B7285536F2, p0, p1, p2);
		} // 0x249CD6B7285536F2 undefined b1207
		// Used for script function RPG_GLOBAL_STATS__PRIVATE__DEACTIVATE_STAT_FLAG - Inspiration Aura unequip
		static void RESET_ENTITY_AURA_()
		{
			invoke<int>(0xAF4D239B8903FCBE);
		} // 0xAF4D239B8903FCBE undefined b1207
		// enum class eSnowCoverageType
		// {
		// 	Primary,
		// 	Secondary,
		// 	Xmas,
		// 	XmasSecondary // since b1232
		// };
		static void SET_SNOW_COVERAGE_TYPE_(int type)
		{
			invoke<int>(0xF02A9C330BBFC5C7, type);
		} // 0xF02A9C330BBFC5C7 undefined b1207
		static void N0x519928DF02EB5101(Any p0)
		{
			invoke<int>(0x519928DF02EB5101, p0);
		} // 0x519928DF02EB5101 undefined b1355
		static void N0x1C6306E5BC25C29C()
		{
			invoke<int>(0x1C6306E5BC25C29C);
		} // 0x1C6306E5BC25C29C undefined b1207
	}

	namespace GANG
	{
		static BOOL NETWORK_IS_GANG_ID_VALID(Any gangId)
		{
			return invoke<BOOL>(0xD6F6ACF4392187FB, gangId);
		} // 0xD6F6ACF4392187FB undefined b1207
		static BOOL NETWORK_IS_GANG_IN_SESSION(Any gangId)
		{
			return invoke<BOOL>(0x93A91A351A07360E, gangId);
		} // 0x93A91A351A07360E undefined b1207
		static BOOL NETWORK_IS_GANG_ACTIVE(Any gangId)
		{
			return invoke<BOOL>(0x0F99F6436528A089, gangId);
		} // 0x0F99F6436528A089 undefined b1207
		static BOOL NETWORK_IS_GANG_OPEN_(Any gangId)
		{
			return invoke<BOOL>(0xFCF96CCBD81B24C8, gangId);
		} // 0xFCF96CCBD81B24C8 undefined b1207
		static int NETWORK_GET_GANG_PRIVACY_()
		{
			return invoke<int>(0x9970AE8C3D706139);
		} // 0x9970AE8C3D706139 undefined b1207
		// openStatus = true -> sets privacyType = 2 (PUBLIC_ADVERTISED)
		// openStatus = false -> sets privacyType = 1 (INVITE_ONLY)
		//
		// campSize: NET_CAMP_SIZE_SMALLEST = 4, NET_CAMP_SIZE_LARGEST = 7
		static void NETWORK_START_GANG_(BOOL openStatus, int campSize)
		{
			invoke<int>(0xD1A226F2E05E58FC, openStatus, campSize);
		} // 0xD1A226F2E05E58FC undefined b1207
		static BOOL NETWORK_SET_GANG_PRIVACY_(int privacyType)
		{
			return invoke<BOOL>(0xC5BF29F4035277C2, privacyType);
		} // 0xC5BF29F4035277C2 undefined b1207
		static void NETWORK_LEAVE_GANG_(BOOL disband)
		{
			invoke<int>(0x0A04A07BC3074EDB, disband);
		} // 0x0A04A07BC3074EDB undefined b1207
		// banTimeSeconds is 120 in R* Scripts
		static void NETWORK_KICK_GANG_MEMBER_(Player player, int banTimeSeconds)
		{
			invoke<int>(0xCD9E2D9BC52FD80F, player, banTimeSeconds);
		} // 0xCD9E2D9BC52FD80F undefined b1207
		// Returns true if join succeeded, false if failed.
		static BOOL NETWORK_REQUEST_GANG_JOIN_(Any gangId)
		{
			return invoke<BOOL>(0xC0474C8BCF6787AD, gangId);
		} // 0xC0474C8BCF6787AD undefined b1207
		static BOOL NETWORK_IS_GANG_LEADER(Player player)
		{
			return invoke<BOOL>(0x424B17A7DC5C90BC, player);
		} // 0x424B17A7DC5C90BC undefined b1207
		static BOOL NETWORK_IS_GANG_MEMBER_(Any gangId, Player player)
		{
			return invoke<BOOL>(0x9BE7DCB22D32CCBE, gangId, player);
		} // 0x9BE7DCB22D32CCBE undefined b1207
		static BOOL NETWORK_IS_IN_SAME_GANG(Player player1, Player player2)
		{
			return invoke<BOOL>(0x3F59FE6F37869576, player1, player2);
		} // 0x3F59FE6F37869576 undefined b1207
		static BOOL NETWORK_IS_IN_MY_GANG_(Player player)
		{
			return invoke<BOOL>(0x81FB74C83C2ED69F, player);
		} // 0x81FB74C83C2ED69F undefined b1207
		static int NETWORK_GET_NUM_GANG_MEMBERS(Any gangId)
		{
			return invoke<int>(0x149A2751AB66AC02, gangId);
		} // 0x149A2751AB66AC02 undefined b1207
		static int NETWORK_GET_GANG_SIZE_(Any gangId)
		{
			return invoke<int>(0x853B0FA4D8732C57, gangId);
		} // 0x853B0FA4D8732C57 undefined b1207
		static BOOL NETWORK_SET_GANG_SIZE_(int size)
		{
			return invoke<BOOL>(0x833D8268D51B4522, size);
		} // 0x833D8268D51B4522 undefined b1207
		static Any NETWORK_GET_GANG_ID(Player player)
		{
			return invoke<Any>(0x901E0DC25080C8B9, player);
		} // 0x901E0DC25080C8B9 undefined b1207
		static int NETWORK_GET_GANG_MEMBERS_(Any gangId, Any* memberHandles)
		{
			return invoke<int>(0xD1BF325C8252A982, gangId, memberHandles);
		} // 0xD1BF325C8252A982 undefined b1207
		// _NETWORK_GET_* or _NETWORK_IS_*
		static BOOL N0xDA801F7F6A5278D3(Player player)
		{
			return invoke<BOOL>(0xDA801F7F6A5278D3, player);
		} // 0xDA801F7F6A5278D3 undefined b1207
		static Any N0x2F7EB8B6F6AFE79C(Any p0)
		{
			return invoke<Any>(0x2F7EB8B6F6AFE79C, p0);
		} // 0x2F7EB8B6F6AFE79C undefined b1207
		static Any N0x53A94294FDDCF98C(Any p0, Any p1)
		{
			return invoke<Any>(0x53A94294FDDCF98C, p0, p1);
		} // 0x53A94294FDDCF98C undefined b1207
		static Player NETWORK_GET_GANG_LEADER(Any gangId)
		{
			return invoke<Player>(0x4BE6C13A45CCA8EC, gangId);
		} // 0x4BE6C13A45CCA8EC undefined b1207
		static BOOL NETWORK_GET_GANG_LEADER_HANDLE_(Any gangId, Any* gamerHandle)
		{
			return invoke<BOOL>(0xCE88A261DCBBA0D9, gangId, gamerHandle);
		} // 0xCE88A261DCBBA0D9 undefined b1207
		static BOOL N0x6102830F764B3DE1(Player player)
		{
			return invoke<BOOL>(0x6102830F764B3DE1, player);
		} // 0x6102830F764B3DE1 undefined b1207
		static void N0xB38C256498748413()
		{
			invoke<int>(0xB38C256498748413);
		} // 0xB38C256498748413 undefined b1207
		static Any N0xE4C64CD37CB176AA(int p0)
		{
			return invoke<Any>(0xE4C64CD37CB176AA, p0);
		} // 0xE4C64CD37CB176AA undefined b1207
		static Any N0x7BAA30C9BBE8AEE7(Any p0, Any p1)
		{
			return invoke<Any>(0x7BAA30C9BBE8AEE7, p0, p1);
		} // 0x7BAA30C9BBE8AEE7 undefined b1207
		static Any N0x0E5C9FB9ED5DFF1C(Any p0)
		{
			return invoke<Any>(0x0E5C9FB9ED5DFF1C, p0);
		} // 0x0E5C9FB9ED5DFF1C undefined b1207
		static void N0xB22B1D9F74095382(Any p0)
		{
			invoke<int>(0xB22B1D9F74095382, p0);
		} // 0xB22B1D9F74095382 undefined b1207
		static void N0xEE4F20004D0288B7()
		{
			invoke<int>(0xEE4F20004D0288B7);
		} // 0xEE4F20004D0288B7 undefined b1207
		static void N0xAD22AB64FA428DF3(Any p0)
		{
			invoke<int>(0xAD22AB64FA428DF3, p0);
		} // 0xAD22AB64FA428DF3 undefined b1207
		static Any N0x48D82C83987E18E4(Any p0)
		{
			return invoke<Any>(0x48D82C83987E18E4, p0);
		} // 0x48D82C83987E18E4 undefined b1207
		static void N0xA9CEAE8D6637FBAD(Any p0)
		{
			invoke<int>(0xA9CEAE8D6637FBAD, p0);
		} // 0xA9CEAE8D6637FBAD undefined b1207
		static Any N0x51C5EF47086AA0D7()
		{
			return invoke<Any>(0x51C5EF47086AA0D7);
		} // 0x51C5EF47086AA0D7 undefined b1207
		static Any N0x644E02F24F9D4E98(Any p0, Any p1)
		{
			return invoke<Any>(0x644E02F24F9D4E98, p0, p1);
		} // 0x644E02F24F9D4E98 undefined b1207
		static Any N0x3ADC71A66356D706()
		{
			return invoke<Any>(0x3ADC71A66356D706);
		} // 0x3ADC71A66356D706 undefined b1207
		static Any N0xFA7C5B7E087A4CEB()
		{
			return invoke<Any>(0xFA7C5B7E087A4CEB);
		} // 0xFA7C5B7E087A4CEB undefined b1207
		static Any N0x1F11702DDBD915C6(Any p0, Any p1)
		{
			return invoke<Any>(0x1F11702DDBD915C6, p0, p1);
		} // 0x1F11702DDBD915C6 undefined b1207
		static Any N0x7933754F260B428A(Player player)
		{
			return invoke<Any>(0x7933754F260B428A, player);
		} // 0x7933754F260B428A undefined b1207
		static Any N0xAFD3599A3CC5637D()
		{
			return invoke<Any>(0xAFD3599A3CC5637D);
		} // 0xAFD3599A3CC5637D undefined b1207
		static void N0xC81A9E2C8EFD28D5(Any p0)
		{
			invoke<int>(0xC81A9E2C8EFD28D5, p0);
		} // 0xC81A9E2C8EFD28D5 undefined b1207
	}

	namespace GOOGLE_ANALYTICS
	{
		static void GOOGLE_ANALYTICS_PUSH_PAGE_(const char* pageName)
		{
			invoke<int>(0xD43A616AE3AC4EF6, pageName);
		} // 0xD43A616AE3AC4EF6 undefined b1207
		static void GOOGLE_ANALYTICS_POP_PAGE_(const char* pageName)
		{
			invoke<int>(0xC6DE040378364798, pageName);
		} // 0xC6DE040378364798 undefined b1207
		static BOOL GOOGLE_ANALYTICS_START_EVENT_(const char* eventCategory, const char* eventAction, const char* eventLabel, int eventValue)
		{
			return invoke<BOOL>(0x1C54F031D7C0F7AC, eventCategory, eventAction, eventLabel, eventValue);
		} // 0x1C54F031D7C0F7AC undefined b1355
		static BOOL GOOGLE_ANALYTICS_END_EVENT_()
		{
			return invoke<BOOL>(0x87BBCC4360A9BDE3);
		} // 0x87BBCC4360A9BDE3 undefined b1355
	}

	namespace HUD
	{
		// Enables reduced time scale while menus such as weapon wheel and satchel are open.
		static void ENABLE_REDUCED_MENU_TIME_SCALE_()
		{
			invoke<int>(0x26F6BBEA2CE3E3DC);
		} // 0x26F6BBEA2CE3E3DC undefined b1207
		// Disables reduced time scale while menus such as weapon wheel and satchel are open.
		static void DISABLE_REDUCED_MENU_TIME_SCALE_()
		{
			invoke<int>(0xC5C7A2F6567FCCBC);
		} // 0xC5C7A2F6567FCCBC undefined b1207
		static void ENABLE_HUD_CONTEXT_THIS_FRAME_(Hash component)
		{
			invoke<int>(0xC9CAEAEEC1256E54, component);
		} // 0xC9CAEAEEC1256E54 undefined b1207
		// https://github.com/femga/rdr3_discoveries/tree/master/graphics/HUD/hud_presets
		// Old name: _HIDE_HUD_COMPONENT
		static void ENABLE_HUD_CONTEXT_(Hash component)
		{
			invoke<int>(0x4CC5F2FC1332577F, component);
		} // 0x4CC5F2FC1332577F undefined b1207
		// Old name: _DISPLAY_HUD_COMPONENT
		static void DISABLE_HUD_CONTEXT_(Hash component)
		{
			invoke<int>(0x8BC7C1F929D07BF3, component);
		} // 0x8BC7C1F929D07BF3 undefined b1207
		static int N0x7EC0D68233E391AC(int p0)
		{
			return invoke<int>(0x7EC0D68233E391AC, p0);
		} // 0x7EC0D68233E391AC undefined b1207
		static void BUSYSPINNER_SET_TEXT_(const char* text)
		{
			invoke<int>(0x7F78CD75CC4539E4, text);
		} // 0x7F78CD75CC4539E4 undefined b1207
		// Removes the loading prompt at the bottom right of the screen.
		static void BUSYSPINNER_OFF()
		{
			invoke<int>(0x58F441B90EA84D06);
		} // 0x58F441B90EA84D06 0x94119534 b1207
		static BOOL BUSYSPINNER_IS_ON()
		{
			return invoke<BOOL>(0x823BF7B1DF613A21);
		} // 0x823BF7B1DF613A21 0xB8B3A5D0 b1207
		// Note: you must use VAR_STRING. Byte code very similar to TEXT_COMMAND_DISPLAY_TEXT in V
		// Old name: _GET_TEXT_SUBSTRING
		static const char* GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME(const char* text, int position, int length)
		{
			return invoke<const char*>(0x9D7E12EC6A1EE4E5, text, position, length);
		} // 0x9D7E12EC6A1EE4E5 0x34A396EE b1207
		// Gets a string literal from a label name.
		//
		// Old name: _GET_LABEL_TEXT
		static const char* GET_FILENAME_FOR_AUDIO_CONVERSATION(const char* labelName)
		{
			return invoke<const char*>(0xCFEDCCAD3C5BA90D, labelName);
		} // 0xCFEDCCAD3C5BA90D 0x95C4B5AD b1207
		static void CLEAR_ALL_HELP_MESSAGES()
		{
			invoke<int>(0x916ED8321F087059);
		} // 0x916ED8321F087059 0x9E5D9198 b1207
		static BOOL TEXT_BLOCK_IS_LOADED(const char* textBlock)
		{
			return invoke<BOOL>(0xD0976CC34002DB57, textBlock);
		} // 0xD0976CC34002DB57 undefined b1207
		static BOOL TEXT_BLOCK_IS_STREAMED_(const char* textBlock)
		{
			return invoke<BOOL>(0x3CF96E16265B7DC8, textBlock);
		} // 0x3CF96E16265B7DC8 undefined b1207
		static void TEXT_BLOCK_REQUEST(const char* textBlock)
		{
			invoke<int>(0xF66090013DE648D5, textBlock);
		} // 0xF66090013DE648D5 undefined b1207
		static void TEXT_BLOCK_DELETE_(const char* textBlock)
		{
			invoke<int>(0xAA03F130A637D923, textBlock);
		} // 0xAA03F130A637D923 undefined b1207
		static BOOL DOES_TEXT_BLOCK_EXIST_(const char* textDatabase)
		{
			return invoke<BOOL>(0x2C729F2B94CEA911, textDatabase);
		} // 0x2C729F2B94CEA911 undefined b1207
		// Checks if the passed gxt name exists in the game files.
		static BOOL DOES_TEXT_LABEL_EXIST(const char* label)
		{
			return invoke<BOOL>(0x73C258C68D6F55B6, label);
		} // 0x73C258C68D6F55B6 0x6ECAE560 b1207
		static const char* GET_LABEL_TEXT_2_(const char* label)
		{
			return invoke<const char*>(0x3429670F9B9EF2D3, label);
		} // 0x3429670F9B9EF2D3 undefined b1207
		// Similar to 0x9D7E12EC6A1EE4E5(GET_TEXT_SUBSTRING) but starts at the beginning of the string
		static const char* GET_TEXT_SUBSTRING_2_(const char* text, int length)
		{
			return invoke<const char*>(0xD8402B858F4DDD88, text, length);
		} // 0xD8402B858F4DDD88 undefined b1207
		static Any N0x806862E5D266CF38(Any p0, Any p1, Any p2)
		{
			return invoke<Any>(0x806862E5D266CF38, p0, p1, p2);
		} // 0x806862E5D266CF38 undefined b1207
		// Returns the length of the string passed (much like strlen).
		static int GET_LENGTH_OF_LITERAL_STRING(const char* string)
		{
			return invoke<int>(0x481FBF588B0B76DB, string);
		} // 0x481FBF588B0B76DB 0x99379D55 b1207
		static int GET_LENGTH_OF_LITERAL_STRING_IN_BYTES(const char* string)
		{
			return invoke<int>(0xDC5AD6B7AB8184F5, string);
		} // 0xDC5AD6B7AB8184F5 0x7DBC0764 b1207
		// Returns the label text given the hash.
		//
		// Old name: _GET_LABEL_TEXT_BY_HASH
		static const char* GET_STRING_FROM_HASH_KEY(Hash labelHash)
		{
			return invoke<const char*>(0xBD5DD5EAE2B6CE14, labelHash);
		} // 0xBD5DD5EAE2B6CE14 undefined b1207
		static BOOL IS_RADAR_PREFERENCE_SWITCHED_ON()
		{
			return invoke<BOOL>(0x81E47F0EE1F2B21E);
		} // 0x81E47F0EE1F2B21E 0x14AEAA28 b1207
		static BOOL IS_SUBTITLE_PREFERENCE_SWITCHED_ON()
		{
			return invoke<BOOL>(0x7C4AC9573587F2DF);
		} // 0x7C4AC9573587F2DF 0x63BA19F5 b1355
		// If Hud should be displayed
		static void DISPLAY_HUD(BOOL toggle)
		{
			invoke<int>(0xD63FE3AF9FB3D53F, toggle);
		} // 0xD63FE3AF9FB3D53F 0xD10E4E31 b1207
		static BOOL IS_HUD_HIDDEN()
		{
			return invoke<BOOL>(0x71B72B478F8189DC);
		} // 0x71B72B478F8189DC 0x40BADA1D b1207
		static BOOL IS_RADAR_HIDDEN()
		{
			return invoke<BOOL>(0x1B82FD5FFA4D666E);
		} // 0x1B82FD5FFA4D666E 0x1AB3B954 b1207
		static BOOL IS_RADAR_HIDDEN_BY_SCRIPT()
		{
			return invoke<BOOL>(0x66F35DD9D2B58579);
		} // 0x66F35DD9D2B58579 undefined b1207
		// colorNameHash: https://alloc8or.re/rdr3/doc/enums/eColor.txt
		static void GET_COLOR_FROM_NAME_(Hash colorNameHash, int* red, int* green, int* blue, int* alpha)
		{
			invoke<int>(0xB981DD2DFAF9B1C9, colorNameHash, red, green, blue, alpha);
		} // 0xB981DD2DFAF9B1C9 undefined b1207
		// nullsub, this native does nothing since build 1436, use _BG_DISPLAY_TEXT (0x16794E044C9EFB58) instead.
		static void DISPLAY_TEXT_(const char* text, float xPos, float yPos)
		{
			invoke<int>(0xD79334A4BB99BAD1, text, xPos, yPos);
		} // 0xD79334A4BB99BAD1 undefined b1207
		// This native does nothing since build 1436, use _BG_SET_TEXT_COLOR (0x16FA5CE47F184F1E) instead.
		static void SET_TEXT_COLOR_(int r, int g, int b, int a)
		{
			invoke<int>(0x50A41AD966910F03, r, g, b, a);
		} // 0x50A41AD966910F03 undefined b1207
		static void SET_TEXT_RENDER_ID(int renderId)
		{
			invoke<int>(0xE550CDE128D56757, renderId);
		} // 0xE550CDE128D56757 0xC5C3B7F3 b1207
		static BOOL REGISTER_NAMED_RENDERTARGET(const char* name, BOOL p1)
		{
			return invoke<BOOL>(0x98AF2BB6F62BD588, name, p1);
		} // 0x98AF2BB6F62BD588 0xFAE5D6F0 b1207
		static BOOL IS_NAMED_RENDERTARGET_REGISTERED(const char* name)
		{
			return invoke<BOOL>(0x3EE32F7964C40FE6, name);
		} // 0x3EE32F7964C40FE6 0x284057F5 b1207
		static BOOL RELEASE_NAMED_RENDERTARGET(const char* name)
		{
			return invoke<BOOL>(0x0E692EE61761361F, name);
		} // 0x0E692EE61761361F 0xD3F6C892 b1207
		static void LINK_NAMED_RENDERTARGET(Hash modelHash)
		{
			invoke<int>(0x2F506B8556242DDB, modelHash);
		} // 0x2F506B8556242DDB 0x6844C4B9 b1207
		static int GET_NAMED_RENDERTARGET_RENDER_ID(const char* name)
		{
			return invoke<int>(0xB6762A85EE29AA60, name);
		} // 0xB6762A85EE29AA60 0xF9D7A401 b1207
		static BOOL IS_NAMED_RENDERTARGET_LINKED(Hash modelHash)
		{
			return invoke<BOOL>(0x707032835FF09AE7, modelHash);
		} // 0x707032835FF09AE7 0x8B52601F b1207
		static void N0x9D37EB5003E0F2CF(Any p0, Any p1)
		{
			invoke<int>(0x9D37EB5003E0F2CF, p0, p1);
		} // 0x9D37EB5003E0F2CF undefined b1207
		static void HIDE_LOADING_ON_FADE_THIS_FRAME()
		{
			invoke<int>(0xEA600AABAF4B9084);
		} // 0xEA600AABAF4B9084 0x35087963 b1207
		static void N0x052D4AC0922AF91A(Any p0, Any p1)
		{
			invoke<int>(0x052D4AC0922AF91A, p0, p1);
		} // 0x052D4AC0922AF91A undefined b1207
		static void HIDE_HUD_AND_RADAR_THIS_FRAME()
		{
			invoke<int>(0x36CDD81627A6FCD2);
		} // 0x36CDD81627A6FCD2 0xB75D4AD2 b1207
		static void N0x8A59D44189AF2BC5(Any p0, Any p1)
		{
			invoke<int>(0x8A59D44189AF2BC5, p0, p1);
		} // 0x8A59D44189AF2BC5 undefined b1207
		static void N0x160825DADF1B04B3()
		{
			invoke<int>(0x160825DADF1B04B3);
		} // 0x160825DADF1B04B3 undefined b1207
		static Any N0x9C409BBC492CB5B1()
		{
			return invoke<Any>(0x9C409BBC492CB5B1);
		} // 0x9C409BBC492CB5B1 undefined b1207
		static Any N0x0501D52D24EA8934(Any p0)
		{
			return invoke<Any>(0x0501D52D24EA8934, p0);
		} // 0x0501D52D24EA8934 undefined b1207
		static Any N0x100157D6D7FE32CA(Any p0, Any p1)
		{
			return invoke<Any>(0x100157D6D7FE32CA, p0, p1);
		} // 0x100157D6D7FE32CA undefined b1207
		static Any N0x28AE29D909C8FDCE(Any p0)
		{
			return invoke<Any>(0x28AE29D909C8FDCE, p0);
		} // 0x28AE29D909C8FDCE undefined b1207
		// nullsub, doesn't do anything
		static void N0x2F7BB105144ACF30()
		{
			invoke<int>(0x2F7BB105144ACF30);
		} // 0x2F7BB105144ACF30 undefined b1207
		// nullsub, doesn't do anything
		static void N0xBFFF81E12A745A5F()
		{
			invoke<int>(0xBFFF81E12A745A5F);
		} // 0xBFFF81E12A745A5F undefined b1207
		static void SET_MISSION_NAME(BOOL p0, const char* name)
		{
			invoke<int>(0x402669A4BDAA72DA, p0, name);
		} // 0x402669A4BDAA72DA 0x68DCAE10 b1207
		static void SET_MISSION_NAME_FOR_UGC_MISSION(BOOL p0, const char* name)
		{
			invoke<int>(0xD98630CE73C61E98, p0, name);
		} // 0xD98630CE73C61E98 0x8D9A1734 b1207
		static void N0xCE0D2F5586627CCE(Any p0, Any p1, Any p2, Any p3, Any p4)
		{
			invoke<int>(0xCE0D2F5586627CCE, p0, p1, p2, p3, p4);
		} // 0xCE0D2F5586627CCE undefined b1207
		static int GET_HUD_SCREEN_POSITION_FROM_WORLD_POSITION(float worldX, float worldY, float worldZ, float* screenX, float* screenY)
		{
			return invoke<int>(0xB39C81628EF10B42, worldX, worldY, worldZ, screenX, screenY);
		} // 0xB39C81628EF10B42 0xFE9A39F8 b1207
		static void HIDE_HUD_THIS_FRAME_()
		{
			invoke<int>(0xBF4F34A85CA2970D);
		} // 0xBF4F34A85CA2970D undefined b1207
		static void DISABLE_FRONTEND_THIS_FRAME()
		{
			invoke<int>(0x56CE42A528156A67);
		} // 0x56CE42A528156A67 0xD86A029E b1207
		static void N0x5651516D947ABC53()
		{
			invoke<int>(0x5651516D947ABC53);
		} // 0x5651516D947ABC53 undefined b1207
		// Old name: _ALLOW_PAUSE_MENU_WHEN_DEAD_THIS_FRAME
		static void ALLOW_PAUSE_WHEN_NOT_IN_STATE_OF_PLAY_THIS_FRAME()
		{
			invoke<int>(0x30996422DF1EE561);
		} // 0x30996422DF1EE561 0x630CD8EE b1207
		static void SET_FRONTEND_ACTIVE(BOOL active)
		{
			invoke<int>(0xCE47C21C0687EBC2, active);
		} // 0xCE47C21C0687EBC2 0x81E1AD32 b1207
		// Returns true when either Pause Menu, a Frontend Menu, Online Policies menu or Social Club menu is active.
		static BOOL IS_PAUSE_MENU_ACTIVE()
		{
			return invoke<BOOL>(0x535384D6067BA42E);
		} // 0x535384D6067BA42E 0xD3600591 b1207
		static void SHOW_PLAYER_CORES_(BOOL state)
		{
			invoke<int>(0x50C803A4CD5932C5, state);
		} // 0x50C803A4CD5932C5 undefined b1207
		static void SHOW_HORSE_CORES_(BOOL state)
		{
			invoke<int>(0xD4EE21B7CC7FD350, state);
		} // 0xD4EE21B7CC7FD350 undefined b1207
		static void N0x3FE4FB41EF7D2196(Any p0)
		{
			invoke<int>(0x3FE4FB41EF7D2196, p0);
		} // 0x3FE4FB41EF7D2196 undefined b1207
		static void JOURNAL_WRITE_ENTRY_(Any p0)
		{
			invoke<int>(0x6DFDD665E416B093, p0);
		} // 0x6DFDD665E416B093 undefined b1207
		static Any JOURNAL_CAN_WRITE_ENTRY_(Any p0)
		{
			return invoke<Any>(0xCF782691D91F270E, p0);
		} // 0xCF782691D91F270E undefined b1207
		static Any JOURNAL_GET_ENTRY_COUNT_()
		{
			return invoke<Any>(0xE65B5DE53351BE22);
		} // 0xE65B5DE53351BE22 undefined b1207
		static Any JOURNAL_GET_ENTRY_AT_INDEX_(Any p0)
		{
			return invoke<Any>(0x3D16ABD7A1FD8C96, p0);
		} // 0x3D16ABD7A1FD8C96 undefined b1207
		static Any JOURNAL_GET_GRIME_AT_INDEX_(Any p0)
		{
			return invoke<Any>(0xCB5945E1B855852F, p0);
		} // 0xCB5945E1B855852F undefined b1207
		static Any JOURNAL_GET_ENTRY_INFO_(Any p0, Any p1)
		{
			return invoke<Any>(0x5514C3E60673530F, p0, p1);
		} // 0x5514C3E60673530F undefined b1207
		static Any JOURNAL_GET_TEXTURE_WITH_LAYOUT_(Any p0, Any p1, Any p2)
		{
			return invoke<Any>(0x62CC549B3B8EA2AA, p0, p1, p2);
		} // 0x62CC549B3B8EA2AA undefined b1207
		static void JOURNAL_MARK_READ_(Any p0)
		{
			invoke<int>(0xE4509BABE59BD24E, p0);
		} // 0xE4509BABE59BD24E undefined b1207
		static void JOURNAL_CLEAR_ALL_PROGRESS_()
		{
			invoke<int>(0xF402978DE6F88D6E);
		} // 0xF402978DE6F88D6E undefined b1207
		static Any UI_REQUEST_SCENE(Any p0, Any p1)
		{
			return invoke<Any>(0xB6857100F8FD433C, p0, p1);
		} // 0xB6857100F8FD433C undefined b1207
		static void N0xF1E6979C0B779985(int uiscene)
		{
			invoke<int>(0xF1E6979C0B779985, uiscene);
		} // 0xF1E6979C0B779985 undefined b1207
		static Any UI_GET_SCENE_UIOBJECT(Any p0)
		{
			return invoke<Any>(0xBE1067CD1C9570F6, p0);
		} // 0xBE1067CD1C9570F6 undefined b1207
		static void UI_MOVIEVIEW_SET_RENDER_TARGET(Any p0, Any p1)
		{
			invoke<int>(0x51DE09A2196BD951, p0, p1);
		} // 0x51DE09A2196BD951 undefined b1207
		static Prompt UI_PROMPT_CREATE_(Hash inputHash, const char* labelName, Any p2, Any p3, Any p4, int p5)
		{
			return invoke<Prompt>(0x29FA7910726C3889, inputHash, labelName, p2, p3, p4, p5);
		} // 0x29FA7910726C3889 undefined b1207
		static Prompt UI_PROMPT_REGISTER_BEGIN_()
		{
			return invoke<Prompt>(0x04F97DE45A519419);
		} // 0x04F97DE45A519419 undefined b1207
		static void UI_PROMPT_REGISTER_END_(Prompt prompt)
		{
			invoke<int>(0xF7AA2696A22AD8B9, prompt);
		} // 0xF7AA2696A22AD8B9 undefined b1207
		// priority: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/ePromptPriority
		static void UI_PROMPT_SET_PRIORITY_(Prompt prompt, int priority)
		{
			invoke<int>(0xCA24F528D0D16289, prompt, priority);
		} // 0xCA24F528D0D16289 undefined b1207
		static Any UI_PROMPT_SET_CONTROL_ACTION_(Prompt prompt, Hash action)
		{
			return invoke<Any>(0xB5352B7494A08258, prompt, action);
		} // 0xB5352B7494A08258 undefined b1207
		static void UI_PROMPT_SET_ALLOWED_ACTION_(Prompt prompt, Hash action)
		{
			invoke<int>(0x565C1CE183CB0EAF, prompt, action);
		} // 0x565C1CE183CB0EAF undefined b1207
		static void UI_PROMPT_SET_STANDARD_MODE_(Prompt prompt, BOOL releaseMode)
		{
			invoke<int>(0xCC6656799977741B, prompt, releaseMode);
		} // 0xCC6656799977741B undefined b1207
		// Params: p1 is 0
		static BOOL UI_PROMPT_HAS_STANDARD_MODE_COMPLETED_(Prompt prompt, int p1)
		{
			return invoke<BOOL>(0xC92AC953F0A982AE, prompt, p1);
		} // 0xC92AC953F0A982AE undefined b1207
		static void UI_PROMPT_SET_PRESSED_TIMED_MODE_(Prompt prompt, int depletionTimeMs)
		{
			invoke<int>(0x1473D3AF51D54276, prompt, depletionTimeMs);
		} // 0x1473D3AF51D54276 undefined b1207
		static BOOL UI_PROMPT_HAS_PRESSED_TIMED_MODE_COMPLETED_(Prompt prompt)
		{
			return invoke<BOOL>(0x3CE854D250A88DAF, prompt);
		} // 0x3CE854D250A88DAF undefined b1207
		static BOOL UI_PROMPT_HAS_PRESSED_TIMED_MODE_FAILED_(Prompt prompt)
		{
			return invoke<BOOL>(0x1A17B9ECFF617562, prompt);
		} // 0x1A17B9ECFF617562 undefined b1207
		// Params: p2 is 304000 in R* SP Script coachrobberies
		static void UI_PROMPT_SET_HOLD_MODE_(Prompt prompt, int holdTimeMs)
		{
			invoke<int>(0x94073D5CA3F16B7B, prompt, holdTimeMs);
		} // 0x94073D5CA3F16B7B undefined b1207
		// Hashes: SHORT_TIMED_EVENT_MP, SHORT_TIMED_EVENT, MEDIUM_TIMED_EVENT, LONG_TIMED_EVENT, RUSTLING_CALM_TIMING, PLAYER_FOCUS_TIMING, PLAYER_REACTION_TIMING
		static void UI_PROMPT_SET_STANDARDIZED_HOLD_MODE_(Prompt prompt, Hash timedEventHash)
		{
			invoke<int>(0x74C7D7B72ED0D3CF, prompt, timedEventHash);
		} // 0x74C7D7B72ED0D3CF undefined b1207
		static void UI_PROMPT_SET_HOLD_INDEFINITELY_MODE_(Prompt prompt)
		{
			invoke<int>(0xEA5CCF4EEB2F82D1, prompt);
		} // 0xEA5CCF4EEB2F82D1 undefined b1207
		static void UI_PROMPT_SET_HOLD_AUTO_FILL_MODE_(Prompt prompt, int autoFillTimeMs, int holdTimeMs)
		{
			invoke<int>(0x3CE932E737C145D6, prompt, autoFillTimeMs, holdTimeMs);
		} // 0x3CE932E737C145D6 undefined b1207
		static void UI_PROMPT_SET_HOLD_AUTO_FILL_WITH_DECAY_MODE_(Prompt prompt, int autoFillTimeMs, int holdTimeMs)
		{
			invoke<int>(0xA3F2149AA24F3D8E, prompt, autoFillTimeMs, holdTimeMs);
		} // 0xA3F2149AA24F3D8E undefined b1207
		static BOOL UI_PROMPT_HAS_HOLD_AUTO_FILL_MODE_(Prompt prompt)
		{
			return invoke<BOOL>(0x8010BEBD0D5ED5BC, prompt);
		} // 0x8010BEBD0D5ED5BC undefined b1207
		static BOOL UI_PROMPT_HAS_HOLD_MODE_(Prompt prompt)
		{
			return invoke<BOOL>(0xB60C9F9ED47ABB76, prompt);
		} // 0xB60C9F9ED47ABB76 undefined b1207
		static BOOL UI_PROMPT_IS_HOLD_MODE_RUNNING_(Prompt prompt)
		{
			return invoke<BOOL>(0xC7D70EAEF92EFF48, prompt);
		} // 0xC7D70EAEF92EFF48 undefined b1207
		static BOOL UI_PROMPT_HAS_HOLD_MODE_COMPLETED_(Prompt prompt)
		{
			return invoke<BOOL>(0xE0F65F0640EF0617, prompt);
		} // 0xE0F65F0640EF0617 undefined b1207
		static float UI_PROMPT_GET_PROGRESS_(Prompt prompt)
		{
			return invoke<float>(0x81801291806DBC50, prompt);
		} // 0x81801291806DBC50 undefined b1207
		static void UI_PROMPT_SET_MASH_MODE_(Prompt prompt, int mashes)
		{
			invoke<int>(0xDF6423BF071C7F71, prompt, mashes);
		} // 0xDF6423BF071C7F71 undefined b1207
		static void UI_PROMPT_SET_MASH_INDEFINITELY_MODE_(Prompt prompt)
		{
			invoke<int>(0x7B66E89312727274, prompt);
		} // 0x7B66E89312727274 undefined b1207
		static void UI_PROMPT_SET_MASH_WITH_RESISTANCE_MODE_(Prompt prompt, int mashes, float p2, float p3)
		{
			invoke<int>(0xCD1BDFF15EFA79F5, prompt, mashes, p2, p3);
		} // 0xCD1BDFF15EFA79F5 undefined b1207
		static void UI_PROMPT_SET_MASH_WITH_RESISTANCE_CAN_FAIL_MODE_(Prompt prompt, int mashes, float p2, float p3)
		{
			invoke<int>(0xDC0CB602DEADBA53, prompt, mashes, p2, p3);
		} // 0xDC0CB602DEADBA53 undefined b1207
		static void UI_PROMPT_SET_MASH_AUTO_FILL_MODE_(Prompt prompt, int autoFillTimeMs, int mashes)
		{
			invoke<int>(0x6C39587D7CC66801, prompt, autoFillTimeMs, mashes);
		} // 0x6C39587D7CC66801 undefined b1207
		static void UI_PROMPT_SET_MASH_MANUAL_MODE_(Prompt prompt, float p1, float p2, float p3, Any p4)
		{
			invoke<int>(0x32DF729D8BD3C1C6, prompt, p1, p2, p3, p4);
		} // 0x32DF729D8BD3C1C6 undefined b1207
		static void UI_PROMPT_SET_MASH_MANUAL_CAN_FAIL_MODE_(Prompt prompt, float p1, float p2, float p3, Any p4)
		{
			invoke<int>(0x179DCF71F705DA20, prompt, p1, p2, p3, p4);
		} // 0x179DCF71F705DA20 undefined b1207
		static BOOL UI_PROMPT_HAS_MANUAL_MASH_MODE_(Prompt prompt)
		{
			return invoke<BOOL>(0xA6C6A4ADB3BAC409, prompt);
		} // 0xA6C6A4ADB3BAC409 undefined b1207
		static BOOL UI_PROMPT_HAS_MASH_MODE_(Prompt prompt)
		{
			return invoke<BOOL>(0xCD072523791DDC1B, prompt);
		} // 0xCD072523791DDC1B undefined b1207
		static Any N0xB0E8599243B3F568(Any p0)
		{
			return invoke<Any>(0xB0E8599243B3F568, p0);
		} // 0xB0E8599243B3F568 undefined b1207
		static BOOL UI_PROMPT_HAS_MASH_MODE_COMPLETED_(Prompt prompt)
		{
			return invoke<BOOL>(0x845CE958416DC473, prompt);
		} // 0x845CE958416DC473 undefined b1207
		static BOOL UI_PROMPT_HAS_MASH_MODE_FAILED_(Prompt prompt)
		{
			return invoke<BOOL>(0x25B18E530CF39D6F, prompt);
		} // 0x25B18E530CF39D6F undefined b1207
		static float UI_PROMPT_GET_MASH_MODE_PROGRESS_(Prompt prompt)
		{
			return invoke<float>(0x8A9585293863B8A5, prompt);
		} // 0x8A9585293863B8A5 undefined b1207
		// standard (prompt not held) rate: (1f / 128f)
		// fast (prompt held) rate: (1f / 64f)
		// punitive (been hit) rate: (1f / 128f)
		static void UI_PROMPT_SET_MASH_MANUAL_MODE_INCREASE_PER_PRESS_(Prompt prompt, float rate)
		{
			invoke<int>(0xA0D1D79C6036A855, prompt, rate);
		} // 0xA0D1D79C6036A855 undefined b1207
		// standard (prompt not held) rate: 0.035f
		// fast (prompt held) rate: 0.015f
		// punitive (been hit) rate: 0.14f
		static void UI_PROMPT_SET_MASH_MANUAL_MODE_DECAY_SPEED_(Prompt prompt, float speed)
		{
			invoke<int>(0x7D393C247FB9B431, prompt, speed);
		} // 0x7D393C247FB9B431 undefined b1207
		static void UI_PROMPT_SET_MASH_MANUAL_MODE_PRESSED_GROWTH_SPEED_(Prompt prompt, float speed)
		{
			invoke<int>(0x56DBB26F98582C29, prompt, speed);
		} // 0x56DBB26F98582C29 undefined b1207
		// Used for controllers
		static void UI_PROMPT_SET_ROTATE_MODE_(Prompt prompt, float p1, BOOL counterclockwise)
		{
			invoke<int>(0x7ABE7095FB3D2581, prompt, p1, counterclockwise);
		} // 0x7ABE7095FB3D2581 undefined b1207
		static void UI_PROMPT_SET_TARGET_MODE_(Prompt prompt, float p1, float p2, Any p3)
		{
			invoke<int>(0x5F6503D9CD2754EB, prompt, p1, p2, p3);
		} // 0x5F6503D9CD2754EB undefined b1207
		static void UI_PROMPT_SET_TARGET_MODE_TARGET_(Prompt prompt, float p1, float p2)
		{
			invoke<int>(0x5E019C45DD3B6A14, prompt, p1, p2);
		} // 0x5E019C45DD3B6A14 undefined b1207
		static void UI_PROMPT_SET_TARGET_MODE_PROGRESS_(Prompt prompt, float progress)
		{
			invoke<int>(0x00123054BEC8A30F, prompt, progress);
		} // 0x00123054BEC8A30F undefined b1207
		static void UI_PROMPT_SET_BEAT_MODE_(Prompt prompt, BOOL toggle)
		{
			invoke<int>(0xF957A1654C6322FE, prompt, toggle);
		} // 0xF957A1654C6322FE undefined b1207
		static BOOL UI_PROMPT_WAS_BEAT_MODE_PRESSED_IN_TIME_WINDOW_(Prompt prompt)
		{
			return invoke<BOOL>(0x1FE4788AB1430C55, prompt);
		} // 0x1FE4788AB1430C55 undefined b1207
		static void UI_PROMPT_SET_BEAT_MODE_GRAYED_OUT_(Prompt prompt, Any p1)
		{
			invoke<int>(0xB487A4936FBF40AC, prompt, p1);
		} // 0xB487A4936FBF40AC undefined b1207
		static void UI_PROMPT_RESTART_MODES_(Prompt prompt)
		{
			invoke<int>(0xDC6C55DFA2C24EE5, prompt);
		} // 0xDC6C55DFA2C24EE5 undefined b1207
		static void UI_PROMPT_SET_SPINNER_SPEED_(Prompt prompt, Any p1)
		{
			invoke<int>(0xAC6586A7FDCD4B68, prompt, p1);
		} // 0xAC6586A7FDCD4B68 undefined b1207
		static void UI_PROMPT_SET_SPINNER_POSITION_(Prompt prompt, Any p1)
		{
			invoke<int>(0x832CB510DE546282, prompt, p1);
		} // 0x832CB510DE546282 undefined b1207
		static void UI_PROMPT_SET_URGENT_PULSING_ENABLED_(Prompt prompt, BOOL toggle)
		{
			invoke<int>(0xC5F428EE08FA7F2C, prompt, toggle);
		} // 0xC5F428EE08FA7F2C undefined b1207
		static BOOL UI_PROMPT_GET_URGENT_PULSING_ENABLED_(Prompt prompt)
		{
			return invoke<BOOL>(0x1FBA0DABECDDB52B, prompt);
		} // 0x1FBA0DABECDDB52B undefined b1207
		static void UI_PROMPT_SET_TAG_(Prompt prompt, Any p1)
		{
			invoke<int>(0xDEC85C174751292B, prompt, p1);
		} // 0xDEC85C174751292B undefined b1207
		static int UI_PROMPT_GET_GROUP_ID_FOR_TARGET_ENTITY_(Entity entity)
		{
			return invoke<int>(0xB796970BD125FCE8, entity);
		} // 0xB796970BD125FCE8 undefined b1207
		static int UI_PROMPT_GET_GROUP_ID_FOR_SCENARIO_POINT_(Any p0, int p1)
		{
			return invoke<int>(0xCB73D7521E7103F0, p0, p1);
		} // 0xCB73D7521E7103F0 undefined b1207
		// tabIndex: specifies tab of prompt
		static void UI_PROMPT_SET_GROUP_(Prompt prompt, int groupId, int tabIndex)
		{
			invoke<int>(0x2F11D3A254169EA4, prompt, groupId, tabIndex);
		} // 0x2F11D3A254169EA4 undefined b1207
		static void UI_PROMPT_REMOVE_GROUP_(Prompt prompt, Any p1)
		{
			invoke<int>(0x4E52C800A28F7BE8, prompt, p1);
		} // 0x4E52C800A28F7BE8 undefined b1207
		// Note: you must use VAR_STRING for p1 if string is not part of text database
		// tabAmount: specifies number of tabs in prompt group
		// tabDefaultIndex: specifies starting index
		// p3 if is set > 3 you can no longer press Q to change tab if there are more than one tab set in tabAmount
		static Any UI_PROMPT_SET_ACTIVE_GROUP_THIS_FRAME_(Hash hash, const char* name, int tabAmount, int tabDefaultIndex, int p4, Prompt prompt)
		{
			return invoke<Any>(0xC65A45D4453C2627, hash, name, tabAmount, tabDefaultIndex, p4, prompt);
		} // 0xC65A45D4453C2627 undefined b1207
		static int UI_PROMPT_GET_GROUP_ACTIVE_PAGE_(Hash hash)
		{
			return invoke<int>(0xC1FCC36C3F7286C8, hash);
		} // 0xC1FCC36C3F7286C8 undefined b1207
		static Any UI_PROMPT_SET_AMBIENT_GROUP_THIS_FRAME_(Entity entity, float p1, int p2, int p3, Hash p4, const char* name, int p6)
		{
			return invoke<Any>(0x315C81D760609108, entity, p1, p2, p3, p4, name, p6);
		} // 0x315C81D760609108 undefined b1207
		static Any N0x8B55B324A9123F6B(int groupId, Volume volume, const char* p2, Any p3, Any p4, Any p5)
		{
			return invoke<Any>(0x8B55B324A9123F6B, groupId, volume, p2, p3, p4, p5);
		} // 0x8B55B324A9123F6B undefined b1232
		static BOOL UI_PROMPT_DOES_AMBIENT_GROUP_EXIST_(Hash hash)
		{
			return invoke<BOOL>(0xEB550B927B34A1BB, hash);
		} // 0xEB550B927B34A1BB undefined b1207
		static void UI_PROMPT_ADD_GROUP_LINK_(Any p0, Prompt prompt, Any p2)
		{
			invoke<int>(0x684C96CC7C66E8EF, p0, prompt, p2);
		} // 0x684C96CC7C66E8EF undefined b1207
		static void UI_PROMPT_ADD_GROUP_RETURN_LINK_(Any p0, Prompt prompt)
		{
			invoke<int>(0x837972ED28159536, p0, prompt);
		} // 0x837972ED28159536 undefined b1207
		// TM_ANY = 0,
		// TM_ON_FOOT,
		// TM_IN_VEHICLE
		static void UI_PROMPT_SET_TRANSPORT_MODE_(Prompt prompt, int mode)
		{
			invoke<int>(0x876E4A35C73A6655, prompt, mode);
		} // 0x876E4A35C73A6655 undefined b1207
		static void UI_PROMPT_DISABLE_PROMPTS_THIS_FRAME_()
		{
			invoke<int>(0xF1622CE88A1946FB);
		} // 0xF1622CE88A1946FB undefined b1207
		static void UI_PROMPT_DELETE_(Prompt prompt)
		{
			invoke<int>(0x00EDE88D4D13CF59, prompt);
		} // 0x00EDE88D4D13CF59 undefined b1207
		static BOOL UI_PROMPT_IS_VALID_(Prompt prompt)
		{
			return invoke<BOOL>(0x347469FBDD1589A9, prompt);
		} // 0x347469FBDD1589A9 undefined b1207
		static BOOL UI_PROMPT_IS_ACTIVE_(Prompt prompt)
		{
			return invoke<BOOL>(0x546E342E01DE71CF, prompt);
		} // 0x546E342E01DE71CF undefined b1207
		static void UI_PROMPT_SET_VISIBLE_(Prompt prompt, BOOL toggle)
		{
			invoke<int>(0x71215ACCFDE075EE, prompt, toggle);
		} // 0x71215ACCFDE075EE undefined b1207
		static void UI_PROMPT_SET_ENABLED_(Prompt prompt, BOOL toggle)
		{
			invoke<int>(0x8A0FB4D03A630D21, prompt, toggle);
		} // 0x8A0FB4D03A630D21 undefined b1207
		static void UI_PROMPT_SET_TEXT_(Prompt prompt, const char* text)
		{
			invoke<int>(0x5DD02A8318420DD7, prompt, text);
		} // 0x5DD02A8318420DD7 undefined b1207
		// attribute: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eUIPromptAttribute
		static void UI_PROMPT_SET_ATTRIBUTE_(Prompt prompt, int attribute, BOOL enabled)
		{
			invoke<int>(0x560E76D5E2E1803F, prompt, attribute, enabled);
		} // 0x560E76D5E2E1803F undefined b1207
		// Params: type = mostly 0, 6 (net_mission_intro_story_gvo), 7 (fm_mission_controller), 14 (net_ugc_end_flow_transition_online), 15 (net_main_[tlg_]offline)
		static void UI_PROMPT_SET_TYPE_(Prompt prompt, int type)
		{
			invoke<int>(0xF4A5C4509BF923B1, prompt, type);
		} // 0xF4A5C4509BF923B1 undefined b1207
		static void N0x53CE46C01A089DA1(Prompt prompt, BOOL p1)
		{
			invoke<int>(0x53CE46C01A089DA1, prompt, p1);
		} // 0x53CE46C01A089DA1 undefined b1207
		static void UI_PROMPT_SET_MANUAL_RESOLVED_(Prompt prompt, Any p1)
		{
			invoke<int>(0xA520C7B05FA4EB2A, prompt, p1);
		} // 0xA520C7B05FA4EB2A undefined b1207
		// Attaches a Volume
		static void UI_PROMPT_CONTEXT_SET_VOLUME_(Prompt prompt, Volume volume)
		{
			invoke<int>(0x4D107406667423BE, prompt, volume);
		} // 0x4D107406667423BE undefined b1207
		static void UI_PROMPT_CONTEXT_SET_POINT_(Prompt prompt, float x, float y, float z)
		{
			invoke<int>(0xAE84C5EE2C384FB3, prompt, x, y, z);
		} // 0xAE84C5EE2C384FB3 undefined b1207
		static void UI_PROMPT_CONTEXT_SET_RADIUS_(Prompt prompt, float radius)
		{
			invoke<int>(0x0C718001B77CA468, prompt, radius);
		} // 0x0C718001B77CA468 undefined b1207
		static BOOL UI_PROMPT_IS_PRESSED_(Prompt prompt)
		{
			return invoke<BOOL>(0x21E60E230086697F, prompt);
		} // 0x21E60E230086697F undefined b1207
		static BOOL UI_PROMPT_IS_JUST_PRESSED_(Prompt prompt)
		{
			return invoke<BOOL>(0x2787CC611D3FACC5, prompt);
		} // 0x2787CC611D3FACC5 undefined b1207
		static BOOL UI_PROMPT_IS_JUST_RELEASED_(Prompt prompt)
		{
			return invoke<BOOL>(0x635CC82FA297A827, prompt);
		} // 0x635CC82FA297A827 undefined b1207
		static BOOL UI_PROMPT_IS_RELEASED_(Prompt prompt)
		{
			return invoke<BOOL>(0xAFC887BA7A7756D6, prompt);
		} // 0xAFC887BA7A7756D6 undefined b1207
		// https://github.com/femga/rdr3_discoveries/tree/master/graphics/HUD/prompts/prompt_types
		static void UI_PROMPT_ENABLE_PROMPT_TYPE_THIS_FRAME_(int p0)
		{
			invoke<int>(0x06565032897BA861, p0);
		} // 0x06565032897BA861 undefined b1207
		static void UI_PROMPT_DISABLE_PROMPT_TYPE_THIS_FRAME_(int p0)
		{
			invoke<int>(0xFC094EF26DD153FA, p0);
		} // 0xFC094EF26DD153FA undefined b1207
		static void UI_PROMPT_FILTER_CLEAR_()
		{
			invoke<int>(0x6A2F820452017EA2);
		} // 0x6A2F820452017EA2 undefined b1207
		static void UI_PROMPT_SET_PROMPT_PRIORITY_PREFERENCE_(Ped ped)
		{
			invoke<int>(0x530A428705BE5DEF, ped);
		} // 0x530A428705BE5DEF undefined b1207
		static void UI_PROMPT_CLEAR_PROMPT_PRIORITY_PREFERENCE_()
		{
			invoke<int>(0x51259AE5C72D4A1B);
		} // 0x51259AE5C72D4A1B undefined b1207
		static BOOL UI_PROMPT_IS_ENABLED_(Prompt prompt)
		{
			return invoke<BOOL>(0x0D00EDDFB58B7F28, prompt);
		} // 0x0D00EDDFB58B7F28 undefined b1207
		static BOOL UI_PROMPT_IS_CONTROL_ACTION_ACTIVE(Hash controlAction)
		{
			return invoke<BOOL>(0x1BE19185B8AFE299, controlAction);
		} // 0x1BE19185B8AFE299 undefined b1207
		static Any N0xD6BD313CFA41E57A(Any p0)
		{
			return invoke<Any>(0xD6BD313CFA41E57A, p0);
		} // 0xD6BD313CFA41E57A undefined b1207
		// This returns an id that can be used with 0x6095358C4142932A.
		static int UI_PROMPT_SET_REGISTER_HORIZONTAL_ORIENTATION_()
		{
			return invoke<int>(0xD9459157EB22C895);
		} // 0xD9459157EB22C895 undefined b1207
		// id is the return value from 0xD9459157EB22C895.
		static void UI_PROMPT_CLEAR_HORIZONTAL_ORIENTATION_(int id)
		{
			invoke<int>(0x6095358C4142932A, id);
		} // 0x6095358C4142932A undefined b1207
		static void UI_PROMPT_SET_ORDERING_AS_INPUT_TYPE_(Prompt prompt, Any p1)
		{
			invoke<int>(0x2F385ECC5200938D, prompt, p1);
		} // 0x2F385ECC5200938D undefined b1207
		static Any N0x066725A9D52B3641()
		{
			return invoke<Any>(0x066725A9D52B3641);
		} // 0x066725A9D52B3641 undefined b1232
		static void N0x958278B97C4AFFD8(Any p0, Any p1)
		{
			invoke<int>(0x958278B97C4AFFD8, p0, p1);
		} // 0x958278B97C4AFFD8 undefined b1232
		static int CREATE_MP_GAMER_TAG_(Player player, const char* username, BOOL pointedClanTag, BOOL isRockstarClan, const char* clanTag, int clanFlag)
		{
			return invoke<int>(0xD877AF112AD2B41B, player, username, pointedClanTag, isRockstarClan, clanTag, clanFlag);
		} // 0xD877AF112AD2B41B undefined b1207
		static int CREATE_FAKE_MP_GAMER_TAG(Ped ped, const char* username, BOOL pointedClanTag, BOOL isRockstarClan, const char* clanTag, int clanFlag)
		{
			return invoke<int>(0x53CB4B502E1C57EA, ped, username, pointedClanTag, isRockstarClan, clanTag, clanFlag);
		} // 0x53CB4B502E1C57EA 0xF5CD2AA4 b1207
		static int CREATE_MP_GAMER_TAG_ON_ENTITY_(Entity entity, const char* text)
		{
			return invoke<int>(0xE961BF23EAB76B12, entity, text);
		} // 0xE961BF23EAB76B12 undefined b1207
		static void REMOVE_MP_GAMER_TAG(int gamerTagId)
		{
			invoke<int>(0x839BFD7D7E49FE09, gamerTagId);
		} // 0x839BFD7D7E49FE09 0x3D081FE4 b1207
		static BOOL IS_MP_GAMER_TAG_ACTIVE(int gamerTagId)
		{
			return invoke<BOOL>(0x6E1C31E14C7A5F97, gamerTagId);
		} // 0x6E1C31E14C7A5F97 0x60118951 b1207
		static BOOL IS_MP_GAMER_TAG_ACTIVE_ON_ENTITY_(int gamerTagId, Entity entity)
		{
			return invoke<BOOL>(0x502E1591A504F843, gamerTagId, entity);
		} // 0x502E1591A504F843 undefined b1207
		// visibility:
		// enum eUIGamertagVisibility
		// {
		// 	UIGAMERTAGVISIBILITY_NONE,
		// 	UIGAMERTAGVISIBILITY_ICON,
		// 	UIGAMERTAGVISIBILITY_SIMPLE,
		// 	UIGAMERTAGVISIBILITY_COMPLEX
		// };
		static void SET_MP_GAMER_TAG_VISIBILITY_(int gamerTagId, int visibility)
		{
			invoke<int>(0x93171DDDAB274EB8, gamerTagId, visibility);
		} // 0x93171DDDAB274EB8 undefined b1207
		// Found types: GENERIC_PLAYER, DEADDROP, HOTPROPERTY, MINIGAMES
		static void SET_MP_GAMER_TAG_TYPE_(int gamerTagId, Hash type)
		{
			invoke<int>(0x25B9C78A25105C35, gamerTagId, type);
		} // 0x25B9C78A25105C35 undefined b1207
		static void SET_MP_GAMER_TAG_COLOUR_(int gamerTagId, Hash colour)
		{
			invoke<int>(0x84BD27DDF9575816, gamerTagId, colour);
		} // 0x84BD27DDF9575816 undefined b1207
		// nullsub, doesn't do anything
		static void SET_MP_GAMER_TAG_UNK_ALLOW_LOCALIZED_(int gamerTagId, BOOL allow)
		{
			invoke<int>(0xEF7AB1A0E8C86170, gamerTagId, allow);
		} // 0xEF7AB1A0E8C86170 undefined b1207
		static void SET_MP_GAMER_TAG_NAME(int gamerTagId, const char* string)
		{
			invoke<int>(0xEA6F4B8D4B4B5B3E, gamerTagId, string);
		} // 0xEA6F4B8D4B4B5B3E 0x627A559B b1207
		static void SET_MP_GAMER_TAG_NAME_POSSE_(int gamerTagId, const char* text)
		{
			invoke<int>(0x1EA716E0628A6F44, gamerTagId, text);
		} // 0x1EA716E0628A6F44 undefined b1207
		static void SET_MP_GAMER_TAG_BIG_TEXT(int gamerTagId, const char* string)
		{
			invoke<int>(0xA0D7CE5F83259663, gamerTagId, string);
		} // 0xA0D7CE5F83259663 0x939218AB b1207
		// Found icons: https://pastebin.com/xx6rEgiG
		static void SET_MP_GAMER_TAG_TOP_ICON_(int gamerTagId, Hash icon)
		{
			invoke<int>(0x5F57522BC1EB9D9D, gamerTagId, icon);
		} // 0x5F57522BC1EB9D9D undefined b1207
		// Found icons: SPEAKER, THROPY
		static void SET_MP_GAMER_TAG_SECONDARY_ICON_(int gamerTagId, Hash icon)
		{
			invoke<int>(0x95384C6CE1526EFF, gamerTagId, icon);
		} // 0x95384C6CE1526EFF undefined b1207
		static void MP_GAMER_TAG_ENABLE_REVIVE_TOP_ICON_(int gamerTagId)
		{
			invoke<int>(0xFFF6579CF0139FCE, gamerTagId);
		} // 0xFFF6579CF0139FCE undefined b1207
		static void MP_GAMER_TAG_DISABLE_REVIVE_TOP_ICON_(int gamerTagId)
		{
			invoke<int>(0x1F9A64C2804B3471, gamerTagId);
		} // 0x1F9A64C2804B3471 undefined b1207
	}

	namespace IK
	{
		static void INVERSE_KINEMATICS_REQUEST_LOOK_AT_(Ped ped, Any* args)
		{
			invoke<int>(0x66F9EB44342BB4C5, ped, args);
		} // 0x66F9EB44342BB4C5 undefined b1207
		static void N0x0B9F7A01EC50448D(Ped ped, Any* args)
		{
			invoke<int>(0x0B9F7A01EC50448D, ped, args);
		} // 0x0B9F7A01EC50448D undefined b1207
		// Seems to disable IK on ped
		static void INVERSE_KINEMATICS_SET_DISABLED_FOR_PED_(Ped ped, int p1, BOOL p2)
		{
			invoke<int>(0x0EABF182FBB63D72, ped, p1, p2);
		} // 0x0EABF182FBB63D72 undefined b1207
		static BOOL N0x6098139150DCC745(Ped ped, int p1)
		{
			return invoke<BOOL>(0x6098139150DCC745, ped, p1);
		} // 0x6098139150DCC745 undefined b1207
		static void N0x873C792E07A32C8B(Ped ped1, Ped ped2)
		{
			invoke<int>(0x873C792E07A32C8B, ped1, ped2);
		} // 0x873C792E07A32C8B undefined b1207
	}

	namespace INTERACTION
	{
		// Shows the cursor on screen for one frame.
		//
		// Old name: _SET_MOUSE_CURSOR_ACTIVE_THIS_FRAME
		static void SET_MOUSE_CURSOR_THIS_FRAME()
		{
			invoke<int>(0xF12E4CCAF249DC10);
		} // 0xF12E4CCAF249DC10  b1207
		// Changes the mouse cursor's sprite.
		//
		// spriteId's: https://github.com/femga/rdr3_discoveries/tree/master/graphics/HUD/cursor_sprites#readme
		//
		// Old name: _SET_MOUSE_CURSOR_SPRITE
		static void SET_MOUSE_CURSOR_STYLE(int spriteId)
		{
			invoke<int>(0x7F5858AAB5A58CCE, spriteId);
		} // 0x7F5858AAB5A58CCE  b1207
		// Allows camera to be moved if middle mouse button is held while in first person
		// Must be called every frame
		// _SET*
		static void SET_ALLOW_FIRST_PERSON_MOUSE_CAMERA_MOVEMENT_()
		{
			invoke<int>(0x0546B117BB17548B);
		} // 0x0546B117BB17548B undefined b1232
		// Returns true if player is moving mouse while cursor is active
		// _PI* - _PO*
		static BOOL POINTER_IS_BEING_MOVED_()
		{
			return invoke<BOOL>(0x2B8B605F2A9E64BF);
		} // 0x2B8B605F2A9E64BF undefined b1311
		// Returns true if player is holding LMB while cursor is active
		// _PI* - _PO*
		static BOOL POINTER_IS_LEFT_BUTTON_HELD_()
		{
			return invoke<BOOL>(0x61CAE9D1FD055E44);
		} // 0x61CAE9D1FD055E44 undefined b1207
		// Returns true if player releases LMB if cursor is active
		// _PI* - _PO*
		static BOOL POINTER_IS_LEFT_BUTTON_JUST_RELEASED_()
		{
			return invoke<BOOL>(0xF7F51A57349739F2);
		} // 0xF7F51A57349739F2 undefined b1207
	}

	namespace INTERIOR
	{
		static BOOL IS_VALID_INTERIOR(Interior interior)
		{
			return invoke<BOOL>(0x017C1B3159F79F6C, interior);
		} // 0x017C1B3159F79F6C 0x39C0B635 b1207
		static void GET_INTERIOR_LOCATION_AND_NAMEHASH(Interior interior, Vector3* position, Hash* nameHash)
		{
			invoke<int>(0x8451E87D3C2B0286, interior, position, nameHash);
		} // 0x8451E87D3C2B0286 undefined b1207
		static Hash GET_INTERIOR_MINIMAP_HASH_(Interior interior)
		{
			return invoke<Hash>(0x3039BE60B3749716, interior);
		} // 0x3039BE60B3749716 undefined b1207
		static Vector3 GET_INTERIOR_POSITION_(Interior interior)
		{
			return invoke<Vector3>(0x2C9746D0CA15BE1C, interior);
		} // 0x2C9746D0CA15BE1C undefined b1207
		static BOOL IS_INTERIOR_SCENE()
		{
			return invoke<BOOL>(0x4200F14D6F840A9A);
		} // 0x4200F14D6F840A9A 0x55226C13 b1207
		static void CLEAR_ROOM_FOR_ENTITY(Entity entity)
		{
			invoke<int>(0xA1762D5BBFCA13A8, entity);
		} // 0xA1762D5BBFCA13A8 0x7DDADB92 b1207
		static void FORCE_ROOM_FOR_ENTITY(Entity entity, Interior interior, Hash roomHashKey)
		{
			invoke<int>(0xBC29A9894C976945, entity, interior, roomHashKey);
		} // 0xBC29A9894C976945 0x10BD4435 b1207
		// Gets the room hash key from the room that the specified entity is in. Each room in every interior has a unique key. Returns 0 if the entity is outside.
		static Hash GET_ROOM_KEY_FROM_ENTITY(Entity entity)
		{
			return invoke<Hash>(0x076E46E0EB52AFC6, entity);
		} // 0x076E46E0EB52AFC6 0xE4ACF8C3 b1207
		// Seems to do the exact same as INTERIOR::GET_ROOM_KEY_FROM_ENTITY
		static Hash GET_KEY_FOR_ENTITY_IN_ROOM(Entity entity)
		{
			return invoke<Hash>(0x27D7B6F79E1F4603, entity);
		} // 0x27D7B6F79E1F4603 0x91EA80EF b1207
		// Returns the handle of the interior that the entity is in. Returns 0 if outside.
		static Interior GET_INTERIOR_FROM_ENTITY(Entity entity)
		{
			return invoke<Interior>(0xB417689857646F61, entity);
		} // 0xB417689857646F61 0x5C644614 b1207
		static void RETAIN_ENTITY_IN_INTERIOR(Entity entity, Interior interior)
		{
			invoke<int>(0x5BD616735F16BF5C, entity, interior);
		} // 0x5BD616735F16BF5C 0xE645E162 b1207
		static void FORCE_ROOM_FOR_GAME_VIEWPORT(int interiorID, Hash roomHashKey)
		{
			invoke<int>(0x115B4AA8FB28AB43, interiorID, roomHashKey);
		} // 0x115B4AA8FB28AB43 0xD79803B5 b1207
		static void CLEAR_ROOM_FOR_GAME_VIEWPORT()
		{
			invoke<int>(0x951A049765E0D450);
		} // 0x951A049765E0D450 0x617DC75D b1207
		static Interior GET_INTERIOR_FROM_PRIMARY_VIEW()
		{
			return invoke<Interior>(0xBC8A281FF125C655);
		} // 0xBC8A281FF125C655 undefined b1207
		static Interior GET_INTERIOR_AT_COORDS(float x, float y, float z)
		{
			return invoke<Interior>(0xCDD36C9E5C469070, x, y, z);
		} // 0xCDD36C9E5C469070 0xA17FBF37 b1207
		static void PIN_INTERIOR_IN_MEMORY(Interior interior)
		{
			invoke<int>(0xBD3D33EABF680168, interior);
		} // 0xBD3D33EABF680168 0x3ADA414E b1207
		// Does something similar to INTERIOR::DISABLE_INTERIOR.
		//
		// You don't fall through the floor but everything is invisible inside and looks the same as when INTERIOR::DISABLE_INTERIOR is used. Peds behaves normally inside.
		static void UNPIN_INTERIOR(Interior interior)
		{
			invoke<int>(0x07FD1A0B814F6055, interior);
		} // 0x07FD1A0B814F6055 0xFCFF792A b1207
		static BOOL IS_INTERIOR_READY(Interior interior)
		{
			return invoke<BOOL>(0x941560D2D45DBFC8, interior);
		} // 0x941560D2D45DBFC8 0xE1EF6450 b1207
		// Actually returns void in IDA but the script header defines a BOOL return type
		static BOOL SET_INTERIOR_IN_USE(Interior interior)
		{
			return invoke<BOOL>(0xB5EF6FEF2DC9EBED, interior);
		} // 0xB5EF6FEF2DC9EBED  b1207
		static Interior GET_INTERIOR_AT_COORDS_WITH_TYPE(float x, float y, float z, const char* interiorType)
		{
			return invoke<Interior>(0xAAD6170AA33B13C0, x, y, z, interiorType);
		} // 0xAAD6170AA33B13C0 0x96525B06 b1207
		// Hashed version of GET_INTERIOR_AT_COORDS_WITH_TYPE
		static Interior GET_INTERIOR_AT_COORDS_WITH_TYPEHASH(float x, float y, float z, Hash typeHash)
		{
			return invoke<Interior>(0x3543AEA1816D1D2B, x, y, z, typeHash);
		} // 0x3543AEA1816D1D2B 0x11718507 b1207
		// Returns true if the collision at the specified coords is marked as being outside (false if there's an interior)
		static BOOL IS_COLLISION_MARKED_OUTSIDE(float x, float y, float z)
		{
			return invoke<BOOL>(0xF291396B517E25B2, x, y, z);
		} // 0xF291396B517E25B2 0x7762249C b1207
		static int GET_INTERIOR_FROM_COLLISION(float x, float y, float z)
		{
			return invoke<int>(0x5054D1A5218FA696, x, y, z);
		} // 0x5054D1A5218FA696 0x7ED33DC1 b1207
		// https://github.com/femga/rdr3_discoveries/tree/master/interiors/interior_sets
		static void ACTIVATE_INTERIOR_ENTITY_SET(Interior interior, const char* entitySetName, int p2)
		{
			invoke<int>(0x174D0AAB11CED739, interior, entitySetName, p2);
		} // 0x174D0AAB11CED739 0xC80A5DDF b1207
		static void DEACTIVATE_INTERIOR_ENTITY_SET(Interior interior, const char* entitySetName, BOOL p2)
		{
			invoke<int>(0x33B81A2C07A51FFF, interior, entitySetName, p2);
		} // 0x33B81A2C07A51FFF 0xDBA768A1 b1207
		static BOOL IS_INTERIOR_ENTITY_SET_ACTIVE(Interior interior, const char* entitySetName)
		{
			return invoke<BOOL>(0x32810CA2125F5842, interior, entitySetName);
		} // 0x32810CA2125F5842 0x39A3CC6F b1207
		static BOOL IS_INTERIOR_ENTITY_SET_VALID_(Interior interior, const char* entitySetName)
		{
			return invoke<BOOL>(0xD56FF170710FC826, interior, entitySetName);
		} // 0xD56FF170710FC826 undefined b1207
		static void DISABLE_INTERIOR(Interior interior, BOOL toggle)
		{
			invoke<int>(0x3C2B92A1A07D4FCE, interior, toggle);
		} // 0x3C2B92A1A07D4FCE 0x093ADEA5 b1207
		static void N0x2533F2AB0EB9C6F9(Any p0, Any p1)
		{
			invoke<int>(0x2533F2AB0EB9C6F9, p0, p1);
		} // 0x2533F2AB0EB9C6F9 undefined b1207
		static void N0xFE2B3D5500B1B2E4(Any p0, Any p1)
		{
			invoke<int>(0xFE2B3D5500B1B2E4, p0, p1);
		} // 0xFE2B3D5500B1B2E4 undefined b1207
	}

	namespace INVENTORY
	{
		// Returns a unique inventory ID for this ped.
		// For the local player ped, it is an eInventories value.
		// For other peds, it is the inventory address casted to unsigned int.
		//
		// enum eInventories
		// {
		// 	INVENTORY_INVALID,
		// 	INVENTORY_SP_PLAYER,
		// 	INVENTORY_MP_PLAYER,
		// 	INVENTORY_MP_MISSION,
		// 	INVENTORY_SECOND_SCREEN,
		// 	INVENTORY_SP_BACKUP,
		// 	INVENTORY_SP_SNAPSHOT,
		// 	INVENTORY_0xDE2AE452,
		// 	INVENTORY_0x399D9B3A,
		// 	INVENTORY_0x4BD43FA7,
		// 	INVENTORY_0x9529D251,
		// 	INVENTORY_0xA75776AC,
		// 	INVENTORY_MAX_ID = 11,
		// 	INVENTORY_IDS_COUNT
		// };
		static int INVENTORY_GET_INVENTORY_ID_FROM_PED_(Ped ped)
		{
			return invoke<int>(0x13D234A2A3F66E63, ped);
		} // 0x13D234A2A3F66E63 undefined b1207
		static int GET_ITEM_ROLE_MAX_LEVEL_COUNT_(int inventoryId, Hash eRoleMaxLevel)
		{
			return invoke<int>(0xADDD1E7C0ECF7D95, inventoryId, eRoleMaxLevel);
		} // 0xADDD1E7C0ECF7D95 undefined b1207
		static int GET_ITEM_SLOT_MAX_COUNT_(Hash provision, Hash slotId)
		{
			return invoke<int>(0xE80E50BEE276A54A, provision, slotId);
		} // 0xE80E50BEE276A54A undefined b1207
		// Only used in R* SP Scripts
		static BOOL N0x112BCA290D2EB53C(int inventoryId, Hash p1, int* year, int* month, int* day, int* hour, int* minute, int* second)
		{
			return invoke<BOOL>(0x112BCA290D2EB53C, inventoryId, p1, year, month, day, hour, minute, second);
		} // 0x112BCA290D2EB53C undefined b1207
		// eInventoryItem: CLOTHING_FANCY_SUIT, CLOTHING_GUNSLINGER_OUTFIT, etc.
		// Only used in R* SP Scripts
		static void N0x46743BBFEDBC859E(int inventoryId, Hash eInventoryItem, BOOL p2)
		{
			invoke<int>(0x46743BBFEDBC859E, inventoryId, eInventoryItem, p2);
		} // 0x46743BBFEDBC859E undefined b1207
		// Only works on CClothingItem
		static void INVENTORY_SET_INVENTORY_ITEM_IN_USE_(int inventoryId, Any* guid, BOOL inUse)
		{
			invoke<int>(0x65A5F70F4A292EBE, inventoryId, guid, inUse);
		} // 0x65A5F70F4A292EBE undefined b1207
		static BOOL INVENTORY_GET_INVENTORY_ITEM_IN_USE_(int inventoryId, Any* guid)
		{
			return invoke<BOOL>(0x70E3A884ED000A01, inventoryId, guid);
		} // 0x70E3A884ED000A01 undefined b1311
		// Used with CClothingItem
		static void INVENTORY_SET_INVENTORY_ITEM_HIDDEN_(int inventoryId, Any* guid, BOOL hidden)
		{
			invoke<int>(0x9A113C660AEA3832, inventoryId, guid, hidden);
		} // 0x9A113C660AEA3832 undefined b1207
		// Used with CSatchelItem, R* Script usage: fisihing_core
		static void INVENTORY_SET_INVENTORY_ITEM_HIDDEN_2_(int inventoryId, Any* guid, BOOL hidden)
		{
			invoke<int>(0xD740F11FBC8AEF43, inventoryId, guid, hidden);
		} // 0xD740F11FBC8AEF43 undefined b1207
		static BOOL INVENTORY_GET_INVENTORY_ITEM_HIDDEN_(int inventoryId, Any* guid)
		{
			return invoke<BOOL>(0xF9933164965533B7, inventoryId, guid);
		} // 0xF9933164965533B7 undefined b1207
		static BOOL INVENTORY_GET_INVENTORY_ITEM_IS_ANIMAL_PELT_(Hash item)
		{
			return invoke<BOOL>(0x4AEF1FB5B9011D75, item);
		} // 0x4AEF1FB5B9011D75 undefined b1207
		static Hash INVENTORY_GET_INVENTORY_ITEM_DESCRIPTION_HASH_(Hash item)
		{
			return invoke<Hash>(0xA4550FE9C512E3DD, item);
		} // 0xA4550FE9C512E3DD undefined b1207
		// flag: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/ItemDatabaseItemFlags
		// 2097152 (is item read?), 8388608 (is item sent/received/mailable?), 16777216 (is item consumable?)
		static BOOL INVENTORY_IS_INVENTORY_ITEM_FLAG_ENABLED_(Hash item, int flag)
		{
			return invoke<BOOL>(0x245D07651B1D183B, item, flag);
		} // 0x245D07651B1D183B undefined b1207
		// soundType: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/CItemInfoSoundsInterface__sSoundsInfo__eSoundType
		static BOOL INVENTORY_GET_IS_INVENTORY_ITEM_SOUND_VALID_(Hash item, int soundType)
		{
			return invoke<BOOL>(0x2BAE4880DCDD560B, item, soundType);
		} // 0x2BAE4880DCDD560B undefined b1207
		// soundType: see 0x2BAE4880DCDD560B
		// Returns item Hash to be used with _IS_SCRIPTED_AUDIO_CUSTOM and _PLAY_SOUND_FROM_ITEM (p0)
		static Hash INVENTORY_GET_INVENTORY_ITEM_SOUND_(Hash item, int soundType)
		{
			return invoke<Hash>(0x2E1CDC1FF3B8473E, item, soundType);
		} // 0x2E1CDC1FF3B8473E undefined b1207
		static BOOL INVENTORY_GET_INVENTORY_ITEM_INSPECTION_INFO_(Hash item, Any* info)
		{
			return invoke<BOOL>(0x0C093C1787F18519, item, info);
		} // 0x0C093C1787F18519 undefined b1207
		// Returns CopyID
		static int INVENTORY_GET_INVENTORY_ITEM_WEAPON_COPY_ID_(int inventoryId, Any* guid)
		{
			return invoke<int>(0xAB5F12746A099A0E, inventoryId, guid);
		} // 0xAB5F12746A099A0E undefined b1207
		// inventoryId: see _INVENTORY_GET_PED_INVENTORY_ID
		static BOOL INVENTORY_ARE_LOCAL_CHANGES_ALLOWED_(int inventoryId)
		{
			return invoke<BOOL>(0x0FBBFFC891A97C81, inventoryId);
		} // 0x0FBBFFC891A97C81 undefined b1207
		static BOOL INVENTORY_IS_GUID_VALID_(Any* guid)
		{
			return invoke<BOOL>(0xB881CA836CC4B6D4, guid);
		} // 0xB881CA836CC4B6D4 undefined b1207
		static BOOL INVENTORY_COMPARE_GUIDS_(Any* guid1, Any* guid2)
		{
			return invoke<BOOL>(0x4C543D5DFCD2DAFD, guid1, guid2);
		} // 0x4C543D5DFCD2DAFD undefined b1207
		static BOOL INVENTORY_GET_GUID_FROM_ITEMID(int inventoryId, Any* guid, Hash p2, Hash slotId, Any* outGuid)
		{
			return invoke<BOOL>(0x886DFD3E185C8A89, inventoryId, guid, p2, slotId, outGuid);
		} // 0x886DFD3E185C8A89 undefined b1207
		// removeReason: REMOVE_REASON_DEFAULT (eRemoveItemReason)
		// Example: INVENTORY::_0x5D6182F3BCE1333B(1, joaat("REMOVE_REASON_DEFAULT")); -> clears weapon wheel
		// Only used in R* SP Scripts
		static BOOL N0x5D6182F3BCE1333B(int inventoryId, Hash removeReason)
		{
			return invoke<BOOL>(0x5D6182F3BCE1333B, inventoryId, removeReason);
		} // 0x5D6182F3BCE1333B undefined b1207
		static BOOL INVENTORY_GET_INVENTORY_ITEM(int inventoryId, Any* inData, Any* outData, BOOL p3)
		{
			return invoke<BOOL>(0x9700E8EFC4AB9089, inventoryId, inData, outData, p3);
		} // 0x9700E8EFC4AB9089 undefined b1207
		static BOOL INVENTORY_GET_FULL_INVENTORY_ITEM_DATA_(int inventoryId, Any* guid, Any* p2, int p3, int p4)
		{
			return invoke<BOOL>(0x025A1B1FB03FBF61, inventoryId, guid, p2, p3, p4);
		} // 0x025A1B1FB03FBF61 undefined b1207
		static BOOL INVENTORY_GET_INVENTORY_ITEM_CHILD_(int inventoryId, Any* parentGuid, Any childIndex, Any* outInventoryItem)
		{
			return invoke<BOOL>(0xCD9A485F2B383B44, inventoryId, parentGuid, childIndex, outInventoryItem);
		} // 0xCD9A485F2B383B44 undefined b1207
		// inventoryItemSlotHash: https://pastebin.com/P6fyr3vr
		static BOOL INVENTORY_ADD_ITEM_WITH_GUID_(int inventoryId, Any* guid1, Any* guid2, Hash item, Hash inventoryItemSlot, int p5, Hash addReason)
		{
			return invoke<BOOL>(0xCB5D11F9508A928D, inventoryId, guid1, guid2, item, inventoryItemSlot, p5, addReason);
		} // 0xCB5D11F9508A928D undefined b1207
		// Getter: _INVENTORY_GET_FULL_INVENTORY_ITEM_DATA
		static BOOL INVENTORY_UPDATE_INVENTORY_ITEM_(int inventoryId, Any* guid1, Any* guid2, int p3)
		{
			return invoke<BOOL>(0xD80A8854DB5CFBA5, inventoryId, guid1, guid2, p3);
		} // 0xD80A8854DB5CFBA5 undefined b1207
		static BOOL INVENTORY_REMOVE_INVENTORY_ITEM_WITH_GUID_(int inventoryId, Any* guid, int quantity, Hash removeReason)
		{
			return invoke<BOOL>(0x3E4E811480B3AE79, inventoryId, guid, quantity, removeReason);
		} // 0x3E4E811480B3AE79 undefined b1207
		static BOOL INVENTORY_REMOVE_INVENTORY_ITEM_WITH_ITEMID_(int inventoryId, Hash item, int quantity, Hash removeReason)
		{
			return invoke<BOOL>(0xB4158C8C9A3B5DCE, inventoryId, item, quantity, removeReason);
		} // 0xB4158C8C9A3B5DCE undefined b1207
		// guid1: old parent GUID
		// guid2: new parent GUID
		// guid3: new item GUID (out param)
		static BOOL INVENTORY_MOVE_INVENTORY_ITEM_(int inventoryId, Any* guid1, Any* guid2, Hash slotId, int quantity, Any* outGuid)
		{
			return invoke<BOOL>(0xDCCAA7C3BFD88862, inventoryId, guid1, guid2, slotId, quantity, outGuid);
		} // 0xDCCAA7C3BFD88862 undefined b1207
		static BOOL INVENTORY_SWAP_INVENTORY_ITEM_(int inventoryId, Any* guid1, Any* guid2)
		{
			return invoke<BOOL>(0xF2753D691BCDA314, inventoryId, guid1, guid2);
		} // 0xF2753D691BCDA314 undefined b1207
		// filterName (collections): "ALL", "ALL SATCHEL", "ALL HORSES", "ALL COACHES", "ALL MOUNTS", "ALL CLOTHING", "ALL WEAPONS", "ALL SATCHEL EXCLUDING CLOTHING", "ALL EXCLUDING CLOTHING"
		// slotId: -1591664384
		// p3: outCollectionSize (?)
		// Returns collectionId
		static int INVENTORY_CREATE_ITEM_COLLECTION_(int inventoryId, const char* filterName, Hash slotId, int* size)
		{
			return invoke<int>(0x80D78BDC9D88EF07, inventoryId, filterName, slotId, size);
		} // 0x80D78BDC9D88EF07 undefined b1207
		static int INVENTORY_CREATE_ITEM_COLLECTION_WITH_FILTER_(int inventoryId, Any* filter, int* numInCollection)
		{
			return invoke<int>(0x640F890C3E5A3FFD, inventoryId, filter, numInCollection);
		} // 0x640F890C3E5A3FFD undefined b1207
		// collectionId is < outCollectionSize
		static BOOL INVENTORY_GET_ITEM_FROM_COLLECTION_INDEX_(int collectionId, int itemIndex, Any* itemData)
		{
			return invoke<BOOL>(0x82FA24C3D3FCD9B7, collectionId, itemIndex, itemData);
		} // 0x82FA24C3D3FCD9B7 undefined b1207
		// Max num of collections is 5, so release your unused ones.
		static BOOL INVENTORY_RELEASE_ITEM_COLLECTION_(int collectionId)
		{
			return invoke<BOOL>(0x42A2F33A1942E865, collectionId);
		} // 0x42A2F33A1942E865 undefined b1207
		static BOOL INVENTORY_EQUIP_ITEM_WITH_GUID_(int inventoryId, Any* guid, BOOL bEquipped)
		{
			return invoke<BOOL>(0x734311E2852760D0, inventoryId, guid, bEquipped);
		} // 0x734311E2852760D0 undefined b1207
		static BOOL INVENTORY_GET_INVENTORY_ITEM_EQUIPPED_IN_SLOT_BY_REF_(int inventoryId, Any* guid, Hash slotId, Any* outGuid)
		{
			return invoke<BOOL>(0x22E590F108289A9D, inventoryId, guid, slotId, outGuid);
		} // 0x22E590F108289A9D undefined b1207
		static BOOL INVENTORY_DOES_ITEM_OWN_EQUIPMENT_(int inventoryId, Any* guid, Hash item)
		{
			return invoke<BOOL>(0x88B58B83A43A8CAB, inventoryId, guid, item);
		} // 0x88B58B83A43A8CAB undefined b1207
		// Params: p3 returns an int between 0 and 20 (?)
		// Only used in R* SP Scripts
		static BOOL N0xD08685BA892DBFAB(int inventoryId, Any* guid, int* p2, int* p3)
		{
			return invoke<BOOL>(0xD08685BA892DBFAB, inventoryId, guid, p2, p3);
		} // 0xD08685BA892DBFAB undefined b1207
		// Params: p0 is only 0 or 1
		// Only used in R* SP Scripts
		static void N0x0349404A22736740(BOOL p0, int inventoryId, Any* guid)
		{
			invoke<int>(0x0349404A22736740, p0, inventoryId, guid);
		} // 0x0349404A22736740 undefined b1207
		// OWE_INVALID = -1,
		// OWE_GOOD_IN_HOT
		// OWE_GOOD_IN_NONE
		// OWE_GOOD_IN_COLD
		// OWE_GOOD_IN_ALL
		static void INVENTORY_SET_INVENTORY_ITEM_WEATHER_EFFECTIVENESS_(int inventoryId, Any* guid, int weatherEffectiveness)
		{
			invoke<int>(0x6D2F987736A42D4C, inventoryId, guid, weatherEffectiveness);
		} // 0x6D2F987736A42D4C undefined b1207
		// Example: (1, WEAPON_REVOLVER_CATTLEMAN, 0) - disables cattleman revolver on weapon wheel
		static void INVENTORY_DISABLE_ITEM_(int inventoryId, Hash item, Hash gtxReason)
		{
			invoke<int>(0x766315A564594401, inventoryId, item, gtxReason);
		} // 0x766315A564594401 undefined b1207
		static void INVENTORY_ENABLE_ITEM_(int inventoryId, Hash item)
		{
			invoke<int>(0x6A564540FAC12211, inventoryId, item);
		} // 0x6A564540FAC12211 undefined b1207
		// Alternative Name: _INVENTORY_IS_ITEM_DISABLED
		static BOOL INVENTORY_IS_INVENTORY_ITEM_EQUIPPED_(int inventoryId, Hash item, BOOL p2)
		{
			return invoke<BOOL>(0x3D10D7179D7034AF, inventoryId, item, p2);
		} // 0x3D10D7179D7034AF undefined b1207
		static BOOL INVENTORY_SET_INVENTORY_ITEM_INSPECTION_ENABLED_(int inventoryId, Any* p1, BOOL enabled)
		{
			return invoke<BOOL>(0x227522FD59DDB7E8, inventoryId, p1, enabled);
		} // 0x227522FD59DDB7E8 undefined b1207
		static BOOL INVENTORY_IS_ITEM_EXPIRED_(Any* itemGUID)
		{
			return invoke<BOOL>(0x0137C77A2EC64536, itemGUID);
		} // 0x0137C77A2EC64536 undefined b1232
		static int INVENTORY_GET_ITEM_EXPIRY_TIME_(Any* itemGUID)
		{
			return invoke<int>(0x4A606C17276E1BCC, itemGUID);
		} // 0x4A606C17276E1BCC undefined b1232
		static int INVENTORY_GET_INVENTORY_ITEM_COUNT_WITH_GUID_(int inventoryId, Any* guid, BOOL p2)
		{
			return invoke<int>(0xC97E0D2302382211, inventoryId, guid, p2);
		} // 0xC97E0D2302382211 undefined b1207
		static int INVENTORY_GET_INVENTORY_ITEM_COUNT_WITH_ITEMID_(int inventoryId, Hash eInventoryItem, BOOL p2)
		{
			return invoke<int>(0xE787F05DFC977BDE, inventoryId, eInventoryItem, p2);
		} // 0xE787F05DFC977BDE undefined b1207
		static BOOL N0xB1DD74A1F5536622(int inventoryId, Any* itemGUID)
		{
			return invoke<BOOL>(0xB1DD74A1F5536622, inventoryId, itemGUID);
		} // 0xB1DD74A1F5536622 undefined b1311
		static int INVENTORY_GET_CHILDREN_COUNT_(int inventoryId, Any* parentGuid)
		{
			return invoke<int>(0xE843D21A8E2498AA, inventoryId, parentGuid);
		} // 0xE843D21A8E2498AA undefined b1207
		static int INVENTORY_GET_CHILDREN_IN_SLOT_COUNT(int inventoryId, Any* guid, Hash slotId)
		{
			return invoke<int>(0x033EE4B89F3AC545, inventoryId, guid, slotId);
		} // 0x033EE4B89F3AC545 undefined b1207
		static int INVENTORY_GET_INVENTORY_ITEM_EQUIPPED_IN_SLOT_(int inventoryId, Any* guid, Hash slotId, int p3, Any* p4)
		{
			return invoke<int>(0xBE012571B25F5ACA, inventoryId, guid, slotId, p3, p4);
		} // 0xBE012571B25F5ACA undefined b1207
		static BOOL INVENTORY_FITS_SLOT_ID_(Hash item, Hash slotId)
		{
			return invoke<BOOL>(0x780C5B9AE2819807, item, slotId);
		} // 0x780C5B9AE2819807 undefined b1207
		// p1: WARDROBE, KIT_CAMP, CHARACTER, KIT_MOONSHINER_PROPERTY
		// Returns slot hash
		static Hash GET_DEFAULT_ITEM_SLOT_INFO_(Hash item, Hash p1)
		{
			return invoke<Hash>(0x6452B1D357D81742, item, p1);
		} // 0x6452B1D357D81742 undefined b1207
		static BOOL INVENTORY_GET_INVENTORY_ITEM_FIT_SLOT_(Hash p0, Any* p1, int p2)
		{
			return invoke<BOOL>(0xB991FE166FAF84FD, p0, p1, p2);
		} // 0xB991FE166FAF84FD undefined b1207
		// p1 (out) and p2 (in) are both script arrays?
		// item: can be a component item, see SHOP_CATALOG_BUILD_LIST_OF_WEAPON_COMPONENTS
		static BOOL N0x9AC53CB6907B4428(Hash item, Any* p1, Any* p2)
		{
			return invoke<BOOL>(0x9AC53CB6907B4428, item, p1, p2);
		} // 0x9AC53CB6907B4428 undefined b1207
		// p0 is the return value of DATABINDING::_DATABINDING_ADD_DATA_CONTAINER_FROM_PATH
		// p2, p3: 0
		// Returns databindingEntryId
		static Hash N0x9D21B185ABC2DBC4(Any data, const char* effects, BOOL p2, BOOL p3)
		{
			return invoke<Hash>(0x9D21B185ABC2DBC4, data, effects, p2, p3);
		} // 0x9D21B185ABC2DBC4 undefined b1207
		// p1, p2: 0
		static void N0x75CFAC49301E134F(Hash databindingEntryId, BOOL p1, BOOL p2)
		{
			invoke<int>(0x75CFAC49301E134F, databindingEntryId, p1, p2);
		} // 0x75CFAC49301E134F undefined b1207
		// p2: 0
		// p3: -1
		// Returns databindingEntryId to be used with 0x75CFAC49301E134E (p0)
		static Hash N0x9D21B185ABC2DBC5(Any data, const char* stats, int p2, int p3)
		{
			return invoke<Hash>(0x9D21B185ABC2DBC5, data, stats, p2, p3);
		} // 0x9D21B185ABC2DBC5 undefined b1207
		// p0: value returned by 0x9D21B185ABC2DBC5
		static void N0x75CFAC49301E134E(Any data, BOOL p1, Ped ped)
		{
			invoke<int>(0x75CFAC49301E134E, data, p1, ped);
		} // 0x75CFAC49301E134E undefined b1207
		// Returns databindingEntryId to be used with 0x951847CEF3D829FF (p0)
		static Hash N0x46DB71883EE9D5AF(Any data, const char* stats, Any* guid, Ped ped)
		{
			return invoke<Hash>(0x46DB71883EE9D5AF, data, stats, guid, ped);
		} // 0x46DB71883EE9D5AF undefined b1207
		// p0: value returned by 0x46DB71883EE9D5AF
		static void N0x951847CEF3D829FF(Any p0, Any* outGuid, Ped ped)
		{
			invoke<int>(0x951847CEF3D829FF, p0, outGuid, ped);
		} // 0x951847CEF3D829FF undefined b1207
		// Only used in R* SP Scripts
		static BOOL N0x6862E4D93F64CF01(int inventoryId, Any* guid, Hash p2, Any* p3)
		{
			return invoke<BOOL>(0x6862E4D93F64CF01, inventoryId, guid, p2, p3);
		} // 0x6862E4D93F64CF01 undefined b1207
		// This native has no functionality.
		static void SET_USE_MISSION_INVENTORY_(BOOL toggle)
		{
			invoke<int>(0x597F571DDEE3FFAC, toggle);
		} // 0x597F571DDEE3FFAC undefined b1207
		static void INVENTORY_DISABLE_MISSION_INVENTORY_PICKUPS()
		{
			invoke<int>(0xE1F389F03DC83673);
		} // 0xE1F389F03DC83673 undefined b1311
		static void INVENTORY_USE_MISSION_INVENTORY_(BOOL enable, BOOL mirrorTransactions)
		{
			invoke<int>(0xA6AA9F56BC6CFF58, enable, mirrorTransactions);
		} // 0xA6AA9F56BC6CFF58 undefined b1207
		static void INVENTORY_COPY_MP_INVENTORY_TO_MISSION_INVENTORY(BOOL p0, BOOL p1, BOOL bCopySatchelItems, BOOL bCopyEmotes, BOOL bCopyHorse, BOOL p5)
		{
			invoke<int>(0x644CCB76A76CFBD6, p0, p1, bCopySatchelItems, bCopyEmotes, bCopyHorse, p5);
		} // 0x644CCB76A76CFBD6 undefined b1207
		static void INVENTORY_COPY_ITEM_TO_MISSION_INVENTORY_(Any* guid, BOOL p1)
		{
			invoke<int>(0x3112ADB9D5F3426B, guid, p1);
		} // 0x3112ADB9D5F3426B undefined b1207
		// Only used in R* SP Scripts
		static void N0xE36D4A38D28D9CFB(BOOL p0)
		{
			invoke<int>(0xE36D4A38D28D9CFB, p0);
		} // 0xE36D4A38D28D9CFB undefined b1207
		static BOOL INVENTORY_USE_SP_BACKUP_()
		{
			return invoke<BOOL>(0x7C7E4AB748EA3B07);
		} // 0x7C7E4AB748EA3B07 undefined b1207
		static BOOL INVENTORY_IS_PLAYER_INVENTORY_MIRRORING_TRANSACTIONS_()
		{
			return invoke<BOOL>(0xFC7563F482781A3D);
		} // 0xFC7563F482781A3D undefined b1207
		static void INVENTORY_COPY_ITEM_TO_INVENTORY_(int inventoryId, int inventoryIdCloned, Any* p2, Any p3)
		{
			invoke<int>(0xC04F47D488EF9EBA, inventoryId, inventoryIdCloned, p2, p3);
		} // 0xC04F47D488EF9EBA undefined b1207
		static void N0x9E58207B194488AC(Ped ped, int p1)
		{
			invoke<int>(0x9E58207B194488AC, ped, p1);
		} // 0x9E58207B194488AC undefined b1207
		static void SET_ITEM_PROMPT_INFO_REQUEST_(Any* p0)
		{
			invoke<int>(0xFD41D1D4350F6413, p0);
		} // 0xFD41D1D4350F6413 undefined b1207
		// Used in function SET_SHOP_BEING_ROBBED and many other shop related scripts and functions.
		// INVENTORY_A*
		static void N0x9B4E793B1CB6550A()
		{
			invoke<int>(0x9B4E793B1CB6550A);
		} // 0x9B4E793B1CB6550A undefined b1207
		static void SET_CARRIABLE_CARRY_ACTION_PROMPT_OVERRIDE_(Any* data)
		{
			invoke<int>(0xF666EF30F4F0AC4E, data);
		} // 0xF666EF30F4F0AC4E undefined b1207
		static void INVENTORY_ENABLE_WEAPONS_(int inventoryId)
		{
			invoke<int>(0xD5D72F1624F3BA7C, inventoryId);
		} // 0xD5D72F1624F3BA7C undefined b1207
		// Params: p1 = 0
		static void INVENTORY_DISABLE_WEAPONS_(int inventoryId, Any p1)
		{
			invoke<int>(0xE3A46370F70F3607, inventoryId, p1);
		} // 0xE3A46370F70F3607 undefined b1207
		// Only used in R* SP Scripts
		static void N0xE1F45A67A9F0DCBC(int inventoryId)
		{
			invoke<int>(0xE1F45A67A9F0DCBC, inventoryId);
		} // 0xE1F45A67A9F0DCBC undefined b1207
		// Only used in R* SP Scripts
		static void N0x6968CE7AC32F6788(int inventoryId)
		{
			invoke<int>(0x6968CE7AC32F6788, inventoryId);
		} // 0x6968CE7AC32F6788 undefined b1207
		// Returns collectionId
		static int INVENTORY_CREATE_ITEM_COLLECTION_2_(int* collectionSize)
		{
			return invoke<int>(0x97A3646645727F42, collectionSize);
		} // 0x97A3646645727F42 undefined b1232
		// p1: 32
		// Returns collectionId
		static int INVENTORY_CREATE_SORTED_COLLECTION_(int inventoryId, int p1, int* size)
		{
			return invoke<int>(0xBB7F968675B34B0C, inventoryId, p1, size);
		} // 0xBB7F968675B34B0C undefined b1311
	}

	namespace ITEMDATABASE
	{
		static BOOL ITEMDATABASE_CAN_EQUIP_ITEM_ON_CATEGORY_(Any p0, Any p1, Hash slotId)
		{
			return invoke<BOOL>(0x856FF92C57742AE5, p0, p1, slotId);
		} // 0x856FF92C57742AE5 undefined b1207
		static int ITEMDATABASE_GET_FITS_SLOT_COUNT_(Any p0)
		{
			return invoke<int>(0x2970D1D6BFCF9B46, p0);
		} // 0x2970D1D6BFCF9B46 undefined b1207
		static BOOL ITEMDATABASE_GET_FITS_SLOT_INFO_(Any p0, Any p1, Any p2)
		{
			return invoke<BOOL>(0x77210C146CED5261, p0, p1, p2);
		} // 0x77210C146CED5261 undefined b1207
		static int ITEMDATABASE_GET_HAS_SLOT_COUNT_(Any p0)
		{
			return invoke<int>(0x44915068579D7710, p0);
		} // 0x44915068579D7710 undefined b1207
		static BOOL ITEMDATABASE_GET_HAS_SLOT_INFO_(Any p0, Any p1, Any p2)
		{
			return invoke<BOOL>(0x8A9BD0DB7E8376CF, p0, p1, p2);
		} // 0x8A9BD0DB7E8376CF undefined b1207
		static BOOL ITEMDATABASE_FILLOUT_ITEM_BY_NAME(Any p0, Any p1)
		{
			return invoke<BOOL>(0x2A610BEE7D341CC4, p0, p1);
		} // 0x2A610BEE7D341CC4 undefined b1207
		// p0 can be a weapon hash, component item
		// p1 is a struct containing WEAPON_MOD and WEAPON_DECORATION
		static BOOL ITEMDATABASE_FILLOUT_ITEM_INFO(Hash p0, Any* p1)
		{
			return invoke<BOOL>(0xFE90ABBCBFDC13B2, p0, p1);
		} // 0xFE90ABBCBFDC13B2 undefined b1207
		static BOOL ITEMDATABASE_FILLOUT_ACQUIRE_COST_(Any p0, Any p1, Any p2)
		{
			return invoke<BOOL>(0x74F7928816E4E181, p0, p1, p2);
		} // 0x74F7928816E4E181 undefined b1207
		static BOOL ITEMDATABASE_FILLOUT_SELL_PRICE_(Any p0, Any p1, Any p2)
		{
			return invoke<BOOL>(0x7A62A2EEDE1C3766, p0, p1, p2);
		} // 0x7A62A2EEDE1C3766 undefined b1207
		static BOOL ITEMDATABASE_FILLOUT_SATCHEL_DATA_(Any p0, Any p1)
		{
			return invoke<BOOL>(0x4776EFD78F75C23F, p0, p1);
		} // 0x4776EFD78F75C23F undefined b1207
		static BOOL ITEMDATABASE_FILLOUT_UI_DATA_(Any p0, Any p1)
		{
			return invoke<BOOL>(0xB86F7CC2DC67AC60, p0, p1);
		} // 0xB86F7CC2DC67AC60 undefined b1207
		// _ITEMDATABASE_FILLOUT_(A)* - _ITEMDATABASE_FILLOUT_(B)*
		static BOOL N0x74C3B1093728D263(Any p0, Any p1)
		{
			return invoke<BOOL>(0x74C3B1093728D263, p0, p1);
		} // 0x74C3B1093728D263 undefined b1207
		static BOOL ITEMDATABASE_FILLOUT_ITEM_EFFECT_IDS_(Any p0, Any p1)
		{
			return invoke<BOOL>(0x9379BE60DC55BBE6, p0, p1);
		} // 0x9379BE60DC55BBE6 undefined b1207
		static BOOL ITEMDATABASE_FILLOUT_ITEM_EFFECT_ID_INFO(Any p0, Any p1)
		{
			return invoke<BOOL>(0xCF2D360D27FD1ABF, p0, p1);
		} // 0xCF2D360D27FD1ABF undefined b1207
		static BOOL ITEMDATABASE_FILLOUT_TAG_DATA_(Any p0, Any p1, Any p2, Any p3)
		{
			return invoke<BOOL>(0x5A11D6EEA17165B0, p0, p1, p2, p3);
		} // 0x5A11D6EEA17165B0 undefined b1207
		static int ITEMDATABASE_GET_ACQUIRE_COSTS_COUNT_(Any p0)
		{
			return invoke<int>(0x01FDDAD392D04144, p0);
		} // 0x01FDDAD392D04144 undefined b1207
		static BOOL ITEMDATABASE_GET_ACQUIRE_COST_(Any p0, Any p1, Any p2)
		{
			return invoke<BOOL>(0x6772A83C67A25775, p0, p1, p2);
		} // 0x6772A83C67A25775 undefined b1207
		// Returns fillOutIndex (?)
		// _ITEMDATABASE_GET_(A)* - _ITEMDATABASE_GET_(B)*
		static int N0xDEE7B3C76ED664BE(Hash p0, Hash costShop)
		{
			return invoke<int>(0xDEE7B3C76ED664BE, p0, costShop);
		} // 0xDEE7B3C76ED664BE undefined b1232
		static BOOL ITEMDATABASE_FILLOUT_ITEM_(Hash p0, Hash costShop, int fillOutIndex, Any p3)
		{
			return invoke<BOOL>(0xAD73B614DF26CF8A, p0, costShop, fillOutIndex, p3);
		} // 0xAD73B614DF26CF8A undefined b1232
		// _ITEMDATABASE_GET_(A)* - _ITEMDATABASE_GET_(B)*
		static int ITEMDATABASE_GET_AWARD_ACQUIRE_COST_TYPE_(Any p0)
		{
			return invoke<int>(0x12DF9C58201DD19A, p0);
		} // 0x12DF9C58201DD19A undefined b1311
		// _ITEMDATABASE_GET_(A)* - _ITEMDATABASE_GET_(B)*
		static BOOL N0x1FC25AEB5F76B38D(Any p0, int index, Any* data)
		{
			return invoke<BOOL>(0x1FC25AEB5F76B38D, p0, index, data);
		} // 0x1FC25AEB5F76B38D undefined b1311
		// Returns itemCount (?)
		// _ITEMDATABASE_GET_(A)* - _ITEMDATABASE_GET_(B)*
		static int N0xF540239F9937033B(Any award, Hash cost)
		{
			return invoke<int>(0xF540239F9937033B, award, cost);
		} // 0xF540239F9937033B undefined b1232
		// _ITEMDATABASE_FILLOUT_(A)* - _ITEMDATABASE_FILLOUT_(B)*
		static BOOL N0xF27F01BBF5ACD3F3(Any award, Hash cost, int index, Any p3)
		{
			return invoke<BOOL>(0xF27F01BBF5ACD3F3, award, cost, index, p3);
		} // 0xF27F01BBF5ACD3F3 undefined b1232
		// Returns collectionId to be used with 0x8750F69A720C2E41 (p0) and 0xCBB7B6EDFA933ADE (p0)
		static int ITEMDATABASE_CREATE_ITEM_COLLECTION_(Any* p0, int* size, int comparisonType)
		{
			return invoke<int>(0x71EFA7999AE79408, p0, size, comparisonType);
		} // 0x71EFA7999AE79408 undefined b1207
		// Returns (collection?) size/index (?)
		// _ITEMDATABASE_GET_(A)* - _ITEMDATABASE_GET_(B)*
		static int ITEMDATABASE_GET_COLLECTION_SIZE_(int collectionId)
		{
			return invoke<int>(0xD389A2549C4EFB30, collectionId);
		} // 0xD389A2549C4EFB30 undefined b1207
		// Params: p2 can be a component item hash
		static BOOL ITEMDATABASE_GET_COMPONENT_ITEM_(int collectionId, int index, Hash* p2)
		{
			return invoke<BOOL>(0x8750F69A720C2E41, collectionId, index, p2);
		} // 0x8750F69A720C2E41 undefined b1207
		static BOOL ITEMDATABASE_RELEASE_ITEM_COLLECTION_(int collectionId)
		{
			return invoke<BOOL>(0xCBB7B6EDFA933ADE, collectionId);
		} // 0xCBB7B6EDFA933ADE undefined b1207
		static BOOL ITEMDATABASE_IS_INTRINSIC_ITEM_(Any p0)
		{
			return invoke<BOOL>(0x337F88E3A063995E, p0);
		} // 0x337F88E3A063995E undefined b1207
		static BOOL ITEMDATABASE_IS_OVERPOWERED_ITEM_(Any p0)
		{
			return invoke<BOOL>(0x337F88E3A063995F, p0);
		} // 0x337F88E3A063995F undefined b1207
		static BOOL ITEMDATABASE_IS_KEY_VALID_(Any p0, Any p1)
		{
			return invoke<BOOL>(0x6D5D51B188333FD1, p0, p1);
		} // 0x6D5D51B188333FD1 undefined b1207
		static BOOL N0x537A0555F62CA01A(Hash p0, Any p1)
		{
			return invoke<BOOL>(0x537A0555F62CA01A, p0, p1);
		} // 0x537A0555F62CA01A undefined b1436
		static int ITEMDATABASE_GET_BUNDLE_ID_(Any p0)
		{
			return invoke<int>(0x891A45960B6B768A, p0);
		} // 0x891A45960B6B768A undefined b1207
		static int ITEMDATABASE_GET_BUNDLE_ITEM_COUNT_(Any p0, Any p1)
		{
			return invoke<int>(0x3332695B01015DF9, p0, p1);
		} // 0x3332695B01015DF9 undefined b1207
		static BOOL ITEMDATABASE_GET_BUNDLE_ITEM_INFO_(Any p0, Any p1, Any p2, Any p3)
		{
			return invoke<BOOL>(0x5D48A77E4B668B57, p0, p1, p2, p3);
		} // 0x5D48A77E4B668B57 undefined b1207
		static BOOL ITEMDATABASE_IS_BUNDLE_VALID_(Any p0, Any p1)
		{
			return invoke<BOOL>(0x4308812A6E9CA62E, p0, p1);
		} // 0x4308812A6E9CA62E undefined b1207
		// Returns Item Count
		static int N0x799FCD53358ED5FA(Any bundle, Any p1)
		{
			return invoke<int>(0x799FCD53358ED5FA, bundle, p1);
		} // 0x799FCD53358ED5FA undefined b1355
		static BOOL N0xC4146375D8A0B374(Any bundle, Any p1, int index, Any p3)
		{
			return invoke<BOOL>(0xC4146375D8A0B374, bundle, p1, index, p3);
		} // 0xC4146375D8A0B374 undefined b1355
		static BOOL N0xA97EE5E4589FCF5A(Any p0, Any p1)
		{
			return invoke<BOOL>(0xA97EE5E4589FCF5A, p0, p1);
		} // 0xA97EE5E4589FCF5A undefined b1207
		static int N0x7A35A72A692BE9DB(Any p0)
		{
			return invoke<int>(0x7A35A72A692BE9DB, p0);
		} // 0x7A35A72A692BE9DB undefined b1207
		static BOOL N0x3A0B667ABFF87F6E(Any p0, Any p1, Any p2)
		{
			return invoke<BOOL>(0x3A0B667ABFF87F6E, p0, p1, p2);
		} // 0x3A0B667ABFF87F6E undefined b1207
		static int N0x388088BFF3681189(Any p0, Any p1)
		{
			return invoke<int>(0x388088BFF3681189, p0, p1);
		} // 0x388088BFF3681189 undefined b1232
		static BOOL ITEMDATABASE_FILLOUT_BUNDLE_(Any p0, Any p1, Any p2, Any p3)
		{
			return invoke<BOOL>(0xB542632693D53408, p0, p1, p2, p3);
		} // 0xB542632693D53408 undefined b1232
		static BOOL ITEMDATABASE_IS_SHOP_KEY_VALID_(Any p0)
		{
			return invoke<BOOL>(0x00B9507D8E1D8716, p0);
		} // 0x00B9507D8E1D8716 undefined b1207
		static int ITEMDATABASE_GET_SHOP_INVENTORIES_ITEMS_COUNT_(Any p0)
		{
			return invoke<int>(0xC568B1A0F17C7025, p0);
		} // 0xC568B1A0F17C7025 undefined b1207
		static BOOL ITEMDATABASE_GET_SHOP_INVENTORIES_ITEM_INFO_(Any p0, Any p1, Any p2)
		{
			return invoke<BOOL>(0x4A79B41B4EB91F4E, p0, p1, p2);
		} // 0x4A79B41B4EB91F4E undefined b1207
		// Same Native Function as 0x17721003A66C72BF
		static BOOL ITEMDATABASE_GET_SHOP_INVENTORIES_ITEM_INFO_BY_KEY_(Any p0, Any p1, Any p2)
		{
			return invoke<BOOL>(0xCFB06801F5099B25, p0, p1, p2);
		} // 0xCFB06801F5099B25 undefined b1207
		static BOOL ITEMDATABASE_GET_SHOP_INVENTORIES_REQUIREMENT_GROUP_INFO_(Any p0, Any p1, Any p2, Any p3)
		{
			return invoke<BOOL>(0x76C752D788A76813, p0, p1, p2, p3);
		} // 0x76C752D788A76813 undefined b1207
		static BOOL ITEMDATABASE_GET_SHOP_INVENTORIES_REQUIREMENT_INFO_(Any p0, Any p1, Any p2, Any p3, Any p4)
		{
			return invoke<BOOL>(0xE0EA5C031AE5539F, p0, p1, p2, p3, p4);
		} // 0xE0EA5C031AE5539F undefined b1207
		static BOOL N0x17721003A66C72BF(Any p0, Any p1, Any p2)
		{
			return invoke<BOOL>(0x17721003A66C72BF, p0, p1, p2);
		} // 0x17721003A66C72BF undefined b1207
		static BOOL ITEMDATABASE_IS_SHOP_LAYOUT_KEY_VALID_(Any p0)
		{
			return invoke<BOOL>(0x3AFE5182C45A84F6, p0);
		} // 0x3AFE5182C45A84F6 undefined b1207
		static BOOL ITEMDATABASE_GET_SHOP_LAYOUT_INFO_(Any p0, Any p1)
		{
			return invoke<BOOL>(0x66A6D76B6BB999B4, p0, p1);
		} // 0x66A6D76B6BB999B4 undefined b1207
		static BOOL ITEMDATABASE_GET_SHOP_LAYOUT_ROOT_MENU_INFO_(Any p0, Any p1, Any p2)
		{
			return invoke<BOOL>(0x86FCB565CCA0CFA7, p0, p1, p2);
		} // 0x86FCB565CCA0CFA7 undefined b1207
		static BOOL ITEMDATABASE_GET_SHOP_LAYOUT_MENU_INFO_BY_ID_(Any p0, Any p1, Any p2)
		{
			return invoke<BOOL>(0xD66114469978B55B, p0, p1, p2);
		} // 0xD66114469978B55B undefined b1207
		static BOOL ITEMDATABASE_GET_SHOP_LAYOUT_MENU_INFO_BY_INDEX_(Any p0, Any p1, Any p2, Any p3)
		{
			return invoke<BOOL>(0xF04247092F193B75, p0, p1, p2, p3);
		} // 0xF04247092F193B75 undefined b1207
		static BOOL ITEMDATABASE_GET_SHOP_LAYOUT_MENU_PAGE_KEY_(Any p0, Any p1, Any p2, Any p3)
		{
			return invoke<BOOL>(0x9A60570657A7B635, p0, p1, p2, p3);
		} // 0x9A60570657A7B635 undefined b1207
		static BOOL N0xDBEADA0DF5F9AB9F(Any p0, int index, Any menuKey)
		{
			return invoke<BOOL>(0xDBEADA0DF5F9AB9F, p0, index, menuKey);
		} // 0xDBEADA0DF5F9AB9F undefined b1355
		static BOOL ITEMDATABASE_GET_SHOP_LAYOUT_PAGE_INFO_BY_KEY_(Any p0, Any p1, Any p2)
		{
			return invoke<BOOL>(0xB347C100DF0C9B7F, p0, p1, p2);
		} // 0xB347C100DF0C9B7F undefined b1207
		static BOOL ITEMDATABASE_GET_SHOP_LAYOUT_PAGE_ITEM_KEY_(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5)
		{
			return invoke<BOOL>(0xF32BEF578B3DBAE8, p0, p1, p2, p3, p4, p5);
		} // 0xF32BEF578B3DBAE8 undefined b1207
		static BOOL ITEMDATABASE_IS_BUYABLE_AWARD_VALID(Any p0)
		{
			return invoke<BOOL>(0x4CE753203FA42214, p0);
		} // 0x4CE753203FA42214 undefined b1207
		static BOOL ITEMDATABASE_FILLOUT_BUY_AWARD_ACQUIRE_COSTS_(Any p0, Any p1, Any p2, Any p3)
		{
			return invoke<BOOL>(0xB52E20F6767A09A2, p0, p1, p2, p3);
		} // 0xB52E20F6767A09A2 undefined b1207
		// _ITEMDATABASE_FILLOUT_(B)* - ITEMDATABASE_FILLOUT_ITEM*
		static BOOL N0xF8D09EF8CE61D7BF(Any p0, Any p1)
		{
			return invoke<BOOL>(0xF8D09EF8CE61D7BF, p0, p1);
		} // 0xF8D09EF8CE61D7BF undefined b1207
		static BOOL ITEMDATABASE_GET_ITEM_PRICE_MODIFIERS_(Any p0, Any p1)
		{
			return invoke<BOOL>(0x4EB37AAB79AB0C48, p0, p1);
		} // 0x4EB37AAB79AB0C48 undefined b1207
		static BOOL ITEMDATABASE_FILLOUT_PRICE_MODIFIER_BY_KEY_(Any p0, Any p1)
		{
			return invoke<BOOL>(0x40C5D95818823C94, p0, p1);
		} // 0x40C5D95818823C94 undefined b1207
		static int ITEMDATABASE_GET_NUMBER_OF_MODIFIED_PRICES_(Any p0)
		{
			return invoke<int>(0x5AAAF40E9B224F5E, p0);
		} // 0x5AAAF40E9B224F5E undefined b1207
		// Returns an alternative cost hash to COST_SHOP_DEFAULT
		static Hash ITEMDATABASE_GET_MODIFIED_PRICE_(Any p0, Any p1)
		{
			return invoke<Hash>(0xCB92EC9C004732B4, p0, p1);
		} // 0xCB92EC9C004732B4 undefined b1207
		static int ITEMDATABASE_GET_NUMBER_OF_MODIFIERS_(Any p0)
		{
			return invoke<int>(0x1289D8315235856D, p0);
		} // 0x1289D8315235856D undefined b1207
		static BOOL ITEMDATABASE_FILLOUT_MODIFIER_(Any p0, Any p1, Any p2)
		{
			return invoke<BOOL>(0x60614A0AB580A2B5, p0, p1, p2);
		} // 0x60614A0AB580A2B5 undefined b1207
		// _ITEMDATABASE_GET_* - _ITEMDATABASE_IS_*
		static BOOL ITEMDATABASE_GET_PRIORITY_ACCESS_AWARD_(Hash award)
		{
			return invoke<BOOL>(0xEF254F1A4C08B7E6, award);
		} // 0xEF254F1A4C08B7E6 undefined b1207
		// Returns iAwardItemCount
		static int ITEMDATABASE_GET_AWARD_ITEM_COUNT_(Hash award)
		{
			return invoke<int>(0x3FAA928A79591761, award);
		} // 0x3FAA928A79591761 undefined b1207
		// _ITEMDATABASE_GET_(A)* - _ITEMDATABASE_GET_(B)*
		static int N0x48229CE0C7938237(Hash award)
		{
			return invoke<int>(0x48229CE0C7938237, award);
		} // 0x48229CE0C7938237 undefined b1207
		static BOOL ITEMDATABASE_FILLOUT_AWARD_ITEM_INFO_(Hash award, int index, Hash* currency)
		{
			return invoke<BOOL>(0x121D2005DD64496B, award, index, currency);
		} // 0x121D2005DD64496B undefined b1207
		// _ITEMDATABASE_FILLOUT_(A)* - _ITEMDATABASE_FILLOUT_(B)*
		static BOOL N0x8D029948CA29409B(Hash award, Any p1, Any p2)
		{
			return invoke<BOOL>(0x8D029948CA29409B, award, p1, p2);
		} // 0x8D029948CA29409B undefined b1207
		static BOOL ITEMDATABASE_GET_AWARD_COST_MODIFIERS_(Any p0, Any p1)
		{
			return invoke<BOOL>(0xE81D0378A384E755, p0, p1);
		} // 0xE81D0378A384E755 undefined b1232
		static BOOL N0xD076DB9B96FAADF1(Any p0, Any p1)
		{
			return invoke<BOOL>(0xD076DB9B96FAADF1, p0, p1);
		} // 0xD076DB9B96FAADF1 undefined b1311
		static BOOL ITEMDATABASE_DOES_ITEM_HAVE_TAG_(Hash item, Hash tag, Hash tagType)
		{
			return invoke<BOOL>(0xFF5FB5605AD56856, item, tag, tagType);
		} // 0xFF5FB5605AD56856 undefined b1207
		// Params: tag = TAG_ITEM_PROPERTY (tagType(?))
		static BOOL ITEMDATABASE_DOES_BUNDLE_HAVE_TAG_(Hash bundle, Hash tag, Hash tagType)
		{
			return invoke<BOOL>(0x99C6EA66DFE73757, bundle, tag, tagType);
		} // 0x99C6EA66DFE73757 undefined b1207
		static Hash ITEMDATABASE_GET_ITEM_TAG_TYPE_(Hash item, Hash tag)
		{
			return invoke<Hash>(0x6111B8F9413F413A, item, tag);
		} // 0x6111B8F9413F413A undefined b1207
		static int N0x8870895BA5ED9385(Any p0, Hash tagType, Any p2)
		{
			return invoke<int>(0x8870895BA5ED9385, p0, tagType, p2);
		} // 0x8870895BA5ED9385 undefined b1232
		// Returns docData.iNumTotalLabelTypes
		static int ITEMDATABASE_LOCALIZATION_GET_NUM_LABEL_TYPES_(Any p0)
		{
			return invoke<int>(0xCEC6A41E8910486A, p0);
		} // 0xCEC6A41E8910486A undefined b1207
		// Returns iNumValuesForType
		static int ITEMDATABASE_LOCALIZATION_GET_NUM_VALUES_(Any p0, Any p1)
		{
			return invoke<int>(0x49885D82A13EEAEA, p0, p1);
		} // 0x49885D82A13EEAEA undefined b1207
		// Returns LabelType
		static Any ITEMDATABASE_LOCALIZATION_GET_TYPE_(Any p0, Any p1)
		{
			return invoke<Any>(0xCABF5D41D0073D4A, p0, p1);
		} // 0xCABF5D41D0073D4A undefined b1207
		static int ITEMDATABASE_LOCALIZATION_GET_VALUE_(Any p0, Hash label, Any p2)
		{
			return invoke<int>(0x9AE5610FDCED6EA7, p0, label, p2);
		} // 0x9AE5610FDCED6EA7 undefined b1207
		static int ITEMDATABASE_GET_ITEM_PATHSET_(int item, int p1)
		{
			return invoke<int>(0xF4452CE83118C738, item, p1);
		} // 0xF4452CE83118C738 undefined b1207
		// Returns Pathset Hash
		static Hash N0xAA29A5F13B2C20B2(Any p0, Hash p1)
		{
			return invoke<Hash>(0xAA29A5F13B2C20B2, p0, p1);
		} // 0xAA29A5F13B2C20B2 undefined b1232
	}

	namespace ITEMSET
	{
		static ItemSet CREATE_ITEMSET(BOOL p0)
		{
			return invoke<ItemSet>(0xA1AF16083320065A, p0);
		} // 0xA1AF16083320065A 0x0A113B2C b1207
		static void DESTROY_ITEMSET(ItemSet itemset)
		{
			invoke<int>(0x712BC69F10549B92, itemset);
		} // 0x712BC69F10549B92 0x83CE1A4C b1207
		static BOOL IS_ITEMSET_VALID(ItemSet itemset)
		{
			return invoke<BOOL>(0xD30765D153EF5C76, itemset);
		} // 0xD30765D153EF5C76 0xD201FC29 b1207
		static BOOL ADD_TO_ITEMSET(Entity entity, ItemSet itemset)
		{
			return invoke<BOOL>(0xABE74510883C7950, entity, itemset);
		} // 0xABE74510883C7950 0x6B0FE61B b1207
		static void REMOVE_FROM_ITEMSET(Entity entity, ItemSet itemset)
		{
			invoke<int>(0xC5BAA432B429DC24, entity, itemset);
		} // 0xC5BAA432B429DC24 0xA9565228 b1207
		static int GET_ITEMSET_SIZE(ItemSet itemset)
		{
			return invoke<int>(0x55F2E375AC6018A9, itemset);
		} // 0x55F2E375AC6018A9 0x2B31F41A b1207
		static ScrHandle GET_INDEXED_ITEM_IN_ITEMSET(int index, ItemSet itemset)
		{
			return invoke<ScrHandle>(0x275A2E2C0FAB7612, index, itemset);
		} // 0x275A2E2C0FAB7612 0x3F712874 b1207
		static Any GET_INDEXED_SCENARIO_POINT_INDEX_IN_ITEMSET(int index, ItemSet itemset)
		{
			return invoke<Any>(0x9FC3CDB5CE815901, index, itemset);
		} // 0x9FC3CDB5CE815901 undefined b1207
		static BOOL IS_IN_ITEMSET(Entity entity, ItemSet itemset)
		{
			return invoke<BOOL>(0xD1503C2EE2FE688C, entity, itemset);
		} // 0xD1503C2EE2FE688C 0x0D4B9730 b1207
		static void CLEAN_ITEMSET(ItemSet itemset)
		{
			invoke<int>(0x85F3A86CA9021FB0, itemset);
		} // 0x85F3A86CA9021FB0 0x919A4858 b1207
		static void CLEAR_ITEMSET_(ItemSet itemset)
		{
			invoke<int>(0x20A4BF0E09BEE146, itemset);
		} // 0x20A4BF0E09BEE146 undefined b1207
	}

	namespace LAW
	{
		// crimeType:
		// enum eCrimeType : Hash
		// {
		// 	CRIME_ACCOMPLICE = 0xAF074F6D,
		// 	CRIME_ARSON = 0x68134DC7,
		// 	CRIME_ASSAULT = 0x0BADC882,
		// 	CRIME_ASSAULT_ANIMAL = 0x18DA55EE,
		// 	CRIME_ASSAULT_CORPSE = 0x4E5F23F2,
		// 	CRIME_ASSAULT_HORSE = 0xC4736181,
		// 	CRIME_ASSAULT_LAW = 0xD7466D7C,
		// 	CRIME_ASSAULT_LIVESTOCK = 0xCCE1CCBD,
		// 	CRIME_BANK_ROBBERY = 0x6A1ADE3D,
		// 	CRIME_BURGLARY = 0xA54C77E0,
		// 	CRIME_CHEATING = 0xA2FF1145,
		// 	CRIME_DISTURBANCE = 0x5011F613,
		// 	CRIME_EXPLOSION = 0x3EBA7A37,
		// 	CRIME_EXPLOSION_POISON = 0x91D0A0E1,
		// 	CRIME_GRAVE_ROBBERY = 0x971EA5AF,
		// 	CRIME_HASSLE = 0x58488776,
		// 	CRIME_HIT_AND_RUN = 0xFF0A3CC4,
		// 	CRIME_HIT_AND_RUN_LAW = 0x064814AF,
		// 	CRIME_INTIMIDATION = 0x8319FBAB,
		// 	CRIME_JACK_HORSE = 0x82F7E4A2,
		// 	CRIME_JACK_VEHICLE = 0x6B981F4C,
		// 	CRIME_JAIL_BREAK = 0x12C1D589,
		// 	CRIME_KIDNAPPING = 0x98F908DB,
		// 	CRIME_KIDNAPPING_LAW = 0xFD72A7EA,
		// 	CRIME_LASSO_ASSAULT = 0x56EE5D5A,
		// 	CRIME_LAW_IS_THREATENED = 0x1CB91DF0,
		// 	CRIME_LOITERING = 0x6629D2F4,
		// 	CRIME_LOOTING = 0x55AD2BEB,
		// 	CRIME_MURDER = 0xE28ECE7E,
		// 	CRIME_MURDER_ANIMAL = 0x48F59A66,
		// 	CRIME_MURDER_HORSE = 0xC7261D79,
		// 	CRIME_MURDER_LAW = 0x7797FCE7,
		// 	CRIME_MURDER_LIVESTOCK = 0x9569C546,
		// 	CRIME_MURDER_PLAYER = 0xF5ABD6C9,
		// 	CRIME_MURDER_PLAYER_HORSE = 0xD55C6A79,
		// 	CRIME_PROPERTY_DESTRUCTION = 0x533B003D,
		// 	CRIME_RESIST_ARREST = 0xDF577BA5,
		// 	CRIME_ROBBERY = 0xA3BEDE4C,
		// 	CRIME_SELF_DEFENCE = 0xBD6A0AA3,
		// 	CRIME_STAGECOACH_ROBBERY = 0xFC738E61,
		// 	CRIME_STOLEN_GOODS = 0x9A949C79,
		// 	CRIME_THEFT = 0x72ADE410,
		// 	CRIME_THEFT_HORSE = 0xBE3A5838,
		// 	CRIME_THEFT_LIVESTOCK = 0x85BA08FD,
		// 	CRIME_THEFT_VEHICLE = 0x43A9ECA1,
		// 	CRIME_THREATEN = 0x941C985A,
		// 	CRIME_THREATEN_LAW = 0x7F908566,
		// 	CRIME_TRAIN_ROBBERY = 0x647D2A5A,
		// 	CRIME_TRAMPLE = 0x45DB39D8,
		// 	CRIME_TRAMPLE_LAW = 0xF00F266B,
		// 	CRIME_TRAMPLE_PLAYER = 0x75970C15,
		// 	CRIME_TRESPASSING = 0xAEDE8E35,
		// 	CRIME_UNARMED_ASSAULT = 0x5098CC5A,
		// 	CRIME_VANDALISM = 0x80FDC759,
		// 	CRIME_VANDALISM_VEHICLE = 0xF9E7ECE4,
		// 	CRIME_VEHICLE_DESTRUCTION = 0x54A85DDC,
		// 	CRIME_WANTED_LEVEL_UP_DEBUG_HIGH = 0x99C52FF5,
		// 	CRIME_WANTED_LEVEL_UP_DEBUG_LOW = 0xD891890F
		// };
		static void REPORT_CRIME_(Player player, Hash crimeType, int bounty, Entity entity, BOOL isKnownSuspect)
		{
			invoke<int>(0xF60386770878A98F, player, crimeType, bounty, entity, isKnownSuspect);
		} // 0xF60386770878A98F undefined b1207
		// crimeType: see _REPORT_CRIME
		static void SUPPRESS_CRIME_THIS_FRAME(Player player, Hash crimeType, int p2, int p3, int p4)
		{
			invoke<int>(0x785177E4D57D7389, player, crimeType, p2, p3, p4);
		} // 0x785177E4D57D7389 undefined b1207
		// Returns amount of suppressed crimes to be used later in the function MPINTRO_CRIME_MONITOR_MAINTAIN
		static int NUM_CRIMES_SUPPRESSED(Player player, Hash crimeType)
		{
			return invoke<int>(0xC08E804C91F47C80, player, crimeType);
		} // 0xC08E804C91F47C80 undefined b1207
		static Any N0xFFEBE5AA96BC2E4E(Ped ped, Hash crimeType, BOOL p2)
		{
			return invoke<Any>(0xFFEBE5AA96BC2E4E, ped, crimeType, p2);
		} // 0xFFEBE5AA96BC2E4E undefined b1207
		// Params: p0 either 0, 1 or -1 in R* Scripts
		// Set to 0 called together with _SUPPRESS_CRIME
		static void N0x15ABD5004CAD2D99(int p0)
		{
			invoke<int>(0x15ABD5004CAD2D99, p0);
		} // 0x15ABD5004CAD2D99 undefined b1207
		static void N0xF611DE44AEB36A1D(Hash crimeType, BOOL p1)
		{
			invoke<int>(0xF611DE44AEB36A1D, crimeType, p1);
		} // 0xF611DE44AEB36A1D undefined b1207
		static BOOL N0x3D2674828A4E6B3C()
		{
			return invoke<BOOL>(0x3D2674828A4E6B3C);
		} // 0x3D2674828A4E6B3C undefined b1207
		static void N0xC5EB2755FA25F1E9(BOOL p0)
		{
			invoke<int>(0xC5EB2755FA25F1E9, p0);
		} // 0xC5EB2755FA25F1E9 undefined b1207
		static int GET_BOUNTY(Player player)
		{
			return invoke<int>(0x54310AAB97B92816, player);
		} // 0x54310AAB97B92816 undefined b1207
		static void ADD_BOUNTY(Player player, int itemValueAmount)
		{
			invoke<int>(0x0E3BDEED21BEB945, player, itemValueAmount);
		} // 0x0E3BDEED21BEB945 undefined b1207
		static void SET_BOUNTY(Player player, int amount)
		{
			invoke<int>(0x093A9D1F72DF0D19, player, amount);
		} // 0x093A9D1F72DF0D19 undefined b1207
		static void CLEAR_BOUNTY(Player player)
		{
			invoke<int>(0xC76F252371150D9A, player);
		} // 0xC76F252371150D9A undefined b1207
		static int GET_WANTED_SCORE(Player player)
		{
			return invoke<int>(0xDD5FD601481F648B, player);
		} // 0xDD5FD601481F648B undefined b1207
		static void SET_WANTED_SCORE(Player player, int intensity)
		{
			invoke<int>(0xA80FF73F772ACF6A, player, intensity);
		} // 0xA80FF73F772ACF6A undefined b1207
		static void CLEAR_WANTED_SCORE(Player player)
		{
			invoke<int>(0x062B4A4A3396351D, player);
		} // 0x062B4A4A3396351D undefined b1207
		static void N0x331D349E0380B097(Any p0)
		{
			invoke<int>(0x331D349E0380B097, p0);
		} // 0x331D349E0380B097 undefined b1207
		// Only used in R* Script fm_mission_controller
		// _CLEAR_WANTED_*
		static void N0x292AD61A33A7A485()
		{
			invoke<int>(0x292AD61A33A7A485);
		} // 0x292AD61A33A7A485 undefined b1207
		// Used in SP only, called together with 0x55F37F5F3F2475E1 & CLEAR_WANTED_SCORE
		// _REPORT_*
		static void N0x07E8B8B20570271C(Player player)
		{
			invoke<int>(0x07E8B8B20570271C, player);
		} // 0x07E8B8B20570271C undefined b1207
		// Used in SP only
		// _REPORT_*
		static void N0x22741652985C84D0(Player player, Hash lawRegionHash)
		{
			invoke<int>(0x22741652985C84D0, player, lawRegionHash);
		} // 0x22741652985C84D0 undefined b1207
		static void REPORT_PLAYER_LAW_DISPATCH_RESPONSE_OVERRIDE_(Player player, Hash dispatchResponseHash)
		{
			invoke<int>(0x9C4352134B2835FB, player, dispatchResponseHash);
		} // 0x9C4352134B2835FB undefined b1207
		// Only used in shoprobberies R* Scripts
		static BOOL N0x9EF07CFBB19A9733()
		{
			return invoke<BOOL>(0x9EF07CFBB19A9733);
		} // 0x9EF07CFBB19A9733 undefined b1207
		static void SET_LAW_DISABLED_(BOOL toggle)
		{
			invoke<int>(0x8DE82BC774F3B862, toggle);
		} // 0x8DE82BC774F3B862 undefined b1207
		static void FORCE_LAW_ON_LOCAL_PLAYER_IMMEDIATELY_()
		{
			invoke<int>(0x956510F8C36B5C64);
		} // 0x956510F8C36B5C64 undefined b1207
		// enum eLawRegion : Hash
		// {
		// 	LAW_DISPATCH_REGION_NONE = 0,
		// 	LAW_REGION_AGUASDULCES = 0x2F573EBE,
		// 	LAW_REGION_ANNESBURG = 0x68CAFD50,
		// 	LAW_REGION_ARMADILLO = 0xF0B90756,
		// 	LAW_REGION_BAYOU_NWA = 0x80966B1C,
		// 	LAW_REGION_BEECHERS_HOPE = 0xE2544977,
		// 	LAW_REGION_BIG_VALLEY = 0x3DF1559A,
		// 	LAW_REGION_BLACKWATER = 0x60D4886D,
		// 	LAW_REGION_BLACKWATER_MAINGAME = 0x66553576,
		// 	LAW_REGION_BLUEGILL_MARSH = 0x1D6AED8E,
		// 	LAW_REGION_BRAITHWAITE_MANOR = 0x3D71E7FF,
		// 	LAW_REGION_BUTCHER_CREEK = 0x2B3E1822,
		// 	LAW_REGION_CALIGA_HALL = 0xF3FE5080,
		// 	LAW_REGION_CORNWALL = 0xCC4672FA,
		// 	LAW_REGION_CUMBERLAND_FOREST = 0x81A78306,
		// 	LAW_REGION_EMERALD_RANCH = 0x5C069DF3,
		// 	LAW_REGION_FORT_WALLACE = 0x0AF25192,
		// 	LAW_REGION_GREAT_PLAINS = 0xB20573FA,
		// 	LAW_REGION_GREAT_PLAINS_MAINGAME = 0x9862FF7C,
		// 	LAW_REGION_GRIZZLIES = 0xBB936031,
		// 	LAW_REGION_GUAMA = 0x200DFF42,
		// 	LAW_REGION_HEARTLANDS = 0xAD14DA65,
		// 	LAW_REGION_LAGRAS = 0xC64808D3,
		// 	LAW_REGION_MACFARLANES_RANCH = 0x396A7D5F,
		// 	LAW_REGION_MANICATO = 0x039DB6BF,
		// 	LAW_REGION_MANZANITA_POST = 0x895E580E,
		// 	LAW_REGION_MANZANITA_POST_MAINGAME = 0x9BDD6A38,
		// 	LAW_REGION_OCCUPIED_CARAVAN_CAMP = 0x7EBABB01,
		// 	LAW_REGION_OLD_MAP_WILDERNESS = 0xCBB45950,
		// 	LAW_REGION_OLD_MAP_WILDERNESS_MAINGAME = 0x9F839BE7,
		// 	LAW_REGION_OUTLAW3 = 0x97A02FC1,
		// 	LAW_REGION_PRONGHORN_RANCH = 0x398E4BFC,
		// 	LAW_REGION_RHODES = 0x89222928,
		// 	LAW_REGION_RHODES_LOCKDOWN = 0xB1181671,
		// 	LAW_REGION_RIDGEWOOD_FARM = 0x635C3028,
		// 	LAW_REGION_ROANOKE_RIDGE = 0x46386A9A,
		// 	LAW_REGION_SAINT_DENIS = 0x5CF7C268,
		// 	LAW_REGION_SAINT_DENIS_RURAL = 0x4FD5331A,
		// 	LAW_REGION_SCARLETT_MEADOWS = 0x5FDD9717,
		// 	LAW_REGION_SISIKA = 0x2B6BBA52,
		// 	LAW_REGION_STRAWBERRY = 0xDD932620,
		// 	LAW_REGION_TALL_TREES = 0xD939B758,
		// 	LAW_REGION_TALL_TREES_MAINGAME = 0x084B17DF,
		// 	LAW_REGION_THIEVES_LANDING = 0x3D0C2EB6,
		// 	LAW_REGION_THIEVES_LANDING_MAINGAME = 0x61C450F3,
		// 	LAW_REGION_TUMBLEWEED = 0x0EFAF8DC,
		// 	LAW_REGION_VALENTINE = 0xA7A3F0C3,
		// 	LAW_REGION_VALENTINE_LOCKDOWN = 0x123582FE,
		// 	LAW_REGION_VAN_HORN = 0x619B528E,
		// 	LAW_REGION_WAPITI = 0x7A976E02
		// };
		static void SET_LAW_REGION_(Player player, Hash lawRegionHash, Hash stateHash)
		{
			invoke<int>(0x4752F68EB7F2D280, player, lawRegionHash, stateHash);
		} // 0x4752F68EB7F2D280 undefined b1207
		// Only used in R* SP Scripts
		static void N0x5E6F375CA101C108(Player player, BOOL p1)
		{
			invoke<int>(0x5E6F375CA101C108, player, p1);
		} // 0x5E6F375CA101C108 undefined b1207
		static void SET_LAW_RBS_VOLUME_(Player player, Hash p1)
		{
			invoke<int>(0x9BBDCB8DF789EBC1, player, p1);
		} // 0x9BBDCB8DF789EBC1 undefined b1207
		static BOOL IS_LAW_INCIDENT_ACTIVE(Player player)
		{
			return invoke<BOOL>(0xAD401C63158ACBAA, player);
		} // 0xAD401C63158ACBAA undefined b1207
		static Hash N0x148E7AC8141C9E64(Player player)
		{
			return invoke<Hash>(0x148E7AC8141C9E64, player);
		} // 0x148E7AC8141C9E64 undefined b1207
		// _SET_C* - _SET_D*
		static void N0xEDFC6C1FD1C964F5(Player player, Hash crimeType, int bounty, float p3, float p4, BOOL p5, float p6, float p7, Any p8)
		{
			invoke<int>(0xEDFC6C1FD1C964F5, player, crimeType, bounty, p3, p4, p5, p6, p7, p8);
		} // 0xEDFC6C1FD1C964F5 undefined b1207
		static BOOL LAW_WITNESS_RESPONSE_TASK_(Ped pedGroup1, Ped ped, Ped pedGroup2, float x, float y, float z, Hash crimeType)
		{
			return invoke<BOOL>(0xF0B67BAD53C35BD9, pedGroup1, ped, pedGroup2, x, y, z, crimeType);
		} // 0xF0B67BAD53C35BD9 undefined b1207
		static Any N0x018F30D762E62DF8(Ped ped, Any* p1)
		{
			return invoke<Any>(0x018F30D762E62DF8, ped, p1);
		} // 0x018F30D762E62DF8 undefined b1207
		// Only used in R* SP Script av_amb_camp_robbery
		static Any N0x318F0F9A4426CFA2(Ped ped, Any* p1)
		{
			return invoke<Any>(0x318F0F9A4426CFA2, ped, p1);
		} // 0x318F0F9A4426CFA2 undefined b1207
		static Any N0x95878B13E272EF1F(Entity entity, Ped ped, BOOL p2, float x, float y, float z, Hash crimeType)
		{
			return invoke<Any>(0x95878B13E272EF1F, entity, ped, p2, x, y, z, crimeType);
		} // 0x95878B13E272EF1F undefined b1207
		static void ADD_WITNESS_RESPONSE_(Player player, Hash crimeType, Ped pedGroup)
		{
			invoke<int>(0x10827B5A0AAC56A7, player, crimeType, pedGroup);
		} // 0x10827B5A0AAC56A7 undefined b1207
		// Only used in R* SP Scripts
		// Params: p2 either 1 or 2
		static void N0xD7494DED50C6EF52(Player player, Hash crimeType, int p2)
		{
			invoke<int>(0xD7494DED50C6EF52, player, crimeType, p2);
		} // 0xD7494DED50C6EF52 undefined b1207
		static BOOL ARE_WITNESSES_ACTIVE(Player player)
		{
			return invoke<BOOL>(0x69E181772886F48B, player);
		} // 0x69E181772886F48B undefined b1207
		static BOOL ARE_WITNESSES_PENDING_(Player player)
		{
			return invoke<BOOL>(0x0BB6DE7D23C60626, player);
		} // 0x0BB6DE7D23C60626 undefined b1207
		static BOOL ARE_INVESTIGATORS_ACTIVE_(Player player, BOOL areInvestigatorsActive, Any p2)
		{
			return invoke<BOOL>(0xF0FBFB9AB15F7734, player, areInvestigatorsActive, p2);
		} // 0xF0FBFB9AB15F7734 undefined b1207
		static void N0x522F74636DF10201(Player player, ItemSet itemSet)
		{
			invoke<int>(0x522F74636DF10201, player, itemSet);
		} // 0x522F74636DF10201 undefined b1207
		// Only used in R* SP Scripts
		// Params: p1 = true, p2 = false
		static void N0xDA1A9ADC4E3D4B16(ItemSet itemSet, BOOL p1, BOOL p2)
		{
			invoke<int>(0xDA1A9ADC4E3D4B16, itemSet, p1, p2);
		} // 0xDA1A9ADC4E3D4B16 undefined b1207
		static void ENABLE_DISPATCH_LAW_(BOOL toggle)
		{
			invoke<int>(0xC805EB785824F712, toggle);
		} // 0xC805EB785824F712 undefined b1207
		static void ENABLE_DISPATCH_LAW_2_(BOOL toggle)
		{
			invoke<int>(0x710448D44A64C213, toggle);
		} // 0x710448D44A64C213 undefined b1207
		// Only used in rcm_homerob00 R* Script
		static BOOL ARE_ANY_LAW_PEDS_INVESTIGATING_()
		{
			return invoke<BOOL>(0xECE3C34B270428D5);
		} // 0xECE3C34B270428D5 undefined b1207
		// Only used in trainrobbery_ambient R* Script
		static BOOL ARE_LAW_PEDS_ENABLED_FOR_TRAIN_()
		{
			return invoke<BOOL>(0xA22C46F16359471C);
		} // 0xA22C46F16359471C undefined b1207
		// Only used in rcm_gunslinger1_1 R* Script: p0 = 0
		static void N0x82F11E1296996574(int p0)
		{
			invoke<int>(0x82F11E1296996574, p0);
		} // 0x82F11E1296996574 undefined b1207
		static void N0x3852237A3D9DF145(int p0)
		{
			invoke<int>(0x3852237A3D9DF145, p0);
		} // 0x3852237A3D9DF145 undefined b1207
		static BOOL N0x0EAF918F751F27BA(Ped ped)
		{
			return invoke<BOOL>(0x0EAF918F751F27BA, ped);
		} // 0x0EAF918F751F27BA undefined b1207
		// Only used in rcm_serial_killer1 R* Script
		static BOOL N0xC0DF161950FB101E(Ped ped)
		{
			return invoke<BOOL>(0xC0DF161950FB101E, ped);
		} // 0xC0DF161950FB101E undefined b1207
		static Any N0xE4D6E45F491A66CB(Player player, int p1)
		{
			return invoke<Any>(0xE4D6E45F491A66CB, player, p1);
		} // 0xE4D6E45F491A66CB undefined b1207
		// Returns p1 value for 0xE4D6E45F491A66CB
		static int N0xE9EB79CBF9C0F58A(Player player)
		{
			return invoke<int>(0xE9EB79CBF9C0F58A, player);
		} // 0xE9EB79CBF9C0F58A undefined b1207
		static void N0x21213B833EF4DAE7(Player player, Ped ped, Vector3* outCoords)
		{
			invoke<int>(0x21213B833EF4DAE7, player, ped, outCoords);
		} // 0x21213B833EF4DAE7 undefined b1207
		static void N0x61B98367D93F012F(Player player)
		{
			invoke<int>(0x61B98367D93F012F, player);
		} // 0x61B98367D93F012F undefined b1207
		static void N0x6ABC50979655BEE7(Player player, Hash* crimeType, Any p2)
		{
			invoke<int>(0x6ABC50979655BEE7, player, crimeType, p2);
		} // 0x6ABC50979655BEE7 undefined b1207
		// _CLEAR*
		static void N0x390710D2DAFA6BFF(Player player, BOOL p1)
		{
			invoke<int>(0x390710D2DAFA6BFF, player, p1);
		} // 0x390710D2DAFA6BFF undefined b1207
		// Returns bounty (increment) value
		static int GET_CRIME_BOUNTY_AMOUNT_BY_TYPE_(Hash crimeType)
		{
			return invoke<int>(0x35E5E21F9159849C, crimeType);
		} // 0x35E5E21F9159849C undefined b1207
		// crimeType: see _REPORT_CRIME
		static int N0xDAEFDFDB2AEECE37(Hash crimeType, Any p1)
		{
			return invoke<int>(0xDAEFDFDB2AEECE37, crimeType, p1);
		} // 0xDAEFDFDB2AEECE37 undefined b1207
		// See _REPORT_CRIME
		static Hash GET_HUD_PLAYER_CRIME_TYPE_(Player player)
		{
			return invoke<Hash>(0x259CE340A8738814, player);
		} // 0x259CE340A8738814 undefined b1207
		static int N0xE083BEDA81709891(Player player)
		{
			return invoke<int>(0xE083BEDA81709891, player);
		} // 0xE083BEDA81709891 undefined b1207
		static BOOL N0x89E005B1662F6E48(Player player, int p1, int p2)
		{
			return invoke<BOOL>(0x89E005B1662F6E48, player, p1, p2);
		} // 0x89E005B1662F6E48 undefined b1207
		static BOOL N0x3738B784DDD35CC6(Player player, int p1, int p2)
		{
			return invoke<BOOL>(0x3738B784DDD35CC6, player, p1, p2);
		} // 0x3738B784DDD35CC6 undefined b1207
		// Only used in net_fetch R* Script
		static int N0x0BDFEBCF40A5F7E3(Hash crimeType)
		{
			return invoke<int>(0x0BDFEBCF40A5F7E3, crimeType);
		} // 0x0BDFEBCF40A5F7E3 undefined b1207
		// Note: This native is only used in multiplayer scripts
		// dispatchResponseHash: see update1/common/data/dispatchresponses/..
		static void SET_CUSTOM_LAW_DISPATCH_RESPONSE_(Hash dispatchResponseHash)
		{
			invoke<int>(0x009CF9A29972C298, dispatchResponseHash);
		} // 0x009CF9A29972C298 undefined b1207
		// dispatchResponseHash: see common/data/dispatchresponses/..
		static Any CREATE_LAW_DISPATCH_RESPONSE_FOR_COORDS_(float x, float y, float z, Hash dispatchResponseHash)
		{
			return invoke<Any>(0x75CBF20BA47E4F89, x, y, z, dispatchResponseHash);
		} // 0x75CBF20BA47E4F89 undefined b1207
		// Force clears local player's wanted level
		static void SET_BOUNTY_HUNTER_PURSUIT_CLEARED_()
		{
			invoke<int>(0x55F37F5F3F2475E1);
		} // 0x55F37F5F3F2475E1 undefined b1207
		// Called together with REPORT_POLICE_SPOTTED_PLAYER
		static void N0xBD944A3D36E992DE()
		{
			invoke<int>(0xBD944A3D36E992DE);
		} // 0xBD944A3D36E992DE undefined b1207
		static void N0x987BE590FB9D41E5(BOOL p0)
		{
			invoke<int>(0x987BE590FB9D41E5, p0);
		} // 0x987BE590FB9D41E5 undefined b1207
		static void N0xDCF12B89624AAC96(BOOL p0)
		{
			invoke<int>(0xDCF12B89624AAC96, p0);
		} // 0xDCF12B89624AAC96 undefined b1207
		static void N0xDDCE8E960D1DE240(BOOL p0)
		{
			invoke<int>(0xDDCE8E960D1DE240, p0);
		} // 0xDDCE8E960D1DE240 undefined b1207
		static void N0xDEA083C16BB91345()
		{
			invoke<int>(0xDEA083C16BB91345);
		} // 0xDEA083C16BB91345 undefined b1207
		// Only used in act_bankrobbery01 R* Script
		static void N0x9C8A2BF37E966464(Player player, ItemSet itemSet)
		{
			invoke<int>(0x9C8A2BF37E966464, player, itemSet);
		} // 0x9C8A2BF37E966464 undefined b1207
		static BOOL N0x9D5C9A5A3321B128(Player player)
		{
			return invoke<BOOL>(0x9D5C9A5A3321B128, player);
		} // 0x9D5C9A5A3321B128 undefined b1207
		static BOOL N0x0F230DE0DDBE3649(Player player)
		{
			return invoke<BOOL>(0x0F230DE0DDBE3649, player);
		} // 0x0F230DE0DDBE3649 undefined b1207
		static BOOL N0x9945A3E2528A02E8(Player player)
		{
			return invoke<BOOL>(0x9945A3E2528A02E8, player);
		} // 0x9945A3E2528A02E8 undefined b1207
		// Returns the amount of time (probably in game minutes) since last seen by the law / left the wanted radius
		static float GET_TIME_SINCE_LAST_SEEN_BY_LAW_(Player player)
		{
			return invoke<float>(0x717DA2281DF90855, player);
		} // 0x717DA2281DF90855 undefined b1207
		static void N0x9B4C564BFA7CFF37(float p0)
		{
			invoke<int>(0x9B4C564BFA7CFF37, p0);
		} // 0x9B4C564BFA7CFF37 undefined b1207
		static void SET_ALLOW_DISABLED_LAW_RESPONSES_(BOOL toggle)
		{
			invoke<int>(0x4B52BF96E225D230, toggle);
		} // 0x4B52BF96E225D230 undefined b1207
		static void RESET_WANTED_FOR_NEW_INCIDENT(Player player)
		{
			invoke<int>(0x2728C77FBC4B9796, player);
		} // 0x2728C77FBC4B9796 undefined b1207
		static BOOL N0x856CE8FDE2416602(Ped ped)
		{
			return invoke<BOOL>(0x856CE8FDE2416602, ped);
		} // 0x856CE8FDE2416602 undefined b1207
		// Only used in shoprobberies
		static BOOL N0x7351DA734F989F4E(Entity entity)
		{
			return invoke<BOOL>(0x7351DA734F989F4E, entity);
		} // 0x7351DA734F989F4E undefined b1207
		// p0 is always BOUNTYHUNTERSGLOBALCOOLDOWN in R* scripts
		static int GET_BOUNTY_HUNTER_GLOBAL_COOLDOWN_(Hash p0)
		{
			return invoke<int>(0x76CF93D4B416B288, p0);
		} // 0x76CF93D4B416B288 undefined b1207
		// p0 is always BOUNTYHUNTERSGLOBALCOOLDOWN in R* scripts
		static void SET_BOUNTY_HUNTER_GLOBAL_COOLDOWN_(Hash p0, int p1)
		{
			invoke<int>(0xF19706B1F8FFA88F, p0, p1);
		} // 0xF19706B1F8FFA88F undefined b1207
		// Only used in resapwn_dump_body R* Script
		static void N0x2001687F9562FD9D(Any p0)
		{
			invoke<int>(0x2001687F9562FD9D, p0);
		} // 0x2001687F9562FD9D undefined b1207
		// p0 is always BOUNTYHUNTERSGLOBALCOOLDOWN in R* scripts
		static void PAUSE_BOUNTY_HUNTER_COOLDOWN_(Hash p0, BOOL p1, Any p2)
		{
			invoke<int>(0xC61EDEBF16CD9668, p0, p1, p2);
		} // 0xC61EDEBF16CD9668 undefined b1207
		// Only used in R* SP Scripts
		// Params: p1 = 0
		static void N0xE9AC8466ABE484BB(BOOL p0, Any p1)
		{
			invoke<int>(0xE9AC8466ABE484BB, p0, p1);
		} // 0xE9AC8466ABE484BB undefined b1207
		static BOOL N0x40851BCC33ACD9AB(Ped ped)
		{
			return invoke<BOOL>(0x40851BCC33ACD9AB, ped);
		} // 0x40851BCC33ACD9AB undefined b1207
		static BOOL N0xF46108C50A22B029()
		{
			return invoke<BOOL>(0xF46108C50A22B029);
		} // 0xF46108C50A22B029 undefined b1207
		static void N0x7803436E68C32B26()
		{
			invoke<int>(0x7803436E68C32B26);
		} // 0x7803436E68C32B26 undefined b1207
		static void N0xC310239ACCCF5579()
		{
			invoke<int>(0xC310239ACCCF5579);
		} // 0xC310239ACCCF5579 undefined b1207
		static void N0x29CD4896ECB66C12()
		{
			invoke<int>(0x29CD4896ECB66C12);
		} // 0x29CD4896ECB66C12 undefined b1207
		// Seems to disable lawmen guarding behaviors (like during a region lockdown). Must be called every frame.
		// Only used in R* SP Scripts, mostly used in train_fast_travel_core
		static void N0xE94B5E938619712E()
		{
			invoke<int>(0xE94B5E938619712E);
		} // 0xE94B5E938619712E undefined b1207
		// Only used in R* Script long_update
		// Returns a value thats being subtracted from GET_GAME_TIMER
		static int N0x7FC667F6DDFBCDCC(Player player)
		{
			return invoke<int>(0x7FC667F6DDFBCDCC, player);
		} // 0x7FC667F6DDFBCDCC undefined b1207
		static void N0x9C5BD8C562565CE6(Hash* crimeType)
		{
			invoke<int>(0x9C5BD8C562565CE6, crimeType);
		} // 0x9C5BD8C562565CE6 undefined b1207
		static void N0xCBFB4951F2E3934C(Player player, Any* data)
		{
			invoke<int>(0xCBFB4951F2E3934C, player, data);
		} // 0xCBFB4951F2E3934C undefined b1207
		// behaviour: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/CLawBehavior__Flags
		static void SET_PED_LAW_BEHAVIOUR_(Ped ped, int behaviour)
		{
			invoke<int>(0x819ADD5EF1742F47, ped, behaviour);
		} // 0x819ADD5EF1742F47 undefined b1207
		static void N0x00DB0BC05E3FAA4E(Ped ped, int bitset)
		{
			invoke<int>(0x00DB0BC05E3FAA4E, ped, bitset);
		} // 0x00DB0BC05E3FAA4E undefined b1207
		static void N0x0C392DB374655176(float x, float y, float z, float p3, ItemSet itemSet)
		{
			invoke<int>(0x0C392DB374655176, x, y, z, p3, itemSet);
		} // 0x0C392DB374655176 undefined b1207
		static Any N0xC687A23E166DCF68(Any* p0)
		{
			return invoke<Any>(0xC687A23E166DCF68, p0);
		} // 0xC687A23E166DCF68 undefined b1207
		static void SET_DISPATCH_MULTIPLIER_OVERRIDE_(float multiplier)
		{
			invoke<int>(0x002BABE0B7D53136, multiplier);
		} // 0x002BABE0B7D53136 undefined b1207
		static BOOL N0x26934083D3F2579C(Player player)
		{
			return invoke<BOOL>(0x26934083D3F2579C, player);
		} // 0x26934083D3F2579C undefined b1207
		static BOOL GET_PLAYER_REGISTERED_CRIME(Player player, int p1, Hash* crimeType)
		{
			return invoke<BOOL>(0x532C5FDDB986EE5C, player, p1, crimeType);
		} // 0x532C5FDDB986EE5C undefined b1207
		static BOOL N0xB527099D1E1EED49(Player player, int p1, Hash* crimeType)
		{
			return invoke<BOOL>(0xB527099D1E1EED49, player, p1, crimeType);
		} // 0xB527099D1E1EED49 undefined b1207
		static void CLEAR_PLAYER_PAST_CRIMES(Player player)
		{
			invoke<int>(0xBCC6DC59E32A2BDC, player);
		} // 0xBCC6DC59E32A2BDC undefined b1207
		static void SET_PLAYER_ARRESTED_IN_REGION(Player player, Hash lawRegionHash)
		{
			invoke<int>(0xE0FA74AA3CCE650B, player, lawRegionHash);
		} // 0xE0FA74AA3CCE650B undefined b1207
		static void SET_PLAYER_TURNED_IN_BOUNTY_IN_REGION(Player player, Hash lawRegionHash)
		{
			invoke<int>(0x73BAD7B2F2DB50DE, player, lawRegionHash);
		} // 0x73BAD7B2F2DB50DE undefined b1207
		static void N0xD6C0A8C7C0B2F82C(Player player, BOOL p1)
		{
			invoke<int>(0xD6C0A8C7C0B2F82C, player, p1);
		} // 0xD6C0A8C7C0B2F82C undefined b1207
		// Default range is 1.0f
		static void SET_LAW_SENSE_RANGE_MODIFIER(Player player, float range)
		{
			invoke<int>(0xFEC85339AACA2A35, player, range);
		} // 0xFEC85339AACA2A35 undefined b1207
		// _SET_DISPATCH_*
		static void N0x7EF2A2FE38D74456(int flag, BOOL p1)
		{
			invoke<int>(0x7EF2A2FE38D74456, flag, p1);
		} // 0x7EF2A2FE38D74456 undefined b1207
		// _GET_DISPATCH_*
		static BOOL N0xC7DC5A0A7DF608CB(int flag)
		{
			return invoke<BOOL>(0xC7DC5A0A7DF608CB, flag);
		} // 0xC7DC5A0A7DF608CB undefined b1207
		static void SET_DISABLE_DISTURBANCE_CRIMES(Player player, BOOL p1)
		{
			invoke<int>(0xDE5FAA741A781F73, player, p1);
		} // 0xDE5FAA741A781F73 undefined b1207
		static void SET_POSTPONE_DISTURBANCE_CRIMES_DURING_COMBAT(Player player, BOOL p1)
		{
			invoke<int>(0x362086B911657B1A, player, p1);
		} // 0x362086B911657B1A undefined b1207
		static void CREATE_GUARD_ZONE_(const char* name)
		{
			invoke<int>(0x8F9DE75680275C9F, name);
		} // 0x8F9DE75680275C9F undefined b1207
		static void REMOVE_GUARD_ZONE_(const char* name)
		{
			invoke<int>(0x67EBDD958835956C, name);
		} // 0x67EBDD958835956C undefined b1207
		// Only used in loanshark_miner1 R* Script: name = ANNESBURG_MINES
		static void N0x9772395CC73E8D1F(Ped ped, const char* name)
		{
			invoke<int>(0x9772395CC73E8D1F, ped, name);
		} // 0x9772395CC73E8D1F undefined b1207
		static void DISABLE_GUARD_ZONE_(const char* name)
		{
			invoke<int>(0x26D558692B25DD95, name);
		} // 0x26D558692B25DD95 undefined b1207
		// Only used in sisikapenitentiary R* Script: name = SISIKA
		// _IS_G* or _IS_H*
		static BOOL N0x0DBACA9C38C9A686(const char* name)
		{
			return invoke<BOOL>(0x0DBACA9C38C9A686, name);
		} // 0x0DBACA9C38C9A686 undefined b1207
		static BOOL IS_GUARD_PED_INVESTIGATING_(Ped ped)
		{
			return invoke<BOOL>(0xD743C4293F47AFAD, ped);
		} // 0xD743C4293F47AFAD undefined b1207
		// Returns true when investigation creation was successful
		static BOOL CREATE_GUARD_ZONE_FOR_ENTITY_(const char* guardZoneName, Entity entity, float x, float y, float z)
		{
			return invoke<BOOL>(0x0D4B77E862475ED3, guardZoneName, entity, x, y, z);
		} // 0x0D4B77E862475ED3 undefined b1311
		static void SET_GUARD_ZONE_VOLUME_REGISTRATION_START_(const char* name, Volume volume)
		{
			invoke<int>(0x8C598A930F471938, name, volume);
		} // 0x8C598A930F471938 undefined b1207
		static void SET_GUARD_ZONE_VOLUME_RESTRICTED_(const char* name, Volume volume)
		{
			invoke<int>(0x35815F372D43E1E5, name, volume);
		} // 0x35815F372D43E1E5 undefined b1207
		static void SET_GUARD_ZONE_VOLUME_THREAT_(const char* name, Volume volume)
		{
			invoke<int>(0xA1B0E6301E2E02A6, name, volume);
		} // 0xA1B0E6301E2E02A6 undefined b1207
		static void SET_GUARD_ZONE_VOLUME_WARNING_(const char* name, Volume volume)
		{
			invoke<int>(0xAD3E07C37A7C1ADC, name, volume);
		} // 0xAD3E07C37A7C1ADC undefined b1207
		static void SET_GUARD_ZONE_VOLUME_REGISTRATION_END_(const char* name, Volume volume)
		{
			invoke<int>(0xA8A74AA79FB67159, name, volume);
		} // 0xA8A74AA79FB67159 undefined b1207
		static void SET_GUARD_ZONE_POSITION_(const char* name, float x, float y, float z)
		{
			invoke<int>(0x7E7BF59F89FC6C6D, name, x, y, z);
		} // 0x7E7BF59F89FC6C6D undefined b1207
		static void SET_GUARD_ZONE_POSITION_2_(const char* name, float x, float y, float z)
		{
			invoke<int>(0x2F9005E2EA4E5EE4, name, x, y, z);
		} // 0x2F9005E2EA4E5EE4 undefined b1207
	}

	namespace LOCALIZATION
	{
		// Same return values as GET_CURRENT_LANGUAGE
		static int LOCALIZATION_GET_SYSTEM_LANGUAGE()
		{
			return invoke<int>(0x3C1A05F86AE6ACB5);
		} // 0x3C1A05F86AE6ACB5 undefined b1207
		// 0 = american (en-US)
		// 1 = french (fr-FR)
		// 2 = german (de-DE)
		// 3 = italian (it-IT)
		// 4 = spanish (es-ES)
		// 5 = brazilian (pt-BR)
		// 6 = polish (pl-PL)
		// 7 = russian (ru-RU)
		// 8 = korean (ko-KR)
		// 9 = chinesetrad (zh-TW)
		// 10 = japanese (ja-JP)
		// 11 = mexican (es-MX)
		// 12 = chinesesimp (zh-CN)
		static int GET_CURRENT_LANGUAGE()
		{
			return invoke<int>(0xDB917DA5C6835FCC);
		} // 0xDB917DA5C6835FCC 0x761BE00B b1207
		// Returns true if the current language is american, french, german, italian, spanish, brazilian or mexican.
		// _DOES_*
		static BOOL DOES_CURRENT_LANGUAGE_SUPPORT_CONDENSED_STYLE_()
		{
			return invoke<BOOL>(0x45D50415E4D885FF);
		} // 0x45D50415E4D885FF undefined b1207
		// 0 = DATE_FORMAT_DMY
		// 1 = DATE_FORMAT_MDY
		// 2 = DATE_FORMAT_YMD
		//
		// Old name: _LOCALIZATION_GET_SYSTEM_DATE_FORMAT
		static int LOCALIZATION_GET_SYSTEM_DATE_TYPE()
		{
			return invoke<int>(0x76E30B799EBEEA0F);
		} // 0x76E30B799EBEEA0F  b1207
	}

	namespace MAP
	{
		// Returns the Blip handle of given Entity.
		static Blip GET_BLIP_FROM_ENTITY(Entity entity)
		{
			return invoke<Blip>(0x6D2C41A8BD6D6FD0, entity);
		} // 0x6D2C41A8BD6D6FD0 0x005A2A47 b1207
		static Blip GET_MAIN_PLAYER_BLIP_ID()
		{
			return invoke<Blip>(0x5CD2889B2B381D45);
		} // 0x5CD2889B2B381D45 0xAB93F020 b1207
		static Blip BLIP_ADD_FOR_STYLE_(Hash styleHash)
		{
			return invoke<Blip>(0x3E593DF9C2962EC6, styleHash);
		} // 0x3E593DF9C2962EC6 undefined b1207
		// https://github.com/femga/rdr3_discoveries/tree/master/useful_info_from_rpfs/textures/blips
		// https://github.com/femga/rdr3_discoveries/tree/master/useful_info_from_rpfs/textures/blips_mp
		static Blip BLIP_ADD_FOR_COORDS(Hash blipHash, float x, float y, float z)
		{
			return invoke<Blip>(0x554D9D53F696D002, blipHash, x, y, z);
		} // 0x554D9D53F696D002 undefined b1207
		static Blip BLIP_ADD_FOR_ENTITY(Hash blipHash, Entity entity)
		{
			return invoke<Blip>(0x23F74C2FDA6E7C61, blipHash, entity);
		} // 0x23F74C2FDA6E7C61 undefined b1207
		static Blip BLIP_ADD_FOR_PICKUP_PLACEMENT(Hash blipHash, Pickup pickup)
		{
			return invoke<Blip>(0xA486008892065FB9, blipHash, pickup);
		} // 0xA486008892065FB9 undefined b1207
		static Blip BLIP_ADD_FOR_RADIUS(Hash blipHash, float x, float y, float z, float radius)
		{
			return invoke<Blip>(0x45F13B7E0A15C880, blipHash, x, y, z, radius);
		} // 0x45F13B7E0A15C880 undefined b1207
		static Blip BLIP_ADD_FOR_AREA_(Hash blipHash, float x, float y, float z, float scaleX, float scaleY, float scaleZ, int p7)
		{
			return invoke<Blip>(0xEC174ADBCB611ECC, blipHash, x, y, z, scaleX, scaleY, scaleZ, p7);
		} // 0xEC174ADBCB611ECC undefined b1207
		static Blip BLIP_ADD_FOR_VOLUME_(Hash blipHash, Volume volume)
		{
			return invoke<Blip>(0xA6EF0C54A3443E70, blipHash, volume);
		} // 0xA6EF0C54A3443E70 undefined b1207
		// https://github.com/femga/rdr3_discoveries/tree/master/useful_info_from_rpfs/blip_styles
		// Removes any existing modifiers and sets the style.
		static BOOL BLIP_SET_STYLE_(Blip blip, Hash styleHash)
		{
			return invoke<BOOL>(0xEDD964B7984AC291, blip, styleHash);
		} // 0xEDD964B7984AC291 undefined b1207
		static BOOL BLIP_ADD_STYLE_(Blip blip, Hash styleHash)
		{
			return invoke<BOOL>(0xBD62D98799A3DAF0, blip, styleHash);
		} // 0xBD62D98799A3DAF0 undefined b1207
		// https://alloc8or.re/rdr3/doc/enums/eBlipModifier.txt
		// https://github.com/femga/rdr3_discoveries/tree/master/useful_info_from_rpfs/blip_modifiers
		//
		// Old name: _BLIP_SET_MODIFIER
		static BOOL BLIP_ADD_MODIFIER(Blip blip, Hash modifierHash)
		{
			return invoke<BOOL>(0x662D364ABF16DE2F, blip, modifierHash);
		} // 0x662D364ABF16DE2F undefined b1207
		// If modifierHash is 0, ALL modifiers will be removed.
		static BOOL BLIP_REMOVE_MODIFIER(Blip blip, Hash modifierHash)
		{
			return invoke<BOOL>(0xB059D7BD3D78C16F, blip, modifierHash);
		} // 0xB059D7BD3D78C16F undefined b1207
		static void N0x250C75EB1728CC0D(Blip blip)
		{
			invoke<int>(0x250C75EB1728CC0D, blip);
		} // 0x250C75EB1728CC0D undefined b1207
		static void SET_BLIP_FLASH_TIMER(Blip blip, int blipType, Hash blipHash)
		{
			invoke<int>(0x02FF4CF43B7209D1, blip, blipType, blipHash);
		} // 0x02FF4CF43B7209D1 0x8D5DF611 b1207
		static BOOL SET_BLIP_FLASHES(Blip blip, int* p1, Hash* p2)
		{
			return invoke<BOOL>(0x0DF2B55F717DDB10, blip, p1, p2);
		} // 0x0DF2B55F717DDB10 0xC0047F15 b1207
		static void TRIGGER_SONAR_BLIP(Hash typeHash, float x, float y, float z)
		{
			invoke<int>(0x72DD432F3CDFC0EE, typeHash, x, y, z);
		} // 0x72DD432F3CDFC0EE 0xBF25E7B2 b1207
		static void TRIGGER_SONAR_BLIP_ON_ENTITY_(Hash typeHash, Entity entity)
		{
			invoke<int>(0x0C7A2289A5C4D7C9, typeHash, entity);
		} // 0x0C7A2289A5C4D7C9 undefined b1207
		static void ALLOW_SONAR_BLIPS(BOOL toggle)
		{
			invoke<int>(0x6E6E64788C07D2E0, toggle);
		} // 0x6E6E64788C07D2E0 0xE7E1E32B b1207
		static void SET_BLIP_COORDS(Blip blip, float posX, float posY, float posZ)
		{
			invoke<int>(0x4FF674F5E23D49CE, blip, posX, posY, posZ);
		} // 0x4FF674F5E23D49CE 0x680A34D4 b1207
		static Vector3 GET_BLIP_COORDS(Blip blip)
		{
			return invoke<Vector3>(0x201C319797BDA603, blip);
		} // 0x201C319797BDA603 0xEF6FF47B b1207
		static void SET_BLIP_SPRITE(Blip blip, Hash hash, BOOL p2)
		{
			invoke<int>(0x74F74D3207ED525C, blip, hash, p2);
		} // 0x74F74D3207ED525C 0x8DBBB0B9 b1207
		// _CLEAR*
		static Any N0x01B928CA2E198B01(Any p0)
		{
			return invoke<Any>(0x01B928CA2E198B01, p0);
		} // 0x01B928CA2E198B01 undefined b1207
		static void SET_BLIP_NAME_FROM_TEXT_FILE(Blip blip, const char* textLabel)
		{
			invoke<int>(0x0A062D6D7C0B2C2C, blip, textLabel);
		} // 0x0A062D6D7C0B2C2C 0xAC8A5461 b1207
		static void SET_BLIP_NAME_(Blip blip, const char* name)
		{
			invoke<int>(0x9CB1A1623062F402, blip, name);
		} // 0x9CB1A1623062F402 undefined b1207
		static void SET_BLIP_NAME_TO_PLAYER_NAME(Blip blip, Player player)
		{
			invoke<int>(0x093DD5A31BC2B459, blip, player);
		} // 0x093DD5A31BC2B459 0x03A0B8F9 b1207
		static void SET_BLIP_ROTATION(Blip blip, int rotation)
		{
			invoke<int>(0x6049966A94FBE706, blip, rotation);
		} // 0x6049966A94FBE706 0x6B8F44FE b1207
		static void SET_BLIP_SCALE(Blip blip, float scale)
		{
			invoke<int>(0xD38744167B2FA257, blip, scale);
		} // 0xD38744167B2FA257 0x1E6EC434 b1207
		static void REMOVE_BLIP(Blip* blip)
		{
			invoke<int>(0xF2C3C9DA47AAA54A, blip);
		} // 0xF2C3C9DA47AAA54A 0xD8C3C1CD b1207
		static BOOL DOES_BLIP_EXIST(Blip blip)
		{
			return invoke<BOOL>(0xCD82FA174080B3B1, blip);
		} // 0xCD82FA174080B3B1 0xAE92DD96 b1207
		static BOOL DOES_ENTITY_HAVE_BLIP_(Entity entity)
		{
			return invoke<BOOL>(0x9FA00E2FC134A9D0, entity);
		} // 0x9FA00E2FC134A9D0 undefined b1207
		static void SET_RADAR_ZOOM(int zoomLevel)
		{
			invoke<int>(0xCAF6489DA2C8DD9E, zoomLevel);
		} // 0xCAF6489DA2C8DD9E 0x2A50D1A6 b1207
		// It's unclear what exactly this does, but I assume it marks the blip as "no longer needed"
		static void ABANDON_BLIP_(Blip blip)
		{
			invoke<int>(0xDEEDE7C41742E011, blip);
		} // 0xDEEDE7C41742E011 undefined b1207
		static BOOL IS_BLIP_ATTACHED_TO_ANY_ENTITY_(Blip blip)
		{
			return invoke<BOOL>(0xE9F676788F8D5E1E, blip);
		} // 0xE9F676788F8D5E1E undefined b1207
		static BOOL IS_BLIP_ON_MINIMAP(Blip blip)
		{
			return invoke<BOOL>(0x46534526B9CD2D17, blip);
		} // 0x46534526B9CD2D17 0x258CBA3A b1207
		// Doesn't actually return anything.
		static Any FORCE_SONAR_BLIPS_THIS_FRAME()
		{
			return invoke<Any>(0xEE1C7BA69BB74B08);
		} // 0xEE1C7BA69BB74B08 0x3F4AFB13 b1207
		// https://alloc8or.re/rdr3/doc/enums/rage__eGpsFlags.txt
		static void SET_GPS_FLAGS(int p0, float p1)
		{
			invoke<int>(0x5DE61C90DDECFA2D, p0, p1);
		} // 0x5DE61C90DDECFA2D 0x60539BAB b1207
		// Clears the GPS flags.
		static void CLEAR_GPS_FLAGS()
		{
			invoke<int>(0x4D3771237C79FF41);
		} // 0x4D3771237C79FF41 0x056AFCE6 b1207
		static void SET_GPS_CUSTOM_ROUTE_RENDER(BOOL p0, int p1, int p2)
		{
			invoke<int>(0xF6CEF599FC470B33, p0, p1, p2);
		} // 0xF6CEF599FC470B33 0xDA0AF00E b1207
		static void CLEAR_GPS_CUSTOM_ROUTE()
		{
			invoke<int>(0x1EAA5674B4D181C5);
		} // 0x1EAA5674B4D181C5 0xCF2E3E24 b1207
		static void START_GPS_MULTI_ROUTE(Hash colorNameHash, BOOL onFoot, BOOL inVehicle)
		{
			invoke<int>(0x3D3D15AF7BCAAF83, colorNameHash, onFoot, inVehicle);
		} // 0x3D3D15AF7BCAAF83 0xC3DCBEDB b1207
		static void ADD_POINT_TO_GPS_MULTI_ROUTE(float x, float y, float z, BOOL p3)
		{
			invoke<int>(0x64C59DD6834FA942, x, y, z, p3);
		} // 0x64C59DD6834FA942 0xFE485135 b1207
		static void SET_GPS_MULTI_ROUTE_RENDER(BOOL toggle)
		{
			invoke<int>(0x4426D65E029A4DC0, toggle);
		} // 0x4426D65E029A4DC0 0xE87CBE4C b1207
		// Does the same as SET_GPS_MULTI_ROUTE_RENDER(false);
		static void CLEAR_GPS_MULTI_ROUTE()
		{
			invoke<int>(0x9E0AB9AAEE87CE28);
		} // 0x9E0AB9AAEE87CE28 0x0D9969E4 b1207
		static void START_GPS_CUSTOM_ROUTE_FROM_WAYPOINT_RECORDING_ROUTE_(const char* waypointRecording, int point, int numPoints, Hash colorNameHash, BOOL p4, BOOL p5)
		{
			invoke<int>(0x6B44F13D888F770D, waypointRecording, point, numPoints, colorNameHash, p4, p5);
		} // 0x6B44F13D888F770D undefined b1207
		static void CLEAR_GPS_PLAYER_WAYPOINT()
		{
			invoke<int>(0x08FDC6F796E350D1);
		} // 0x08FDC6F796E350D1 0x0B9C7FC2 b1207
		static void N0xD3F58E9316B7FC2A(Any p0)
		{
			invoke<int>(0xD3F58E9316B7FC2A, p0);
		} // 0xD3F58E9316B7FC2A undefined b1207
		static void SET_WAYPOINT_OFF()
		{
			invoke<int>(0xFA8C41E8020D3439);
		} // 0xFA8C41E8020D3439 0xB3496E1B b1207
		static BOOL IS_WAYPOINT_ACTIVE()
		{
			return invoke<BOOL>(0x202B1BBFC6AB5EE4);
		} // 0x202B1BBFC6AB5EE4 0x5E4DF47B b1207
		static Vector3 GET_WAYPOINT_COORDS_()
		{
			return invoke<Vector3>(0x29B30D07C3F7873B);
		} // 0x29B30D07C3F7873B undefined b1207
		static BOOL N0xF08E42BFA46BDFF8(Any p0, Any p1)
		{
			return invoke<BOOL>(0xF08E42BFA46BDFF8, p0, p1);
		} // 0xF08E42BFA46BDFF8 undefined b1207
		static void HIDE_ACTIVE_POINTS_OF_INTEREST_()
		{
			invoke<int>(0xA1B4052C2A3DCC1E);
		} // 0xA1B4052C2A3DCC1E undefined b1207
		static void SHOW_ACTIVE_POINTS_OF_INTEREST_()
		{
			invoke<int>(0x3FBB838AEA30C1D8);
		} // 0x3FBB838AEA30C1D8 undefined b1207
		static Any N0xF47A1EB2A538A3A3()
		{
			return invoke<Any>(0xF47A1EB2A538A3A3);
		} // 0xF47A1EB2A538A3A3 undefined b1207
		static BOOL FIND_CLOSEST_GPS_POSITION_(float x, float y, float z, Vector3* outPosition)
		{
			return invoke<BOOL>(0x3FDA2B79AEEE351C, x, y, z, outPosition);
		} // 0x3FDA2B79AEEE351C undefined b1207
		// If Minimap / Radar should be displayed.
		static void DISPLAY_RADAR(BOOL toggle)
		{
			invoke<int>(0x1B3DA717B9AFF828, toggle);
		} // 0x1B3DA717B9AFF828 0x52816BD4 b1207
		// https://github.com/femga/rdr3_discoveries/blob/master/graphics/minimap/radar/radar_configs.lua
		// configHash: -1943724816, 347777538, -117986897, -789269373, -547506804, -1986542417, 2080113112
		// p1: usually 898171178 or 0 in R* scripts (doesn't seems to have any effect)
		static void SET_RADAR_CONFIG_TYPE_(Hash configHash, Hash p1)
		{
			invoke<int>(0x9C113883487FD53C, configHash, p1);
		} // 0x9C113883487FD53C undefined b1207
		// list of minimap props: https://github.com/femga/rdr3_discoveries/tree/master/graphics/minimap/minimapObjects
		static void ADD_PROP_TO_MINIMAP_(Hash minimapProp, float x, float y, float rotation, int p4)
		{
			invoke<int>(0x1392105DA88BBFFB, minimapProp, x, y, rotation, p4);
		} // 0x1392105DA88BBFFB undefined b1207
		static void REMOVE_PROP_FROM_MINIMAP_(Hash minimapProp)
		{
			invoke<int>(0xE057FEA9A22EB3EE, minimapProp);
		} // 0xE057FEA9A22EB3EE undefined b1207
		static void SET_RADAR_AS_EXTERIOR_THIS_FRAME()
		{
			invoke<int>(0xA8EBBAE986FB5457);
		} // 0xA8EBBAE986FB5457 0x39ABB10E b1207
		// Reveals the entire minimap (FOW = Fog of War)
		static void SET_MINIMAP_HIDE_FOW(BOOL toggle)
		{
			invoke<int>(0x4B8F743A4A6D2FF8, toggle);
		} // 0x4B8F743A4A6D2FF8 0xD8D77733 b1207
		// Used for GUARMA MODE; Enabled: toggle = false, 0; Disabled: toggle = true, 0
		// Hash p1 seems to be unused, always 0
		static void SET_FOW_UPDATE_PLAYER_OVERRIDE_(BOOL toggle, Hash p1)
		{
			invoke<int>(0x63E7279D04160477, toggle, p1);
		} // 0x63E7279D04160477 undefined b1207
		static void SET_MINIMAP_FOW_OVERRIDE_REVEAL_SCALE_(float scale, Hash p1)
		{
			invoke<int>(0xE5A7F70B7C0F3271, scale, p1);
		} // 0xE5A7F70B7C0F3271 undefined b1207
		static void SET_MINIMAP_FOW_SHOULD_UPDATE_(BOOL toggle, Hash p1)
		{
			invoke<int>(0x632AA10BF7EA53D3, toggle, p1);
		} // 0x632AA10BF7EA53D3 undefined b1207
		// Up to eight coordinates may be revealed per frame
		static void SET_MINIMAP_FOW_REVEAL_COORDINATE(float x, float y, float z, Hash p3)
		{
			invoke<int>(0x73348402566ECB6E, x, y, z, p3);
		} // 0x73348402566ECB6E 0xE010F081 b1207
		static void SET_MINIMAP_FOW_REVEAL_VOLUME(Volume volume, Hash p1)
		{
			invoke<int>(0x63CBBD6CA6F321F9, volume, p1);
		} // 0x63CBBD6CA6F321F9 undefined b1207
		static void RESET_MINIMAP_FOW(Hash hash)
		{
			invoke<int>(0xEB3CB3386C775D72, hash);
		} // 0xEB3CB3386C775D72 undefined b1207
		static void REVEAL_MINIMAP_FOW_(Hash hash)
		{
			invoke<int>(0xF8096DF9B87246E3, hash);
		} // 0xF8096DF9B87246E3 undefined b1207
		// hash can be the hash of "guarma" or "world".
		static void SET_MINIMAP_ZONE_(Hash zone)
		{
			invoke<int>(0xA657EC9DBC6CC900, zone);
		} // 0xA657EC9DBC6CC900 undefined b1207
		// Locks the minimap to the specified angle in integer degrees.
		//
		// angle: The angle in whole degrees. If less than 0 or greater than 360, unlocks the angle.
		static void LOCK_MINIMAP_ANGLE(int angle)
		{
			invoke<int>(0x0BFD145EF819FB3A, angle);
		} // 0x0BFD145EF819FB3A 0xDEC733E4 b1207
		static void UNLOCK_MINIMAP_ANGLE()
		{
			invoke<int>(0x5373DE8E179BC2A0);
		} // 0x5373DE8E179BC2A0 0x742043F9 b1207
		// regionHash: https://github.com/femga/rdr3_discoveries/tree/master/graphics/minimap/wanted_regions
		static void MAP_ENABLE_REGION_BLIP_(Hash regionHash, Hash styleHash)
		{
			invoke<int>(0x563FCB6620523917, regionHash, styleHash);
		} // 0x563FCB6620523917 undefined b1207
		static void MAP_DISABLE_REGION_BLIP_(Hash regionHash)
		{
			invoke<int>(0x6786D7AFAC3162B3, regionHash);
		} // 0x6786D7AFAC3162B3 undefined b1207
		static BOOL MAP_IS_REGION_HIGHLIGHTED_WITH_STYLE_(Hash regionHash, Hash styleHash)
		{
			return invoke<BOOL>(0xE38450DBCBC70E3D, regionHash, styleHash);
		} // 0xE38450DBCBC70E3D undefined b1207
		static void MAP_DISCOVER_REGION_(Hash discoveryHash)
		{
			invoke<int>(0xD8C7162AB2E2AF45, discoveryHash);
		} // 0xD8C7162AB2E2AF45 undefined b1207
		static void MAP_DISCOVERY_SET_ENABLED_(Hash discoveryHash)
		{
			invoke<int>(0xDA98246C7A3C2189, discoveryHash);
		} // 0xDA98246C7A3C2189 undefined b1207
		static BOOL MAP_IS_DISCOVERY_ACTIVE_(Hash discoveryHash)
		{
			return invoke<BOOL>(0x3F81EA4275D39D6F, discoveryHash);
		} // 0x3F81EA4275D39D6F undefined b1207
		static void SET_PAUSEMAP_COORDS_WITH_RADIUS_(float x, float y, float z, float radius)
		{
			invoke<int>(0xE0884C184728C75B, x, y, z, radius);
		} // 0xE0884C184728C75B undefined b1207
		static void N0x7C9F4CDF402CA82A()
		{
			invoke<int>(0x7C9F4CDF402CA82A);
		} // 0x7C9F4CDF402CA82A undefined b1311
		// _CLEAR*
		static void N0x44813684F72B563C(Entity entity, Any p1)
		{
			invoke<int>(0x44813684F72B563C, entity, p1);
		} // 0x44813684F72B563C undefined b1207
		static void N0x97F6F158CC5B5CA2(Entity entity, Any p1)
		{
			invoke<int>(0x97F6F158CC5B5CA2, entity, p1);
		} // 0x97F6F158CC5B5CA2 undefined b1207
		static void N0xBB68D4D3CA3DE402(Any p0, Any p1)
		{
			invoke<int>(0xBB68D4D3CA3DE402, p0, p1);
		} // 0xBB68D4D3CA3DE402 undefined b1207
		static Any N0x3CB8859F04763C78(Any p0, Any p1)
		{
			return invoke<Any>(0x3CB8859F04763C78, p0, p1);
		} // 0x3CB8859F04763C78 undefined b1207
		// FM_CLIENT_SETUP_EAGLE_EYE - setting up eagle eye for entity
		static void N0x7563CBCA99253D1A(Entity entity, Hash blip)
		{
			invoke<int>(0x7563CBCA99253D1A, entity, blip);
		} // 0x7563CBCA99253D1A undefined b1207
		static void N0x1726963E6049DB53(Any p0)
		{
			invoke<int>(0x1726963E6049DB53, p0);
		} // 0x1726963E6049DB53 undefined b1207
	}

	namespace MINIGAME
	{
		static void N0x6480723D3BE535B6(Any p0)
		{
			invoke<int>(0x6480723D3BE535B6, p0);
		} // 0x6480723D3BE535B6 undefined b1207
		static void N0x3DF7EE3A76185108()
		{
			invoke<int>(0x3DF7EE3A76185108);
		} // 0x3DF7EE3A76185108 undefined b1207
		static Any N0xE1F365C4C8F259D8(Any p0, Any p1, Any p2)
		{
			return invoke<Any>(0xE1F365C4C8F259D8, p0, p1, p2);
		} // 0xE1F365C4C8F259D8 undefined b1207
		static Any N0xE53A308AC35877A8()
		{
			return invoke<Any>(0xE53A308AC35877A8);
		} // 0xE53A308AC35877A8 undefined b1207
		static Any N0x580F34C726387226(Any p0, Any p1)
		{
			return invoke<Any>(0x580F34C726387226, p0, p1);
		} // 0x580F34C726387226 undefined b1207
		static void N0x0876326238914A3F()
		{
			invoke<int>(0x0876326238914A3F);
		} // 0x0876326238914A3F undefined b1207
		static Any N0x3FFE60DD8A936551(Any p0, Any p1)
		{
			return invoke<Any>(0x3FFE60DD8A936551, p0, p1);
		} // 0x3FFE60DD8A936551 undefined b1207
		static void N0x18A0D48DF9211C07()
		{
			invoke<int>(0x18A0D48DF9211C07);
		} // 0x18A0D48DF9211C07 undefined b1207
		static Any MINIGAME_IS_CONNECTED_TO_SERVER_(Any p0)
		{
			return invoke<Any>(0x2A0C4736AC5AF0CE, p0);
		} // 0x2A0C4736AC5AF0CE undefined b1207
		static Any N0x39654E1F68B78287()
		{
			return invoke<Any>(0x39654E1F68B78287);
		} // 0x39654E1F68B78287 undefined b1207
		static Any N0x3EECAADAB0D9FE29()
		{
			return invoke<Any>(0x3EECAADAB0D9FE29);
		} // 0x3EECAADAB0D9FE29 undefined b1207
		static Any N0xD39D32EB3B52DD83(Any p0)
		{
			return invoke<Any>(0xD39D32EB3B52DD83, p0);
		} // 0xD39D32EB3B52DD83 undefined b1207
		static BOOL MINIGAME_IS_SEAT_OCCUPIED_(Any p0)
		{
			return invoke<BOOL>(0x8593A8CB0ED2C3B4, p0);
		} // 0x8593A8CB0ED2C3B4 undefined b1207
		static BOOL MINIGAME_REQUEST_SEAT_AT_TABLE_(Any* data)
		{
			return invoke<BOOL>(0xF6AC6085D8D6C004, data);
		} // 0xF6AC6085D8D6C004 undefined b1207
		static Any MINIGAME_LEAVE_TABLE_(Any p0)
		{
			return invoke<Any>(0xF5446E47941E654C, p0);
		} // 0xF5446E47941E654C undefined b1207
		static Any MINIGAME_GET_NEXT_EVENT_TYPE_()
		{
			return invoke<Any>(0x578907F59BA01B6C);
		} // 0x578907F59BA01B6C undefined b1207
		static Any MINIGAME_GET_NEXT_EVENT_(Any p0, Any p1)
		{
			return invoke<Any>(0xDF728C5AE137FC13, p0, p1);
		} // 0xDF728C5AE137FC13 undefined b1207
		static void MINIGAME_POP_NEXT_EVENT_()
		{
			invoke<int>(0x833E03BAEBADC4B0);
		} // 0x833E03BAEBADC4B0 undefined b1207
		static Any N0x3B31732FADE5BAF3()
		{
			return invoke<Any>(0x3B31732FADE5BAF3);
		} // 0x3B31732FADE5BAF3 undefined b1207
		static Any N0x578907F59BA01B6D(Any p0)
		{
			return invoke<Any>(0x578907F59BA01B6D, p0);
		} // 0x578907F59BA01B6D undefined b1207
		static Any N0xDF728C5AE137FC14(Any p0, Any p1, Any p2)
		{
			return invoke<Any>(0xDF728C5AE137FC14, p0, p1, p2);
		} // 0xDF728C5AE137FC14 undefined b1207
		static Any MINIGAME_IS_REQUEST_PENDING_(Any p0)
		{
			return invoke<Any>(0x9105A4A2556FA937, p0);
		} // 0x9105A4A2556FA937 undefined b1207
		static Any N0x644439B5387EE57E(Any p0, Any p1)
		{
			return invoke<Any>(0x644439B5387EE57E, p0, p1);
		} // 0x644439B5387EE57E undefined b1207
		static Any N0x15E90B6A993017AA()
		{
			return invoke<Any>(0x15E90B6A993017AA);
		} // 0x15E90B6A993017AA undefined b1207
		static Any N0x10342CC82E8356E9(Any p0, Any p1)
		{
			return invoke<Any>(0x10342CC82E8356E9, p0, p1);
		} // 0x10342CC82E8356E9 undefined b1207
		static Any N0x32A7C216344D623B(Any p0, Any p1, Any p2)
		{
			return invoke<Any>(0x32A7C216344D623B, p0, p1, p2);
		} // 0x32A7C216344D623B undefined b1207
		static Any N0xEC819D612038EF4B(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7)
		{
			return invoke<Any>(0xEC819D612038EF4B, p0, p1, p2, p3, p4, p5, p6, p7);
		} // 0xEC819D612038EF4B undefined b1207
		static Any POKER_GET_GAME_SETTINGS_FOR_ID_(Any p0)
		{
			return invoke<Any>(0x2D20E12E1990D584, p0);
		} // 0x2D20E12E1990D584 undefined b1207
		static Any POKER_BUY_IN_(Any p0, Any p1)
		{
			return invoke<Any>(0xB4D610EA5A1FDE74, p0, p1);
		} // 0xB4D610EA5A1FDE74 undefined b1207
		static Any POKER_CALL_(Any p0, Any p1)
		{
			return invoke<Any>(0x8DED681B161EBD78, p0, p1);
		} // 0x8DED681B161EBD78 undefined b1207
		static Any POKER_CHECK_(Any p0, Any p1)
		{
			return invoke<Any>(0x49A045628D9B1B86, p0, p1);
		} // 0x49A045628D9B1B86 undefined b1207
		static Any POKER_FOLD_(Any p0)
		{
			return invoke<Any>(0x3DFAB7D9BB45B5BE, p0);
		} // 0x3DFAB7D9BB45B5BE undefined b1207
		static Any POKER_RAISE_(Any p0, Any p1)
		{
			return invoke<Any>(0xECCF45A79A17BB96, p0, p1);
		} // 0xECCF45A79A17BB96 undefined b1207
		static Any POKER_REVEAL_(Any p0)
		{
			return invoke<Any>(0x2F2131DB0A8B02DC, p0);
		} // 0x2F2131DB0A8B02DC undefined b1207
		static void N0x58521E6DCDE97D74(Any p0, Any p1, Any p2)
		{
			invoke<int>(0x58521E6DCDE97D74, p0, p1, p2);
		} // 0x58521E6DCDE97D74 undefined b1207
		static void N0xF6DE98516FD3AC9B()
		{
			invoke<int>(0xF6DE98516FD3AC9B);
		} // 0xF6DE98516FD3AC9B undefined b1207
		static Any N0x3F4FD4BED07AB8C4(Any p0)
		{
			return invoke<Any>(0x3F4FD4BED07AB8C4, p0);
		} // 0x3F4FD4BED07AB8C4 undefined b1207
		static Any N0x3AE451860F03CA8A(Any p0, Any p1)
		{
			return invoke<Any>(0x3AE451860F03CA8A, p0, p1);
		} // 0x3AE451860F03CA8A undefined b1207
		static Any N0x012027C28F421F46(Any p0, Any p1)
		{
			return invoke<Any>(0x012027C28F421F46, p0, p1);
		} // 0x012027C28F421F46 undefined b1207
		static void N0x455ECCA0715C507F()
		{
			invoke<int>(0x455ECCA0715C507F);
		} // 0x455ECCA0715C507F undefined b1207
		// Hardcoded to return zero/false.
		static Any DOMINOES_BUY_IN_(Any p0)
		{
			return invoke<Any>(0x399E6CD12FC8CA89, p0);
		} // 0x399E6CD12FC8CA89 undefined b1207
		// Hardcoded to return zero/false.
		static Any DOMINOES_PLACE_DOMINO_(Any p0, Any p1)
		{
			return invoke<Any>(0xB79A29B33BF29BA5, p0, p1);
		} // 0xB79A29B33BF29BA5 undefined b1207
		// Hardcoded to return zero/false.
		static Any DOMINOES_REQUEST_VALID_PLACEMENTS_(Any p0)
		{
			return invoke<Any>(0xE26AEE7E67D9E21D, p0);
		} // 0xE26AEE7E67D9E21D undefined b1207
		static Any N0xA2DB3C6270C122E3(Any p0, Any p1)
		{
			return invoke<Any>(0xA2DB3C6270C122E3, p0, p1);
		} // 0xA2DB3C6270C122E3 undefined b1207
		static Any N0x398066F893149856(Any p0, Any p1, Any p2)
		{
			return invoke<Any>(0x398066F893149856, p0, p1, p2);
		} // 0x398066F893149856 undefined b1207
		static Any N0xBEA7D3CB47E1479C()
		{
			return invoke<Any>(0xBEA7D3CB47E1479C);
		} // 0xBEA7D3CB47E1479C undefined b1207
		static Any N0x910B088E51A511AC()
		{
			return invoke<Any>(0x910B088E51A511AC);
		} // 0x910B088E51A511AC undefined b1207
		static Any N0x9DD95B405AB4983E(Any p0, Any p1)
		{
			return invoke<Any>(0x9DD95B405AB4983E, p0, p1);
		} // 0x9DD95B405AB4983E undefined b1207
	}

	namespace MISC
	{
		static int GET_NUMBER_OF_FREE_STACKS_OF_THIS_SIZE(int stackSize)
		{
			return invoke<int>(0x40DC2907A9697EF7, stackSize);
		} // 0x40DC2907A9697EF7 0x11A178B8 b1207
		static int GET_NUMBER_OF_INSTRUCTIONS_()
		{
			return invoke<int>(0x72904D3D62AF5839);
		} // 0x72904D3D62AF5839 undefined b1207
		static int GET_MAX_NUM_INSTRUCTIONS_()
		{
			return invoke<int>(0xC43CD2668B204419);
		} // 0xC43CD2668B204419 undefined b1207
		// magdemo = magazine demo, i. e. for magazines such as IGN, pre play phases to prepare articles etc. - example 2012 builds for V
		// Hardcoded to return false.
		static BOOL IS_MAG_DEMO_1_ACTIVE()
		{
			return invoke<BOOL>(0x5FC9357C26DAEFCE);
		} // 0x5FC9357C26DAEFCE undefined b1207
		static void SET_RANDOM_SEED(int seed)
		{
			invoke<int>(0x5CD7A49104AFCB6B, seed);
		} // 0x5CD7A49104AFCB6B 0xDB3FEB5C b1207
		// Maximum value is 1.0f
		// At a value of 0.0f the game will still run at a minimum time scale.
		static void SET_TIME_SCALE(float timeScale)
		{
			invoke<int>(0x9682AF6050854856, timeScale);
		} // 0x9682AF6050854856 0xA7F84694 b1207
		// If true, the player can't save the game.
		static void SET_MISSION_FLAG(BOOL toggle)
		{
			invoke<int>(0x36694B456BE80D0A, toggle);
		} // 0x36694B456BE80D0A 0x57592D52 b1207
		static BOOL GET_MISSION_FLAG()
		{
			return invoke<BOOL>(0xB15CD1CF58771DE1);
		} // 0xB15CD1CF58771DE1 0x95115F97 b1207
		static void N0x5801BE2DF2AF07EC(Any p0)
		{
			invoke<int>(0x5801BE2DF2AF07EC, p0);
		} // 0x5801BE2DF2AF07EC undefined b1207
		// If the parameter is true, sets the random event flag to true, if the parameter is false, the function does nothing at all.
		// Does nothing if the mission flag is set.
		static void SET_RANDOM_EVENT_FLAG(BOOL toggle)
		{
			invoke<int>(0xB1ADCCC4150C6473, toggle);
		} // 0xB1ADCCC4150C6473 0xA77F31E8 b1207
		static BOOL GET_RANDOM_EVENT_FLAG()
		{
			return invoke<BOOL>(0x924D54E5698AE3E0);
		} // 0x924D54E5698AE3E0 0x794CC92C b1207
		static void N0x9BF2C0C568C61641(Any p0)
		{
			invoke<int>(0x9BF2C0C568C61641, p0);
		} // 0x9BF2C0C568C61641 undefined b1207
		// nullsub, doesn't do anything
		static void ACTIVITY_FEED_CREATE(const char* p0, const char* p1)
		{
			invoke<int>(0xCC7FC854B956A128, p0, p1);
		} // 0xCC7FC854B956A128  b1207
		// nullsub, doesn't do anything
		static void ACTIVITY_FEED_ADD_SUBSTRING_TO_CAPTION(const char* p0)
		{
			invoke<int>(0x9935F76407C32539, p0);
		} // 0x9935F76407C32539  b1207
		// nullsub, doesn't do anything
		static void N0xFF252E2BAFB7330F(Any p0)
		{
			invoke<int>(0xFF252E2BAFB7330F, p0);
		} // 0xFF252E2BAFB7330F undefined b1207
		// nullsub, doesn't do anything
		static void ACTIVITY_FEED_ACTION_START_WITH_COMMAND_LINE(const char* p0, const char* p1)
		{
			invoke<int>(0x91D657230BC208D2, p0, p1);
		} // 0x91D657230BC208D2  b1207
		// nullsub, doesn't do anything
		static void ACTIVITY_FEED_ACTION_START_WITH_COMMAND_LINE_ADD(const char* p0)
		{
			invoke<int>(0x1694A053DFB61A34, p0);
		} // 0x1694A053DFB61A34  b1207
		// Hardcoded to return one/true.
		static Any N0xAF530E56505D1BD6(Any p0)
		{
			return invoke<Any>(0xAF530E56505D1BD6, p0);
		} // 0xAF530E56505D1BD6 undefined b1207
		// nullsub, doesn't do anything
		static void ACTIVITY_FEED_POST()
		{
			invoke<int>(0xB16FC7B364D86585);
		} // 0xB16FC7B364D86585  b1207
		static const char* N0xF81C53561D15F330()
		{
			return invoke<const char*>(0xF81C53561D15F330);
		} // 0xF81C53561D15F330 undefined b1207
		// _SET_MISSION_NAME_*(FOR_ACTIVITY?/MINIGAME?)
		static void N0x1096603B519C905F(const char* name)
		{
			invoke<int>(0x1096603B519C905F, name);
		} // 0x1096603B519C905F undefined b1207
		static void N0xCC3EDC5614B03F61(int p0)
		{
			invoke<int>(0xCC3EDC5614B03F61, p0);
		} // 0xCC3EDC5614B03F61 undefined b1207
		static void INFORM_CODE_OF_CONTENT_ID_OF_CURRENT_UGC_MISSION(const char* p0)
		{
			invoke<int>(0x708DF841B8F27AA2, p0);
		} // 0x708DF841B8F27AA2 0xE77199F7 b1207
		static void N0xDA4D8EB04E8E2928(Any p0)
		{
			invoke<int>(0xDA4D8EB04E8E2928, p0);
		} // 0xDA4D8EB04E8E2928 undefined b1207
		static void N0xB08C4FA25BC29DB9(Any p0)
		{
			invoke<int>(0xB08C4FA25BC29DB9, p0);
		} // 0xB08C4FA25BC29DB9 undefined b1207
		static Hash GET_PREV_WEATHER_TYPE_HASH_NAME_()
		{
			return invoke<Hash>(0x4BEB42AEBCA732E9);
		} // 0x4BEB42AEBCA732E9 undefined b1207
		static Hash GET_NEXT_WEATHER_TYPE_HASH_NAME_()
		{
			return invoke<Hash>(0x51021D36F62AAA83);
		} // 0x51021D36F62AAA83 undefined b1207
		static void N0x0730E518486DEEC3(Any p0)
		{
			invoke<int>(0x0730E518486DEEC3, p0);
		} // 0x0730E518486DEEC3 undefined b1207
		// https://github.com/femga/rdr3_discoveries/blob/master/weather/weather_types.lua
		static void SET_WEATHER_TYPE(Hash weatherType, BOOL p1, BOOL p2, BOOL transition, float transitionTime, BOOL p5)
		{
			invoke<int>(0x59174F1AFE095B5A, weatherType, p1, p2, transition, transitionTime, p5);
		} // 0x59174F1AFE095B5A undefined b1207
		static void SET_WEATHER_TYPE_2_(Hash weatherType, int p1, int p2, int p3, BOOL p4)
		{
			invoke<int>(0x2C6A07AF9AEDABD8, weatherType, p1, p2, p3, p4);
		} // 0x2C6A07AF9AEDABD8 undefined b1207
		static int GET_RANDOM_WEATHER_TYPE_INDEX_()
		{
			return invoke<int>(0x7F4CE164D9A11DFE);
		} // 0x7F4CE164D9A11DFE undefined b1207
		static Hash GET_RANDOM_WEATHER_TYPE_()
		{
			return invoke<Hash>(0x1359C181BC625503);
		} // 0x1359C181BC625503 undefined b1207
		static void SET_RANDOM_WEATHER_TYPE(BOOL p0, BOOL p1)
		{
			invoke<int>(0x6E5A7FBEECAB3C72, p0, p1);
		} // 0x6E5A7FBEECAB3C72 0xE7AA1BC9 b1207
		static void CLEAR_WEATHER_TYPE_PERSIST()
		{
			invoke<int>(0xD85DFE5C131E4AE9);
		} // 0xD85DFE5C131E4AE9 0x6AB757D8 b1207
		static void CLEAR_WEATHER_TYPE_PERSIST_OVERTIME_(int milliseconds)
		{
			invoke<int>(0xCE7690C0A0D1C36D, milliseconds);
		} // 0xCE7690C0A0D1C36D undefined b1207
		// Params: percentWeather2: 0f - 0.75f in R* Scripts
		//
		// Old name: _GET_WEATHER_TYPE_TRANSITION
		static void GET_CURR_WEATHER_STATE(Hash* weatherType1, Hash* weatherType2, float* percentWeather2)
		{
			invoke<int>(0x0AC679B2342F14F2, weatherType1, weatherType2, percentWeather2);
		} // 0x0AC679B2342F14F2 0x9A5C1D56 b1207
		// Params: BOOL p3 is always true
		//
		// Old name: _SET_WEATHER_TYPE_TRANSITION
		static void SET_CURR_WEATHER_STATE(Hash weatherType1, Hash weatherType2, float percentWeather2, BOOL enabled)
		{
			invoke<int>(0xFA3E3CA8A1DE6D5D, weatherType1, weatherType2, percentWeather2, enabled);
		} // 0xFA3E3CA8A1DE6D5D 0x5CA74040 b1207
		static void SET_WEATHER_TYPE_FROZEN_(BOOL toggle)
		{
			invoke<int>(0xD74ACDF7DB8114AF, toggle);
		} // 0xD74ACDF7DB8114AF undefined b1207
		// Returns the weather type that has been set by a script
		static void GET_FORCED_WEATHER_(Hash* weather, Hash* p1)
		{
			invoke<int>(0xDD560ABEF5D3784C, weather, p1);
		} // 0xDD560ABEF5D3784C undefined b1207
		static void N0x2916B30DC6C41179(Hash weatherType)
		{
			invoke<int>(0x2916B30DC6C41179, weatherType);
		} // 0x2916B30DC6C41179 undefined b1207
		static void N0xD3F943B88F55376A(Hash weatherType)
		{
			invoke<int>(0xD3F943B88F55376A, weatherType);
		} // 0xD3F943B88F55376A undefined b1207
		static void N0x243CEDE8F916B994()
		{
			invoke<int>(0x243CEDE8F916B994);
		} // 0x243CEDE8F916B994 undefined b1207
		static void SET_OVERRIDE_WEATHER_(Hash weatherType)
		{
			invoke<int>(0xBE83CAE8ED77A94F, weatherType);
		} // 0xBE83CAE8ED77A94F undefined b1207
		static void CLEAR_OVERRIDE_WEATHER()
		{
			invoke<int>(0x80A398F16FFE3CC3);
		} // 0x80A398F16FFE3CC3 0x7740EA4E b1207
		// https://github.com/femga/rdr3_discoveries/blob/master/weather/weather_variations.lua
		static void SET_WEATHER_VARIATION_(const char* weatherType, const char* variation)
		{
			invoke<int>(0x3373779BAF7CAF48, weatherType, variation);
		} // 0x3373779BAF7CAF48 undefined b1207
		static void CLEAR_WEATHER_VARIATION_(const char* weatherType, BOOL p1)
		{
			invoke<int>(0x0E71C80FA4EC8147, weatherType, p1);
		} // 0x0E71C80FA4EC8147 undefined b1207
		// Only used in smuggler2 script
		static void WATER_OVERRIDE_SET_SHOREWAVEAMPLITUDE(float amplitude)
		{
			invoke<int>(0x55123D5A7D9D3C42, amplitude);
		} // 0x55123D5A7D9D3C42 0x625181DC b1207
		// Only used in smuggler2 script
		static void WATER_OVERRIDE_SET_OCEANWAVEMAXAMPLITUDE(float maxAmplitude)
		{
			invoke<int>(0xF06C5B66DE20B2B8, maxAmplitude);
		} // 0xF06C5B66DE20B2B8 0x0DE40C28 b1207
		static float GET_TEMPERATURE_AT_COORDS_(float x, float y, float z)
		{
			return invoke<float>(0xB98B78C3768AF6E0, x, y, z);
		} // 0xB98B78C3768AF6E0 undefined b1207
		static void SET_WIND_SPEED(float speed)
		{
			invoke<int>(0xD00C2D82DC04A99F, speed);
		} // 0xD00C2D82DC04A99F 0x45705F94 b1207
		static float GET_WIND_SPEED()
		{
			return invoke<float>(0xFFB7E74E041150A4);
		} // 0xFFB7E74E041150A4 0x098F0F3C b1207
		static void SET_WIND_DIRECTION(float direction)
		{
			invoke<int>(0xB56C4F5F57A45600, direction);
		} // 0xB56C4F5F57A45600 0x381AEEE9 b1207
		static Vector3 GET_WIND_DIRECTION()
		{
			return invoke<Vector3>(0xF703E82F3FE14A5F);
		} // 0xF703E82F3FE14A5F 0x89499A0D b1207
		// Old name: _SET_RAIN_LEVEL
		static void SET_RAIN(float intensity)
		{
			invoke<int>(0x193DFC0526830FD6, intensity);
		} // 0x193DFC0526830FD6  b1207
		static float GET_RAIN_LEVEL()
		{
			return invoke<float>(0x931B5F4CC130224B);
		} // 0x931B5F4CC130224B 0xC9F67F28 b1207
		static void N0x745808BB01CEC6B9(float p0)
		{
			invoke<int>(0x745808BB01CEC6B9, p0);
		} // 0x745808BB01CEC6B9 undefined b1207
		static void SET_SNOW_LEVEL_(float level)
		{
			invoke<int>(0xF6BEE7E80EC5CA40, level);
		} // 0xF6BEE7E80EC5CA40 undefined b1207
		static float GET_SNOW_LEVEL()
		{
			return invoke<float>(0x1E5D727041BE1709);
		} // 0x1E5D727041BE1709 0x1B09184F b1207
		// creates single lightning+thunder at random position
		static void FORCE_LIGHTNING_FLASH()
		{
			invoke<int>(0x369DB5B2510FA080);
		} // 0x369DB5B2510FA080 0xDF38165E b1207
		// p3 is always -1.0f in the scripts
		static void FORCE_LIGHTNING_FLASH_AT_COORDS_(float x, float y, float z, float p3)
		{
			invoke<int>(0x67943537D179597C, x, y, z, p3);
		} // 0x67943537D179597C undefined b1207
		// nullsub, doesn't do anything
		static void N0xA9342743B634A462(Any p0)
		{
			invoke<int>(0xA9342743B634A462, p0);
		} // 0xA9342743B634A462 undefined b1207
		static int GET_GAME_TIMER()
		{
			return invoke<int>(0x4F67E8ECA7D3F667);
		} // 0x4F67E8ECA7D3F667 0xA4EA0691 b1207
		// Returns rage::fwTimer::sm_nonScaledClippedTime
		static int GET_GAME_TIMER_NON_SCALED_CLIPPED_()
		{
			return invoke<int>(0x483B8C542103AD72);
		} // 0x483B8C542103AD72 undefined b1207
		static int GET_SYSTEM_TIME()
		{
			return invoke<int>(0xBE7F225417E35A7C);
		} // 0xBE7F225417E35A7C undefined b1207
		static int GET_NUMBER_OF_MICROSECONDS_SINCE_LAST_CALL()
		{
			return invoke<int>(0xB0CE5E5ED8BB3581);
		} // 0xB0CE5E5ED8BB3581 undefined b1207
		static int GET_SCRIPT_TIME_WITHIN_FRAME_IN_MICROSECONDS()
		{
			return invoke<int>(0x63219768C586667C);
		} // 0x63219768C586667C undefined b1207
		static void RESET_SCRIPT_TIME_WITHIN_FRAME()
		{
			invoke<int>(0x1411A7CBC3A6EB7B);
		} // 0x1411A7CBC3A6EB7B undefined b1207
		static float GET_FRAME_TIME()
		{
			return invoke<float>(0x5E72022914CE3C38);
		} // 0x5E72022914CE3C38 0x96374262 b1207
		// Old name: _GET_BENCHMARK_TIME
		static float GET_SYSTEM_TIME_STEP()
		{
			return invoke<float>(0x3F3172FEAE3AFE1C);
		} // 0x3F3172FEAE3AFE1C  b1207
		static int GET_FRAME_COUNT()
		{
			return invoke<int>(0x77DFA958FCF100C1);
		} // 0x77DFA958FCF100C1 0xB477A015 b1207
		static void N0x6BED40493A1AFDB8(Any* p0, float p1)
		{
			invoke<int>(0x6BED40493A1AFDB8, p0, p1);
		} // 0x6BED40493A1AFDB8 undefined b1207
		// Reads the passed value as floating point value and returns it.
		// Example: _READ_INT_AS_FLOAT(0x3F800000) returns 1.0f because 0x3F800000 is the hexadecimal representation of 1.0f.
		static float READ_INT_AS_FLOAT_(int value)
		{
			return invoke<float>(0xD2C9126410DFA1B2, value);
		} // 0xD2C9126410DFA1B2 undefined b1207
		static float GET_RANDOM_FLOAT_IN_RANGE(float startRange, float endRange)
		{
			return invoke<float>(0xE29F927A961F8AAA, startRange, endRange);
		} // 0xE29F927A961F8AAA 0x0562C4D0 b1207
		static int GET_RANDOM_INT_IN_RANGE(int startRange, int endRange)
		{
			return invoke<int>(0xD53343AA4FB7DD28, startRange, endRange);
		} // 0xD53343AA4FB7DD28 0x4051115B b1207
		static BOOL GET_GROUND_Z_FOR_3D_COORD(float x, float y, float z, float* groundZ, BOOL p4)
		{
			return invoke<BOOL>(0x24FA4267BB8D2431, x, y, z, groundZ, p4);
		} // 0x24FA4267BB8D2431 0xA1BFD5E0 b1207
		static BOOL GET_GROUND_Z_AND_NORMAL_FOR_3D_COORD(float x, float y, float z, float* groundZ, Vector3* normal)
		{
			return invoke<BOOL>(0x2A29CA9A6319E6AB, x, y, z, groundZ, normal);
		} // 0x2A29CA9A6319E6AB 0x64D91CED b1207
		static Any N0xBBE5B63EFFB08E68(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6)
		{
			return invoke<Any>(0xBBE5B63EFFB08E68, p0, p1, p2, p3, p4, p5, p6);
		} // 0xBBE5B63EFFB08E68 undefined b1207
		static float ASIN(float p0)
		{
			return invoke<float>(0x6E3C15D296C15583, p0);
		} // 0x6E3C15D296C15583 0x998E5CAD b1207
		static float ACOS(float p0)
		{
			return invoke<float>(0x586690F0176DC575, p0);
		} // 0x586690F0176DC575 0xF4038776 b1207
		static float TAN(float p0)
		{
			return invoke<float>(0x8C13DB96497B7ABF, p0);
		} // 0x8C13DB96497B7ABF 0xD320CE5E b1207
		static float ATAN(float p0)
		{
			return invoke<float>(0x503054DED0B78027, p0);
		} // 0x503054DED0B78027 0x7A03CC8E b1207
		static float ATAN2(float p0, float p1)
		{
			return invoke<float>(0x965B220A066E3F07, p0, p1);
		} // 0x965B220A066E3F07 0x2508AC81 b1207
		// If useZ is false, only the 2D plane (X-Y) will be considered for calculating the distance.
		//
		// Consider using this faster native instead: BUILTIN::VDIST - DVIST always takes in consideration the 3D coordinates.
		static float GET_DISTANCE_BETWEEN_COORDS(float x1, float y1, float z1, float x2, float y2, float z2, BOOL useZ)
		{
			return invoke<float>(0x0BE7F4E3CDBAFB28, x1, y1, z1, x2, y2, z2, useZ);
		} // 0x0BE7F4E3CDBAFB28 0xF698765E b1207
		static float GET_ANGLE_BETWEEN_2D_VECTORS(float x1, float y1, float x2, float y2)
		{
			return invoke<float>(0xD0DFE1C486097BBB, x1, y1, x2, y2);
		} // 0xD0DFE1C486097BBB 0xDBF75E58 b1207
		// dx = x1 - x2
		// dy = y1 - y2
		static float GET_HEADING_FROM_VECTOR_2D(float dx, float dy)
		{
			return invoke<float>(0x38D5202FF9271C62, dx, dy);
		} // 0x38D5202FF9271C62 0xD209D52B b1207
		static Vector3 GET_CLOSEST_POINT_ON_LINE(float p0, float p1, float p2, float p3, float p4, float p5, float p6, float p7, float p8, BOOL p9)
		{
			return invoke<Vector3>(0x83ACC65D9ACEC5EF, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
		} // 0x83ACC65D9ACEC5EF 0xCAECF37E b1207
		static BOOL GET_LINE_PLANE_INTERSECTION(float p0, float p1, float p2, float p3, float p4, float p5, float p6, float p7, float p8, float p9, float p10, float p11, float* p12)
		{
			return invoke<BOOL>(0xAB6A04CEC428258B, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12);
		} // 0xAB6A04CEC428258B 0xC6CC812C b1207
		static void SET_BIT(int* address, int offset)
		{
			invoke<int>(0xF73FBE4845C43B5B, address, offset);
		} // 0xF73FBE4845C43B5B 0x4EFE7E6B b1207
		static void CLEAR_BIT(int* address, int offset)
		{
			invoke<int>(0x7D1D4A3602B6AD4E, address, offset);
		} // 0x7D1D4A3602B6AD4E 0x8BC9E618 b1207
		static BOOL IS_BIT_FLAG_SET_(Any* bitFlags, int flag)
		{
			return invoke<BOOL>(0x8F4F050054005C27, bitFlags, flag);
		} // 0x8F4F050054005C27 undefined b1207
		static BOOL IS_ANY_BIT_FLAG_SET_(Any* bitFlags)
		{
			return invoke<BOOL>(0x80E9C316EF84DD81, bitFlags);
		} // 0x80E9C316EF84DD81 undefined b1207
		static int COUNT_BIT_FLAGS_(Any* bitFlags)
		{
			return invoke<int>(0xE704838F36F93B7B, bitFlags);
		} // 0xE704838F36F93B7B undefined b1355
		// Similar to SET_BIT but specifically designed for large (>32 flags) bit flag sets.
		// The flags are stored in an int array where each int has the ability to hold 32 flags.
		// Flags 0-31 would be stored in the first int, flags 32-63 in the second int, etc.
		static void SET_BIT_FLAG_(Any* bitFlags, int flag)
		{
			invoke<int>(0xE84AAC1B22A73E99, bitFlags, flag);
		} // 0xE84AAC1B22A73E99 undefined b1207
		static void CLEAR_BIT_FLAG_(Any* bitFlags, int flag)
		{
			invoke<int>(0xB909149F2BB5F6DA, bitFlags, flag);
		} // 0xB909149F2BB5F6DA undefined b1207
		static void CLEAR_ALL_BIT_FLAGS_(Any* bitFlags)
		{
			invoke<int>(0xD2D74F89DF844A50, bitFlags);
		} // 0xD2D74F89DF844A50 undefined b1207
		// Computes a hash for the given string. It is hashed using Jenkins' One-at-a-Time hash algorithm (https://en.wikipedia.org/wiki/Jenkins_hash_function)
		// Note: this implementation is case-insensitive.
		static Hash GET_HASH_KEY(const char* string)
		{
			return invoke<Hash>(0xFD340785ADF8CFB7, string);
		} // 0xFD340785ADF8CFB7 0x98EFF6F1 b1207
		// https://easings.net/
		//
		// enum class eEasingCurveType
		// {
		// 	TYPE_LINEAR,
		// 	TYPE_QUADRATIC_IN,
		// 	TYPE_QUADRATIC_OUT,
		// 	TYPE_QUADRATIC_INOUT,
		// 	TYPE_CUBIC_IN,
		// 	TYPE_CUBIC_OUT,
		// 	TYPE_CUBIC_INOUT,
		// 	TYPE_QUARTIC_IN,
		// 	TYPE_QUARTIC_OUT,
		// 	TYPE_QUARTIC_INOUT,
		// 	TYPE_QUINTIC_IN,
		// 	TYPE_QUINTIC_OUT,
		// 	TYPE_QUINTIC_INOUT,
		// 	TYPE_EXPONENTIAL_IN,
		// 	TYPE_EXPONENTIAL_OUT,
		// 	TYPE_EXPONENTIAL_INOUT,
		// 	TYPE_SINE_IN,
		// 	TYPE_SINE_OUT,
		// 	TYPE_SINE_INOUT,
		// 	TYPE_CIRCULAR_IN,
		// 	TYPE_CIRCULAR_OUT,
		// 	TYPE_CIRCULAR_INOUT,
		// 	TYPE_BOUNCE_IN,
		// 	TYPE_BOUNCE_OUT,
		// 	TYPE_BOUNCE_INOUT,
		// 	TYPE_CUSTOM
		// };
		static float GET_EASING_CURVE_VALUE_(float t, float b, float d, int easingCurveType)
		{
			return invoke<float>(0xEF50E344A8F93784, t, b, d, easingCurveType);
		} // 0xEF50E344A8F93784 undefined b1207
		static BOOL IS_POSITION_OCCUPIED(float x, float y, float z, float range, BOOL p4, BOOL p5, BOOL p6, BOOL p7, BOOL p8, Any p9, BOOL p10)
		{
			return invoke<BOOL>(0x825CA3ED43831015, x, y, z, range, p4, p5, p6, p7, p8, p9, p10);
		} // 0x825CA3ED43831015 0x452E8D9E b1207
		// flag |= 1 | 1048576 | 524288
		// ALL_BASE, PROJECTILES, AMBIENT_POPULATION, BROADCAST
		static void CLEAR_AREA(float x, float y, float z, float radius, int flag)
		{
			invoke<int>(0x3B882A96EA77D5B1, x, y, z, radius, flag);
		} // 0x3B882A96EA77D5B1 0x854E9AB8 b1207
		static void CLEAR_VOLUME_AREA_(Volume volume, int flag)
		{
			invoke<int>(0x2FCD528A397E5C88, volume, flag);
		} // 0x2FCD528A397E5C88 undefined b1207
		static void CLEAR_ANGLED_AREA_OF_VEHICLES(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7)
		{
			invoke<int>(0xA4D83115C1E02F8A, p0, p1, p2, p3, p4, p5, p6, p7);
		} // 0xA4D83115C1E02F8A 0xF11A3018 b1207
		static void SET_CREDITS_ACTIVE(BOOL toggle)
		{
			invoke<int>(0xD37BECF862DA726F, toggle);
		} // 0xD37BECF862DA726F 0xEC2A0ECF b1207
		static void NETWORK_SET_SCRIPT_IS_SAFE_FOR_NETWORK_GAME()
		{
			invoke<int>(0x3D0EAC6385DD6100);
		} // 0x3D0EAC6385DD6100 0x878486CE b1207
		static void PAUSE_DEATH_ARREST_RESTART(BOOL toggle)
		{
			invoke<int>(0x66AB6B6C7E72F393, toggle);
		} // 0x66AB6B6C7E72F393 0x296574AE b1207
		static void IGNORE_NEXT_RESTART(BOOL toggle)
		{
			invoke<int>(0x6C9FF40FF1B69F8F, toggle);
		} // 0x6C9FF40FF1B69F8F 0xDA13A4B6 b1207
		// Sets whether the game should fade in after the player dies or is arrested.
		static void SET_FADE_IN_AFTER_DEATH_ARREST(BOOL toggle)
		{
			invoke<int>(0xDF3B5846DE5904AF, toggle);
		} // 0xDF3B5846DE5904AF 0xACDE6985 b1207
		static void SET_FADE_IN_AFTER_LOAD(BOOL toggle)
		{
			invoke<int>(0xAC806C4CAB973517, toggle);
		} // 0xAC806C4CAB973517 0x6E00EB0B b1207
		static BOOL OVERRIDE_SAVE_HOUSE(BOOL override, float x, float y, float z, float heading, BOOL isAutosave, Vector3* returnCoords, float* returnHeading)
		{
			return invoke<BOOL>(0xB2C69E11A37B5AF0, override, x, y, z, heading, isAutosave, returnCoords, returnHeading);
		} // 0xB2C69E11A37B5AF0 0x47436C12 b1207
		static void SHOOT_SINGLE_BULLET_BETWEEN_COORDS(float x1, float y1, float z1, float x2, float y2, float z2, int damage, BOOL p7, Hash weaponHash, Ped ownerPed, BOOL isAudible, BOOL isInvisible, float speed, BOOL p13)
		{
			invoke<int>(0x867654CBC7606F2C, x1, y1, z1, x2, y2, z2, damage, p7, weaponHash, ownerPed, isAudible, isInvisible, speed, p13);
		} // 0x867654CBC7606F2C 0xCB7415AC b1207
		static void FIRE_SINGLE_BULLET(Any* args)
		{
			invoke<int>(0xCBC9A21F6A2A679C, args);
		} // 0xCBC9A21F6A2A679C undefined b1207
		static void GET_MODEL_DIMENSIONS(Hash modelHash, Vector3* minimum, Vector3* maximum)
		{
			invoke<int>(0xDCB8DDD5D054A7E7, modelHash, minimum, maximum);
		} // 0xDCB8DDD5D054A7E7 0x91ABB8E0 b1207
		static BOOL IS_BIT_SET(int address, int offset)
		{
			return invoke<BOOL>(0x4ED6CFDFE8D4131A, address, offset);
		} // 0x4ED6CFDFE8D4131A 0x902E26AC b1207
		static void N0x0A487CC74A517FB5(Any p0)
		{
			invoke<int>(0x0A487CC74A517FB5, p0);
		} // 0x0A487CC74A517FB5 undefined b1207
		static BOOL IS_MINIGAME_IN_PROGRESS()
		{
			return invoke<BOOL>(0xF4D8BCD052E7EA1B);
		} // 0xF4D8BCD052E7EA1B 0x53A95E13 b1207
		// Returns whether the game's measurement system is set to metric.
		static BOOL SHOULD_USE_METRIC_MEASUREMENTS()
		{
			return invoke<BOOL>(0x4FB556ACEFA93098);
		} // 0x4FB556ACEFA93098 0xBAF17315 b1207
		// Same as SHOULD_USE_METRIC_MEASUREMENTS
		static BOOL SHOULD_USE_METRIC_MEASUREMENTS_2_()
		{
			return invoke<BOOL>(0x58BCDC75BA52110A);
		} // 0x58BCDC75BA52110A undefined b1207
		static BOOL SHOULD_USE_METRIC_TEMPERATURE_()
		{
			return invoke<BOOL>(0xFF4AAF3275BAAB4F);
		} // 0xFF4AAF3275BAAB4F undefined b1207
		static BOOL SHOULD_USE_METRIC_WEIGHT_()
		{
			return invoke<BOOL>(0x8F24157FEDB85EA2);
		} // 0x8F24157FEDB85EA2 undefined b1207
		static BOOL SHOULD_USE_24_HOUR_CLOCK_()
		{
			return invoke<BOOL>(0x0177CF20345F44DD);
		} // 0x0177CF20345F44DD undefined b1207
		static int COMPARE_STRINGS(const char* str1, const char* str2, BOOL matchCase, int maxLength)
		{
			return invoke<int>(0xBFBB74A15EFC149B, str1, str2, matchCase, maxLength);
		} // 0xBFBB74A15EFC149B 0xFE25A58F b1207
		static int ABSI(int value)
		{
			return invoke<int>(0x0C214D5B8A38C828, value);
		} // 0x0C214D5B8A38C828 0xB44677C5 b1207
		static float ABSF(float value)
		{
			return invoke<float>(0x134549B388167CBF, value);
		} // 0x134549B388167CBF 0xAF6F6E0B b1207
		// Determines whether there is a projectile within the specified coordinates. The coordinates form a rectangle.
		//
		// ownedByPlayer = only projectiles fired by the player will be detected.
		static BOOL IS_PROJECTILE_IN_AREA(float x1, float y1, float z1, float x2, float y2, float z2, BOOL ownedByPlayer)
		{
			return invoke<BOOL>(0x05B0061EFDFC8941, x1, y1, z1, x2, y2, z2, ownedByPlayer);
		} // 0x05B0061EFDFC8941 0x78E1A557 b1207
		// Determines whether there is a projectile of a specific type within the specified coordinates. The coordinates form a rectangle.
		static BOOL IS_PROJECTILE_TYPE_IN_AREA(float xMin, float yMin, float zMin, float xMax, float yMax, float zMax, Hash weaponType, BOOL isPlayer)
		{
			return invoke<BOOL>(0x04965FB9E14235C7, xMin, yMin, zMin, xMax, yMax, zMax, weaponType, isPlayer);
		} // 0x04965FB9E14235C7 0x2B73BCF6 b1207
		static BOOL IS_PROJECTILE_TYPE_IN_ANGLED_AREA(float p0, float p1, float p2, float p3, float p4, float p5, float p6, Any p7, BOOL p8)
		{
			return invoke<BOOL>(0x928431F4133CD3D4, p0, p1, p2, p3, p4, p5, p6, p7, p8);
		} // 0x928431F4133CD3D4 0xD1AE2681 b1207
		static BOOL IS_PROJECTILE_TYPE_WITHIN_DISTANCE(float p0, float p1, float p2, Any p3, float p4, BOOL p5)
		{
			return invoke<BOOL>(0xF51C9BAAD9ED64C4, p0, p1, p2, p3, p4, p5);
		} // 0xF51C9BAAD9ED64C4 0xBE81F1E2 b1207
		static BOOL GET_COORDS_OF_PROJECTILE_TYPE_WITHIN_DISTANCE(Ped ped, Hash weaponHash, float distance, Vector3* outCoords, BOOL p4, BOOL mustBeOwnedByThisPed)
		{
			return invoke<BOOL>(0xD73C960A681052DF, ped, weaponHash, distance, outCoords, p4, mustBeOwnedByThisPed);
		} // 0xD73C960A681052DF 0x6BDE5CE4 b1207
		static BOOL GET_PROJECTILE_OF_PROJECTILE_TYPE_WITHIN_DISTANCE(Ped ped, Hash weaponHash, float distance, Vector3* outCoords, Object* outProjectile, BOOL p5, BOOL mustBeOwnedByThisPed)
		{
			return invoke<BOOL>(0x9578986A6105A6AD, ped, weaponHash, distance, outCoords, outProjectile, p5, mustBeOwnedByThisPed);
		} // 0x9578986A6105A6AD 0x507BC6F7 b1207
		static BOOL IS_BULLET_IN_ANGLED_AREA(float p0, float p1, float p2, float p3, float p4, float p5, float p6, BOOL p7)
		{
			return invoke<BOOL>(0x9D09D8493747CF02, p0, p1, p2, p3, p4, p5, p6, p7);
		} // 0x9D09D8493747CF02 0xE2DB58F7 b1207
		static BOOL IS_BULLET_IN_AREA(float p0, float p1, float p2, float p3, BOOL p4)
		{
			return invoke<BOOL>(0xC652FD308772D79E, p0, p1, p2, p3, p4);
		} // 0xC652FD308772D79E 0xB54F46CA b1207
		static BOOL IS_BULLET_IN_BOX(float p0, float p1, float p2, float p3, float p4, float p5, BOOL p6)
		{
			return invoke<BOOL>(0xC128137C52152741, p0, p1, p2, p3, p4, p5, p6);
		} // 0xC128137C52152741 0xAB73ED26 b1207
		// p3 - possibly radius?
		static BOOL HAS_BULLET_IMPACTED_IN_AREA(float x, float y, float z, float p3, BOOL p4, BOOL p5)
		{
			return invoke<BOOL>(0xC153E5BCCF411814, x, y, z, p3, p4, p5);
		} // 0xC153E5BCCF411814 0x902BC7D9 b1207
		static BOOL HAS_BULLET_IMPACTED_IN_BOX(float p0, float p1, float p2, float p3, float p4, float p5, BOOL p6, BOOL p7)
		{
			return invoke<BOOL>(0x3B6A4C05FB2B33AC, p0, p1, p2, p3, p4, p5, p6, p7);
		} // 0x3B6A4C05FB2B33AC 0x2C2618CC b1207
		static Any N0x7A76104CC2CC69E8(Entity entity, int p1, int p2)
		{
			return invoke<Any>(0x7A76104CC2CC69E8, entity, p1, p2);
		} // 0x7A76104CC2CC69E8 undefined b1207
		static Any N0xDC416CA762BC4F43(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5)
		{
			return invoke<Any>(0xDC416CA762BC4F43, p0, p1, p2, p3, p4, p5);
		} // 0xDC416CA762BC4F43 undefined b1207
		static Any N0x970339EFA4FDE518(Any p0, Any p1, Any p2)
		{
			return invoke<Any>(0x970339EFA4FDE518, p0, p1, p2);
		} // 0x970339EFA4FDE518 undefined b1207
		// Hardcoded to return false.
		// Checks for PS4 Game Build.
		static BOOL IS_ORBIS_VERSION()
		{
			return invoke<BOOL>(0x88CFAE250D3E0C71);
		} // 0x88CFAE250D3E0C71 0x40282018 b1207
		// Hardcoded to return false.
		// Checks for XBOXONE Game Build.
		static BOOL IS_DURANGO_VERSION()
		{
			return invoke<BOOL>(0xD1CCC2A2639D325F);
		} // 0xD1CCC2A2639D325F 0x46FB06A5 b1207
		// Hardcoded to return true.
		static BOOL IS_PC_VERSION()
		{
			return invoke<BOOL>(0xB0FB6CFAA5A1C833);
		} // 0xB0FB6CFAA5A1C833 0x4D5D9EE3 b1207
		// Hardcoded to return false.
		static BOOL IS_STADIA_VERSION()
		{
			return invoke<BOOL>(0x268AB8420A9E4ED7);
		} // 0x268AB8420A9E4ED7 undefined b1207
		static BOOL IS_STRING_NULL(const char* string)
		{
			return invoke<BOOL>(0x602102324604D96B, string);
		} // 0x602102324604D96B 0x8E71E00F b1207
		static BOOL IS_STRING_NULL_OR_EMPTY(const char* string)
		{
			return invoke<BOOL>(0x2CF12F9ACF18F048, string);
		} // 0x2CF12F9ACF18F048 0x42E9F2CA b1207
		// Returns true if the entire string consists only of space characters.
		static BOOL IS_STRING_NULL_OR_EMPTY_OR_SPACES(const char* string)
		{
			return invoke<BOOL>(0x375F5870A7B8BEC1, string);
		} // 0x375F5870A7B8BEC1 undefined b1207
		static BOOL ARE_STRINGS_EQUAL(const char* string1, const char* string2)
		{
			return invoke<BOOL>(0xD3852F22AB713A1F, string1, string2);
		} // 0xD3852F22AB713A1F 0x877C0BC5 b1207
		static BOOL DOES_STRING_EXIST_IN_STRING_(const char* string1, const char* string2)
		{
			return invoke<BOOL>(0x9382D5D43D2AA6FF, string1, string2);
		} // 0x9382D5D43D2AA6FF undefined b1207
		static void N0x3C3C7B1B5EC08764()
		{
			invoke<int>(0x3C3C7B1B5EC08764);
		} // 0x3C3C7B1B5EC08764 undefined b1207
		static Any N0x94E8CA3DEE952789(Any p0, Any p1)
		{
			return invoke<Any>(0x94E8CA3DEE952789, p0, p1);
		} // 0x94E8CA3DEE952789 undefined b1207
		static Any N0x5B4A8121A47D844D(Any p0)
		{
			return invoke<Any>(0x5B4A8121A47D844D, p0);
		} // 0x5B4A8121A47D844D undefined b1207
		// Returns false if it's a null or empty string or if the string is too long. outInteger will be set to -999 in that case.
		static BOOL STRING_TO_INT(const char* string, int* outInteger)
		{
			return invoke<BOOL>(0xF2DD2298B3AF23E2, string, outInteger);
		} // 0xF2DD2298B3AF23E2 0x590A8160 b1207
		// Note: the buffer should be exactly 32 bytes long
		static void INT_TO_STRING_(int value, const char* format, char* buffer)
		{
			invoke<int>(0xCF11C0CEB40C401B, value, format, buffer);
		} // 0xCF11C0CEB40C401B undefined b1207
		static void N0x74ACA66484CEBAF0(Any p0)
		{
			invoke<int>(0x74ACA66484CEBAF0, p0);
		} // 0x74ACA66484CEBAF0 undefined b1207
		static void N0x49C44FE78A135A1D(Any p0)
		{
			invoke<int>(0x49C44FE78A135A1D, p0);
		} // 0x49C44FE78A135A1D undefined b1207
		static void N0xF650DCF5D6F312C1(Any p0)
		{
			invoke<int>(0xF650DCF5D6F312C1, p0);
		} // 0xF650DCF5D6F312C1 undefined b1232
		static const char* GET_STRING_FROM_FLOAT_(float value, int digits)
		{
			return invoke<const char*>(0x2B6846401D68E563, value, digits);
		} // 0x2B6846401D68E563 undefined b1207
		// Returns a string in the following format: <<%.4f,%.4f,%.4f>>
		static const char* GET_STRING_FROM_VECTOR_(float x, float y, float z)
		{
			return invoke<const char*>(0x6C4DBF553885F9EB, x, y, z);
		} // 0x6C4DBF553885F9EB undefined b1207
		static const char* GET_STRING_FROM_BOOL_(BOOL value)
		{
			return invoke<const char*>(0xF216F74101968DB0, value);
		} // 0xF216F74101968DB0 undefined b1207
		// Note: The first bit in 'flags' must not be set.
		// It is also required to pass at least one extra argument (this must be a text label string or hash).
		// When passing a hash, flags should be 0.
		// Returns a formatted string (0x%x)
		static const char* CREATE_COLOR_STRING_(int rgb)
		{
			return invoke<const char*>(0xBCC2CFADEA1AEA6C, rgb);
		} // 0xBCC2CFADEA1AEA6C undefined b1207
		static void SET_BITS_IN_RANGE(int* var, int rangeStart, int rangeEnd, int p3)
		{
			invoke<int>(0x324DC1CEF57F31E6, var, rangeStart, rangeEnd, p3);
		} // 0x324DC1CEF57F31E6 0x32094719 b1207
		static int GET_BITS_IN_RANGE(int var, int rangeStart, int rangeEnd)
		{
			return invoke<int>(0x68E1352AF48F905D, var, rangeStart, rangeEnd);
		} // 0x68E1352AF48F905D 0xCA03A1E5 b1207
		// Make sure to call this from the correct thread if you're using multiple threads because all other threads except the one which is calling SET_GAME_PAUSED will be paused.
		static void SET_GAME_PAUSED(BOOL toggle)
		{
			invoke<int>(0xFAEC088D28B1DE4A, toggle);
		} // 0xFAEC088D28B1DE4A 0x8230FF6C b1207
		static void SET_THIS_SCRIPT_CAN_BE_PAUSED(BOOL toggle)
		{
			invoke<int>(0x3215376E79F6EA18, toggle);
		} // 0x3215376E79F6EA18 0xA0C3CE29 b1207
		static void SET_THIS_SCRIPT_CAN_REMOVE_BLIPS_CREATED_BY_ANY_SCRIPT(BOOL toggle)
		{
			invoke<int>(0x8ABD939C2E5D00ED, toggle);
		} // 0x8ABD939C2E5D00ED 0xD06F1720 b1207
		// Cheats are GTA IV cheats:
		//
		// 0 = unknown
		// 1 = unknown (same as 0)
		// 2 = Max Health and Armor
		// 3 = Raise Wanted Level
		// 4 = Lower Wanted Level
		// 5 = unknown (does nothing)
		// 6 = Change Weather
		// 7 = Spawn Annihilator
		// 8 = Spawn NRG 900
		// 9 = Spawn FBI
		// 10 = Spawn Jetmax
		// 11 = Spawn Comet
		// 12 = Spawn Turismo
		// 13 = Spawn Cognoscenti
		// 14 = Spawn Super GT
		// 15 = Spawn Sanchez
		//
		// Initially used in Max Payne 3, that's why we know the name.
		static void SET_CHEAT_ACTIVE(int cheatId)
		{
			invoke<int>(0xD4958E8CF0DE0DD0, cheatId);
		} // 0xD4958E8CF0DE0DD0 undefined b1207
		// nullsub, doesn't do anything
		static void N0xB711EB4BC8D06013()
		{
			invoke<int>(0xB711EB4BC8D06013);
		} // 0xB711EB4BC8D06013 undefined b1207
		// spawns a few distant/out-of-sight peds, vehicles, animals etc each time it is called
		static void POPULATE_NOW()
		{
			invoke<int>(0xEA6DC3A8ADD2005F);
		} // 0xEA6DC3A8ADD2005F 0x72C20700 b1207
		static BOOL IS_GAME_SESSION_STATE_MACHINE_IDLE()
		{
			return invoke<BOOL>(0xF9E7DBB39080640B);
		} // 0xF9E7DBB39080640B undefined b1207
		// p0 must be < 2
		static BOOL QUEUE_SAVEGAME_OPERATION_(int p0)
		{
			return invoke<BOOL>(0x279B0696DA4657EB, p0);
		} // 0x279B0696DA4657EB undefined b1207
		// Only 0 and 1 are valid for p0, higher values causes the native to return 2.
		static int GET_STATUS_OF_SAVEGAME_OPERATION_(int p0)
		{
			return invoke<int>(0x1B065A2BF7953815, p0);
		} // 0x1B065A2BF7953815 undefined b1207
		static Any N0x6C7B68D3CE60E8DE(Any p0)
		{
			return invoke<Any>(0x6C7B68D3CE60E8DE, p0);
		} // 0x6C7B68D3CE60E8DE undefined b1207
		static Any N0x627B68D9CE6EE8DE(Any p0)
		{
			return invoke<Any>(0x627B68D9CE6EE8DE, p0);
		} // 0x627B68D9CE6EE8DE undefined b1207
		static Any N0x7CF96F1250EF3221(Any p0)
		{
			return invoke<Any>(0x7CF96F1250EF3221, p0);
		} // 0x7CF96F1250EF3221 undefined b1207
		// Old name: _COPY_MEMORY
		static void COPY_SCRIPT_STRUCT(Any* dst, Any* src, int size)
		{
			invoke<int>(0xF7AC7DC0DEE7C9BE, dst, src, size);
		} // 0xF7AC7DC0DEE7C9BE  b1207
		// enum DispatchType
		// {
		// 	DT_Invalid,
		// 	DT_PoliceAutomobile,
		// 	DT_PoliceHelicopter,
		// 	DT_FireDepartment,
		// 	DT_SwatAutomobile,
		// 	DT_AmbulanceDepartment,
		// 	DT_PoliceRiders,
		// 	DT_PoliceVehicleRequest,
		// 	DT_PoliceRoadBlock,
		// 	DT_PoliceAutomobileWaitPulledOver,
		// 	DT_PoliceAutomobileWaitCruising,
		// 	DT_Gangs,
		// 	DT_SwatHelicopter,
		// 	DT_PoliceBoat,
		// 	DT_ArmyVehicle,
		// 	DT_OnFoot,
		// 	DT_PoliceDogs
		// };
		static void ENABLE_DISPATCH_SERVICE(int dispatchService, BOOL toggle)
		{
			invoke<int>(0x50E52637EF70EF77, dispatchService, toggle);
		} // 0x50E52637EF70EF77 0x0B710A51 b1207
		// dispatchService: see ENABLE_DISPATCH_SERVICE
		static void BLOCK_DISPATCH_SERVICE_RESOURCE_CREATION(int dispatchService, BOOL toggle)
		{
			invoke<int>(0x66947E61A44DE2C6, dispatchService, toggle);
		} // 0x66947E61A44DE2C6 0xE0F0684F b1207
		// dispatchService: see ENABLE_DISPATCH_SERVICE
		static BOOL CREATE_INCIDENT(int dispatchService, float x, float y, float z, int numUnits, float radius, int* outIncidentID, Any p7, Any p8)
		{
			return invoke<BOOL>(0x3F892CAF67444AE7, dispatchService, x, y, z, numUnits, radius, outIncidentID, p7, p8);
		} // 0x3F892CAF67444AE7 0xFC5FF7B3 b1207
		// dispatchService: see ENABLE_DISPATCH_SERVICE
		//
		// The entities must be added to itemSet.
		static BOOL CREATE_INCIDENT_WITH_ENTITIES_(int dispatchService, float x, float y, float z, ItemSet itemSet, float radius, int* outIncidentID)
		{
			return invoke<BOOL>(0xAB3D3F45436DB1D8, dispatchService, x, y, z, itemSet, radius, outIncidentID);
		} // 0xAB3D3F45436DB1D8 undefined b1207
		// Delete an incident with a given id.
		static void DELETE_INCIDENT(int incidentId)
		{
			invoke<int>(0x5CFD0F0D6AAE0AEE, incidentId);
		} // 0x5CFD0F0D6AAE0AEE 0x212BD0DC b1207
		static BOOL IS_INCIDENT_VALID(int incidentId)
		{
			return invoke<BOOL>(0x39F2B1BAD412246A, incidentId);
		} // 0x39F2B1BAD412246A 0x31FD0BA4 b1207
		static void SET_INCIDENT_UNK_(int incidentId)
		{
			invoke<int>(0x9617B6E5F6537B63, incidentId);
		} // 0x9617B6E5F6537B63 undefined b1207
		static int ADD_POP_MULTIPLIER_AREA(float x1, float y1, float z1, float x2, float y2, float z2, float pedDensity, float trafficDensity, BOOL p8, BOOL p9)
		{
			return invoke<int>(0x5EBDA1A3B8CB5EF7, x1, y1, z1, x2, y2, z2, pedDensity, trafficDensity, p8, p9);
		} // 0x5EBDA1A3B8CB5EF7 0x42BF09B3 b1207
		static BOOL DOES_POP_MULTIPLIER_AREA_EXIST(int id)
		{
			return invoke<BOOL>(0x03BA619C81A646B3, id);
		} // 0x03BA619C81A646B3 0xE933B34A b1207
		static void REMOVE_POP_MULTIPLIER_AREA(int id, BOOL p1)
		{
			invoke<int>(0x88CB484364EFB37A, id, p1);
		} // 0x88CB484364EFB37A 0xFBDBE374 b1207
		// Only used in script function PROCESS_ZONE_CREATION
		// Returns Pop multiplier volume ID
		static int ADD_POP_MULTIPLIER_VOLUME_(Volume volume, float pedDensity, float vehicleDensity, BOOL p3, BOOL p4)
		{
			return invoke<int>(0x3233C4EC0514C7EC, volume, pedDensity, vehicleDensity, p3, p4);
		} // 0x3233C4EC0514C7EC undefined b1207
		static BOOL DOES_POP_MULTIPLIER_AREA_EXIST_FOR_VOLUME_(Volume volume)
		{
			return invoke<BOOL>(0x39D6DACE323A20B6, volume);
		} // 0x39D6DACE323A20B6 undefined b1207
		static void REMOVE_POP_MULTIPLIER_AREA_FOR_VOLUME_(Volume volume, int p1)
		{
			invoke<int>(0xBD090F5B1DB82189, volume, p1);
		} // 0xBD090F5B1DB82189 undefined b1207
		static void N0xF569E33FB72ED28E()
		{
			invoke<int>(0xF569E33FB72ED28E);
		} // 0xF569E33FB72ED28E undefined b1207
		static void RESET_DISPATCH_IDEAL_SPAWN_DISTANCE()
		{
			invoke<int>(0xC7817264BC4B6377);
		} // 0xC7817264BC4B6377 0xDA65ECAA b1207
		static void SET_DISPATCH_IDEAL_SPAWN_DISTANCE(float fIdealSpawnDistance)
		{
			invoke<int>(0xEAB6823B82FBD283, fIdealSpawnDistance);
		} // 0xEAB6823B82FBD283 0x6283BE32 b1207
		static void RESET_DISPATCH_MIN_SPAWN_DISTANCE_()
		{
			invoke<int>(0x96498D922D8D0D0A);
		} // 0x96498D922D8D0D0A undefined b1207
		static void SET_DISPATCH_MIN_SPAWN_DISTANCE_(float minSpawnDistance)
		{
			invoke<int>(0x27A1B170AA8AF84C, minSpawnDistance);
		} // 0x27A1B170AA8AF84C undefined b1207
		static void RESET_DISPATCH_MAX_SPAWN_DISTANCE_()
		{
			invoke<int>(0x54EC7B6BC72BAD69);
		} // 0x54EC7B6BC72BAD69 undefined b1207
		static void SET_DISPATCH_MAX_SPAWN_DISTANCE_(float maxSpawnDistance)
		{
			invoke<int>(0x89314FB3463E28DE, maxSpawnDistance);
		} // 0x89314FB3463E28DE undefined b1207
		static void N0x4B0501A468B749F8()
		{
			invoke<int>(0x4B0501A468B749F8);
		} // 0x4B0501A468B749F8 undefined b1207
		// _SET_DISPATCH_*, unused
		static void N0x6BCF7B5CD338281A(Any p0, Any p1, Any p2)
		{
			invoke<int>(0x6BCF7B5CD338281A, p0, p1, p2);
		} // 0x6BCF7B5CD338281A undefined b1207
		static Any ADD_DISPATCH_SPAWN_BLOCKING_AREA_(Volume volume)
		{
			return invoke<Any>(0xA2D5A26208421426, volume);
		} // 0xA2D5A26208421426 undefined b1207
		static void REMOVE_DISPATCH_SPAWN_BLOCKING_AREA(Any p0)
		{
			invoke<int>(0x49F751F6868DDC5B, p0);
		} // 0x49F751F6868DDC5B 0xA8D2FB92 b1207
		static void RESET_WANTED_RESPONSE_NUM_PEDS_TO_SPAWN()
		{
			invoke<int>(0xEF42F56F69877125);
		} // 0xEF42F56F69877125 0xE0C9307E b1207
		// Params: p3 is 0 in R* Script utopia2
		static void ADD_TACTICAL_NAV_MESH_POINT(float x, float y, float z, int p3)
		{
			invoke<int>(0xE4EE55E63FA9AF45, x, y, z, p3);
		} // 0xE4EE55E63FA9AF45 0x24A4E0B2 b1207
		static void CLEAR_TACTICAL_NAV_MESH_POINTS()
		{
			invoke<int>(0xD93B6516C6878267);
		} // 0xD93B6516C6878267 0x66C3C59C b1207
		// enum eOnscreenKeyboardTextType
		// {
		// 	KTEXTTYPE_INVALID = -1,
		// 	KTEXTTYPE_DEFAULT,
		// 	KTEXTTYPE_EMAIL,
		// 	KTEXTTYPE_PASSWORD,
		// 	KTEXTTYPE_NUMERIC,
		// 	KTEXTTYPE_ALPHABET,
		// 	KTEXTTYPE_GAMERTAG,
		// 	KTEXTTYPE_FILENAME,
		// 	KTEXTTYPE_COUNT
		// };
		static void DISPLAY_ONSCREEN_KEYBOARD(int textType, const char* windowTitle, const char* p2, const char* defaultText, const char* defaultConcat1, const char* defaultConcat2, const char* defaultConcat3, int maxInputLength)
		{
			invoke<int>(0x044131118D8DB3CD, textType, windowTitle, p2, defaultText, defaultConcat1, defaultConcat2, defaultConcat3, maxInputLength);
		} // 0x044131118D8DB3CD 0xAD99F2CE b1207
		// Returns the current status of the onscreen keyboard, and updates the output.
		//
		// Status Codes:
		//
		// 0 - User still editing
		// 1 - User has finished editing
		// 2 - User has canceled editing
		// 3 - Keyboard isn't active
		static int UPDATE_ONSCREEN_KEYBOARD()
		{
			return invoke<int>(0x37DF360F235A3893);
		} // 0x37DF360F235A3893 0x23D0A1CE b1207
		// Returns NULL unless UPDATE_ONSCREEN_KEYBOARD() returns 1 in the same tick.
		static const char* GET_ONSCREEN_KEYBOARD_RESULT()
		{
			return invoke<const char*>(0xAFB4CF58A4A292B1);
		} // 0xAFB4CF58A4A292B1 0x44828FB3 b1207
		// Old name: _CANCEL_ONSCREEN_KEYBOARD
		static void CANCEL_ONSCREEN_KEYBOARD()
		{
			invoke<int>(0x58A39BE597CE99CD);
		} // 0x58A39BE597CE99CD  b1207
		static void NEXT_ONSCREEN_KEYBOARD_RESULT_WILL_DISPLAY_USING_THESE_FONTS(int fontBitField)
		{
			invoke<int>(0x5CB71EAA1429A358, fontBitField);
		} // 0x5CB71EAA1429A358 0x3301EA47 b1207
		// Appears to remove stealth kill action from memory (?)
		static void ACTION_MANAGER_ENABLE_ACTION(Hash hash, BOOL enable)
		{
			invoke<int>(0x7ACF124C12A2B045, hash, enable);
		} // 0x7ACF124C12A2B045 0x42B484ED b1207
		static BOOL ACTION_MANAGER_IS_ACTION_ENABLED(Hash hash)
		{
			return invoke<BOOL>(0xFD0759658268FD8E, hash);
		} // 0xFD0759658268FD8E undefined b1207
		// Returns GET_GAME_TIMER() / 1000
		// Only used in rcm_pearson1.ysc
		static int GET_REAL_WORLD_TIME()
		{
			return invoke<int>(0x2E036F0480B8BF02);
		} // 0x2E036F0480B8BF02 undefined b1207
		static void SET_SUPER_JUMP_THIS_FRAME(Player player)
		{
			invoke<int>(0xB3E9BE963F10C445, player);
		} // 0xB3E9BE963F10C445 0x86745EF3 b1207
		static void SCRIPT_RACE_INIT(int numCheckpoints, int numLaps, int numPlayers, Any p3)
		{
			invoke<int>(0x8AE059F47158417E, numCheckpoints, numLaps, numPlayers, p3);
		} // 0x8AE059F47158417E 0x2D33F15A b1207
		static void SCRIPT_RACE_SHUTDOWN()
		{
			invoke<int>(0x334CE0DA4FAF330C);
		} // 0x334CE0DA4FAF330C 0xDF99925C b1207
		static void SCRIPT_RACE_PLAYER_HIT_CHECKPOINT(int part, int checkpoint, int lap, int time)
		{
			invoke<int>(0xBA62B4D80FA66BD6, part, checkpoint, lap, time);
		} // 0xBA62B4D80FA66BD6 0xA27F4472 b1207
		static BOOL SCRIPT_RACE_GET_PLAYER_SPLIT_TIME(Any p0, Any* p1, Any* p2)
		{
			return invoke<BOOL>(0x769E848C66E3C2BB, p0, p1, p2);
		} // 0x769E848C66E3C2BB 0x07FF553F b1207
		// Begins with START_*. Next character in the name is either D or E.
		//
		// Old name: _START_BENCHMARK_RECORDING
		static void START_END_USER_BENCHMARK()
		{
			invoke<int>(0x29D1F6DF864A094E);
		} // 0x29D1F6DF864A094E  b1207
		// Begins with STOP_*. Next character in the name is either D or E.
		//
		// Old name: _STOP_BENCHMARK_RECORDING
		static void STOP_END_USER_BENCHMARK()
		{
			invoke<int>(0xB89AEC71AFF2B599);
		} // 0xB89AEC71AFF2B599  b1207
		// Begins with RESET_*. Next character in the name is either D or E.
		//
		// Old name: _RESET_BENCHMARK_RECORDING
		static void RESET_END_USER_BENCHMARK()
		{
			invoke<int>(0xECBABD0307FB216F);
		} // 0xECBABD0307FB216F  b1207
		// Saves the benchmark recording to %USERPROFILE%\Documents\Rockstar Games\Red Dead Redemption 2\Benchmarks and submits some metrics.
		//
		// Old name: _SAVE_BENCHMARK_RECORDING
		static void SAVE_END_USER_BENCHMARK()
		{
			invoke<int>(0xF4743E2ECC02B3DA);
		} // 0xF4743E2ECC02B3DA  b1207
		// Hardcoded to return false.
		//
		// Old name: _UI_IS_SINGLEPLAYER_PAUSE_MENU_ACTIVE
		static BOOL UI_STARTED_END_USER_BENCHMARK()
		{
			return invoke<BOOL>(0x4FFA0386A6216113);
		} // 0x4FFA0386A6216113  b1207
		// Returns value of the '-benchmarkIterations' command line option.
		//
		// Old name: _GET_BENCHMARK_ITERATIONS_FROM_COMMAND_LINE
		static int GET_BENCHMARK_ITERATIONS()
		{
			return invoke<int>(0x22FC52CF470CC98D);
		} // 0x22FC52CF470CC98D  b1207
		// Returns value of the '-benchmarkPass' command line option.
		//
		// Old name: _GET_BENCHMARK_PASS_FROM_COMMAND_LINE
		static int GET_BENCHMARK_PASS()
		{
			return invoke<int>(0x9297DACF3A2CDFF7);
		} // 0x9297DACF3A2CDFF7  b1207
		// Hardcoded to return one/true.
		static Any N0xDC057B86FC157031()
		{
			return invoke<Any>(0xDC057B86FC157031);
		} // 0xDC057B86FC157031 undefined b1207
		static void N0x9A252AA23D7098F2()
		{
			invoke<int>(0x9A252AA23D7098F2);
		} // 0x9A252AA23D7098F2 undefined b1207
		static BOOL DOES_ITEM_HAVE_VALID_BASE_(ScrHandle item)
		{
			return invoke<BOOL>(0xBDC6E364C9C78178, item);
		} // 0xBDC6E364C9C78178 undefined b1207
		// 0 = invalid
		// 1 = CEntity
		// 2 = rage::volBase
		// 3 = rage::volSphere
		// 4 = rage::volBox
		// 5 = rage::volAggregate
		// 6 = rage::volCylinder
		// 7 = CScriptedCoverPoint
		// 8 = rage::ptfxScriptInfo
		// 9 = CPed
		// 10 = CVehicle
		// 11 = CObject
		// 12 = CItemSet
		// 13 = CPersistentCharacter
		static int GET_ITEM_TYPE_(ScrHandle handle)
		{
			return invoke<int>(0xDC8D2FF478DF9553, handle);
		} // 0xDC8D2FF478DF9553 undefined b1207
		static BOOL IS_BASE_A_PERSISTENT_CHARACTER_(ScrHandle handle)
		{
			return invoke<BOOL>(0x716F17F8A0419F95, handle);
		} // 0x716F17F8A0419F95 undefined b1207
		static BOOL IS_BASE_A_COVER_POINT_(ScrHandle handle)
		{
			return invoke<BOOL>(0xFEC1D4B5C82C176F, handle);
		} // 0xFEC1D4B5C82C176F undefined b1207
		// UPDATE_PICKUP_COLLECTIBLE: set Eagle Eye fountain
		// _J*, _K*, _L*
		static void N0x553D67295DDD2309(Entity entity)
		{
			invoke<int>(0x553D67295DDD2309, entity);
		} // 0x553D67295DDD2309 undefined b1207
		static Volume GET_VOLUME_FROM_INDEXED_ITEM_(ScrHandle item)
		{
			return invoke<Volume>(0xF18AF483DF70BBDE, item);
		} // 0xF18AF483DF70BBDE undefined b1207
		static Entity GET_ENTITY_FROM_ITEM_(ScrHandle item)
		{
			return invoke<Entity>(0xEE04C0AFD4EFAF0E, item);
		} // 0xEE04C0AFD4EFAF0E undefined b1207
		static Ped GET_PED_FROM_INDEXED_ITEM_(ScrHandle item)
		{
			return invoke<Ped>(0x3FFB15534067DCD4, item);
		} // 0x3FFB15534067DCD4 undefined b1207
		static Vehicle GET_VEHICLE_FROM_INDEXED_ITEM_(ScrHandle item)
		{
			return invoke<Vehicle>(0xE578C8AE173719B3, item);
		} // 0xE578C8AE173719B3 undefined b1207
		static Object GET_OBJECT_FROM_INDEXED_ITEM_(ScrHandle item)
		{
			return invoke<Object>(0x18013392501CE5DC, item);
		} // 0x18013392501CE5DC undefined b1207
		static Any N0x33982467B1E349EF(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6)
		{
			return invoke<Any>(0x33982467B1E349EF, p0, p1, p2, p3, p4, p5, p6);
		} // 0x33982467B1E349EF undefined b1207
		static Any N0x8314FC2013ECE2DA(Any p0, Any p1, Any p2)
		{
			return invoke<Any>(0x8314FC2013ECE2DA, p0, p1, p2);
		} // 0x8314FC2013ECE2DA undefined b1207
		static void N0x4D5C9CC7E7E23E09()
		{
			invoke<int>(0x4D5C9CC7E7E23E09);
		} // 0x4D5C9CC7E7E23E09 undefined b1207
		// p3 is usually the same value of radius
		// p8 determines whether the ILO prompt is a lock on prompt with RMB
		static BOOL REGISTER_INTERACTION_LOCKON_PROMPT(Entity entity, const char* text, float radius, float p3, int flag, float p5, float p6, Prompt prompt, BOOL p8, int p9)
		{
			return invoke<BOOL>(0x870708A6E147A9AD, entity, text, radius, p3, flag, p5, p6, prompt, p8, p9);
		} // 0x870708A6E147A9AD undefined b1207
		static BOOL UNREGISTER_INTERACTION_LOCKON_PROMPT(Entity entity)
		{
			return invoke<BOOL>(0xE98D55C5983F2509, entity);
		} // 0xE98D55C5983F2509 undefined b1207
		static void N0xFC6ECB9170145ECE()
		{
			invoke<int>(0xFC6ECB9170145ECE);
		} // 0xFC6ECB9170145ECE undefined b1207
		static Any N0x35165C658077CD0B()
		{
			return invoke<Any>(0x35165C658077CD0B);
		} // 0x35165C658077CD0B undefined b1207
		static BOOL N0x4B101DBCC9482F2D(Ped ped)
		{
			return invoke<BOOL>(0x4B101DBCC9482F2D, ped);
		} // 0x4B101DBCC9482F2D undefined b1207
		static BOOL IS_MISSION_CREATOR_ACTIVE_()
		{
			return invoke<BOOL>(0xF236C84C6ADFCB2F);
		} // 0xF236C84C6ADFCB2F undefined b1207
		static void N0xA3A8926951471C82()
		{
			invoke<int>(0xA3A8926951471C82);
		} // 0xA3A8926951471C82 undefined b1207
		// aiMemoryType: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/_CREATE_AI_MEMORY
		static void CREATE_AI_MEMORY_(Any* args, int aiMemoryType)
		{
			invoke<int>(0x88BC5F4AEF77FC4E, args, aiMemoryType);
		} // 0x88BC5F4AEF77FC4E undefined b1207
		static BOOL GET_AI_PED_DOES_HAVE_EVENT_MEMORY_(Any* args, int p1)
		{
			return invoke<BOOL>(0xFDF38E2B711BF78E, args, p1);
		} // 0xFDF38E2B711BF78E undefined b1207
		// Not implemented.
		static void N0xEB946B9E579729AD(Ped ped, Any p1)
		{
			invoke<int>(0xEB946B9E579729AD, ped, p1);
		} // 0xEB946B9E579729AD undefined b1207
		// Used in CAIConditionAmbientAIMemoryReactionsEnabled
		static void SET_AI_MEMORY_REACTIONS_ENABLED_(BOOL enabled)
		{
			invoke<int>(0x6AC4AF46A6B8DFB2, enabled);
		} // 0x6AC4AF46A6B8DFB2 undefined b1207
		static Any N0x8DB104CCEBCD58C5(Any p0, Any p1)
		{
			return invoke<Any>(0x8DB104CCEBCD58C5, p0, p1);
		} // 0x8DB104CCEBCD58C5 undefined b1207
		static void N0x68319452C5064ABA(Any p0, Any p1)
		{
			invoke<int>(0x68319452C5064ABA, p0, p1);
		} // 0x68319452C5064ABA undefined b1207
		static void N0xDE2C3B74D2B3705C(Any p0, Any p1)
		{
			invoke<int>(0xDE2C3B74D2B3705C, p0, p1);
		} // 0xDE2C3B74D2B3705C undefined b1207
		static void N0x49F3241C28EBBFBC(int p0)
		{
			invoke<int>(0x49F3241C28EBBFBC, p0);
		} // 0x49F3241C28EBBFBC undefined b1207
		static void N0x183672FE838A661B(Any* data)
		{
			invoke<int>(0x183672FE838A661B, data);
		} // 0x183672FE838A661B undefined b1207
		static void N0x38C0C9CAE1544500(Hash p0)
		{
			invoke<int>(0x38C0C9CAE1544500, p0);
		} // 0x38C0C9CAE1544500 undefined b1207
		static void N0x154340E87D8CC178(Any p0)
		{
			invoke<int>(0x154340E87D8CC178, p0);
		} // 0x154340E87D8CC178 undefined b1207
		static void N0x94FCADCF9F0C368E(Any p0)
		{
			invoke<int>(0x94FCADCF9F0C368E, p0);
		} // 0x94FCADCF9F0C368E undefined b1207
		static BOOL N0x0D0AE5081F88CFE1(Hash p0)
		{
			return invoke<BOOL>(0x0D0AE5081F88CFE1, p0);
		} // 0x0D0AE5081F88CFE1 undefined b1207
		static void N0xAF3A84C7DE6A1DC5(Any p0, Any p1)
		{
			invoke<int>(0xAF3A84C7DE6A1DC5, p0, p1);
		} // 0xAF3A84C7DE6A1DC5 undefined b1207
		static void LOOT_TABLES_GET_INFO_(Ped ped, BOOL p1, BOOL p2, Hash lootTableKey, Any* p4, Any p5)
		{
			invoke<int>(0x48E4D50F87A96AA5, ped, p1, p2, lootTableKey, p4, p5);
		} // 0x48E4D50F87A96AA5 undefined b1207
		static Any N0xB1F6665AA54DCD5C(Any p0)
		{
			return invoke<Any>(0xB1F6665AA54DCD5C, p0);
		} // 0xB1F6665AA54DCD5C undefined b1207
		static Any N0x8BB99B85444544D9(Any p0, Any p1)
		{
			return invoke<Any>(0x8BB99B85444544D9, p0, p1);
		} // 0x8BB99B85444544D9 undefined b1207
		static Any N0x6F02B5E50511721E(Any p0)
		{
			return invoke<Any>(0x6F02B5E50511721E, p0);
		} // 0x6F02B5E50511721E undefined b1207
		static Any N0xCC1BAF72D571DB8D(Any p0, Any p1, Any p2)
		{
			return invoke<Any>(0xCC1BAF72D571DB8D, p0, p1, p2);
		} // 0xCC1BAF72D571DB8D undefined b1207
		static BOOL IS_PED_DECOMPOSED_(Ped ped)
		{
			return invoke<BOOL>(0x5170DDA6D63ACAAA, ped);
		} // 0x5170DDA6D63ACAAA undefined b1207
		static void SET_PED_DECOMPOSED(Ped ped, BOOL toggle)
		{
			invoke<int>(0x674B90BE1115846D, ped, toggle);
		} // 0x674B90BE1115846D undefined b1207
		static void N0xAB26DEEE120FD3FD(Any p0, Any p1)
		{
			invoke<int>(0xAB26DEEE120FD3FD, p0, p1);
		} // 0xAB26DEEE120FD3FD undefined b1207
		static void N0x082C043C7AFC3747(int compositeId, BOOL p1)
		{
			invoke<int>(0x082C043C7AFC3747, compositeId, p1);
		} // 0x082C043C7AFC3747 undefined b1207
		static void DISABLE_LOOTING_COMPOSITE_LOOTABLE_THIS_FRAME(int compositeId, BOOL p1)
		{
			invoke<int>(0x40D72189F46D2E15, compositeId, p1);
		} // 0x40D72189F46D2E15 undefined b1207
		static void N0xBB282CF5D2333FB8(Any p0, Any p1)
		{
			invoke<int>(0xBB282CF5D2333FB8, p0, p1);
		} // 0xBB282CF5D2333FB8 undefined b1207
		static void N0xAD44856A1CD29635(Any p0, Any p1, Any p2)
		{
			invoke<int>(0xAD44856A1CD29635, p0, p1, p2);
		} // 0xAD44856A1CD29635 undefined b1207
		static Any N0x38C2BF94D15F464D(Any p0)
		{
			return invoke<Any>(0x38C2BF94D15F464D, p0);
		} // 0x38C2BF94D15F464D undefined b1207
		static void N0x3A87FDA8F1B6CDFB(Any p0, Any p1, Any p2)
		{
			invoke<int>(0x3A87FDA8F1B6CDFB, p0, p1, p2);
		} // 0x3A87FDA8F1B6CDFB undefined b1207
		static void N0x4647842FE8F31C1E(Any p0, Any p1)
		{
			invoke<int>(0x4647842FE8F31C1E, p0, p1);
		} // 0x4647842FE8F31C1E undefined b1207
		// Event names in the scripts: MGBegin, MGEnd, ReadyForCut
		static BOOL GET_LOOTING_EVENT_HAS_FIRED_(Ped ped, const char* eventName)
		{
			return invoke<BOOL>(0xF9B91C5129EABC08, ped, eventName);
		} // 0xF9B91C5129EABC08 undefined b1207
		static void SET_LOOT_PELT_SATCHEL_ITEM_(Ped ped, Any item)
		{
			invoke<int>(0x9B47971234169990, ped, item);
		} // 0x9B47971234169990 undefined b1207
		static void N0x96282005C5C6801F(Any p0, Any p1)
		{
			invoke<int>(0x96282005C5C6801F, p0, p1);
		} // 0x96282005C5C6801F undefined b1311
		static void N0xF63FA29D4A9ACA86(Any p0, Any p1)
		{
			invoke<int>(0xF63FA29D4A9ACA86, p0, p1);
		} // 0xF63FA29D4A9ACA86 undefined b1207
		static void N0x8C0F6A3D7236DEEB(Any p0, Any p1)
		{
			invoke<int>(0x8C0F6A3D7236DEEB, p0, p1);
		} // 0x8C0F6A3D7236DEEB undefined b1207
		static void N0x7FA58CED69405F9A(Any p0, Any p1)
		{
			invoke<int>(0x7FA58CED69405F9A, p0, p1);
		} // 0x7FA58CED69405F9A undefined b1207
		// _CLEAR*
		static void N0xA08111B053D84B4D(Any p0)
		{
			invoke<int>(0xA08111B053D84B4D, p0);
		} // 0xA08111B053D84B4D undefined b1207
		static BOOL IS_GLOBAL_BLOCK_VALID_(int index)
		{
			return invoke<BOOL>(0xACB7E1418A8B6E32, index);
		} // 0xACB7E1418A8B6E32 undefined b1207
		static void SET_GLOBAL_BLOCK_IS_LOADED_(int index, BOOL toggle)
		{
			invoke<int>(0xE97240065406CB80, index, toggle);
		} // 0xE97240065406CB80 undefined b1207
		static BOOL GAME_FRAMEWORK_MANAGER_INIT(Hash transitionMode)
		{
			return invoke<BOOL>(0x4CABE596D632E4B0, transitionMode);
		} // 0x4CABE596D632E4B0 undefined b1207
		static void GAME_FRAMEWORK_MANAGER_SHUTDOWN_()
		{
			invoke<int>(0xAFF2FD8ADD927585);
		} // 0xAFF2FD8ADD927585 undefined b1207
		static Hash GAME_FRAMEWORK_MANAGER_GET_MODE_()
		{
			return invoke<Hash>(0xFAED234C7F53ABEB);
		} // 0xFAED234C7F53ABEB undefined b1207
		static BOOL IS_PLAYER_OWNING_STANDALONE_SP_()
		{
			return invoke<BOOL>(0x36040772DF5E59A0);
		} // 0x36040772DF5E59A0 undefined b1355
		static Any N0x0358B8A41916C613(Any p0, Any p1, Any p2, Any p3)
		{
			return invoke<Any>(0x0358B8A41916C613, p0, p1, p2, p3);
		} // 0x0358B8A41916C613 undefined b1207
		// Note: this native was added in build 1232.56
		static void SET_GAME_LOGIC_PAUSED_()
		{
			invoke<int>(0x550F05CFFBD63C8C);
		} // 0x550F05CFFBD63C8C undefined b1232
		// nullsub, doesn't do anything
		static void STOP_CURRENT_LOADING_PROGRESS_TIMER()
		{
			invoke<int>(0xA565FAC215CBC77D);
		} // 0xA565FAC215CBC77D undefined b1207
		static void N0xDBDA48EC456ED908()
		{
			invoke<int>(0xDBDA48EC456ED908);
		} // 0xDBDA48EC456ED908 undefined b1436
	}

	namespace MISSIONDATA
	{
		static BOOL MISSIONDATA_IS_VALID(Any p0)
		{
			return invoke<BOOL>(0xE54DC27571D5EDC5, p0);
		} // 0xE54DC27571D5EDC5 undefined b1207
		static Hash MISSIONDATA_GET_CATAGORY(Hash missionId)
		{
			return invoke<Hash>(0x57E798B65C45EE17, missionId);
		} // 0x57E798B65C45EE17 undefined b1232
		static Hash MISSIONDATA_GET_TEXTURE_NAME(Hash missionId)
		{
			return invoke<Hash>(0x57E798B56C45EE15, missionId);
		} // 0x57E798B56C45EE15 undefined b1207
		static Hash MISSIONDATA_GET_TEXTURE_TXD(Hash missionId)
		{
			return invoke<Hash>(0x57E798B57C45EE16, missionId);
		} // 0x57E798B57C45EE16 undefined b1207
		// see: missions.meta
		static BOOL MISSIONDATA_WAS_COMPLETED(Hash missionId)
		{
			return invoke<BOOL>(0xE54DC27571D5EDC4, missionId);
		} // 0xE54DC27571D5EDC4 undefined b1207
		static int MISSIONDATA_GET_RATING(Hash missionId)
		{
			return invoke<int>(0x57E798B54C45EE1A, missionId);
		} // 0x57E798B54C45EE1A undefined b1207
		// MISSION_RATING_INCOMPLETE = 0,
		// MISSION_RATING_SKIPPED,
		// MISSION_RATING_COMPLETE,
		// MISSION_RATING_BRONZE,
		// MISSION_RATING_SILVER,
		// MISSION_RATING_GOLD,
		static void MISSIONDATA_SET_MISSION_RATING_(Hash missionId, int rating)
		{
			invoke<int>(0xE824CE7D13FCB300, missionId, rating);
		} // 0xE824CE7D13FCB300 undefined b1207
		static BOOL MISSIONDATA_IS_REQUIRED_STORY_MISSION(Hash missionId)
		{
			return invoke<BOOL>(0xE824CE7D13FCB35E, missionId);
		} // 0xE824CE7D13FCB35E undefined b1207
		// replayState: MISSIONDATA_GET_REPLAY_STATE
		static void MISSIONDATA_SET_REPLAY_STATE_LOCKED_(Hash missionId, int replayState)
		{
			invoke<int>(0xE4E2C581F127A11C, missionId, replayState);
		} // 0xE4E2C581F127A11C undefined b1207
		static int MISSIONDATA_GET_REPLAY_STATE(Any p0)
		{
			return invoke<int>(0x8C32D86E9556ED86, p0);
		} // 0x8C32D86E9556ED86 undefined b1207
		static void MISSIONDATA_SET_RATING_SCORES(Hash missionId, int bronzeScore, int silverScore, int goldScore)
		{
			invoke<int>(0x12F65317708749A5, missionId, bronzeScore, silverScore, goldScore);
		} // 0x12F65317708749A5 undefined b1207
		static void MISSIONDATA_SET_HIGH_SCORE(Hash missionId, int score)
		{
			invoke<int>(0x3A04F0169DA87A9D, missionId, score);
		} // 0x3A04F0169DA87A9D undefined b1207
		static int MISSIONDATA_GET_HIGH_SCORE(Hash missionId)
		{
			return invoke<int>(0x9AABABF8313C3516, missionId);
		} // 0x9AABABF8313C3516 undefined b1207
		static BOOL MISSIONDATA_IS_REPLAY_CATEGORY_LOCKED_(Hash category)
		{
			return invoke<BOOL>(0xE145864DECC34219, category);
		} // 0xE145864DECC34219 undefined b1232
		static void MISSIONDATA_SET_REPLAY_LOCKED_FOR_CATEGORY(Hash category, BOOL locked)
		{
			invoke<int>(0x957A830C9B4B99EA, category, locked);
		} // 0x957A830C9B4B99EA undefined b1232
		static void MISSIONDATA_TIMECYCLE_BOX_SET_MODIFIER_(const char* timecycleName)
		{
			invoke<int>(0x25855B1574BF8CD5, timecycleName);
		} // 0x25855B1574BF8CD5 undefined b1207
		static void MISSIONDATA_TIMECYCLE_BOX_DELETE_()
		{
			invoke<int>(0x7F89E15A8FB8DE97);
		} // 0x7F89E15A8FB8DE97 undefined b1207
		static BOOL MISSIONDATA_TIMECYCLE_BOX_EXISTS_()
		{
			return invoke<BOOL>(0x7E8F86A4FA33033C);
		} // 0x7E8F86A4FA33033C undefined b1207
	}

	namespace MONEY
	{
		static int MONEY_GET_CASH_BALANCE_()
		{
			return invoke<int>(0x0C02DABFA3B98176);
		} // 0x0C02DABFA3B98176 undefined b1207
		static BOOL MONEY_DECREMENT_CASH_BALANCE_(int amount)
		{
			return invoke<BOOL>(0x466BC8769CF26A7A, amount);
		} // 0x466BC8769CF26A7A undefined b1207
		static BOOL MONEY_INCREMENT_CASH_BALANCE_(int amount, Hash addReason)
		{
			return invoke<BOOL>(0xBC3422DC91667621, amount, addReason);
		} // 0xBC3422DC91667621 undefined b1207
		static const char* NETWORK_GET_STRING_CASH_BALANCE_()
		{
			return invoke<const char*>(0x282D36FF103D78DF);
		} // 0x282D36FF103D78DF undefined b1207
		static BOOL NETWORK_IS_MONEY_BALANCE_NOT_LESS_THAN_(int cashBalance, int goldBarBalance)
		{
			return invoke<BOOL>(0xAEC5F0119867E457, cashBalance, goldBarBalance);
		} // 0xAEC5F0119867E457 undefined b1207
		static const char* N0xA46FD001D1BE896C()
		{
			return invoke<const char*>(0xA46FD001D1BE896C);
		} // 0xA46FD001D1BE896C undefined b1207
		static BOOL N0x07AD9E43FD478527(Any p0, Any p1)
		{
			return invoke<BOOL>(0x07AD9E43FD478527, p0, p1);
		} // 0x07AD9E43FD478527 undefined b1207
		static int NETWORK_GET_CASH_BALANCE_()
		{
			return invoke<int>(0x8A67120DBC299525);
		} // 0x8A67120DBC299525 undefined b1207
	}

	namespace NETSHOPPING
	{
		static BOOL CASHINVENTORY_INIT_SESSION_STATUS(int* p0, int* p1)
		{
			return invoke<BOOL>(0xC019112F8995DC1C, p0, p1);
		} // 0xC019112F8995DC1C undefined b1207
		static BOOL CASHINVENTORY_IS_SESSION_READY_()
		{
			return invoke<BOOL>(0xFCC24220FDDAC929);
		} // 0xFCC24220FDDAC929 undefined b1207
		static BOOL CASHINVENTORY_IS_CONNECTION_FAULTED()
		{
			return invoke<BOOL>(0x6CE9FB6332B5E46E);
		} // 0x6CE9FB6332B5E46E undefined b1207
		static BOOL CASHINVENTORY_INIT_SESSION_IS_FAULTED_()
		{
			return invoke<BOOL>(0xD1CE92D1D9BE170A);
		} // 0xD1CE92D1D9BE170A undefined b1207
		static BOOL CASHINVENTORY_TRANSACTION_FIRE_AND_FORGET_ITEM_(Hash actionHash, int* id, Any* item, int p3)
		{
			return invoke<BOOL>(0xFFEA09CCEC4AF32F, actionHash, id, item, p3);
		} // 0xFFEA09CCEC4AF32F undefined b1207
		static BOOL CASHINVENTORY_TRANSACTION_START_(int* id, Hash type, Hash actionHash)
		{
			return invoke<BOOL>(0xF039EC27F4490E96, id, type, actionHash);
		} // 0xF039EC27F4490E96 undefined b1207
		static BOOL CASHINVENTORY_TRANSACTION_GET_BASKET_IS_VALID_(int id)
		{
			return invoke<BOOL>(0x52A226ADF4A270D2, id);
		} // 0x52A226ADF4A270D2 undefined b1207
		static BOOL CASHINVENTORY_TRANSACTION_DELETE_(int id)
		{
			return invoke<BOOL>(0x59EF5D516E2D96B9, id);
		} // 0x59EF5D516E2D96B9 undefined b1207
		static int CASHINVENTORY_TRANSACTION_VALIDATE_ITEM_(Hash p0, Any* p1)
		{
			return invoke<int>(0x6C9F12700BCE69F4, p0, p1);
		} // 0x6C9F12700BCE69F4 undefined b1207
		static int N0x38640A8C2DEF011B(int p0)
		{
			return invoke<int>(0x38640A8C2DEF011B, p0);
		} // 0x38640A8C2DEF011B undefined b1311
		static BOOL N0xA3B8D31C13CB4239(int p0, Hash p1, Any* p2, int p3, Any* p4, int p5)
		{
			return invoke<BOOL>(0xA3B8D31C13CB4239, p0, p1, p2, p3, p4, p5);
		} // 0xA3B8D31C13CB4239 undefined b1311
		static BOOL CASHINVENTORY_TRANSACTION_ADD_AWARD_(int id, Hash hash, Any* p2, Any* p3)
		{
			return invoke<BOOL>(0x52BDE32F21BA3B6D, id, hash, p2, p3);
		} // 0x52BDE32F21BA3B6D undefined b1207
		static BOOL CASHINVENTORY_TRANSACTION_GET_ITEM_INFO_(int id, int index, Any* itemInfo)
		{
			return invoke<BOOL>(0x7616B5F0895C2D99, id, index, itemInfo);
		} // 0x7616B5F0895C2D99 undefined b1207
		static int CASHINVENTORY_TRANSACTION_GET_NUM_OF_ITEMS_(int id)
		{
			return invoke<int>(0xCF2D04D076847478, id);
		} // 0xCF2D04D076847478 undefined b1207
		static Hash CASHINVENTORY_TRANSACTION_GET_ACTION_(int id)
		{
			return invoke<Hash>(0xBD2D520C51CCFF52, id);
		} // 0xBD2D520C51CCFF52 undefined b1207
		static BOOL CASHINVENTORY_TRANSACTION_CHECKOUT_(int id)
		{
			return invoke<BOOL>(0x592BC00BF6629BE7, id);
		} // 0x592BC00BF6629BE7 undefined b1207
		static BOOL CASHINVENTORY_TRANSACTION_CHECKOUT_STATUS_(int id, int* status)
		{
			return invoke<BOOL>(0x26C008791D066F37, id, status);
		} // 0x26C008791D066F37 undefined b1207
		static int N0xB6F4557060EF0FB4(int p0, int p1)
		{
			return invoke<int>(0xB6F4557060EF0FB4, p0, p1);
		} // 0xB6F4557060EF0FB4 undefined b1207
		static BOOL CASHINVENTORY_TRANSACTION_RESPONSE_GET_ITEM_INFO_(int id, int index, Any* itemInfo)
		{
			return invoke<BOOL>(0x98412398BBE73F61, id, index, itemInfo);
		} // 0x98412398BBE73F61 undefined b1207
		static BOOL N0xCE54C9ABE6FBC6DB(Hash p0)
		{
			return invoke<BOOL>(0xCE54C9ABE6FBC6DB, p0);
		} // 0xCE54C9ABE6FBC6DB undefined b1207
		static BOOL N0xA0B7094629724974(Hash p0, Any p1)
		{
			return invoke<BOOL>(0xA0B7094629724974, p0, p1);
		} // 0xA0B7094629724974 undefined b1207
		static BOOL N0x92A32BA29622763F(int id, int index, Any* p2)
		{
			return invoke<BOOL>(0x92A32BA29622763F, id, index, p2);
		} // 0x92A32BA29622763F undefined b1207
		static BOOL N0x3FA09DD57B93C0DE(Hash p0, int p1, int p2, Any p3, int p4)
		{
			return invoke<BOOL>(0x3FA09DD57B93C0DE, p0, p1, p2, p3, p4);
		} // 0x3FA09DD57B93C0DE undefined b1207
		static BOOL N0xD1555FBC96C88444(Hash p0, int p1, int p2, Any p3, int p4)
		{
			return invoke<BOOL>(0xD1555FBC96C88444, p0, p1, p2, p3, p4);
		} // 0xD1555FBC96C88444 undefined b1207
	}

	namespace NETWORK
	{
		static BOOL NETWORK_IS_SIGNED_ONLINE()
		{
			return invoke<BOOL>(0x1077788E268557C2);
		} // 0x1077788E268557C2 0x6E5BDCE2 b1207
		// Hardcoded to return zero.
		//
		// ==== PS4 specific info ====
		//
		// Returns some sort of unavailable reason:
		// -1 = REASON_INVALID
		//  0 = REASON_OTHER
		//  1 = REASON_SYSTEM_UPDATE
		//  2 = REASON_GAME_UPDATE
		//  3 = REASON_SIGNED_OUT
		//  4 = REASON_AGE
		//  5 = REASON_CONNECTION
		//
		// =================================
		static int NETWORK_GET_NP_UNAVAILABLE_REASON()
		{
			return invoke<int>(0x74FB3E29E6D10FA9);
		} // 0x74FB3E29E6D10FA9  b1207
		// Returns whether the signed-in user has valid Rockstar Online Services (ROS) credentials.
		static BOOL NETWORK_HAS_VALID_ROS_CREDENTIALS()
		{
			return invoke<BOOL>(0x85443FF4C328F53B);
		} // 0x85443FF4C328F53B 0x3FB40673 b1207
		static BOOL NETWORK_IS_CLOUD_AVAILABLE()
		{
			return invoke<BOOL>(0x9A4CF4F48AD77302);
		} // 0x9A4CF4F48AD77302 0xC7FF5AFC b1207
		static BOOL NETWORK_HAS_SOCIAL_CLUB_ACCOUNT()
		{
			return invoke<BOOL>(0x67A5589628E0CFF6);
		} // 0x67A5589628E0CFF6 0x66EC713F b1207
		// If you are host, returns true else returns false.
		static BOOL NETWORK_IS_HOST()
		{
			return invoke<BOOL>(0x8DB296B814EDDA07);
		} // 0x8DB296B814EDDA07 0xE46AC10F b1207
		static BOOL NETWORK_HAVE_ONLINE_PRIVILEGES()
		{
			return invoke<BOOL>(0x25CB5A9F37BFD063);
		} // 0x25CB5A9F37BFD063 0xEF63BFDF b1207
		static BOOL NETWORK_CHECK_USER_CONTENT_PRIVILEGES(int p0)
		{
			return invoke<BOOL>(0x595F028698072DD9, p0);
		} // 0x595F028698072DD9 0xBB54AA3D b1207
		static BOOL NETWORK_CHECK_COMMUNICATION_PRIVILEGES(int p0)
		{
			return invoke<BOOL>(0x83F28CE49FBBFFBA, p0);
		} // 0x83F28CE49FBBFFBA 0xA79E5B05 b1207
		static BOOL NETWORK_CAN_VIEW_GAMER_USER_CONTENT(Any* gamerHandle)
		{
			return invoke<BOOL>(0x246545C37C27A717, gamerHandle);
		} // 0x246545C37C27A717 undefined b1207
		static BOOL N0xF23A6D6C11D8EC15(Any* gamerHandle)
		{
			return invoke<BOOL>(0xF23A6D6C11D8EC15, gamerHandle);
		} // 0xF23A6D6C11D8EC15 undefined b1207
		// Stadia only; always returns -1 on other platforms. p0 may be a BOOL.
		static int N0x3E8CCE6769DB5F34(int p0)
		{
			return invoke<int>(0x3E8CCE6769DB5F34, p0);
		} // 0x3E8CCE6769DB5F34 undefined b1207
		static void NETWORK_SHOW_ACCOUNT_UPGRADE_UI()
		{
			invoke<int>(0x83FE8D7229593017);
		} // 0x83FE8D7229593017  b1207
		// Hardcoded to return false.
		static BOOL NETWORK_IS_PROMOTION_ENABLED()
		{
			return invoke<BOOL>(0x8FF6059DA26E688A);
		} // 0x8FF6059DA26E688A undefined b1207
		// Hardcoded to return false.
		static BOOL NETWORK_IS_CUSTOM_UPSELL_ENABLED()
		{
			return invoke<BOOL>(0x78A9535AF83715C6);
		} // 0x78A9535AF83715C6 undefined b1207
		// Hardcoded to return false.
		static BOOL NETWORK_SHOULD_SHOW_PROMOTION_DLG()
		{
			return invoke<BOOL>(0xDA4B1A479C414FB2);
		} // 0xDA4B1A479C414FB2 undefined b1207
		// nullsub, doesn't do anything
		static void N0xFC6FCF4C03F1BBF6()
		{
			invoke<int>(0xFC6FCF4C03F1BBF6);
		} // 0xFC6FCF4C03F1BBF6 undefined b1207
		// nullsub, doesn't do anything
		static Any N0x160F0CE6D76A39C9()
		{
			return invoke<Any>(0x160F0CE6D76A39C9);
		} // 0x160F0CE6D76A39C9 undefined b1207
		// Hardcoded to return zero.
		static int NETWORK_GET_PROMOTION_DLG_SEEN_COUNT()
		{
			return invoke<int>(0x2FB53C631A49BE92);
		} // 0x2FB53C631A49BE92 undefined b1207
		static void N0xE5FF65CFF5160752()
		{
			invoke<int>(0xE5FF65CFF5160752);
		} // 0xE5FF65CFF5160752 undefined b1207
		static BOOL NETWORK_CAN_ACCESS_MULTIPLAYER(int* loadingState)
		{
			return invoke<BOOL>(0xAF50DA1A3F8B1BA4, loadingState);
		} // 0xAF50DA1A3F8B1BA4 0xA520B982 b1207
		static BOOL NETWORK_CHECK_ACCESS_AND_ALERT_IF_FAIL()
		{
			return invoke<BOOL>(0x2A8112A974DE1EF6);
		} // 0x2A8112A974DE1EF6 undefined b1207
		static int NETWORK_GET_GLOBAL_ENTITY_FLAGS_(Entity entity)
		{
			return invoke<int>(0xDD7806FD0543BC3D, entity);
		} // 0xDD7806FD0543BC3D undefined b1207
		static void N0xA95470DA137587F5(BOOL p0)
		{
			invoke<int>(0xA95470DA137587F5, p0);
		} // 0xA95470DA137587F5 undefined b1207
		static Any N0xBB697756309D77EE(BOOL p0)
		{
			return invoke<Any>(0xBB697756309D77EE, p0);
		} // 0xBB697756309D77EE undefined b1207
		static BOOL NETWORK_HAS_COMPLETED_MP_INTRO_FLOW_ON_CURRENT_SLOT_()
		{
			return invoke<BOOL>(0xDD73C9838CE7181D);
		} // 0xDD73C9838CE7181D undefined b1207
		static BOOL NETWORK_SET_COMPLETED_MP_INTRO_FLOW_ON_CURRENT_SLOT(BOOL completed)
		{
			return invoke<BOOL>(0x2C5BD9A43987AA27, completed);
		} // 0x2C5BD9A43987AA27 undefined b1207
		static BOOL N0xD7D0DF27CB1765B5(int p0)
		{
			return invoke<BOOL>(0xD7D0DF27CB1765B5, p0);
		} // 0xD7D0DF27CB1765B5 undefined b1355
		static BOOL NETWORK_SET_MP_MISSION_FLAG_ON_CURRENT_SLOT(BOOL enabled, int flagIndex)
		{
			return invoke<BOOL>(0x86FD10251A7118A4, enabled, flagIndex);
		} // 0x86FD10251A7118A4 undefined b1207
		static void N0x3E74A687A73979C6(BOOL p0)
		{
			invoke<int>(0x3E74A687A73979C6, p0);
		} // 0x3E74A687A73979C6 undefined b1207
		// Checks for session flag 'SF_PRIVATE'
		static BOOL NETWORK_SESSION_IS_PRIVATE()
		{
			return invoke<BOOL>(0xCEF70AA5B3F89BA1);
		} // 0xCEF70AA5B3F89BA1 0xDB67785D b1207
		// Note: this native was added in build 1311.23
		static void NETWORK_SESSION_GET_SESSION_ID_(Any* sessionId)
		{
			invoke<int>(0xE9B356C330C0A806, sessionId);
		} // 0xE9B356C330C0A806 undefined b1311
		// Note: this native was added in build 1311.23
		static BOOL NETWORK_SESSION_ARE_SESSION_IDS_EQUAL_(Any* sessionId1, Any* sessionId2)
		{
			return invoke<BOOL>(0x4DEC5000F7B508F0, sessionId1, sessionId2);
		} // 0x4DEC5000F7B508F0 undefined b1311
		// flags:
		// enum eSessionRequestOptionFlags
		// {
		// 	SESSION_REQUEST_OPTION_FLAG_INCLUDE_GANG_MEMBERS = (1 << 1),
		// 	SESSION_REQUEST_OPTION_FLAG_LEADER_KEEPS_GANG = (1 << 7),
		// };
		//
		// seamlessType:
		// enum eSeamlessType
		// {
		// 	SEAMLESS_TYPE_NORMAL,
		// 	SEAMLESS_TYPE_PVE,
		// 	SEAMLESS_TYPE_DEV,
		// 	SEAMLESS_TYPE_NO_SEAMLESS
		// };
		static BOOL NETWORK_REQUEST_SESSION_SEAMLESS(int flags, int seamlessType, Any* sessionRequestId)
		{
			return invoke<BOOL>(0x04019AE4956D4393, flags, seamlessType, sessionRequestId);
		} // 0x04019AE4956D4393 undefined b1207
		// Equivalent to NETWORK_REQUEST_SESSION_SEAMLESS if userHash == 0.
		// Otherwise it is equivalent to NETWORK_SESSION_REQUEST_SESSION_COMPETITIVE(flags, MATCHTYPE_SEAMLESS, userHash, 0, sessionRequestId);
		//
		// p1 is unused
		static BOOL NETWORK_SESSION_REQUEST_SESSION_SEAMLESS(int flags, int seamlessType, int userHash, Any* sessionRequestId)
		{
			return invoke<BOOL>(0x2989E131FDE37E97, flags, seamlessType, userHash, sessionRequestId);
		} // 0x2989E131FDE37E97 undefined b1207
		// matchType:
		// enum eMatchType
		// {
		// 	MATCHTYPE_DEPRECATED,
		// 	MATCHTYPE_UGCPLAYLIST,
		// 	MATCHTYPE_UGCMISSION,
		// 	MATCHTYPE_MINIGAME,
		// 	MATCHTYPE_SEAMLESS,
		// 	MATCHTYPE_PRIVATE_DO_NOT_USE
		// };
		static BOOL NETWORK_SESSION_REQUEST_SESSION_COMPETITIVE(int flags, int matchType, int userHash, int p3, Any* sessionRequestId)
		{
			return invoke<BOOL>(0x309BBEBEA8A3986C, flags, matchType, userHash, p3, sessionRequestId);
		} // 0x309BBEBEA8A3986C undefined b1207
		// Session flag 'SF_PRIVATE' is set internally
		// p1 represents max amount of players in private session
		static BOOL NETWORK_SESSION_REQUEST_SESSION_PRIVATE(int flags, int numPlayers, int userHash, Any* sessionRequestId)
		{
			return invoke<BOOL>(0x39A8EF7AF29A192C, flags, numPlayers, userHash, sessionRequestId);
		} // 0x39A8EF7AF29A192C undefined b1207
		// category:
		// enum eOnCallType
		// {
		// 	NETWORK_SESSION_REQUEST_ON_CALL_TYPE_STORY = 2,
		// 	NETWORK_SESSION_REQUEST_ON_CALL_TYPE_MATCH = 3
		// };
		static BOOL NETWORK_SESSION_REQUEST_SESSION_ON_CALL_(int flags, int category, Any* p2, int userHash, Any* sessionRequestId)
		{
			return invoke<BOOL>(0x23D9C1F2E4098EDC, flags, category, p2, userHash, sessionRequestId);
		} // 0x23D9C1F2E4098EDC undefined b1207
		static BOOL NETWORK_SESSION_REQUEST_SESSION_NOMINATED_(int flags, int userHash, int p2, Any* sessionRequestId)
		{
			return invoke<BOOL>(0x4F4672457FF597D1, flags, userHash, p2, sessionRequestId);
		} // 0x4F4672457FF597D1 undefined b1436
		static BOOL NETWORK_SESSION_IS_SESSION_REQUEST_ID_VALID(Any* sessionRequestId)
		{
			return invoke<BOOL>(0x2F54B146D3EDCE4D, sessionRequestId);
		} // 0x2F54B146D3EDCE4D undefined b1207
		static int NETWORK_SESSION_GET_SESSION_TYPE()
		{
			return invoke<int>(0xF0C0C94B404206FA);
		} // 0xF0C0C94B404206FA undefined b1207
		static int N0x1413B6BF27AB7A95()
		{
			return invoke<int>(0x1413B6BF27AB7A95);
		} // 0x1413B6BF27AB7A95 undefined b1207
		static BOOL NETWORK_SESSION_IS_ANY_REQUEST_IN_PROGRESS()
		{
			return invoke<BOOL>(0xBAFFDE5F953720D9);
		} // 0xBAFFDE5F953720D9 undefined b1207
		static BOOL N0xAFA14F98327791CE(Any* sessionRequestId)
		{
			return invoke<BOOL>(0xAFA14F98327791CE, sessionRequestId);
		} // 0xAFA14F98327791CE undefined b1207
		static BOOL NETWORK_SESSION_IS_REQUEST_IN_PROGRESS(Any* sessionRequestId)
		{
			return invoke<BOOL>(0x8FB7C254CFCBF78E, sessionRequestId);
		} // 0x8FB7C254CFCBF78E undefined b1207
		static BOOL NETWORK_SESSION_IS_REQUEST_IN_PROGRESS_BY_QUEUE_GROUP_(int queueGroup)
		{
			return invoke<BOOL>(0x9E762A595CF88E4A, queueGroup);
		} // 0x9E762A595CF88E4A undefined b1207
		static BOOL NETWORK_SESSION_CANCEL_REQUEST_(Any* sessionRequestId)
		{
			return invoke<BOOL>(0xE72E5C1289BD1F40, sessionRequestId);
		} // 0xE72E5C1289BD1F40 undefined b1207
		static void N0xA6F1BAABFF6AD7B9(Any* p0)
		{
			invoke<int>(0xA6F1BAABFF6AD7B9, p0);
		} // 0xA6F1BAABFF6AD7B9 undefined b1207
		// Returns result of session request:
		// 0 - NOT_FOUND
		// 1 - IN_PROGRESS
		// 2 - TIMEOUT
		// 3 - PLAYER_OFFLINE
		// 4 - GANG_MEMBERS_CHANGED
		// 5 - PLAYER_CANCELLED
		// 6 - PLAYER_SET_TOO_LARGE
		// 7 - MATCH_ACCEPTED
		// 8 - OTHER
		static int NETWORK_SESSION_GET_SESSION_REQUEST_RESULT_(Any* sessionRequestId, int* p1)
		{
			return invoke<int>(0x0DD051B1BF4B8BD6, sessionRequestId, p1);
		} // 0x0DD051B1BF4B8BD6 undefined b1207
		static BOOL NETWORK_SESSION_IS_REQUEST_PENDING_TRANSITION(Any* sessionRequestId)
		{
			return invoke<BOOL>(0xCCF878D50F8AB10D, sessionRequestId);
		} // 0xCCF878D50F8AB10D undefined b1207
		static BOOL NETWORK_SESSION_TRANSITION_TO_SESSION_(Any* sessionRequestId)
		{
			return invoke<BOOL>(0xF20B18A330E6DB5C, sessionRequestId);
		} // 0xF20B18A330E6DB5C undefined b1207
		static BOOL NETWORK_SESSION_IS_NSRR_SUCCESS_(Any* sessionRequestId)
		{
			return invoke<BOOL>(0x0F44A5C78D114922, sessionRequestId);
		} // 0x0F44A5C78D114922 undefined b1207
		static BOOL NETWORK_SESSION_LEFT_QUEUE_OR_REQUESTED_SESSION(Any* sessionRequestId)
		{
			return invoke<BOOL>(0xECE6A0C1B59CD8BE, sessionRequestId);
		} // 0xECE6A0C1B59CD8BE undefined b1207
		static BOOL NETWORK_SESSION_LEAVE_SESSION()
		{
			return invoke<BOOL>(0x17C21B7319A05047);
		} // 0x17C21B7319A05047 undefined b1207
		static BOOL NETWORK_SESSION_IS_TRANSITIONING()
		{
			return invoke<BOOL>(0xF2CBC969C4F090C7);
		} // 0xF2CBC969C4F090C7 undefined b1207
		// Only used in R* Script startup_clip
		static void N0xFD4272A137703449()
		{
			invoke<int>(0xFD4272A137703449);
		} // 0xFD4272A137703449 undefined b1207
		// Only used in R* Script net_rolling_playlist
		static void NETWORK_SESSION_PLAYLIST_GO_TO_NEXT_CONTENT_()
		{
			invoke<int>(0xBDE605F925B07127);
		} // 0xBDE605F925B07127 undefined b1436
		// Only used in R* Script net_rolling_playlist
		static void NETWORK_SESSION_PLAYLIST_GET_UPCOMING_CONTENT_()
		{
			invoke<int>(0x8F9DB6CD03B42B58);
		} // 0x8F9DB6CD03B42B58 undefined b1436
		static void NETWORK_DISABLE_REALTIME_MULTIPLAYER()
		{
			invoke<int>(0x236905C700FDB54D);
		} // 0x236905C700FDB54D  b1207
		// Only used in R* Script fm_race_controller
		static void N0x71FA2D1880C48032(BOOL p0)
		{
			invoke<int>(0x71FA2D1880C48032, p0);
		} // 0x71FA2D1880C48032 undefined b1207
		static void NETWORK_GET_GLOBAL_MULTIPLAYER_CLOCK(int* hours, int* minutes, int* seconds)
		{
			invoke<int>(0x6D03BFBD643B2A02, hours, minutes, seconds);
		} // 0x6D03BFBD643B2A02 0x74E8C53E b1207
		static void NETWORK_CLEAR_CLOCK_TIME_OVERRIDE()
		{
			invoke<int>(0xD972DF67326F966E);
		} // 0xD972DF67326F966E 0xC4AEAF49 b1207
		static BOOL NETWORK_IS_CLOCK_TIME_OVERRIDDEN()
		{
			return invoke<BOOL>(0xD7C95D322FF57522);
		} // 0xD7C95D322FF57522 0x2465296D b1207
		static BOOL NETWORK_GET_GLOBAL_CLOCK(int* hour, int* minute, int* second)
		{
			return invoke<BOOL>(0x11A7ADCD629E170F, hour, minute, second);
		} // 0x11A7ADCD629E170F undefined b1207
		static void NETWORK_CLOCK_TIME_OVERRIDE_(int hour, int minute, int second, int transitionTime, BOOL pauseClock)
		{
			invoke<int>(0x669E223E64B1903C, hour, minute, second, transitionTime, pauseClock);
		} // 0x669E223E64B1903C undefined b1207
		static void NETWORK_CLOCK_TIME_OVERRIDE_2_(int hour, int minute, int second, int transitionTime, BOOL pauseClock, BOOL clockwise)
		{
			invoke<int>(0xE28C13ECC36FF14E, hour, minute, second, transitionTime, pauseClock, clockwise);
		} // 0xE28C13ECC36FF14E undefined b1207
		static void NETWORK_CLEAR_CLOCK_OVERRIDE_OVERTIME_(int milliseconds)
		{
			invoke<int>(0x65F040D91001ED4B, milliseconds);
		} // 0x65F040D91001ED4B undefined b1207
		static BOOL N0x0E54D4DA6018FF8E()
		{
			return invoke<BOOL>(0x0E54D4DA6018FF8E);
		} // 0x0E54D4DA6018FF8E undefined b1207
		static BOOL NETWORK_IS_FINDING_GAMERS()
		{
			return invoke<BOOL>(0xDDDF64C91BFCF0AA);
		} // 0xDDDF64C91BFCF0AA 0xA6DAA79F b1207
		static BOOL NETWORK_DID_FIND_GAMERS_SUCCEED()
		{
			return invoke<BOOL>(0xF9B83B77929D8863);
		} // 0xF9B83B77929D8863 0xBEDC4503 b1207
		static int N0x7BCA0A3972708436(Any* outData, int p1)
		{
			return invoke<int>(0x7BCA0A3972708436, outData, p1);
		} // 0x7BCA0A3972708436 undefined b1207
		static void NETWORK_CLEAR_FOUND_GAMERS()
		{
			invoke<int>(0x6D14CCEE1B40381A);
		} // 0x6D14CCEE1B40381A 0x6AA9A154 b1207
		static BOOL NETWORK_GET_GAMER_SESSION_FROM_HANDLE_(Any* data, int count)
		{
			return invoke<BOOL>(0xFBDFE1C1356E12E8, data, count);
		} // 0xFBDFE1C1356E12E8 undefined b1207
		static BOOL NETWORK_HAS_CURRENT_GET_GAMER_STATUS_STARTED_()
		{
			return invoke<BOOL>(0x25189F9908E9CD65);
		} // 0x25189F9908E9CD65 undefined b1207
		static BOOL NETWORK_DID_GET_GAMER_STATUS_SUCCEED()
		{
			return invoke<BOOL>(0x5AE17C6B0134B7F1);
		} // 0x5AE17C6B0134B7F1 0xC871E745 b1207
		static int NETWORK_GET_GAMER_STATUS_(Any* gamerHandle, int p1)
		{
			return invoke<int>(0xDDAEB478E58F8DEA, gamerHandle, p1);
		} // 0xDDAEB478E58F8DEA undefined b1207
		static void NETWORK_CLEAR_GET_GAMER_STATUS()
		{
			invoke<int>(0x86E0660E4F5C956D);
		} // 0x86E0660E4F5C956D 0x3F7EDBBD b1207
		static void NETWORK_SET_SCRIPT_READY_FOR_EVENTS(BOOL toggle)
		{
			invoke<int>(0x7AC752103856FB20, toggle);
		} // 0x7AC752103856FB20 0xA639DCA2 b1207
		// Note: this native was added in build 1311.23
		static BOOL N0x316FD416C432C761()
		{
			return invoke<BOOL>(0x316FD416C432C761);
		} // 0x316FD416C432C761 undefined b1311
		// Note: this native was added in build 1311.23
		static BOOL N0x062842D61D0D53FD()
		{
			return invoke<BOOL>(0x062842D61D0D53FD);
		} // 0x062842D61D0D53FD undefined b1311
		static BOOL NETWORK_IS_GAME_IN_PROGRESS()
		{
			return invoke<BOOL>(0x10FAB35428CCC9D7);
		} // 0x10FAB35428CCC9D7 0x09B88E3E b1207
		static BOOL NETWORK_IS_SESSION_ACTIVE()
		{
			return invoke<BOOL>(0xD83C2B94E7508980);
		} // 0xD83C2B94E7508980 0x715CB8C4 b1207
		static BOOL NETWORK_IS_IN_SESSION()
		{
			return invoke<BOOL>(0xCA97246103B63917);
		} // 0xCA97246103B63917 0x4BC4105E b1207
		// Hardcoded to return false.
		static BOOL NETWORK_IS_IN_SESSION_LOBBY_()
		{
			return invoke<BOOL>(0xC5196C42DE19F646);
		} // 0xC5196C42DE19F646 undefined b1207
		static BOOL NETWORK_IS_SESSION_STARTED()
		{
			return invoke<BOOL>(0x9DE624D2FC4B603F);
		} // 0x9DE624D2FC4B603F 0x9D854A37 b1207
		static BOOL NETWORK_CAN_SESSION_END()
		{
			return invoke<BOOL>(0x4EEBC3694E49C572);
		} // 0x4EEBC3694E49C572 0xE1FCCDBA b1207
		static int NETWORK_GET_GAME_MODE()
		{
			return invoke<int>(0x225640E09EFFDC3F);
		} // 0x225640E09EFFDC3F undefined b1207
		// enum eSessionFlags
		// {
		// 	SESSION_FLAG_NONE = 0,
		// 	SF_INSTANCE = (1 << 0),
		// 	SF_MATCH = (1 << 1),
		// 	SF_PRIVATE = (1 << 2),
		// 	SF_BLOCK_INVITES = (1 << 3),
		// 	SF_BLOCK_JOIN_VIA_PRESENCE = (1 << 4),
		// 	SF_BLOCK_NON_HOST_INVITES = (1 << 5),
		// 	SF_BLOCK_IN_PROGRESS_MATCHMAKING_BACKFILL = (1 << 6),
		// 	SF_BLOCK_IN_GAMEPLAY_MATCHMAKING_BACKFILL = (1 << 7),
		// 	SF_BLOCK_INVITES_TEMPORARY = (1 << 8),
		// 	SF_IN_GAMEPLAY = (1 << 9),
		// 	SF_COMPETITIVE = (1 << 10),
		// 	SF_MATCHMAKING_BACKFILL_IS_BLOCKED = (1 << 11)
		// };
		static BOOL NETWORK_SESSION_ADD_SESSION_FLAGS_(int flags)
		{
			return invoke<BOOL>(0xE546BDA1B3E288EE, flags);
		} // 0xE546BDA1B3E288EE undefined b1207
		// See _NETWORK_SESSION_ADD_SESSION_FLAGS
		static BOOL NETWORK_SESSION_REMOVE_SESSION_FLAGS(int flags)
		{
			return invoke<BOOL>(0x78335E12DB0BF961, flags);
		} // 0x78335E12DB0BF961 undefined b1207
		static int NETWORK_SESSION_GET_SESSION_FLAGS()
		{
			return invoke<int>(0x51F33DBC1A41CBFD);
		} // 0x51F33DBC1A41CBFD undefined b1207
		static BOOL NETWORK_SESSION_SET_PLAYER_FLAGS_(int flags)
		{
			return invoke<BOOL>(0x0AE241A4A9ADEEEC, flags);
		} // 0x0AE241A4A9ADEEEC undefined b1207
		static BOOL NETWORK_SESSION_REMOVE_PLAYER_FLAGS_(int flags)
		{
			return invoke<BOOL>(0x3215BBE34D3418C5, flags);
		} // 0x3215BBE34D3418C5 undefined b1207
		static Player NETWORK_GET_SESSION_HOST_()
		{
			return invoke<Player>(0x8DC9AA3B508B1A85);
		} // 0x8DC9AA3B508B1A85 undefined b1207
		static Any N0xD3A3C8B9F3BDEF81()
		{
			return invoke<Any>(0xD3A3C8B9F3BDEF81);
		} // 0xD3A3C8B9F3BDEF81 undefined b1207
		static BOOL N0x18B94666CF610AEB()
		{
			return invoke<BOOL>(0x18B94666CF610AEB);
		} // 0x18B94666CF610AEB undefined b1207
		static BOOL N0x981146E5C9CE9250(int inviteIndex)
		{
			return invoke<BOOL>(0x981146E5C9CE9250, inviteIndex);
		} // 0x981146E5C9CE9250 undefined b1207
		static int N0xBF8276E51761F9DA()
		{
			return invoke<int>(0xBF8276E51761F9DA);
		} // 0xBF8276E51761F9DA undefined b1207
		static BOOL N0xDCA4A74135E1DEA5(Any p0)
		{
			return invoke<BOOL>(0xDCA4A74135E1DEA5, p0);
		} // 0xDCA4A74135E1DEA5 undefined b1207
		static BOOL NETWORK_HAS_PENDING_INVITE_FAILURE()
		{
			return invoke<BOOL>(0xD0498AD30E16B6BD);
		} // 0xD0498AD30E16B6BD undefined b1207
		static BOOL NETWORK_CAN_RECEIVE_INVITE_FROM_HANDLE_(Any* gamerHandle)
		{
			return invoke<BOOL>(0xF23D6475640D29EB, gamerHandle);
		} // 0xF23D6475640D29EB undefined b1207
		static void N0x704F92B3AF20D857(BOOL setting)
		{
			invoke<int>(0x704F92B3AF20D857, setting);
		} // 0x704F92B3AF20D857 undefined b1207
		static void N0xF342F6BD0A8287D5(Any p0)
		{
			invoke<int>(0xF342F6BD0A8287D5, p0);
		} // 0xF342F6BD0A8287D5 undefined b1207
		static void N0xD39A72AE5EBD57E5()
		{
			invoke<int>(0xD39A72AE5EBD57E5);
		} // 0xD39A72AE5EBD57E5 undefined b1207
		static BOOL NETWORK_SEND_SESSION_INVITE_(Any* gamerHandle, const char* contentId, Any* data, int dataSize, int p4, int flags)
		{
			return invoke<BOOL>(0xE47001B7CB8B98AE, gamerHandle, contentId, data, dataSize, p4, flags);
		} // 0xE47001B7CB8B98AE undefined b1207
		static BOOL N0xD1FFB246F4E088AC(int p0)
		{
			return invoke<BOOL>(0xD1FFB246F4E088AC, p0);
		} // 0xD1FFB246F4E088AC undefined b1207
		static int N0x27B1AE4D8C652F08(int p0)
		{
			return invoke<int>(0x27B1AE4D8C652F08, p0);
		} // 0x27B1AE4D8C652F08 undefined b1207
		static int N0x6C27442A225A241A(int p0)
		{
			return invoke<int>(0x6C27442A225A241A, p0);
		} // 0x6C27442A225A241A undefined b1207
		static const char* N0xE59F4924BD3A718D(int p0)
		{
			return invoke<const char*>(0xE59F4924BD3A718D, p0);
		} // 0xE59F4924BD3A718D undefined b1207
		// Note: this native was added in build 1436.31
		static int N0x78271BC02AE9AF83(int p0)
		{
			return invoke<int>(0x78271BC02AE9AF83, p0);
		} // 0x78271BC02AE9AF83 undefined b1436
		static BOOL N0x16EFB123C4451032(int p0, Any* gamerHandle)
		{
			return invoke<BOOL>(0x16EFB123C4451032, p0, gamerHandle);
		} // 0x16EFB123C4451032 undefined b1207
		static const char* N0xE79BA3BC265895DA(int p0)
		{
			return invoke<const char*>(0xE79BA3BC265895DA, p0);
		} // 0xE79BA3BC265895DA undefined b1207
		static Any N0xC0CFFDA87C2C163D(int p0, Any p1, int p2)
		{
			return invoke<Any>(0xC0CFFDA87C2C163D, p0, p1, p2);
		} // 0xC0CFFDA87C2C163D undefined b1207
		static Any N0x5ED39DA62BEB1330(int p0)
		{
			return invoke<Any>(0x5ED39DA62BEB1330, p0);
		} // 0x5ED39DA62BEB1330 undefined b1207
		static BOOL NETWORK_ACCEPT_RS_INVITE(int p0)
		{
			return invoke<BOOL>(0xB2CEA5105AAC8DDE, p0);
		} // 0xB2CEA5105AAC8DDE undefined b1207
		static BOOL N0x3AA0CDC63696166D(int p0)
		{
			return invoke<BOOL>(0x3AA0CDC63696166D, p0);
		} // 0x3AA0CDC63696166D undefined b1207
		static int NETWORK_REQUEST_JOIN(Any p0)
		{
			return invoke<int>(0xE483BB6BE686F632, p0);
		} // 0xE483BB6BE686F632 undefined b1207
		static int N0xE8E633215471BB5D(Any p0)
		{
			return invoke<int>(0xE8E633215471BB5D, p0);
		} // 0xE8E633215471BB5D undefined b1207
		static BOOL N0xA2837A5E21FB5A58(Any p0)
		{
			return invoke<BOOL>(0xA2837A5E21FB5A58, p0);
		} // 0xA2837A5E21FB5A58 undefined b1207
		static BOOL N0xE39600E50D608693(Any p0, Any p1)
		{
			return invoke<BOOL>(0xE39600E50D608693, p0, p1);
		} // 0xE39600E50D608693 undefined b1207
		static BOOL N0xD7BAD4062074B9C1(Any p0)
		{
			return invoke<BOOL>(0xD7BAD4062074B9C1, p0);
		} // 0xD7BAD4062074B9C1 undefined b1207
		static int N0xCA58D4FD20D70F24(Any p0)
		{
			return invoke<int>(0xCA58D4FD20D70F24, p0);
		} // 0xCA58D4FD20D70F24 undefined b1207
		static BOOL N0xC028B3F52C707C49(Any p0)
		{
			return invoke<BOOL>(0xC028B3F52C707C49, p0);
		} // 0xC028B3F52C707C49 undefined b1207
		static BOOL NETWORK_IS_PLATFORM_INVITE_PENDING()
		{
			return invoke<BOOL>(0xFC4165C9165C166F);
		} // 0xFC4165C9165C166F undefined b1207
		static void N0x5B9C6AC118FD4774()
		{
			invoke<int>(0x5B9C6AC118FD4774);
		} // 0x5B9C6AC118FD4774 undefined b1207
		static int NETWORK_GET_PLATFORM_INVITE_ID_()
		{
			return invoke<int>(0x9BCF28FB5D65A9BE);
		} // 0x9BCF28FB5D65A9BE undefined b1207
		static BOOL NETWORK_ACTION_PLATFORM_INVITE()
		{
			return invoke<BOOL>(0x3B82ACC3F4B6240C);
		} // 0x3B82ACC3F4B6240C undefined b1207
		static void NETWORK_CLEAR_PLATFORM_INVITE()
		{
			invoke<int>(0xA4484173759749B1);
		} // 0xA4484173759749B1 undefined b1207
		static void N0x603469298A4308AF(BOOL p0)
		{
			invoke<int>(0x603469298A4308AF, p0);
		} // 0x603469298A4308AF undefined b1207
		// Returns value of fwuiCachedSetting "general.onlineNotificationsInStoryMode"
		static BOOL NETWORK_ARE_ONLINE_NOTIFICATIONS_SHOWN_IN_STORY_MODE_()
		{
			return invoke<BOOL>(0xF5C5929E07512F80);
		} // 0xF5C5929E07512F80 undefined b1207
		// Hardcoded to return false.
		static BOOL NETWORK_IS_IN_PLATFORM_PARTY()
		{
			return invoke<BOOL>(0x2FC5650B0271CB57);
		} // 0x2FC5650B0271CB57 0xA812B6CB b1207
		static BOOL NETWORK_ARE_PLAYERS_IN_SAME_PLATFORM_PARTY_(Any* gamerHandle1, Any* gamerHandle2)
		{
			return invoke<BOOL>(0x11820D1AE80DEA39, gamerHandle1, gamerHandle2);
		} // 0x11820D1AE80DEA39 undefined b1207
		// Hardcoded to return false.
		static BOOL NETWORK_IS_IN_PLATFORM_PARTY_CHAT()
		{
			return invoke<BOOL>(0xFD8B834A8BA05048);
		} // 0xFD8B834A8BA05048 0xC6609191 b1207
		static void NETWORK_SEED_RANDOM_NUMBER_GENERATOR(int seed)
		{
			invoke<int>(0xF1B84178F8674195, seed);
		} // 0xF1B84178F8674195 0x41702C8A b1207
		static int NETWORK_GET_RANDOM_INT_RANGED(int rangeStart, int rangeEnd)
		{
			return invoke<int>(0xE30CF56F1EFA5F43, rangeStart, rangeEnd);
		} // 0xE30CF56F1EFA5F43 0xF9B6426D b1207
		static void NETWORK_SET_THIS_SCRIPT_IS_NETWORK_SCRIPT(int maxNumMissionParticipants, BOOL p1, int instanceId)
		{
			invoke<int>(0x1CA59E306ECB80A5, maxNumMissionParticipants, p1, instanceId);
		} // 0x1CA59E306ECB80A5 0x470810ED b1207
		static BOOL NETWORK_GET_THIS_SCRIPT_IS_NETWORK_SCRIPT()
		{
			return invoke<BOOL>(0x2910669969E9535E);
		} // 0x2910669969E9535E 0xD9BF6549 b1207
		// Seems to always return 0, but it's used in quite a few loops.
		//
		// for (num3 = 0; num3 < NETWORK::0xCCD8C02D(); num3++)
		//     {
		//         if (NETWORK::NETWORK_IS_PARTICIPANT_ACTIVE(PLAYER::0x98F3B274(num3)) != 0)
		//         {
		//             var num5 = NETWORK::NETWORK_GET_PLAYER_INDEX(PLAYER::0x98F3B274(num3));
		static int NETWORK_GET_MAX_NUM_PARTICIPANTS()
		{
			return invoke<int>(0xA6C90FBC38E395EE);
		} // 0xA6C90FBC38E395EE 0xCCD8C02D b1207
		static int NETWORK_GET_NUM_PARTICIPANTS()
		{
			return invoke<int>(0x18D0456E86604654);
		} // 0x18D0456E86604654 0x3E25A3C5 b1207
		static int NETWORK_GET_SCRIPT_STATUS()
		{
			return invoke<int>(0x57D158647A6BFABF);
		} // 0x57D158647A6BFABF 0x2BE9235A b1207
		static void NETWORK_REGISTER_HOST_BROADCAST_VARIABLES(Any p0, Any p1, Any p2)
		{
			invoke<int>(0x3E9B2F01C50DF595, p0, p1, p2);
		} // 0x3E9B2F01C50DF595 0xDAF3B0AE b1207
		static int NETWORK_GET_SIZE_OF_HOST_BROADCAST_DATA_STORAGE_(int* p0)
		{
			return invoke<int>(0xBA24095EA96DFE17, p0);
		} // 0xBA24095EA96DFE17 undefined b1207
		static void NETWORK_REGISTER_PLAYER_BROADCAST_VARIABLES(Any p0, Any p1, Any p2)
		{
			invoke<int>(0x3364AA97340CA215, p0, p1, p2);
		} // 0x3364AA97340CA215 0xBE3D32B4 b1207
		static int NETWORK_GET_SIZE_OF_PLAYER_BROADCAST_DATA_STORAGE_(int* p0)
		{
			return invoke<int>(0x690806BC83BC8CA2, p0);
		} // 0x690806BC83BC8CA2 undefined b1207
		static BOOL NETWORK_HAS_RECEIVED_HOST_BROADCAST_DATA()
		{
			return invoke<BOOL>(0x5D10B3795F3FC886);
		} // 0x5D10B3795F3FC886 0x0B739F53 b1207
		static int NETWORK_GET_PLAYER_INDEX(Player player)
		{
			return invoke<int>(0x24FB80D107371267, player);
		} // 0x24FB80D107371267 0xBE1C1506 b1207
		static int NETWORK_GET_PARTICIPANT_INDEX(int index)
		{
			return invoke<int>(0x1B84DF6AF2A46938, index);
		} // 0x1B84DF6AF2A46938 0xC4D91094 b1207
		// Returns the Player associated to a given Ped when in an online session.
		static Player NETWORK_GET_PLAYER_INDEX_FROM_PED(Ped ped)
		{
			return invoke<Player>(0x6C0E2E0125610278, ped);
		} // 0x6C0E2E0125610278 0x40DBF464 b1207
		// Returns the amount of players connected in the current session. Only works when connected to a session/server.
		static int NETWORK_GET_NUM_CONNECTED_PLAYERS()
		{
			return invoke<int>(0xA4A79DD2D9600654);
		} // 0xA4A79DD2D9600654 0xF7952E62 b1207
		static BOOL NETWORK_IS_PLAYER_CONNECTED(Player player)
		{
			return invoke<BOOL>(0x93DC1BE4E1ABE9D1, player);
		} // 0x93DC1BE4E1ABE9D1 0x168EE2C2 b1207
		static int NETWORK_GET_TOTAL_NUM_PLAYERS()
		{
			return invoke<int>(0xCF61D4B4702EE9EB);
		} // 0xCF61D4B4702EE9EB 0xF4F13B06 b1207
		static BOOL NETWORK_IS_PARTICIPANT_ACTIVE(int p0)
		{
			return invoke<BOOL>(0x6FF8FF40B6357D45, p0);
		} // 0x6FF8FF40B6357D45 0x4E2C348B b1207
		static BOOL NETWORK_IS_PLAYER_ACTIVE(Player player)
		{
			return invoke<BOOL>(0xB8DFD30D6973E135, player);
		} // 0xB8DFD30D6973E135 0x43657B17 b1207
		static BOOL NETWORK_IS_PLAYER_A_PARTICIPANT(Player player)
		{
			return invoke<BOOL>(0x3CA58F6CB7CBD784, player);
		} // 0x3CA58F6CB7CBD784 0xB08B6992 b1207
		static BOOL NETWORK_IS_HOST_OF_THIS_SCRIPT()
		{
			return invoke<BOOL>(0x83CD99A1E6061AB5);
		} // 0x83CD99A1E6061AB5 0x6970BA94 b1207
		static Player NETWORK_GET_HOST_OF_THIS_SCRIPT()
		{
			return invoke<Player>(0xC7B4D79B01FA7A5C);
		} // 0xC7B4D79B01FA7A5C 0x89EA7B54 b1232
		static Player NETWORK_GET_HOST_OF_SCRIPT(const char* scriptName, int p1, int p2)
		{
			return invoke<Player>(0x1D6A14F1F9A736FC, scriptName, p1, p2);
		} // 0x1D6A14F1F9A736FC 0x9C95D0BB b1436
		static Player NETWORK_GET_HOST_OF_THREAD(int threadId)
		{
			return invoke<Player>(0xB4A25351D79B444C, threadId);
		} // 0xB4A25351D79B444C undefined b1207
		static void NETWORK_SET_MISSION_FINISHED()
		{
			invoke<int>(0x3B3D11CD9FFCDFC9);
		} // 0x3B3D11CD9FFCDFC9 0x3083FAD7 b1207
		static BOOL NETWORK_IS_SCRIPT_ACTIVE(const char* scriptName, int p1, BOOL p2, int p3)
		{
			return invoke<BOOL>(0x9D40DF90FAD26098, scriptName, p1, p2, p3);
		} // 0x9D40DF90FAD26098 0x4A65250C b1207
		static BOOL NETWORK_IS_SCRIPT_ACTIVE_BY_HASH(Hash scriptHash, int p1, BOOL p2, int p3)
		{
			return invoke<BOOL>(0x1B89BC43B6E69107, scriptHash, p1, p2, p3);
		} // 0x1B89BC43B6E69107 undefined b1207
		static BOOL NETWORK_IS_THREAD_ACTIVE_(int threadId)
		{
			return invoke<BOOL>(0x31DAD2CD6D49546E, threadId);
		} // 0x31DAD2CD6D49546E undefined b1207
		static int NETWORK_GET_INSTANCE_ID_OF_THREAD_(int threadId)
		{
			return invoke<int>(0xFB9ECED5B68F3B78, threadId);
		} // 0xFB9ECED5B68F3B78 undefined b1207
		static int NETWORK_GET_NUM_SCRIPT_PARTICIPANTS(const char* scriptName, int instanceId, Hash position)
		{
			return invoke<int>(0x3658E8CD94FC121A, scriptName, instanceId, position);
		} // 0x3658E8CD94FC121A 0x8F7D9F46 b1207
		static int NETWORK_GET_INSTANCE_ID_OF_THIS_SCRIPT()
		{
			return invoke<int>(0x638A3A81733086DB);
		} // 0x638A3A81733086DB 0xDB8B5D71 b1207
		static BOOL NETWORK_IS_PLAYER_A_PARTICIPANT_ON_SCRIPT(Player p0, Any* p1, Any p2)
		{
			return invoke<BOOL>(0x1AD5B71586B94820, p0, p1, p2);
		} // 0x1AD5B71586B94820 0xCEA55F4C b1207
		static void NETWORK_PREVENT_SCRIPT_HOST_MIGRATION()
		{
			invoke<int>(0x2302C0264EA58D31);
		} // 0x2302C0264EA58D31 0x8DCFE77D b1207
		static BOOL NETWORK_IS_FEATURE_SUPPORTED(int featureId)
		{
			return invoke<BOOL>(0x9C725D149622BFDE, featureId);
		} // 0x9C725D149622BFDE undefined b1207
		// Return the local Participant ID
		static Player PARTICIPANT_ID()
		{
			return invoke<Player>(0x90986E8876CE0A83);
		} // 0x90986E8876CE0A83 0x9C35A221 b1207
		// Return the local Participant ID.
		//
		// This native is exactly the same as 'PARTICIPANT_ID' native.
		static int PARTICIPANT_ID_TO_INT()
		{
			return invoke<int>(0x57A3BDDAD8E5AA0A);
		} // 0x57A3BDDAD8E5AA0A 0x907498B0 b1207
		static int NETWORK_GET_DESTROYER_OF_NETWORK_ID(int netId, Hash* weaponHash)
		{
			return invoke<int>(0x7A1ADEEF01740A24, netId, weaponHash);
		} // 0x7A1ADEEF01740A24 0x4FCA6436 b1207
		// _NETWORK_GET_A* - _NETWORK_GET_D*
		static Player N0x6CF82A7F65A5AD5F(Ped ped, Any* p1)
		{
			return invoke<Player>(0x6CF82A7F65A5AD5F, ped, p1);
		} // 0x6CF82A7F65A5AD5F undefined b1207
		// _NETWORK_GET_A* - _NETWORK_GET_D*
		static BOOL N0x236321F1178A5446(Player player, Ped ped, Any* p2)
		{
			return invoke<BOOL>(0x236321F1178A5446, player, ped, p2);
		} // 0x236321F1178A5446 undefined b1207
		static BOOL NETWORK_GET_ASSISTED_DAMAGE_OF_ENTITY(Player player, Entity entity, int* p2)
		{
			return invoke<BOOL>(0x4CACA84440FA26F6, player, entity, p2);
		} // 0x4CACA84440FA26F6 0x28A45454 b1207
		static Entity NETWORK_GET_ENTITY_KILLER_OF_PLAYER(Player player, Hash* weaponHash)
		{
			return invoke<Entity>(0x42B2DAA6B596F5F8, player, weaponHash);
		} // 0x42B2DAA6B596F5F8 0xA7E7E04F b1207
		static void NETWORK_RESURRECT_LOCAL_PLAYER(float x, float y, float z, float heading, int p4, BOOL p5, Any p6, BOOL p7)
		{
			invoke<int>(0xEA23C49EAA83ACFB, x, y, z, heading, p4, p5, p6, p7);
		} // 0xEA23C49EAA83ACFB 0xF1F9D4B4 b1207
		static void NETWORK_RESURRECT_LOCAL_PLAYER_2_(Any* args)
		{
			invoke<int>(0x4154B7D8C75E5DCF, args);
		} // 0x4154B7D8C75E5DCF undefined b1207
		static void NETWORK_SET_LOCAL_PLAYER_INVINCIBLE_TIME(int time)
		{
			invoke<int>(0x2D95C7E2D7E07307, time);
		} // 0x2D95C7E2D7E07307 0xFEA9B85C b1207
		static void NETWORK_SET_LOCAL_PLAYER_SYNC_LOOK_AT(BOOL toggle)
		{
			invoke<int>(0x524FF0AEFF9C3973, toggle);
		} // 0x524FF0AEFF9C3973 0xB72F086D b1207
		static BOOL NETWORK_HAS_ENTITY_BEEN_REGISTERED_WITH_THIS_THREAD(Entity entity)
		{
			return invoke<BOOL>(0xB07D3185E11657A5, entity);
		} // 0xB07D3185E11657A5 0xEDA68956 b1207
		static int NETWORK_GET_NETWORK_ID_FROM_ENTITY(Entity entity)
		{
			return invoke<int>(0xA11700682F3AD45C, entity);
		} // 0xA11700682F3AD45C 0x9E35DAB6 b1207
		static Entity NETWORK_GET_ENTITY_FROM_NETWORK_ID(int netId)
		{
			return invoke<Entity>(0xCE4E5D9B0A4FF560, netId);
		} // 0xCE4E5D9B0A4FF560 0x5B912C3F b1207
		static BOOL NETWORK_GET_ENTITY_IS_NETWORKED(Entity entity)
		{
			return invoke<BOOL>(0xC7827959479DCC78, entity);
		} // 0xC7827959479DCC78 0xD7F934F4 b1207
		static void NETWORK_REGISTER_ENTITY_AS_NETWORKED(Entity entity)
		{
			invoke<int>(0x06FAACD625D80CAA, entity);
		} // 0x06FAACD625D80CAA 0x31A630A4 b1207
		static BOOL NETWORK_DOES_NETWORK_ID_EXIST(int netID)
		{
			return invoke<BOOL>(0x38CE16C96BD11344, netID);
		} // 0x38CE16C96BD11344 0xB8D2C99E b1207
		// Related to container entity (RANSACK_ATTACHED_LOCKBOX / RANSACK_ATTACHED_CHEST)
		static Any N0x950ACD8F05B7B9DF(Any p0)
		{
			return invoke<Any>(0x950ACD8F05B7B9DF, p0);
		} // 0x950ACD8F05B7B9DF undefined b1355
		static BOOL NETWORK_REQUEST_CONTROL_OF_NETWORK_ID(int netId)
		{
			return invoke<BOOL>(0xA670B3662FAFFBD0, netId);
		} // 0xA670B3662FAFFBD0 0x9262A60A b1207
		static BOOL NETWORK_HAS_CONTROL_OF_NETWORK_ID(int netId)
		{
			return invoke<BOOL>(0x4D36070FE0215186, netId);
		} // 0x4D36070FE0215186 0x92E77D21 b1207
		static BOOL NETWORK_REQUEST_CONTROL_OF_ENTITY(Entity entity)
		{
			return invoke<BOOL>(0xB69317BF5E782347, entity);
		} // 0xB69317BF5E782347 0xA05FEBD7 b1207
		static BOOL NETWORK_REQUEST_CONTROL_OF_ANIM_SCENE_(AnimScene animScene)
		{
			return invoke<BOOL>(0xAAA92B631B13F614, animScene);
		} // 0xAAA92B631B13F614 undefined b1207
		static BOOL NETWORK_REQUEST_CONTROL_OF_PICKUP_PLACEMENT(Any p0)
		{
			return invoke<BOOL>(0x56ED2C48558DAB78, p0);
		} // 0x56ED2C48558DAB78 undefined b1311
		static BOOL NETWORK_HAS_CONTROL_OF_ENTITY(Entity entity)
		{
			return invoke<BOOL>(0x01BF60A500E28887, entity);
		} // 0x01BF60A500E28887 0x005FD797 b1207
		static BOOL NETWORK_HAS_CONTROL_OF_PICKUP(Pickup pickup)
		{
			return invoke<BOOL>(0x5BC9495F0B3B6FA6, pickup);
		} // 0x5BC9495F0B3B6FA6 0xF7784FC8 b1207
		static BOOL NETWORK_HAS_CONTROL_OF_ANIM_SCENE_(AnimScene animScene)
		{
			return invoke<BOOL>(0x26A5C12FACFF8724, animScene);
		} // 0x26A5C12FACFF8724 undefined b1207
		static BOOL NETWORK_HAS_CONTROL_OF_PICKUP_PLACEMENT(Any p0)
		{
			return invoke<BOOL>(0x51EABCF2786515AB, p0);
		} // 0x51EABCF2786515AB undefined b1311
		// Same Native Handler as VEH_TO_NET, PED_TO_NET, OBJ_TO_NET and NETWORK_GET_NETWORK_ID_FROM_ENTITY
		static int N0xF260AF6F43953316(ScrHandle handle)
		{
			return invoke<int>(0xF260AF6F43953316, handle);
		} // 0xF260AF6F43953316 undefined b1207
		// Returns the network ID of the given vehicle.
		static int VEH_TO_NET(Vehicle vehicle)
		{
			return invoke<int>(0xB4C94523F023419C, vehicle);
		} // 0xB4C94523F023419C 0xF17634EB b1207
		// Returns the network ID of the given ped.
		static int PED_TO_NET(Ped ped)
		{
			return invoke<int>(0x0EDEC3C276198689, ped);
		} // 0x0EDEC3C276198689 0x86A0B759 b1207
		// Returns the network ID of the given object.
		static int OBJ_TO_NET(Object object)
		{
			return invoke<int>(0x99BFDC94A603E541, object);
		} // 0x99BFDC94A603E541 0x1E05F29F b1207
		static int ANIM_SCENE_TO_NET_(AnimScene animScene)
		{
			return invoke<int>(0xE0D73CDDEA79DDCD, animScene);
		} // 0xE0D73CDDEA79DDCD undefined b1207
		static Vehicle NET_TO_VEH(int netHandle)
		{
			return invoke<Vehicle>(0x367B936610BA360C, netHandle);
		} // 0x367B936610BA360C 0x7E02FAEA b1207
		// gets the ped id of a network id
		static Ped NET_TO_PED(int netHandle)
		{
			return invoke<Ped>(0xBDCD95FC216A8B3E, netHandle);
		} // 0xBDCD95FC216A8B3E 0x87717DD4 b1207
		// gets the object id of a network id
		static Object NET_TO_OBJ(int netHandle)
		{
			return invoke<Object>(0xD8515F5FEA14CB3F, netHandle);
		} // 0xD8515F5FEA14CB3F 0x27AA14D8 b1207
		// gets the entity id of a network id
		static Entity NET_TO_ENT(int netHandle)
		{
			return invoke<Entity>(0xBFFEAB45A9A9094A, netHandle);
		} // 0xBFFEAB45A9A9094A 0x5E149683 b1207
		static AnimScene NET_TO_ANIM_SCENE_(int netId)
		{
			return invoke<AnimScene>(0xD7F6781A0ABAF6FB, netId);
		} // 0xD7F6781A0ABAF6FB undefined b1207
		static int PROPSET_TO_NET_(PropSet propSet)
		{
			return invoke<int>(0x74F99EF7EF503398, propSet);
		} // 0x74F99EF7EF503398 undefined b1207
		static PropSet NET_TO_PROPSET_(int netId)
		{
			return invoke<PropSet>(0xD08066E00D26C448, netId);
		} // 0xD08066E00D26C448 undefined b1207
		// nullsub, doesn't do anything
		static void N0x0CC28C08613BA9E5(int p0)
		{
			invoke<int>(0x0CC28C08613BA9E5, p0);
		} // 0x0CC28C08613BA9E5 undefined b1207
		static void NETWORK_GET_LOCAL_HANDLE(Any* gamerHandle)
		{
			invoke<int>(0xE86051786B66CD8E, gamerHandle);
		} // 0xE86051786B66CD8E 0x08023B16 b1207
		static void NETWORK_HANDLE_FROM_PLAYER(Player player, Any* gamerHandle)
		{
			invoke<int>(0x388EB2B86C73B6B3, player, gamerHandle);
		} // 0x388EB2B86C73B6B3 0xD3498917 b1207
		static Hash NETWORK_HASH_FROM_PLAYER_HANDLE(Player player)
		{
			return invoke<Hash>(0xBC1D768F2F5D6C05, player);
		} // 0xBC1D768F2F5D6C05 0xF8D7AF3B b1207
		static void NETWORK_HANDLE_FROM_FRIEND(int friendIndex, Any* gamerHandle)
		{
			invoke<int>(0xD45CB817D7E177D2, friendIndex, gamerHandle);
		} // 0xD45CB817D7E177D2 0x3B0BB3A3 b1207
		// Always returns a null string.
		static const char* NETWORK_GET_GAMERTAG_FROM_HANDLE(Any* gamerHandle)
		{
			return invoke<const char*>(0x426141162EBE5CDB, gamerHandle);
		} // 0x426141162EBE5CDB 0xA18A1B26 b1207
		// Hardcoded to return -1.
		static int NETWORK_DISPLAYNAMES_FROM_HANDLES_START(Any* p0, Any p1)
		{
			return invoke<int>(0xD66C9E72B3CC4982, p0, p1);
		} // 0xD66C9E72B3CC4982  b1207
		// Hardcoded to return zero.
		static int NETWORK_GET_DISPLAYNAMES_FROM_HANDLES(Any p0, Any p1, Any p2)
		{
			return invoke<int>(0x58CC181719256197, p0, p1, p2);
		} // 0x58CC181719256197  b1207
		// Example:
		//
		// char displayName[64];
		// if (_NETWORK_GET_DISPLAY_NAME_FROM_HANDLE(handle, displayName))
		// {
		// 	// use displayName
		// }
		static BOOL NETWORK_GET_DISPLAY_NAME_FROM_HANDLE_(Any* gamerHandle, char* displayName)
		{
			return invoke<BOOL>(0x7FEE4F07C54B6B3C, gamerHandle, displayName);
		} // 0x7FEE4F07C54B6B3C undefined b1207
		static BOOL NETWORK_ARE_HANDLES_THE_SAME(Any* gamerHandle1, Any* gamerHandle2)
		{
			return invoke<BOOL>(0x57DBA049E110F217, gamerHandle1, gamerHandle2);
		} // 0x57DBA049E110F217 0x45975AE3 b1207
		static BOOL NETWORK_IS_HANDLE_VALID(Any* gamerHandle)
		{
			return invoke<BOOL>(0x6F79B93B0A8E4133, gamerHandle);
		} // 0x6F79B93B0A8E4133 0xF0996C6E b1207
		static Player NETWORK_GET_PLAYER_FROM_GAMER_HANDLE(Any* gamerHandle)
		{
			return invoke<Player>(0xCE5F689CF5A0A49D, gamerHandle);
		} // 0xCE5F689CF5A0A49D 0x2E96EF1E b1207
		static BOOL NETWORK_IS_GAMER_IN_MY_SESSION(Any* gamerHandle)
		{
			return invoke<BOOL>(0x0F10B05DDF8D16E9, gamerHandle);
		} // 0x0F10B05DDF8D16E9 0x59127716 b1207
		static void NETWORK_SHOW_PROFILE_UI(Any* gamerHandle)
		{
			invoke<int>(0x859ED1CEA343FCA8, gamerHandle);
		} // 0x859ED1CEA343FCA8 0xF00A20B0 b1207
		static void N0x5759160AC17C13CE(Any* gamerHandle, const char* message)
		{
			invoke<int>(0x5759160AC17C13CE, gamerHandle, message);
		} // 0x5759160AC17C13CE undefined b1207
		// Returns the entity's network ID.
		static int N0xF302AB9D978352EE(Entity entity)
		{
			return invoke<int>(0xF302AB9D978352EE, entity);
		} // 0xF302AB9D978352EE undefined b1207
		// Returns the entity associated with the given network ID.
		static Entity N0x4538EE7C321590BC(int networkId)
		{
			return invoke<Entity>(0x4538EE7C321590BC, networkId);
		} // 0x4538EE7C321590BC undefined b1207
		static BOOL N0xA47D48D06AA5A188()
		{
			return invoke<BOOL>(0xA47D48D06AA5A188);
		} // 0xA47D48D06AA5A188 undefined b1207
		static int NETWORK_GET_TOTAL_NUM_FRIENDS()
		{
			return invoke<int>(0xDB7ABDD203FA3704);
		} // 0xDB7ABDD203FA3704 undefined b1207
		static int N0xA94ECE191D90637A()
		{
			return invoke<int>(0xA94ECE191D90637A);
		} // 0xA94ECE191D90637A undefined b1207
		static void N0x5CB8B0C846D0F30B(Any p0)
		{
			invoke<int>(0x5CB8B0C846D0F30B, p0);
		} // 0x5CB8B0C846D0F30B undefined b1207
		static void N0xFF36F36B07E69059(Any p0)
		{
			invoke<int>(0xFF36F36B07E69059, p0);
		} // 0xFF36F36B07E69059 undefined b1207
		static BOOL NETWORK_GET_CURRENT_FRIEND_PAGE_DATA_(Any* p0)
		{
			return invoke<BOOL>(0xA3EEC0A5AFF3FC5B, p0);
		} // 0xA3EEC0A5AFF3FC5B undefined b1207
		static int N0xB389289F031F059A()
		{
			return invoke<int>(0xB389289F031F059A);
		} // 0xB389289F031F059A undefined b1207
		static BOOL NETWORK_CAN_REFRESH_FRIEND_PAGE()
		{
			return invoke<BOOL>(0x1AF5E28E64A76A9F);
		} // 0x1AF5E28E64A76A9F undefined b1207
		static BOOL NETWORK_REFRESH_CURRENT_FRIEND_PAGE()
		{
			return invoke<BOOL>(0x1F51F367B710A832);
		} // 0x1F51F367B710A832 undefined b1207
		static BOOL N0xDA1BFED8582F61F0()
		{
			return invoke<BOOL>(0xDA1BFED8582F61F0);
		} // 0xDA1BFED8582F61F0 undefined b1207
		static BOOL N0x232E1EB23CDB313C()
		{
			return invoke<BOOL>(0x232E1EB23CDB313C);
		} // 0x232E1EB23CDB313C undefined b1207
		static BOOL N0x3E4A16BC669E71B3()
		{
			return invoke<BOOL>(0x3E4A16BC669E71B3);
		} // 0x3E4A16BC669E71B3 undefined b1207
		static BOOL NETWORK_IS_FRIEND_HANDLE_ONLINE_(Any* gamerHandle)
		{
			return invoke<BOOL>(0xE348D1404BD80146, gamerHandle);
		} // 0xE348D1404BD80146 undefined b1207
		static BOOL NETWORK_IS_FRIEND_HANDLE_IN_SAME_TITLE_(Any* gamerHandle)
		{
			return invoke<BOOL>(0x665161D250850A9F, gamerHandle);
		} // 0x665161D250850A9F undefined b1207
		static const char* NETWORK_GET_GAMERTAG_FROM_FRIEND_(Any* gamerHandle)
		{
			return invoke<const char*>(0x5659D87BE674AB17, gamerHandle);
		} // 0x5659D87BE674AB17 undefined b1207
		static BOOL NETWORK_IS_FRIEND(Any* gamerHandle)
		{
			return invoke<BOOL>(0x1A24A179F9B31654, gamerHandle);
		} // 0x1A24A179F9B31654 0x2DA4C282 b1207
		// Hardcoded to return false.
		static BOOL NETWORK_IS_PENDING_FRIEND(Any* gamerHandle)
		{
			return invoke<BOOL>(0x0BE73DA6984A6E33, gamerHandle);
		} // 0x0BE73DA6984A6E33 0x5C85FF81 b1207
		static BOOL NETWORK_ADD_FRIEND(Any* gamerHandle, const char* message)
		{
			return invoke<BOOL>(0x8E02D73914064223, gamerHandle, message);
		} // 0x8E02D73914064223 0x20E5B3EE b1207
		static BOOL NETWORK_REMOVE_FRIEND_(Any* gamerHandle)
		{
			return invoke<BOOL>(0x55F618F68AB854D3, gamerHandle);
		} // 0x55F618F68AB854D3 undefined b1207
		// On PC this returns true if gamerHandle is a valid handle.
		static BOOL NETWORK_CAN_ADD_FRIEND_(Any* gamerHandle)
		{
			return invoke<BOOL>(0x99ABE9BF9DADA162, gamerHandle);
		} // 0x99ABE9BF9DADA162 undefined b1207
		// Old name: _NETWORK_SET_PASSIVE_MODE_OPTION
		static void NETWORK_SET_PLAYER_IS_PASSIVE(BOOL toggle)
		{
			invoke<int>(0x9C25E8EC4C535FBD, toggle);
		} // 0x9C25E8EC4C535FBD undefined b1207
		static void NETWORK_SET_FRIENDLY_FIRE_OPTION(BOOL toggle)
		{
			invoke<int>(0xF808475FA571D823, toggle);
		} // 0xF808475FA571D823 0x6BAF95FA b1207
		static void NETWORK_SET_RICH_PRESENCE(int p0, Any* p1, int p2, int p3)
		{
			invoke<int>(0x1DCCACDCFC569362, p0, p1, p2, p3);
		} // 0x1DCCACDCFC569362 0x932A6CED b1207
		static int NETWORK_GET_TIMEOUT_TIME()
		{
			return invoke<int>(0x5ED0356A0CE3A34F);
		} // 0x5ED0356A0CE3A34F 0xE1F86C6A b1207
		// Only used in fm_race_controller R* Script (PROCESS_LOCAL_PLAYER_INIT)
		static void N0xBC7D36946D19E60E(BOOL p0)
		{
			invoke<int>(0xBC7D36946D19E60E, p0);
		} // 0xBC7D36946D19E60E undefined b1207
		// Params: p5 = 50.f, p6 = 0 in R* Script net_fetch (NET_FETCH_CLIENT_UPDATE_PED_ROLE_CLUE_IDLE)
		static BOOL N0x880A7202301E282B(Any* p0, Any* p1, float x, float y, float z, float p5, Any p6)
		{
			return invoke<BOOL>(0x880A7202301E282B, p0, p1, x, y, z, p5, p6);
		} // 0x880A7202301E282B undefined b1311
		// nullsub, doesn't do anything
		static Any N0xC964FCD3D1720697()
		{
			return invoke<Any>(0xC964FCD3D1720697);
		} // 0xC964FCD3D1720697 undefined b1207
		// nullsub, doesn't do anything
		static Any N0xEC089F84A9C16C62()
		{
			return invoke<Any>(0xEC089F84A9C16C62);
		} // 0xEC089F84A9C16C62 undefined b1207
		static void PREVENT_NETWORK_ID_MIGRATION(int netId)
		{
			invoke<int>(0x7182EDDA1EE7DB5A, netId);
		} // 0x7182EDDA1EE7DB5A undefined b1207
		static void KEEP_NETWORK_ID_IN_FAST_INSTANCE(int netId, BOOL p1, int p2)
		{
			invoke<int>(0xE1BC73D6815BA361, netId, p1, p2);
		} // 0xE1BC73D6815BA361 undefined b1207
		// Only used in SP R* Script dominoes_sp: p1 = 0
		static void N0x02C4C6C2900D84DF(Player player, Any p1)
		{
			invoke<int>(0x02C4C6C2900D84DF, player, p1);
		} // 0x02C4C6C2900D84DF undefined b1207
		static void N0xD78A26024BB13E08(Player player)
		{
			invoke<int>(0xD78A26024BB13E08, player);
		} // 0xD78A26024BB13E08 undefined b1207
		static void SET_NETWORK_ID_EXISTS_ON_ALL_MACHINES(int netId, BOOL toggle)
		{
			invoke<int>(0xE05E81A888FA63C8, netId, toggle);
		} // 0xE05E81A888FA63C8 0x68D486B2 b1207
		static void SET_NETWORK_ID_ALWAYS_EXISTS_FOR_PLAYER(int netId, Player player, BOOL toggle)
		{
			invoke<int>(0xA8A024587329F36A, netId, player, toggle);
		} // 0xA8A024587329F36A 0x4D15FDB1 b1207
		static void SET_NETWORK_ID_STOP_CLONING(int networkId, BOOL bStopCloning)
		{
			invoke<int>(0x9ED3108D6847760A, networkId, bStopCloning);
		} // 0x9ED3108D6847760A undefined b1207
		static void NETWORK_SET_ENTITY_REMAINS_WHEN_UNNETWORKED(Entity entity, BOOL toggle)
		{
			invoke<int>(0xD785864798258032, entity, toggle);
		} // 0xD785864798258032 undefined b1207
		// if set to true other network players can't see it
		// if set to false other network player can see it
		// =========================================
		// ^^ I attempted this by grabbing an object with GET_ENTITY_PLAYER_IS_FREE_AIMING_AT and setting this naive no matter the toggle he could still see it.
		//
		// pc or last gen?
		//
		// ^^ last-gen
		//
		// Old name: _NETWORK_SET_ENTITY_INVISIBLE_TO_NETWORK
		static void NETWORK_SET_ENTITY_ONLY_EXISTS_FOR_PARTICIPANTS(Entity entity, BOOL toggle)
		{
			invoke<int>(0xF1CA12B18AEF5298, entity, toggle);
		} // 0xF1CA12B18AEF5298 0x09CBC4B0 b1207
		static void N0xE31A04513237DC89(Entity entity)
		{
			invoke<int>(0xE31A04513237DC89, entity);
		} // 0xE31A04513237DC89 undefined b1207
		static void SET_NETWORK_ID_VISIBLE_IN_CUTSCENE(Any p0, Any p1, Any p2, Any p3)
		{
			invoke<int>(0xA6928482543022B4, p0, p1, p2, p3);
		} // 0xA6928482543022B4 0x199E75EF b1207
		static BOOL IS_NETWORK_ID_OWNED_BY_PARTICIPANT(int netId)
		{
			return invoke<BOOL>(0xA1607996431332DF, netId);
		} // 0xA1607996431332DF 0xEA5176C0 b1207
		static Player NETWORK_GET_PLAYER_OWNER_OF_NETWORK_ID_(int netId)
		{
			return invoke<Player>(0xA6C0787443C9583E, netId);
		} // 0xA6C0787443C9583E undefined b1207
		static void SET_LOCAL_PLAYER_VISIBLE_IN_CUTSCENE(BOOL local, BOOL remote, int instanceId)
		{
			invoke<int>(0xD1065D68947E7B6E, local, remote, instanceId);
		} // 0xD1065D68947E7B6E 0x59F3479B b1207
		static void PREVENT_MIGRATION_OF_ENTITIES_IN_FAST_INSTANCE_FOR_LOCAL_PLAYER(BOOL toggle)
		{
			invoke<int>(0x89D803CD48622150, toggle);
		} // 0x89D803CD48622150 undefined b1207
		static void SET_LOCAL_PLAYER_INVISIBLE_LOCALLY(BOOL p0)
		{
			invoke<int>(0xE5F773C1A1D9D168, p0);
		} // 0xE5F773C1A1D9D168 0x764F6222 b1207
		static void SET_PLAYER_INVISIBLE_LOCALLY(Player player, BOOL toggle)
		{
			invoke<int>(0x12B37D54667DB0B8, player, toggle);
		} // 0x12B37D54667DB0B8 0x18227209 b1207
		static void SET_PLAYER_VISIBLE_LOCALLY(Player player, BOOL toggle)
		{
			invoke<int>(0xFAA10F1FAFB11AF2, player, toggle);
		} // 0xFAA10F1FAFB11AF2 0xBA2BB4B4 b1207
		static void SET_ENTITY_VISIBLE_IN_CUTSCENE(Entity entity, BOOL p1, BOOL p2, int p3)
		{
			invoke<int>(0xE0031D3C8F36AB82, entity, p1, p2, p3);
		} // 0xE0031D3C8F36AB82 0xDBFB067B b1207
		static void SET_DOOR_NETWORKED_(Hash doorHash)
		{
			invoke<int>(0x51D99497ABF3F451, doorHash);
		} // 0x51D99497ABF3F451 undefined b1207
		static void SET_DOOR_UNNETWORKED_(Any p0, BOOL toggle)
		{
			invoke<int>(0xC1E1A3D5ED7617B8, p0, toggle);
		} // 0xC1E1A3D5ED7617B8 undefined b1207
		static BOOL IS_DAMAGE_TRACKER_ACTIVE_ON_NETWORK_ID(int netID)
		{
			return invoke<BOOL>(0x6E192E33AD436366, netID);
		} // 0x6E192E33AD436366 0x597063BA b1207
		static void ACTIVATE_DAMAGE_TRACKER_ON_NETWORK_ID(int netID, BOOL toggle)
		{
			invoke<int>(0xD45B1FFCCD52FF19, netID, toggle);
		} // 0xD45B1FFCCD52FF19 0x95D07BA5 b1207
		static BOOL IS_SPHERE_VISIBLE_TO_ANOTHER_MACHINE(Any p0, Any p1, Any p2, Any p3, Any p4)
		{
			return invoke<BOOL>(0xD82CF8E64C8729D8, p0, p1, p2, p3, p4);
		} // 0xD82CF8E64C8729D8 0x23C5274E b1207
		static BOOL IS_SPHERE_VISIBLE_TO_PLAYER(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5)
		{
			return invoke<BOOL>(0xDC3A310219E5DA62, p0, p1, p2, p3, p4, p5);
		} // 0xDC3A310219E5DA62 0xE9FCFB32 b1207
		static void N0xD42C543F73233041(BOOL p0)
		{
			invoke<int>(0xD42C543F73233041, p0);
		} // 0xD42C543F73233041 undefined b1232
		static void RESERVE_NETWORK_MISSION_OBJECTS(int amount)
		{
			invoke<int>(0x4E5C93BD0C32FBF8, amount);
		} // 0x4E5C93BD0C32FBF8 0x391DF4F3 b1207
		static void RESERVE_NETWORK_CLIENT_MISSION_OBJECTS(int amount)
		{
			invoke<int>(0xE7DDA8BD3BCF751C, amount);
		} // 0xE7DDA8BD3BCF751C undefined b1207
		static void RESERVE_NETWORK_MISSION_PEDS(int amount)
		{
			invoke<int>(0xB60FEBA45333D36F, amount);
		} // 0xB60FEBA45333D36F 0x54998C37 b1207
		static void RESERVE_NETWORK_CLIENT_MISSION_PEDS(int amount)
		{
			invoke<int>(0x807E119F80231732, amount);
		} // 0x807E119F80231732 undefined b1207
		static void RESERVE_NETWORK_MISSION_VEHICLES(int amount)
		{
			invoke<int>(0x76B02E21ED27A469, amount);
		} // 0x76B02E21ED27A469 0x5062875E b1207
		static void RESERVE_NETWORK_MISSION_PICKUPS(int amount)
		{
			invoke<int>(0x4D40E7D749BC6E6D, amount);
		} // 0x4D40E7D749BC6E6D undefined b1207
		static BOOL CAN_REGISTER_MISSION_OBJECTS(int amount)
		{
			return invoke<BOOL>(0x800DD4721A8B008B, amount);
		} // 0x800DD4721A8B008B 0x7F85DFDE b1207
		static BOOL CAN_REGISTER_MISSION_PEDS(int amount)
		{
			return invoke<BOOL>(0xBCBF4FEF9FA5D781, amount);
		} // 0xBCBF4FEF9FA5D781 0xCCAA5CE9 b1207
		static BOOL CAN_REGISTER_MISSION_VEHICLES(int amount)
		{
			return invoke<BOOL>(0x7277F1F2E085EE74, amount);
		} // 0x7277F1F2E085EE74 0x818B6830 b1207
		static BOOL CAN_REGISTER_MISSION_PICKUPS(int amount)
		{
			return invoke<BOOL>(0xF0460C7BF80011EA, amount);
		} // 0xF0460C7BF80011EA undefined b1207
		static BOOL CAN_REGISTER_MISSION_ENTITIES(int ped_amt, int vehicle_amt, int object_amt, int pickup_amt)
		{
			return invoke<BOOL>(0x69778E7564BADE6D, ped_amt, vehicle_amt, object_amt, pickup_amt);
		} // 0x69778E7564BADE6D 0x83794008 b1207
		// p0 appears to be for MP
		static int GET_NUM_RESERVED_MISSION_OBJECTS(BOOL p0)
		{
			return invoke<int>(0xAA81B5F10BC43AC2, p0);
		} // 0xAA81B5F10BC43AC2 0x16A80CD6 b1207
		// p0 appears to be for MP
		static int GET_NUM_RESERVED_MISSION_PEDS(BOOL p0)
		{
			return invoke<int>(0x1F13D5AE5CB17E17, p0);
		} // 0x1F13D5AE5CB17E17 0x6C25975C b1207
		// p0 appears to be for MP
		static int GET_NUM_RESERVED_MISSION_VEHICLES(BOOL p0)
		{
			return invoke<int>(0xCF3A965906452031, p0);
		} // 0xCF3A965906452031 0xA9A308F3 b1207
		static int GET_NUM_RESERVED_MISSION_PICKUPS_(BOOL p0)
		{
			return invoke<int>(0x62BE3ECC79FBD004, p0);
		} // 0x62BE3ECC79FBD004 undefined b1207
		static int GET_NUM_CREATED_MISSION_OBJECTS(BOOL p0)
		{
			return invoke<int>(0x12B6281B6C6706C0, p0);
		} // 0x12B6281B6C6706C0 0x603FA104 b1207
		static int GET_NUM_CREATED_MISSION_PEDS(BOOL p0)
		{
			return invoke<int>(0xCB215C4B56A7FAE7, p0);
		} // 0xCB215C4B56A7FAE7 0xD8FEC4F8 b1207
		static int GET_NUM_CREATED_MISSION_VEHICLES(BOOL p0)
		{
			return invoke<int>(0x0CD9AB83489430EA, p0);
		} // 0x0CD9AB83489430EA 0x20527695 b1207
		static int GET_NUM_CREATED_MISSION_PICKUPS_(BOOL p0)
		{
			return invoke<int>(0xD2BA051B94CA9BCC, p0);
		} // 0xD2BA051B94CA9BCC undefined b1207
		// Only used in R* Script net_stable_manager
		static void GET_RESERVED_MISSION_ENTITIES_FOR_THREAD_(int threadId, int* pedMax, int* vehicleMax, int* unkMax, int* pedMin, int* vehicleMin, int* unkMin)
		{
			invoke<int>(0x99AAC89C510DEB0D, threadId, pedMax, vehicleMax, unkMax, pedMin, vehicleMin, unkMin);
		} // 0x99AAC89C510DEB0D undefined b1491
		// Used in Script Function NET_ACE_CLIENT_VERIFY_ENTITY_RESERVATIONS
		// Coords: Slot world position
		//
		// Old name: _GET_RESERVATIONS_FOR_SLOT_WORLD_POSITION
		static void GET_RESERVED_MISSION_ENTITIES_IN_AREA(float x, float y, float z, BOOL p3, int* peds, int* vehicles, int* objects, int* pickups)
		{
			invoke<int>(0x5E71E72A94985214, x, y, z, p3, peds, vehicles, objects, pickups);
		} // 0x5E71E72A94985214  b1207
		// Note: this native was added in build 1311.23
		static BOOL N0x5F328FC909F0E0FF(int p0, int p1, int p2, int p3)
		{
			return invoke<BOOL>(0x5F328FC909F0E0FF, p0, p1, p2, p3);
		} // 0x5F328FC909F0E0FF undefined b1311
		// Always returns 60
		static int GET_MAX_NUM_NETWORK_OBJECTS()
		{
			return invoke<int>(0xC7BE335216B5EC7C);
		} // 0xC7BE335216B5EC7C 0x8687E285 b1207
		// Always returns 110
		static int GET_MAX_NUM_NETWORK_PEDS()
		{
			return invoke<int>(0x0C1F7D49C39D2289);
		} // 0x0C1F7D49C39D2289 0x744AC008 b1207
		// Always returns 40
		static int GET_MAX_NUM_NETWORK_VEHICLES()
		{
			return invoke<int>(0x0AFCE529F69B21FF);
		} // 0x0AFCE529F69B21FF 0xC3A12135 b1207
		// Always returns 80
		static int GET_MAX_NUM_NETWORK_PICKUPS()
		{
			return invoke<int>(0xA72835064DD63E4C);
		} // 0xA72835064DD63E4C 0x6A036061 b1207
		static BOOL N0x75FC34A2BA345BD1(Entity entity, Player player, Any* p2)
		{
			return invoke<BOOL>(0x75FC34A2BA345BD1, entity, player, p2);
		} // 0x75FC34A2BA345BD1 undefined b1207
		// Must be called from a background script, otherwise it will do nothing.
		static void N0x979765465A6F25FC(Entity entity, BOOL p1)
		{
			invoke<int>(0x979765465A6F25FC, entity, p1);
		} // 0x979765465A6F25FC undefined b1207
		// Hardcoded to return zero.
		static int N0x5133CF81924F1129()
		{
			return invoke<int>(0x5133CF81924F1129);
		} // 0x5133CF81924F1129 undefined b1207
		// Note: this native was added in build 1311.23
		static int N0x1E4E097D71D449FB(BOOL p0)
		{
			return invoke<int>(0x1E4E097D71D449FB, p0);
		} // 0x1E4E097D71D449FB undefined b1311
		// Note: this native was added in build 1311.23
		static int N0x982D7AD755B8F62C(BOOL p0)
		{
			return invoke<int>(0x982D7AD755B8F62C, p0);
		} // 0x982D7AD755B8F62C undefined b1311
		// Note: this native was added in build 1311.23
		static int N0x917AD74BDCF8B6E9(BOOL p0)
		{
			return invoke<int>(0x917AD74BDCF8B6E9, p0);
		} // 0x917AD74BDCF8B6E9 undefined b1311
		// Note: this native was added in build 1311.23
		static int N0xF8DC69DC1AD19072(BOOL p0)
		{
			return invoke<int>(0xF8DC69DC1AD19072, p0);
		} // 0xF8DC69DC1AD19072 undefined b1311
		// Note: this native was added in build 1311.23
		static int N0x744BFBB0CA908161(BOOL p0)
		{
			return invoke<int>(0x744BFBB0CA908161, p0);
		} // 0x744BFBB0CA908161 undefined b1311
		// Note: this native was added in build 1311.23
		static int N0x106CBDD5077DEDE1(BOOL p0)
		{
			return invoke<int>(0x106CBDD5077DEDE1, p0);
		} // 0x106CBDD5077DEDE1 undefined b1311
		// Note: this native was added in build 1311.23
		static int N0xBAF7E2979442B29F(BOOL p0)
		{
			return invoke<int>(0xBAF7E2979442B29F, p0);
		} // 0xBAF7E2979442B29F undefined b1311
		// Note: this native was added in build 1311.23
		static int N0x039B692B3318FAB6(BOOL p0)
		{
			return invoke<int>(0x039B692B3318FAB6, p0);
		} // 0x039B692B3318FAB6 undefined b1311
		// Note: this native was added in build 1311.23
		static int N0x4835413EA6F9C9CD(BOOL p0)
		{
			return invoke<int>(0x4835413EA6F9C9CD, p0);
		} // 0x4835413EA6F9C9CD undefined b1311
		static int GET_NETWORK_TIME()
		{
			return invoke<int>(0x7A5487FE9FAA6B48);
		} // 0x7A5487FE9FAA6B48 0x998103C2 b1207
		static int GET_NETWORK_TIME_ACCURATE()
		{
			return invoke<int>(0x89023FBBF9200E9F);
		} // 0x89023FBBF9200E9F 0x98AA48E5 b1207
		static BOOL HAS_NETWORK_TIME_STARTED()
		{
			return invoke<BOOL>(0x46718ACEEDEAFC84);
		} // 0x46718ACEEDEAFC84 0x4538C4A2 b1207
		// Adds the first argument to the second.
		static int GET_TIME_OFFSET(int timeA, int timeB)
		{
			return invoke<int>(0x017008CCDAD48503, timeA, timeB);
		} // 0x017008CCDAD48503 0x2E079AE6 b1207
		// Subtracts the second argument from the first, then returns whether the result is negative.
		static BOOL IS_TIME_LESS_THAN(int timeA, int timeB)
		{
			return invoke<BOOL>(0xCB2CF5148012C8D0, timeA, timeB);
		} // 0xCB2CF5148012C8D0 0x50EF8FC6 b1207
		// Subtracts the first argument from the second, then returns whether the result is negative.
		static BOOL IS_TIME_MORE_THAN(int timeA, int timeB)
		{
			return invoke<BOOL>(0xDE350F8651E4346C, timeA, timeB);
		} // 0xDE350F8651E4346C 0xBBB6DF61 b1207
		// Subtracts the second argument from the first.
		static int GET_TIME_DIFFERENCE(int timeA, int timeB)
		{
			return invoke<int>(0xA2C6FC031D46FFF0, timeA, timeB);
		} // 0xA2C6FC031D46FFF0 0x5666A837 b1207
		static int GET_CLOUD_TIME_AS_INT()
		{
			return invoke<int>(0x9A73240B49945C76);
		} // 0x9A73240B49945C76 0xF2FDF2E0 b1207
		// Takes the specified time and writes it to the structure specified in the second argument.
		//
		// struct date_time
		// {
		//     int year;
		//     int PADDING1;
		//     int month;
		//     int PADDING2;
		//     int day;
		//     int PADDING3;
		//     int hour;
		//     int PADDING4;
		//     int minute;
		//     int PADDING5;
		//     int second;
		//     int PADDING6;
		// };
		static void CONVERT_POSIX_TIME(int posixTime, Any* timeStructure)
		{
			invoke<int>(0xAC97AF97FA68E5D5, posixTime, timeStructure);
		} // 0xAC97AF97FA68E5D5 0xBB7CCE49 b1207
		static void NETWORK_SET_IN_SPECTATOR_MODE(BOOL toggle, Ped playerPed)
		{
			invoke<int>(0x423DE3854BB50894, toggle, playerPed);
		} // 0x423DE3854BB50894 0x5C4C8458 b1207
		static void NETWORK_SET_IN_STATIC_SPECTATOR_MODE_(BOOL toggle, float x, float y, float z)
		{
			invoke<int>(0xFBF1ECFB39A77B5F, toggle, x, y, z);
		} // 0xFBF1ECFB39A77B5F undefined b1207
		static BOOL NETWORK_IS_IN_SPECTATOR_MODE()
		{
			return invoke<BOOL>(0x048746E388762E11);
		} // 0x048746E388762E11 0x3EAD9DB8 b1207
		static BOOL NETWORK_IS_PLAYER_IN_SPECTATOR_MODE_(Player player)
		{
			return invoke<BOOL>(0x5B709519997ECF0F, player);
		} // 0x5B709519997ECF0F undefined b1207
		static void NETWORK_SET_IN_MP_CUTSCENE(BOOL p0, BOOL p1, int p2, BOOL p3)
		{
			invoke<int>(0x9CA5DE655269FEC4, p0, p1, p2, p3);
		} // 0x9CA5DE655269FEC4 0x8434CB43 b1207
		static BOOL NETWORK_IS_IN_MP_CUTSCENE()
		{
			return invoke<BOOL>(0x6CC27C9FA2040220);
		} // 0x6CC27C9FA2040220 0x4BB33316 b1207
		// Note: scripts seem to indicate that this was renamed to NETWORK_IS_PLAYER_IN_MP_FAST_INSTANCE
		static BOOL NETWORK_IS_PLAYER_IN_MP_CUTSCENE(Player player)
		{
			return invoke<BOOL>(0x63F9EE203C3619F2, player);
		} // 0x63F9EE203C3619F2 0x56F961E4 b1207
		// _NETWORK_A* - _NETWORK_C*
		static void N0x34BC1E79546BA543(BOOL p0)
		{
			invoke<int>(0x34BC1E79546BA543, p0);
		} // 0x34BC1E79546BA543 undefined b1232
		static void SET_NETWORK_RESPOT_TIMER_(Entity entity, int timer, BOOL p2)
		{
			invoke<int>(0x442B4347B6EC36E8, entity, timer, p2);
		} // 0x442B4347B6EC36E8 undefined b1207
		// _GET_LAUNCH_PARAM_(RESPOT?)*
		// Name is probably invalid since this native only reads data from parsed entity.
		static BOOL N0x26A867C0B7A456D1(Entity entity)
		{
			return invoke<BOOL>(0x26A867C0B7A456D1, entity);
		} // 0x26A867C0B7A456D1 undefined b1232
		// Old name: _SET_LOCAL_PLAYER_AS_GHOST
		static void SET_LOCAL_PLAYER_AS_GHOST(BOOL toggle)
		{
			invoke<int>(0x5FFE9B4144F9712F, toggle);
		} // 0x5FFE9B4144F9712F  b1207
		// Old name: _IS_ENTITY_GHOSTED_TO_LOCAL_PLAYER
		static BOOL IS_ENTITY_A_GHOST(Entity entity)
		{
			return invoke<BOOL>(0x21D04D7BC538C146, entity);
		} // 0x21D04D7BC538C146  b1207
		// _SET_PLAYER_V* - _SET_S*
		static void SET_PLAYER_VISIBILITY_TO_LOCAL_PLAYER_DISABLED_(Player player, BOOL disabled)
		{
			invoke<int>(0xDCA6ABDB9288FBE4, player, disabled);
		} // 0xDCA6ABDB9288FBE4 undefined b1207
		static void SET_ENTITY_GHOSTED_TO_LOCAL_PLAYER_(Entity entity, BOOL toggle)
		{
			invoke<int>(0xEE5AE9956743BA20, entity, toggle);
		} // 0xEE5AE9956743BA20 undefined b1207
		// Note: this native was added in build 1311.16
		static BOOL IS_OBJECT_REASSIGNMENT_IN_PROGRESS()
		{
			return invoke<BOOL>(0x8FE9EB11EC9CC23A);
		} // 0x8FE9EB11EC9CC23A undefined b1311
		// Note: this native was added in build 1311.23
		static int N0x039AD6B57D5179FF()
		{
			return invoke<int>(0x039AD6B57D5179FF);
		} // 0x039AD6B57D5179FF undefined b1311
		// Note: this native was added in build 1311.16
		//
		// GET_NUM_*
		static int N0x02B3CDD652B3CDD6()
		{
			return invoke<int>(0x02B3CDD652B3CDD6);
		} // 0x02B3CDD652B3CDD6 undefined b1311
		// Note: this native was added in build 1311.16
		static int GET_NUM_PEER_NEGOTIATION_RESPONSES_()
		{
			return invoke<int>(0x4FE932E84FE932E8);
		} // 0x4FE932E84FE932E8 undefined b1311
		// Must be called from a background script, otherwise it will do nothing.
		static void NETWORK_DEBUG_REQUEST_ENTITY_POSITION_(Any* p0)
		{
			invoke<int>(0xFA38B52F91B59075, p0);
		} // 0xFA38B52F91B59075 undefined b1207
		static int NETWORK_GET_NETWORK_ID_FROM_ROPE_ID(int ropeId)
		{
			return invoke<int>(0x42871327315EDAE8, ropeId);
		} // 0x42871327315EDAE8 undefined b1207
		static int NETWORK_GET_ROPE_ID_FROM_NETWORK_ID(int netId)
		{
			return invoke<int>(0xEB1A4DD8352EC828, netId);
		} // 0xEB1A4DD8352EC828 undefined b1207
		static void NETWORK_SPAWN_CONFIG_ADD_SPAWN_POINT_(float x, float y, float z, float heading)
		{
			invoke<int>(0xFD1AC0B3858F224C, x, y, z, heading);
		} // 0xFD1AC0B3858F224C undefined b1207
		static void N0xA63E4F050F20021F()
		{
			invoke<int>(0xA63E4F050F20021F);
		} // 0xA63E4F050F20021F undefined b1207
		static void NETWORK_SPAWN_CONFIG_ADD_EXCLUSION_VOLUME_(Volume volume)
		{
			invoke<int>(0xEEB7818B1D307212, volume);
		} // 0xEEB7818B1D307212 undefined b1207
		static void NETWORK_SPAWN_CONFIG_REMOVE_EXCLUSION_VOLUME_(Volume volume)
		{
			invoke<int>(0xA35E7BF20FA269E0, volume);
		} // 0xA35E7BF20FA269E0 undefined b1207
		static void N0x0BF90CBB6B72977B()
		{
			invoke<int>(0x0BF90CBB6B72977B);
		} // 0x0BF90CBB6B72977B undefined b1207
		static void N0x7B3FF2D193628126(Player player)
		{
			invoke<int>(0x7B3FF2D193628126, player);
		} // 0x7B3FF2D193628126 undefined b1207
		static void N0x19B52C20B5C4757C()
		{
			invoke<int>(0x19B52C20B5C4757C);
		} // 0x19B52C20B5C4757C undefined b1207
		static void NETWORK_SPAWN_CONFIG_SET_FLAGS(int flags)
		{
			invoke<int>(0xF94A0D5B254375DF, flags);
		} // 0xF94A0D5B254375DF undefined b1207
		// _NETWORK_SPAWN_CONFIG_*
		static void N0x6CEE2E30021DAEC6()
		{
			invoke<int>(0x6CEE2E30021DAEC6);
		} // 0x6CEE2E30021DAEC6 undefined b1207
		static void NETWORK_SPAWN_CONFIG_ADD_PROPERTY_SCRIPTED_(int configProperty, BOOL include)
		{
			invoke<int>(0x44D59EC597BBF348, configProperty, include);
		} // 0x44D59EC597BBF348 undefined b1207
		static void N0xB131E686BD97B3F8()
		{
			invoke<int>(0xB131E686BD97B3F8);
		} // 0xB131E686BD97B3F8 undefined b1207
		static void NETWORK_SPAWN_CONFIG_ADD_PROPERTY_PREFERENCE_(int configProperty, BOOL include, float weight)
		{
			invoke<int>(0xEB6027FD1B4600D5, configProperty, include, weight);
		} // 0xEB6027FD1B4600D5 undefined b1207
		static void N0x405DDEFB1F531B18(Volume volume, BOOL p1, Any p2, Any p3)
		{
			invoke<int>(0x405DDEFB1F531B18, volume, p1, p2, p3);
		} // 0x405DDEFB1F531B18 undefined b1207
		static void N0x43CF999205084B4B()
		{
			invoke<int>(0x43CF999205084B4B);
		} // 0x43CF999205084B4B undefined b1207
		static void N0x13F592FC3BF0EA84(Volume volume, BOOL p1, float originalWeight, Any p3, Any p4)
		{
			invoke<int>(0x13F592FC3BF0EA84, volume, p1, originalWeight, p3, p4);
		} // 0x13F592FC3BF0EA84 undefined b1207
		static void N0xCF23AB5BD47B384D(Any p0)
		{
			invoke<int>(0xCF23AB5BD47B384D, p0);
		} // 0xCF23AB5BD47B384D undefined b1207
		static void N0xE5634491A58C2703(float p0)
		{
			invoke<int>(0xE5634491A58C2703, p0);
		} // 0xE5634491A58C2703 undefined b1207
		static void NETWORK_SPAWN_CONFIG_SET_GROUND_TO_ROOT_OFFSET(float offset)
		{
			invoke<int>(0x59577799F6AE2F34, offset);
		} // 0x59577799F6AE2F34 undefined b1207
		static void NETWORK_SPAWN_CONFIG_SET_LEVEL_WATER_DEPTH_(int waterDepthLevel)
		{
			invoke<int>(0xBDCC671B911040F9, waterDepthLevel);
		} // 0xBDCC671B911040F9 undefined b1207
		static void NETWORK_SPAWN_CONFIG_SET_TUNING_FLOAT(Hash p0, float p1)
		{
			invoke<int>(0x0608326F7B98C08D, p0, p1);
		} // 0x0608326F7B98C08D undefined b1207
		// _NETWORK_SPAWN_CONFIG_*
		static void N0x5D3C528B7A7DF836(Hash nsctf)
		{
			invoke<int>(0x5D3C528B7A7DF836, nsctf);
		} // 0x5D3C528B7A7DF836 undefined b1207
		static void N0x2686BD9566B65EDA(float x, float y, float z)
		{
			invoke<int>(0x2686BD9566B65EDA, x, y, z);
		} // 0x2686BD9566B65EDA undefined b1207
		static void N0xBB1EC8C2EEF33BAA(Entity entity)
		{
			invoke<int>(0xBB1EC8C2EEF33BAA, entity);
		} // 0xBB1EC8C2EEF33BAA undefined b1207
		static BOOL N0x67CCDF74C4DF7169()
		{
			return invoke<BOOL>(0x67CCDF74C4DF7169);
		} // 0x67CCDF74C4DF7169 undefined b1207
		static void N0xC8B6D18E22484643()
		{
			invoke<int>(0xC8B6D18E22484643);
		} // 0xC8B6D18E22484643 undefined b1207
		static void N0x97BCE4C4B3191228()
		{
			invoke<int>(0x97BCE4C4B3191228);
		} // 0x97BCE4C4B3191228 undefined b1207
		static int N0x41452E8A3B9C0C4B()
		{
			return invoke<int>(0x41452E8A3B9C0C4B);
		} // 0x41452E8A3B9C0C4B undefined b1207
		static BOOL NETWORK_SPAWN_CONFIG_SEARCH_IN_PROGRESS_()
		{
			return invoke<BOOL>(0x89EC2FC89ECB1005);
		} // 0x89EC2FC89ECB1005 undefined b1207
		static void N0x61BFBAA795E712AD()
		{
			invoke<int>(0x61BFBAA795E712AD);
		} // 0x61BFBAA795E712AD undefined b1207
		static void NETWORK_SPAWN_CONFIG_SET_CANCEL_SEARCH_()
		{
			invoke<int>(0x765E60A1DCB8B1CE);
		} // 0x765E60A1DCB8B1CE undefined b1207
		static void N0x691E4DE5309EAEFC(Any p0, Any* p1)
		{
			invoke<int>(0x691E4DE5309EAEFC, p0, p1);
		} // 0x691E4DE5309EAEFC undefined b1207
		static void NETWORK_START_SOLO_TUTORIAL_SESSION()
		{
			invoke<int>(0x17E0198B3882C2CB);
		} // 0x17E0198B3882C2CB 0x408A9436 b1207
		static void NETWORK_END_TUTORIAL_SESSION()
		{
			invoke<int>(0xD0AFAFF5A51D72F7);
		} // 0xD0AFAFF5A51D72F7 0xBA57E53E b1207
		static BOOL NETWORK_IS_IN_TUTORIAL_SESSION()
		{
			return invoke<BOOL>(0xADA24309FE08DACF);
		} // 0xADA24309FE08DACF 0x34DD7B28 b1207
		static BOOL NETWORK_IS_TUTORIAL_SESSION_CHANGE_PENDING()
		{
			return invoke<BOOL>(0x35F0B98A8387274D);
		} // 0x35F0B98A8387274D 0xA003C40B b1207
		// Old name: _NETWORK_IS_PLAYER_EQUAL_TO_INDEX
		static BOOL NETWORK_ARE_PLAYERS_IN_SAME_TUTORIAL_SESSION(Player player, int index)
		{
			return invoke<BOOL>(0x9DE986FC9A87C474, player, index);
		} // 0x9DE986FC9A87C474 0xE66A0B40 b1207
		static void NETWORK_ALLOW_ALL_ENTITY_FADING_FOR_INSTANCES(BOOL toggle)
		{
			invoke<int>(0x4B05B97BA46F419D, toggle);
		} // 0x4B05B97BA46F419D undefined b1207
		static void NETWORK_ALLOW_ENTITY_FADING_FOR_INSTANCES(Entity entity, BOOL toggle)
		{
			invoke<int>(0xF3354D6CA46F419D, entity, toggle);
		} // 0xF3354D6CA46F419D undefined b1207
		static void N0xDC6AD5C046F33AB4(BOOL p0, BOOL p1)
		{
			invoke<int>(0xDC6AD5C046F33AB4, p0, p1);
		} // 0xDC6AD5C046F33AB4 undefined b1207
		static void N0x6C7E04E9DE451789()
		{
			invoke<int>(0x6C7E04E9DE451789);
		} // 0x6C7E04E9DE451789 undefined b1207
		static void NETWORK_SET_LOCAL_PLAYER_PENDING_FAST_INSTANCE_ID(int instanceId)
		{
			invoke<int>(0x007FF852DCF49DA4, instanceId);
		} // 0x007FF852DCF49DA4 undefined b1207
		static int NETWORK_GET_PLAYER_FAST_INSTANCE_ID_(Player player)
		{
			return invoke<int>(0xD9267375834C5EAB, player);
		} // 0xD9267375834C5EAB undefined b1207
		static void NETWORK_CONCEAL_PLAYER(Player player, BOOL toggle)
		{
			invoke<int>(0xBBDF066252829606, player, toggle);
		} // 0xBBDF066252829606 0x72052DB3 b1207
		static BOOL NETWORK_IS_PLAYER_CONCEALED(Player player)
		{
			return invoke<BOOL>(0x919B3C98ED8292F9, player);
		} // 0x919B3C98ED8292F9 0xB0313590 b1207
		// Note: this native was added in build 1355.30
		static void N0x40FEDB13870042F1()
		{
			invoke<int>(0x40FEDB13870042F1);
		} // 0x40FEDB13870042F1 undefined b1355
		// Note: this native was added in build 1355.30
		static void N0x422F9D6D6C7BC290(int p0)
		{
			invoke<int>(0x422F9D6D6C7BC290, p0);
		} // 0x422F9D6D6C7BC290 undefined b1355
		// Note: this native was added in build 1311.23, but was only used after build 1436.25
		static void NETWORK_REQUEST_CLOUD_TUNABLES()
		{
			invoke<int>(0x42FB3B532D526E6C);
		} // 0x42FB3B532D526E6C 0xD760CAD5 b1311
		static BOOL NETWORK_IS_TUNABLE_CLOUD_REQUEST_PENDING()
		{
			return invoke<BOOL>(0x0467C11ED88B7D28);
		} // 0x0467C11ED88B7D28 0x47978D7F b1207
		static int NETWORK_GET_TUNABLE_CLOUD_CRC()
		{
			return invoke<int>(0x10BD227A753B0D84);
		} // 0x10BD227A753B0D84 0x231CFD12 b1436
		static BOOL NETWORK_DOES_TUNABLE_EXIST(Hash tunableContext, Hash tunableName)
		{
			return invoke<BOOL>(0x85E5F8B9B898B20A, tunableContext, tunableName);
		} // 0x85E5F8B9B898B20A 0x9FCE9C9A b1207
		static BOOL NETWORK_ACCESS_TUNABLE_INT(Hash tunableContext, Hash tunableName, int* value)
		{
			return invoke<BOOL>(0x8BE1146DFD5D4468, tunableContext, tunableName, value);
		} // 0x8BE1146DFD5D4468 0xE4B3726A b1207
		static BOOL NETWORK_ACCESS_TUNABLE_BOOL(Hash tunableContext, Hash tunableName)
		{
			return invoke<BOOL>(0xAA6A47A573ABB75A, tunableContext, tunableName);
		} // 0xAA6A47A573ABB75A 0x8A04E1FE b1207
		static int NETWORK_TRY_ACCESS_TUNABLE_INT_HASH(Hash tunableContext, Hash tunableName, int defaultValue)
		{
			return invoke<int>(0xA25E006B36719774, tunableContext, tunableName, defaultValue);
		} // 0xA25E006B36719774 undefined b1207
		static float NETWORK_TRY_ACCESS_TUNABLE_FLOAT_HASH(Hash tunableContext, Hash tunableName, float defaultValue)
		{
			return invoke<float>(0xA18393089C05E49C, tunableContext, tunableName, defaultValue);
		} // 0xA18393089C05E49C undefined b1207
		static BOOL NETWORK_TRY_ACCESS_TUNABLE_BOOL_HASH(Hash tunableContext, Hash tunableName, BOOL defaultValue)
		{
			return invoke<BOOL>(0xB2AD5D29A99D4B26, tunableContext, tunableName, defaultValue);
		} // 0xB2AD5D29A99D4B26 undefined b1207
		static void N0x894B5ECAB45D2342(int netHandle, Any p1)
		{
			invoke<int>(0x894B5ECAB45D2342, netHandle, p1);
		} // 0x894B5ECAB45D2342 undefined b1207
		static void NETWORK_DISABLE_PROXIMITY_MIGRATION(int netID)
		{
			invoke<int>(0x407091CF6037118E, netID);
		} // 0x407091CF6037118E 0x9F82917F b1207
		static BOOL COMMERCE_STORE_IS_OPEN_()
		{
			return invoke<BOOL>(0xCE5E79D9E303628E);
		} // 0xCE5E79D9E303628E undefined b1355
		static BOOL COMMERCE_STORE_IS_ENABLED_()
		{
			return invoke<BOOL>(0xDBC754CB6CCB9378);
		} // 0xDBC754CB6CCB9378 undefined b1232
		static BOOL CLOUD_HAS_REQUEST_COMPLETED(int id)
		{
			return invoke<BOOL>(0x4C61B39930D045DA, id);
		} // 0x4C61B39930D045DA 0xBAF52DD8 b1207
		static BOOL CLOUD_DID_REQUEST_SUCCEED(int id)
		{
			return invoke<BOOL>(0x3A3D5568AF297CD5, id);
		} // 0x3A3D5568AF297CD5 0x9B9AFFF1 b1207
		static BOOL GET_LAUNCH_PARAM_EXISTS_(const char* paramName)
		{
			return invoke<BOOL>(0x02E97CE283648CD9, paramName);
		} // 0x02E97CE283648CD9 undefined b1207
		static const char* GET_LAUNCH_PARAM_VALUE(const char* paramName)
		{
			return invoke<const char*>(0x65E65CA6A0FE59D4, paramName);
		} // 0x65E65CA6A0FE59D4 undefined b1207
		static void SET_LAUNCH_PARAM_VALUE_(const char* paramName, const char* value)
		{
			invoke<int>(0x668AF6E4933AC13F, paramName, value);
		} // 0x668AF6E4933AC13F undefined b1207
		static void CLEAR_LAUNCH_PARAM_(const char* paramName)
		{
			invoke<int>(0x782C94DB6469634D, paramName);
		} // 0x782C94DB6469634D undefined b1207
		static const char* GET_LAUNCH_PARAM_STRING_()
		{
			return invoke<const char*>(0xC59AB6A04333C502);
		} // 0xC59AB6A04333C502 undefined b1207
		static void SET_LAUNCH_PARAM_STRING_(const char* params)
		{
			invoke<int>(0xDFFC15AA63D04AAB, params);
		} // 0xDFFC15AA63D04AAB undefined b1207
		// Old name: _CLEAR_LAUNCH_PARAMS
		static void CLEAR_SERVICE_EVENT_ARGUMENTS()
		{
			invoke<int>(0x966DD84FB6A46017);
		} // 0x966DD84FB6A46017  b1207
		static BOOL UGC_IS_REQUEST_PENDING(int ugcRequestId)
		{
			return invoke<BOOL>(0xF4AC4FA844FD559A, ugcRequestId);
		} // 0xF4AC4FA844FD559A undefined b1207
		static BOOL UGC_HAS_REQUEST_FINISHED(int ugcRequestId)
		{
			return invoke<BOOL>(0xA9EB4D606076615D, ugcRequestId);
		} // 0xA9EB4D606076615D undefined b1207
		static BOOL UGC_DID_REQUEST_SUCCEED(int ugcRequestId)
		{
			return invoke<BOOL>(0x0B6009A90B8495F1, ugcRequestId);
		} // 0x0B6009A90B8495F1 undefined b1207
		static BOOL N0xCD53E6CBF609C012(int ugcRequestId)
		{
			return invoke<BOOL>(0xCD53E6CBF609C012, ugcRequestId);
		} // 0xCD53E6CBF609C012 undefined b1207
		// Returns ugcRequestId
		static int UGC_QUERY_BY_CONTENT_TYPE_(int p0, int maxGet, const char* contentTypeName, int p3, int p4, int p5)
		{
			return invoke<int>(0xF40EF49B3099E98E, p0, maxGet, contentTypeName, p3, p4, p5);
		} // 0xF40EF49B3099E98E undefined b1207
		// Returns ugcRequestId
		static int UGC_QUERY_BY_CATEGORY_(int categoryType, int p1, int maxGet, const char* contentTypeName, int p4, BOOL p5)
		{
			return invoke<int>(0x8C109958C9BB559D, categoryType, p1, maxGet, contentTypeName, p4, p5);
		} // 0x8C109958C9BB559D undefined b1207
		// Returns ugcRequestId
		static int UGC_QUERY_BY_CONTENT_ID_(const char* contentId, BOOL latestVersion, const char* contentTypeName)
		{
			return invoke<int>(0x69D22E183580113F, contentId, latestVersion, contentTypeName);
		} // 0x69D22E183580113F undefined b1207
		static BOOL UGC_IS_BOOK_MARKED_(const char* contentId)
		{
			return invoke<BOOL>(0xE42D1042F09865FE, contentId);
		} // 0xE42D1042F09865FE undefined b1355
		static void UGC_CLEAR_QUERY_RESULTS(int ugcRequestId)
		{
			invoke<int>(0xE931354FEA710038, ugcRequestId);
		} // 0xE931354FEA710038 undefined b1207
		static BOOL UGC_QUERY_WAS_FORCE_CANCELLED(int ugcRequestId)
		{
			return invoke<BOOL>(0xF8F0705E77A0E705, ugcRequestId);
		} // 0xF8F0705E77A0E705 undefined b1207
		static int UGC_QUERY_GET_CONTENT_NUM(int ugcRequestId)
		{
			return invoke<int>(0x76160E0396142765, ugcRequestId);
		} // 0x76160E0396142765 undefined b1207
		static Any UGC_QUERY_GET_CREATOR_HANDLE_(Any p0, int index, Any* gamerHandle)
		{
			return invoke<Any>(0xADB56322EEDFBDC9, p0, index, gamerHandle);
		} // 0xADB56322EEDFBDC9 undefined b1207
		static const char* UGC_QUERY_GET_OWNER_ID_(Any p0, int index)
		{
			return invoke<const char*>(0xF9F0B3028431967B, p0, index);
		} // 0xF9F0B3028431967B undefined b1207
		static const char* UGC_QUERY_GET_NAME_(Any p0, int index)
		{
			return invoke<const char*>(0x2D053EA815702DD1, p0, index);
		} // 0x2D053EA815702DD1 undefined b1207
		static const char* UGC_QUERY_GET_ROOT_CONTENT_ID_(Any p0, int index)
		{
			return invoke<const char*>(0x566CEB0542EF5ECF, p0, index);
		} // 0x566CEB0542EF5ECF undefined b1207
		static const char* UGC_QUERY_GET_PLAYLIST_NAME_(Any p0, int index)
		{
			return invoke<const char*>(0xCAF50048C8D0FBA0, p0, index);
		} // 0xCAF50048C8D0FBA0 undefined b1207
		static Hash UGC_QUERY_GET_MISSION_DESC_HASH_(Any p0, int index)
		{
			return invoke<Hash>(0xA6BF569956C60A60, p0, index);
		} // 0xA6BF569956C60A60 undefined b1207
		// Returns string for GET_STATUS_OF_LOAD_MISSION_CREATOR_PHOTO
		static const char* UGC_QUERY_GET_CREATOR_PHOTO_(Any p0, int p1, Any p2)
		{
			return invoke<const char*>(0x409FE0CA6A4D1D49, p0, p1, p2);
		} // 0x409FE0CA6A4D1D49 undefined b1207
		static void UGC_QUERY_GET_DATE_(Any p0, int index, Any* p2)
		{
			invoke<int>(0xE0CB4AB15CB32710, p0, index, p2);
		} // 0xE0CB4AB15CB32710 undefined b1207
		static int UGC_QUERY_GET_POSIX_UPDATED_DATE_(Any p0, Any p1)
		{
			return invoke<int>(0x21A99A72B00D8002, p0, p1);
		} // 0x21A99A72B00D8002 undefined b1207
		static int UGC_QUERY_GET_POSIX_PUBLISHED_DATE_(Any p0, Any p1)
		{
			return invoke<int>(0x104080CA9E519B00, p0, p1);
		} // 0x104080CA9E519B00 undefined b1207
		static int UGC_QUERY_GET_VERSION_(Any p0, int index, int p2)
		{
			return invoke<int>(0x63E9DCBC8B0931ED, p0, index, p2);
		} // 0x63E9DCBC8B0931ED undefined b1207
		static int UGC_QUERY_GET_LANGUAGE_(Any p0, int index)
		{
			return invoke<int>(0x97764E8AC6487A9A, p0, index);
		} // 0x97764E8AC6487A9A undefined b1207
		static BOOL UGC_QUERY_GET_PUBLISHED_(Any p0, Any p1)
		{
			return invoke<BOOL>(0x9993F1E11944A3DD, p0, p1);
		} // 0x9993F1E11944A3DD undefined b1207
		static float UGC_QUERY_GET_RATING_(Any p0, int index, int p2)
		{
			return invoke<float>(0x24CD8FAEA1368379, p0, index, p2);
		} // 0x24CD8FAEA1368379 undefined b1207
		static Any N0x5F0E99071582DECA(Any p0, int index, int p2)
		{
			return invoke<Any>(0x5F0E99071582DECA, p0, index, p2);
		} // 0x5F0E99071582DECA undefined b1207
		static BOOL UGC_QUERY_GET_CONTENT_HAS_PLAYER_RECORD(Any p0, int index)
		{
			return invoke<BOOL>(0xF794765390A6DCA5, p0, index);
		} // 0xF794765390A6DCA5 undefined b1207
		static BOOL UGC_QUERY_GET_BOOK_MARKED_(Any p0, int index)
		{
			return invoke<BOOL>(0x98539FC453AEA639, p0, index);
		} // 0x98539FC453AEA639 undefined b1207
		// Checks if the user has ROS privilege 14.
		static BOOL UGC_HAS_PRIVILEGE_()
		{
			return invoke<BOOL>(0x6506BFA755FB209C);
		} // 0x6506BFA755FB209C undefined b1207
		static int UGC_REQUEST_CONTENT_DATA_FROM_PARAMS(const char* contentTypeName, const char* contentId, int fileId, int fileVersion, int languageId)
		{
			return invoke<int>(0x7FD2990AF016795E, contentTypeName, contentId, fileId, fileVersion, languageId);
		} // 0x7FD2990AF016795E 0x38FC2EEB b1207
		static int UGC_REQUEST_CACHED_DESCRIPTION(Hash description)
		{
			return invoke<int>(0x5E0165278F6339EE, description);
		} // 0x5E0165278F6339EE 0x1C4F9FDB b1207
		static BOOL UGC_IS_DESCRIPTION_REQUEST_IN_PROGRESS(Hash description)
		{
			return invoke<BOOL>(0x2D5DC831176D0114, description);
		} // 0x2D5DC831176D0114 0xA69AE16C b1207
		static BOOL UGC_HAS_DESCRIPTION_REQUEST_FINISHED(Hash description)
		{
			return invoke<BOOL>(0xEBFA8D50ADDC54C4, description);
		} // 0xEBFA8D50ADDC54C4 0xF50BC67A b1207
		static BOOL UGC_DID_DESCRIPTION_REQUEST_SUCCEED(Hash description)
		{
			return invoke<BOOL>(0x162C23CA83ED0A62, description);
		} // 0x162C23CA83ED0A62 0xB3BBD241 b1207
		static const char* UGC_GET_CACHED_DESCRIPTION(Hash description, int length)
		{
			return invoke<const char*>(0x40F7E66472DF3E5C, description, length);
		} // 0x40F7E66472DF3E5C 0x70A2845C b1207
		static BOOL UGC_RELEASE_CACHED_DESCRIPTION(Hash description)
		{
			return invoke<BOOL>(0x5A34CD9C3C5BEC44, description);
		} // 0x5A34CD9C3C5BEC44 0x346B506C b1207
		static void UGC_RELEASE_ALL_CACHED_DESCRIPTIONS()
		{
			invoke<int>(0x68103E2247887242);
		} // 0x68103E2247887242 0x0095DB71 b1207
		static void UGC_SET_QUERY_DATA_FROM_OFFLINE(BOOL p0)
		{
			invoke<int>(0xF98DDE0A8ED09323, p0);
		} // 0xF98DDE0A8ED09323 0x213C6D36 b1207
		static BOOL UGC_IS_LANGUAGE_SUPPORTED(int languageId)
		{
			return invoke<BOOL>(0xF53E48461B71EECB, languageId);
		} // 0xF53E48461B71EECB 0xB4668B23 b1207
		static Any N0xD4022C7286B0DFA2(const char* p0, int p1, int p2)
		{
			return invoke<Any>(0xD4022C7286B0DFA2, p0, p1, p2);
		} // 0xD4022C7286B0DFA2 undefined b1207
		// Returns false if pedshot push failed
		static BOOL NETWORK_PERSONA_PHOTO_WRITE_SC_PROFILE_(const char* texture, int personaPhotoType, int formatIndex)
		{
			return invoke<BOOL>(0xB72999D3120599DF, texture, personaPhotoType, formatIndex);
		} // 0xB72999D3120599DF undefined b1207
		// Returns false if pedshot push failed
		static BOOL NETWORK_PERSONA_PHOTO_WRITE_LOCAL_(const char* texture, int playerSlot, int p2, int personaPhotoLocalCacheType)
		{
			return invoke<BOOL>(0x2A48D9567940598F, texture, playerSlot, p2, personaPhotoLocalCacheType);
		} // 0x2A48D9567940598F undefined b1207
		// _NETWORK_IS_T* - _NETWORK_RE*
		static BOOL NETWORK_IS_PREVIOUS_UPLOAD_PENDING_()
		{
			return invoke<BOOL>(0xA21E3BAD0A42D199);
		} // 0xA21E3BAD0A42D199 undefined b1207
		static Any N0xCC4E72C339461ED1()
		{
			return invoke<Any>(0xCC4E72C339461ED1);
		} // 0xCC4E72C339461ED1 undefined b1207
		// Only used in R* SP Scripts
		static const char* REQUEST_PEDSHOT_TEXTURE_LOCAL_BACKUP_DOWNLOAD_(int player, int personaPhotoLocalCacheType)
		{
			return invoke<const char*>(0x356F9FB0698C1FEB, player, personaPhotoLocalCacheType);
		} // 0x356F9FB0698C1FEB undefined b1207
		// Only used in R* SP Script map_app_event_handler
		static const char* REQUEST_PEDSHOT_TEXTURE_LOCAL_DOWNLOAD_(Any* gamerHandle, int p1)
		{
			return invoke<const char*>(0xCAF4CA2F87779F8F, gamerHandle, p1);
		} // 0xCAF4CA2F87779F8F undefined b1207
		static const char* REQUEST_PEDSHOT_TEXTURE_MULTIPLAYER_DOWNLOAD_(Any* gamerHandle, int p1)
		{
			return invoke<const char*>(0xB5C4B18B12A2AF23, gamerHandle, p1);
		} // 0xB5C4B18B12A2AF23 undefined b1207
		static BOOL TEXTURE_DOWNLOAD_TEXTURE_NAME_IS_VALID_(const char* name)
		{
			return invoke<BOOL>(0xE2C3CEC3C0903A00, name);
		} // 0xE2C3CEC3C0903A00 undefined b1207
		// Returns textureDownloadId
		static int TEXTURE_DOWNLOAD_REQUEST(Any* gamerHandle, const char* filePath, const char* name, BOOL p3)
		{
			return invoke<int>(0x16160DA74A8E74A2, gamerHandle, filePath, name, p3);
		} // 0x16160DA74A8E74A2 0xAD546CC3 b1207
		// Returns textureDownloadId
		static int MUGSHOT_TEXTURE_DOWNLOAD_REQUEST_(Any* gamerHandle, int p1, const char* name, BOOL p3)
		{
			return invoke<int>(0x9B5DB6CEAFAA10BB, gamerHandle, p1, name, p3);
		} // 0x9B5DB6CEAFAA10BB undefined b1207
		static int UGC_TEXTURE_DOWNLOAD_REQUEST(Any* p0, Any p1, Any p2, Any p3, Any* p4, BOOL p5)
		{
			return invoke<int>(0x308F96458B7087CC, p0, p1, p2, p3, p4, p5);
		} // 0x308F96458B7087CC 0x68C9AF69 b1207
		static int LOCAL_PLAYER_PEDSHOT_TEXTURE_DOWNLOAD_REQUEST_(int playerSlot, int personaPhotoLocalCacheType)
		{
			return invoke<int>(0x6E2FD8CF7EB10E53, playerSlot, personaPhotoLocalCacheType);
		} // 0x6E2FD8CF7EB10E53 undefined b1207
		static void TEXTURE_DOWNLOAD_RELEASE(int textureDownloadId)
		{
			invoke<int>(0x487EB90B98E9FB19, textureDownloadId);
		} // 0x487EB90B98E9FB19 0xEE8D9E70 b1207
		static void TEXTURE_DOWNLOAD_RELEASE_BY_NAME_(const char* name)
		{
			invoke<int>(0x7A17B7981560FFA5, name);
		} // 0x7A17B7981560FFA5 undefined b1207
		static const char* TEXTURE_DOWNLOAD_GET_NAME(int textureDownloadId)
		{
			return invoke<const char*>(0x3448505B6E35262D, textureDownloadId);
		} // 0x3448505B6E35262D 0xA40EF65A b1207
		// 0 = succeeded
		// 1 = pending
		// 2 = failed
		static int GET_STATUS_OF_TEXTURE_DOWNLOAD(int textureDownloadId)
		{
			return invoke<int>(0x8BD6C6DEA20E82C6, textureDownloadId);
		} // 0x8BD6C6DEA20E82C6 0x03225BA3 b1207
		static int PEDMUGSHOT_GET_STATUS_()
		{
			return invoke<int>(0xCBAC13F065C47596);
		} // 0xCBAC13F065C47596 undefined b1207
		static BOOL PEDMUGSHOT_TAKE_()
		{
			return invoke<BOOL>(0xCD954F330693F5F2);
		} // 0xCD954F330693F5F2 undefined b1207
		static Any PEDMUGSHOT_REQUEST_SEND_()
		{
			return invoke<Any>(0xFBC30B70B3CDB87E);
		} // 0xFBC30B70B3CDB87E undefined b1207
		static void N0x814729078AED6D30()
		{
			invoke<int>(0x814729078AED6D30);
		} // 0x814729078AED6D30 undefined b1207
		static BOOL NETWORK_HAVE_ROS_BANNED_PRIV()
		{
			return invoke<BOOL>(0x8020A73847E0CA7D);
		} // 0x8020A73847E0CA7D 0xD3BBE42F b1207
		static BOOL NETWORK_HAS_ROS_PRIVILEGE(int index)
		{
			return invoke<BOOL>(0xA699957E60D80214, index);
		} // 0xA699957E60D80214 0xFD261E30 b1207
		// Always returns -1. Seems to be XB1 specific.
		static int NETWORK_START_USER_CONTENT_PERMISSIONS_CHECK(Any* gamerHandle)
		{
			return invoke<int>(0xDEB2B99A1AF1A2A6, gamerHandle);
		} // 0xDEB2B99A1AF1A2A6  b1207
		static void NETWORK_AUTO_SESSION_SET_ALLOWED_TO_SPLIT_(BOOL toggle)
		{
			invoke<int>(0x0A428058079EE65C, toggle);
		} // 0x0A428058079EE65C undefined b1207
		static BOOL NETWORK_AUTO_SESSION_IS_ALLOWED_TO_MERGE()
		{
			return invoke<BOOL>(0xAADED99A6B268A27);
		} // 0xAADED99A6B268A27 undefined b1207
		static void NETWORK_AUTO_SESSION_SET_ALLOWED_TO_MERGE_(BOOL toggle, Any* p1, int p2)
		{
			invoke<int>(0x63246A24F5747510, toggle, p1, p2);
		} // 0x63246A24F5747510 undefined b1207
		static BOOL NETWORK_AUTO_SESSION_IS_AUTO_WARP_DISABLED_()
		{
			return invoke<BOOL>(0xE258570E0C116A66);
		} // 0xE258570E0C116A66 undefined b1207
		static void NETWORK_AUTO_SESSION_SET_AUTO_WARP_ENABLED_(BOOL toggle)
		{
			invoke<int>(0x4440FEE3EFE78F54, toggle);
		} // 0x4440FEE3EFE78F54 undefined b1207
		static BOOL NETWORK_AUTO_SESSION_CAN_SPLIT_SESSION(int* p0)
		{
			return invoke<BOOL>(0xE404BFF0ABA23CDC, p0);
		} // 0xE404BFF0ABA23CDC undefined b1207
		static BOOL NETWORK_AUTO_SESSION_SPLIT_SESSION(int playersToTake, int maxInstancePlayers, int sessionFlags, int bucketId)
		{
			return invoke<BOOL>(0xC223D299C670413D, playersToTake, maxInstancePlayers, sessionFlags, bucketId);
		} // 0xC223D299C670413D undefined b1207
		static BOOL NETWORK_AUTO_SESSION_IS_PROCESSING_SESSION_SPLIT_()
		{
			return invoke<BOOL>(0xA021095C983F20D8);
		} // 0xA021095C983F20D8 undefined b1207
		static BOOL NETWORK_AUTO_SESSION_SPLIT_SESSION_SUCCESSFUL_()
		{
			return invoke<BOOL>(0x6D87BA8EF15226CD);
		} // 0x6D87BA8EF15226CD undefined b1207
		static BOOL NETWORK_AUTO_SESSION_IS_INSTANCED_SESSION_()
		{
			return invoke<BOOL>(0x277865A734918AE6);
		} // 0x277865A734918AE6 undefined b1207
		static void NETWORK_AUTO_SESSION_FINISH_INSTANCE()
		{
			invoke<int>(0xBB51299166B844F3);
		} // 0xBB51299166B844F3 undefined b1207
		// Note: this native was added in build 1311.23
		static void N0xFD8112109A96877C()
		{
			invoke<int>(0xFD8112109A96877C);
		} // 0xFD8112109A96877C undefined b1311
		static void N0x5A91BCEF74944E93(Player player, float p1)
		{
			invoke<int>(0x5A91BCEF74944E93, player, p1);
		} // 0x5A91BCEF74944E93 undefined b1207
		// Note: this native was added in build 1311.23
		static int N0xFB3205788F8AFA3F()
		{
			return invoke<int>(0xFB3205788F8AFA3F);
		} // 0xFB3205788F8AFA3F undefined b1311
		// Note: this native was added in build 1311.23
		static void N0x335AF56613CA0F49(int p0)
		{
			invoke<int>(0x335AF56613CA0F49, p0);
		} // 0x335AF56613CA0F49 undefined b1311
		// Note: this native was added in build 1311.23
		static BOOL N0x9E5A47744C0F0376(int p0)
		{
			return invoke<BOOL>(0x9E5A47744C0F0376, p0);
		} // 0x9E5A47744C0F0376 undefined b1311
		// Note: this native was added in build 1311.23
		static void N0xD3B6EBC6C3D77D44(int p0)
		{
			invoke<int>(0xD3B6EBC6C3D77D44, p0);
		} // 0xD3B6EBC6C3D77D44 undefined b1311
		// Note: this native was added in build 1311.23
		static void N0xA7670F7991099680(int p0)
		{
			invoke<int>(0xA7670F7991099680, p0);
		} // 0xA7670F7991099680 undefined b1311
		// Note: this native was added in build 1311.23
		static void N0x7673C0D2C5CDAC55()
		{
			invoke<int>(0x7673C0D2C5CDAC55);
		} // 0x7673C0D2C5CDAC55 undefined b1311
		// Note: this native was added in build 1311.23
		static void N0x3CBD6565D9C3B133(int p0, int p1, float p2)
		{
			invoke<int>(0x3CBD6565D9C3B133, p0, p1, p2);
		} // 0x3CBD6565D9C3B133 undefined b1311
		// Note: this native was added in build 1311.23
		static void N0x0D183D8490EE4366(int p0, int p1)
		{
			invoke<int>(0x0D183D8490EE4366, p0, p1);
		} // 0x0D183D8490EE4366 undefined b1311
		// Note: this native was added in build 1311.23
		static void N0xC1968045EEB563B7(int p0)
		{
			invoke<int>(0xC1968045EEB563B7, p0);
		} // 0xC1968045EEB563B7 undefined b1311
		static BOOL NETWORK_AUTO_SESSION_IS_OBJECT_CREATION_PAUSED()
		{
			return invoke<BOOL>(0x0E2C3AEE6CE603B7);
		} // 0x0E2C3AEE6CE603B7 undefined b1207
		static BOOL N0x0B6B4507AC5EA8B8()
		{
			return invoke<BOOL>(0x0B6B4507AC5EA8B8);
		} // 0x0B6B4507AC5EA8B8 undefined b1207
		static BOOL NETWORK_IS_RESETTING_POPULATION()
		{
			return invoke<BOOL>(0x1BB50CD340A996E6);
		} // 0x1BB50CD340A996E6 undefined b1207
		static BOOL NETWORK_RESET_POPULATION(BOOL p0, int p1)
		{
			return invoke<BOOL>(0x101F538C25ABB39A, p0, p1);
		} // 0x101F538C25ABB39A undefined b1207
		static void NETWORK_DISABLE_LEAVE_REMOTE_PED_BEHIND(BOOL toggle)
		{
			invoke<int>(0xC505036A35AFD01B, toggle);
		} // 0xC505036A35AFD01B 0xA100CC97 b1207
		static void N0x3034C77C79A58880(BOOL p0)
		{
			invoke<int>(0x3034C77C79A58880, p0);
		} // 0x3034C77C79A58880 undefined b1207
		// Old name: _NETWORK_ALLOW_LOCAL_ENTITY_ATTACHMENT
		static void NETWORK_ALLOW_REMOTE_ATTACHMENT_MODIFICATION(Entity entity, BOOL toggle)
		{
			invoke<int>(0x267C78C60E806B9A, entity, toggle);
		} // 0x267C78C60E806B9A 0xBB2D33D3 b1207
		// nullsub, doesn't do anything
		static void NETWORK_SHOW_CHAT_RESTRICTION_MSC(Player player)
		{
			invoke<int>(0x6BFF5F84102DF80A, player);
		} // 0x6BFF5F84102DF80A  b1207
		// nullsub, doesn't do anything
		static void NETWORK_SHOW_PSN_UGC_RESTRICTION()
		{
			invoke<int>(0x5C497525F803486B);
		} // 0x5C497525F803486B  b1207
		// Old name: _NETWORK_IS_CONNECTION_ENDPOINT_RELAY_SERVER
		static BOOL NETWORK_IS_CONNECTED_VIA_RELAY(Player player)
		{
			return invoke<BOOL>(0x16D3D49902F697BB, player);
		} // 0x16D3D49902F697BB  b1207
		// Old name: _NETWORK_GET_AVERAGE_LATENCY_FOR_PLAYER
		static float NETWORK_GET_AVERAGE_LATENCY(Player player)
		{
			return invoke<float>(0xD414BE129BB81B32, player);
		} // 0xD414BE129BB81B32  b1207
		// Same as NETWORK_GET_AVERAGE_LATENCY (0xD414BE129BB81B32)
		//
		// Old name: _NETWORK_GET_AVERAGE_LATENCY_FOR_PLAYER_2
		static float NETWORK_GET_AVERAGE_PING(Player player)
		{
			return invoke<float>(0x0E3A041ED6AC2B45, player);
		} // 0x0E3A041ED6AC2B45  b1207
		// Old name: _NETWORK_GET_AVERAGE_PACKET_LOSS_FOR_PLAYER
		static float NETWORK_GET_AVERAGE_PACKET_LOSS(Player player)
		{
			return invoke<float>(0x350C23949E43686C, player);
		} // 0x350C23949E43686C  b1207
		// Old name: _NETWORK_GET_NUM_UNACKED_FOR_PLAYER
		static int NETWORK_GET_NUM_UNACKED_RELIABLES(Player player)
		{
			return invoke<int>(0xFF8FCF9FFC458A1C, player);
		} // 0xFF8FCF9FFC458A1C  b1207
		// Old name: _NETWORK_GET_UNRELIABLE_RESEND_COUNT_FOR_PLAYER
		static int NETWORK_GET_UNRELIABLE_RESEND_COUNT(Player player)
		{
			return invoke<int>(0x3765C3A3E8192E10, player);
		} // 0x3765C3A3E8192E10  b1207
		// Old name: _NETWORK_GET_OLDEST_RESEND_COUNT_FOR_PLAYER
		static int NETWORK_GET_HIGHEST_RELIABLE_RESEND_COUNT(Player player)
		{
			return invoke<int>(0x52C1EADAF7B10302, player);
		} // 0x52C1EADAF7B10302  b1207
		// nullsub, doesn't do anything
		static void NETWORK_DUMP_NET_IF_CONFIG()
		{
			invoke<int>(0xAEDF1BC1C133D6E3);
		} // 0xAEDF1BC1C133D6E3  b1207
		// nullsub, doesn't do anything
		static void NETWORK_GET_NET_STATISTICS_INFO()
		{
			invoke<int>(0x6FD992C4A1C1B986);
		} // 0x6FD992C4A1C1B986  b1207
		// Returns true if the passed value is less than 32.
		static BOOL NETWORK_IS_PLAYER_INDEX_VALID(Player player)
		{
			return invoke<BOOL>(0x255A5EF65EDA9167, player);
		} // 0x255A5EF65EDA9167 undefined b1207
		static BOOL GET_PLAYER_WAYPOINT_IS_ACTIVE_(Player player)
		{
			return invoke<BOOL>(0xDCC4B7F7112E8AB7, player);
		} // 0xDCC4B7F7112E8AB7 undefined b1207
		static void N0x455156F47DC6B78C(BOOL p0)
		{
			invoke<int>(0x455156F47DC6B78C, p0);
		} // 0x455156F47DC6B78C undefined b1207
		static void SET_LOCAL_PLAYER_DAMAGE_MULTIPLIER_FOR_PLAYER_(Player player, float damageMultiplier)
		{
			invoke<int>(0xD041A32992A55F84, player, damageMultiplier);
		} // 0xD041A32992A55F84 undefined b1207
		// Old name: _NETWORK_SET_VEHICLE_WHEELS_DESTRUCTIBLE
		static void NETWORK_TRIGGER_DAMAGE_EVENT_FOR_ZERO_DAMAGE(Entity entity, BOOL p1)
		{
			invoke<int>(0x0C8BC052AE87D744, entity, p1);
		} // 0x0C8BC052AE87D744  b1207
		static void N0x5CD3AAD8FF9ED121(Any p0)
		{
			invoke<int>(0x5CD3AAD8FF9ED121, p0);
		} // 0x5CD3AAD8FF9ED121 undefined b1207
		static void N0x51951DE06C0D1C40(Player player, int type)
		{
			invoke<int>(0x51951DE06C0D1C40, player, type);
		} // 0x51951DE06C0D1C40 undefined b1207
		static void N0xE3AB5EEFCB6671A2(int setting)
		{
			invoke<int>(0xE3AB5EEFCB6671A2, setting);
		} // 0xE3AB5EEFCB6671A2 undefined b1207
		static void N0x9B39B0555CC692B5()
		{
			invoke<int>(0x9B39B0555CC692B5);
		} // 0x9B39B0555CC692B5 undefined b1207
		static int N0xFE53B1F8D43F19BF(Player player1, Player player2)
		{
			return invoke<int>(0xFE53B1F8D43F19BF, player1, player2);
		} // 0xFE53B1F8D43F19BF undefined b1207
		static BOOL N0x862C5040F4888741(Player player1, Player player2)
		{
			return invoke<BOOL>(0x862C5040F4888741, player1, player2);
		} // 0x862C5040F4888741 undefined b1207
		// nullsub, doesn't do anything
		static void N0x2CD41AC000E6F611()
		{
			invoke<int>(0x2CD41AC000E6F611);
		} // 0x2CD41AC000E6F611 undefined b1207
		// nullsub, doesn't do anything
		static void N0xACC44768AF229042()
		{
			invoke<int>(0xACC44768AF229042);
		} // 0xACC44768AF229042 undefined b1207
		static void N0x7E300B5B86AB1D1A(Any* p0, int p1, int p2, int p3, int p4, int p5, int p6, int p7, int p8, int p9, int p10, int p11, int p12, int p13, int p14)
		{
			invoke<int>(0x7E300B5B86AB1D1A, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14);
		} // 0x7E300B5B86AB1D1A undefined b1207
		static int GET_UNIQUE_INT_FOR_PLAYER(Player player)
		{
			return invoke<int>(0x07F723401B9D921C, player);
		} // 0x07F723401B9D921C undefined b1207
		static void N0x780A13F780A13F1B(BOOL toggle)
		{
			invoke<int>(0x780A13F780A13F1B, toggle);
		} // 0x780A13F780A13F1B undefined b1311
		static BOOL NETWORK_IS_TRACKED_PLAYER_VISIBLE_(Player player, Player trackedPlayer)
		{
			return invoke<BOOL>(0xE525878A35B9EEBD, player, trackedPlayer);
		} // 0xE525878A35B9EEBD undefined b1207
		static BOOL NETWORK_IS_AIM_CAM_ACTIVE(Player player)
		{
			return invoke<BOOL>(0x8E7CE19219669AEB, player);
		} // 0x8E7CE19219669AEB undefined b1207
		static void NETWORK_ALERT_(Hash ctx, Hash lh, int ec, int h)
		{
			invoke<int>(0x1BAA028F52EED310, ctx, lh, ec, h);
		} // 0x1BAA028F52EED310 undefined b1311
		// Note: this native was added in build 1311.23
		static void N0x19447FCAE97704DC(Hash ctx, int ec, BOOL ex, BOOL ro)
		{
			invoke<int>(0x19447FCAE97704DC, ctx, ec, ex, ro);
		} // 0x19447FCAE97704DC undefined b1311
		// nullsub, doesn't do anything
		static void N0x2C4E98DDA475364F(const char* p0)
		{
			invoke<int>(0x2C4E98DDA475364F, p0);
		} // 0x2C4E98DDA475364F undefined b1207
		static void N0x3F0ABAE38A0515AD(int p0, int p1)
		{
			invoke<int>(0x3F0ABAE38A0515AD, p0, p1);
		} // 0x3F0ABAE38A0515AD undefined b1207
		static int N0x3F2EE18A3E294801(int p0)
		{
			return invoke<int>(0x3F2EE18A3E294801, p0);
		} // 0x3F2EE18A3E294801 undefined b1207
		static void SET_SOCIAL_MATCHMAKING_ALLOWED_(BOOL toggle)
		{
			invoke<int>(0x777D0571A466B520, toggle);
		} // 0x777D0571A466B520 undefined b1207
		static BOOL GET_SOCIAL_MATCHMAKING_ALLOWED_()
		{
			return invoke<BOOL>(0xD0541EF28E9C4783);
		} // 0xD0541EF28E9C4783 undefined b1207
		static BOOL NETWORK_AWARD_HAS_REACHED_MAXCLAIM(Any p0)
		{
			return invoke<BOOL>(0xFBE782B3165AC8EC, p0);
		} // 0xFBE782B3165AC8EC undefined b1207
		static Any N0x271F95E55C663B8B(Any p0, Any p1)
		{
			return invoke<Any>(0x271F95E55C663B8B, p0, p1);
		} // 0x271F95E55C663B8B undefined b1207
		static Any N0x64A36BA85CE01A81(Any p0, Any p1, Any p2, Any p3)
		{
			return invoke<Any>(0x64A36BA85CE01A81, p0, p1, p2, p3);
		} // 0x64A36BA85CE01A81 undefined b1207
		static Any N0xE10F2D7715ABABEC(Any p0)
		{
			return invoke<Any>(0xE10F2D7715ABABEC, p0);
		} // 0xE10F2D7715ABABEC undefined b1207
		static Any N0x7A8E8DF782B47EB0(Any p0, Any p1, Any p2)
		{
			return invoke<Any>(0x7A8E8DF782B47EB0, p0, p1, p2);
		} // 0x7A8E8DF782B47EB0 undefined b1207
		static Any N0x77B299E8799B1332(Any p0, Any p1, Any p2)
		{
			return invoke<Any>(0x77B299E8799B1332, p0, p1, p2);
		} // 0x77B299E8799B1332 undefined b1207
		static Any N0x923346025512DFB7(Any p0)
		{
			return invoke<Any>(0x923346025512DFB7, p0);
		} // 0x923346025512DFB7 undefined b1207
		static int NETWORK_GET_XP_()
		{
			return invoke<int>(0xDB438CC9BC6F4022);
		} // 0xDB438CC9BC6F4022 undefined b1207
		static int NETWORK_GET_RANK_()
		{
			return invoke<int>(0x32C90CDFAF40514C);
		} // 0x32C90CDFAF40514C undefined b1207
		static void NETWORK_SET_RECENT_GAMERS_ENABLED(BOOL toggle)
		{
			invoke<int>(0x29FE035D35B8589C, toggle);
		} // 0x29FE035D35B8589C undefined b1207
		static BOOL N0x273E04A3A7AD1F2D()
		{
			return invoke<BOOL>(0x273E04A3A7AD1F2D);
		} // 0x273E04A3A7AD1F2D undefined b1207
		static void NETWORK_ADD_PLAYER_TO_RECENT_GAMERS_LIST_(Player player, int p1)
		{
			invoke<int>(0x157D8F3DE12B307F, player, p1);
		} // 0x157D8F3DE12B307F undefined b1207
		static BOOL NETWORK_REQUEST_RECENT_GAMER_NAMES(int p0, int playerCount)
		{
			return invoke<BOOL>(0x6D206D383BB5F6B1, p0, playerCount);
		} // 0x6D206D383BB5F6B1 undefined b1207
		static BOOL NETWORK_IS_RECENT_GAMER_NAMES_REQUEST_IN_PROGRESS_()
		{
			return invoke<BOOL>(0x4664D213A0CCAF40);
		} // 0x4664D213A0CCAF40 undefined b1207
		static BOOL NETWORK_DID_RECENT_GAMER_NAMES_REQUEST_SUCCEED_()
		{
			return invoke<BOOL>(0x12AEB56B489415C5);
		} // 0x12AEB56B489415C5 undefined b1207
		static int NETWORK_GET_NUM_RECENT_GAMERS_()
		{
			return invoke<int>(0x37A834AEC6A4F74A);
		} // 0x37A834AEC6A4F74A undefined b1207
		static BOOL NETWORK_GET_RECENT_GAMER_NAMES(int p0, int p1, Any* outData, int dataSize)
		{
			return invoke<BOOL>(0xFEFCC345CE357453, p0, p1, outData, dataSize);
		} // 0xFEFCC345CE357453 undefined b1207
		static void N0x49CF17A564918E8D()
		{
			invoke<int>(0x49CF17A564918E8D);
		} // 0x49CF17A564918E8D undefined b1207
		static void N0xD637D327080CD86E(int p0)
		{
			invoke<int>(0xD637D327080CD86E, p0);
		} // 0xD637D327080CD86E undefined b1207
		static void N0x564552C6AF1EEAB1()
		{
			invoke<int>(0x564552C6AF1EEAB1);
		} // 0x564552C6AF1EEAB1 undefined b1207
		static void NETWORK_ACTIVITY_RESET_TO_IDLE()
		{
			invoke<int>(0x3FE141FDB990E3D1);
		} // 0x3FE141FDB990E3D1 undefined b1207
		static void NETWORK_ACTIVITY_SET_CURRENT(int netPlaylistActivity)
		{
			invoke<int>(0x9ADAC065D9F6706F, netPlaylistActivity);
		} // 0x9ADAC065D9F6706F undefined b1207
		// Returns CGameConfig->ConfigOnlineServices->RosTitleName (see gameconfig.xml)
		static const char* NETWORK_GET_ROS_TITLE_NAME_()
		{
			return invoke<const char*>(0xAC6153A0722F524C);
		} // 0xAC6153A0722F524C undefined b1207
		static void REPORT_PLAYER_(Player player, int reportType, const char* description, const char* horseName)
		{
			invoke<int>(0xA197C35F73AC0F12, player, reportType, description, horseName);
		} // 0xA197C35F73AC0F12 undefined b1207
	}

	namespace OBJECT
	{
		static Object CREATE_OBJECT(Hash modelHash, float x, float y, float z, BOOL isNetwork, BOOL bScriptHostObj, BOOL dynamic, BOOL p7, BOOL p8)
		{
			return invoke<Object>(0x509D5878EB39E842, modelHash, x, y, z, isNetwork, bScriptHostObj, dynamic, p7, p8);
		} // 0x509D5878EB39E842 0x2F7AA05C b1207
		static Object CREATE_OBJECT_NO_OFFSET(Hash modelHash, float x, float y, float z, BOOL isNetwork, BOOL bScriptHostObj, BOOL dynamic, BOOL p7)
		{
			return invoke<Object>(0x9A294B2138ABB884, modelHash, x, y, z, isNetwork, bScriptHostObj, dynamic, p7);
		} // 0x9A294B2138ABB884 0x58040420 b1207
		// Deletes the specified object, then sets the handle pointed to by the pointer to NULL.
		static void DELETE_OBJECT(Object* object)
		{
			invoke<int>(0x931914268722C263, object);
		} // 0x931914268722C263 0xD6EF9DA7 b1207
		static BOOL PLACE_OBJECT_ON_GROUND_PROPERLY(Object object, BOOL p1)
		{
			return invoke<BOOL>(0x58A850EAEE20FAA3, object, p1);
		} // 0x58A850EAEE20FAA3 0x8F95A20B b1207
		static BOOL SLIDE_OBJECT(Object object, float toX, float toY, float toZ, float speedX, float speedY, float speedZ, BOOL collision)
		{
			return invoke<BOOL>(0x2FDFF4107B8C1147, object, toX, toY, toZ, speedX, speedY, speedZ, collision);
		} // 0x2FDFF4107B8C1147 0x63BFA7A0 b1207
		static void SET_OBJECT_TARGETTABLE(Object object, BOOL targettable)
		{
			invoke<int>(0x8A7391690F5AFD81, object, targettable);
		} // 0x8A7391690F5AFD81 0x3F88CD86 b1207
		static void SET_OBJECT_TARGETTABLE_2_(Object object, BOOL targettable)
		{
			invoke<int>(0x581EDBE56E8D62C9, object, targettable);
		} // 0x581EDBE56E8D62C9 undefined b1207
		// When p1 and p2 are true you can focus on the object (similar to when you focus a ped)
		static void SET_OBJECT_TARGETTABLE_FOCUS_(Object object, BOOL p1, BOOL p2)
		{
			invoke<int>(0xA22712E8471AA08E, object, p1, p2);
		} // 0xA22712E8471AA08E undefined b1207
		static void N0xF6E88489B4E6EBE5(Any p0, Any p1)
		{
			invoke<int>(0xF6E88489B4E6EBE5, p0, p1);
		} // 0xF6E88489B4E6EBE5 undefined b1207
		static void N0xE157A8A336C7F04A(Any p0, Any p1)
		{
			invoke<int>(0xE157A8A336C7F04A, p0, p1);
		} // 0xE157A8A336C7F04A undefined b1207
		static void N0x46CBCF0E98A4E156(Any p0, Any p1)
		{
			invoke<int>(0x46CBCF0E98A4E156, p0, p1);
		} // 0x46CBCF0E98A4E156 undefined b1207
		// missionScriptObject - if true won't return mission script objects
		// scriptHostObject - if true won't return script host objects
		// networkObject - if true won't return networked objects
		static Object GET_CLOSEST_OBJECT_OF_TYPE(float x, float y, float z, float radius, Hash modelHash, BOOL missionScriptObject, BOOL scriptHostObject, BOOL networkObject)
		{
			return invoke<Object>(0xE143FA2249364369, x, y, z, radius, modelHash, missionScriptObject, scriptHostObject, networkObject);
		} // 0xE143FA2249364369 0x45619B33 b1207
		static BOOL HAS_OBJECT_BEEN_BROKEN(Any p0)
		{
			return invoke<BOOL>(0x8ABFB70C49CC43E2, p0);
		} // 0x8ABFB70C49CC43E2 0xFE21F891 b1207
		static BOOL HAS_CLOSEST_OBJECT_OF_TYPE_BEEN_BROKEN(float p0, float p1, float p2, float p3, Hash modelHash, Any p5)
		{
			return invoke<BOOL>(0x761B0E69AC4D007E, p0, p1, p2, p3, modelHash, p5);
		} // 0x761B0E69AC4D007E 0x6FC0353D b1207
		// Old name: _GET_OBJECT_OFFSET_FROM_COORDS
		static Vector3 GET_OFFSET_FROM_COORD_AND_HEADING_IN_WORLD_COORDS(float xPos, float yPos, float zPos, float heading, float xOffset, float yOffset, float zOffset)
		{
			return invoke<Vector3>(0x163E252DE035A133, xPos, yPos, zPos, heading, xOffset, yOffset, zOffset);
		} // 0x163E252DE035A133 0x87A42A12 b1207
		// Registers a door, hashes: https://github.com/femga/rdr3_discoveries/tree/master/doorHashes
		static void ADD_DOOR_TO_SYSTEM_NEW_(Hash doorHash, BOOL p1, BOOL p2, BOOL p3, int threadId, int p5, BOOL p6)
		{
			invoke<int>(0xD99229FE93B46286, doorHash, p1, p2, p3, threadId, p5, p6);
		} // 0xD99229FE93B46286 undefined b1207
		static BOOL IS_DOOR_REGISTERED_WITH_NETWORK_(Hash doorHash)
		{
			return invoke<BOOL>(0xB5DED7B65C604FDF, doorHash);
		} // 0xB5DED7B65C604FDF undefined b1207
		static void REMOVE_DOOR_FROM_SYSTEM(Hash doorHash)
		{
			invoke<int>(0x464D8E1427156FE4, doorHash);
		} // 0x464D8E1427156FE4 0x00253286 b1207
		// Door lock states:
		// enum eDoorState
		// {
		// 	DOORSTATE_INVALID = -1,
		// 	DOORSTATE_UNLOCKED,
		// 	DOORSTATE_LOCKED_UNBREAKABLE,
		// 	DOORSTATE_LOCKED_BREAKABLE,
		// 	DOORSTATE_HOLD_OPEN_POSITIVE,
		// 	DOORSTATE_HOLD_OPEN_NEGATIVE
		// };
		static void DOOR_SYSTEM_SET_DOOR_STATE(Hash doorHash, int state)
		{
			invoke<int>(0x6BAB9442830C7F53, doorHash, state);
		} // 0x6BAB9442830C7F53 0xDF83DB47 b1207
		static int DOOR_SYSTEM_GET_DOOR_STATE(Hash doorHash)
		{
			return invoke<int>(0x160AA1B32F6139B8, doorHash);
		} // 0x160AA1B32F6139B8 0xD42A41C2 b1207
		static void DOOR_SYSTEM_SET_AUTOMATIC_RATE(Hash doorHash, float rate)
		{
			invoke<int>(0x03C27E13B42A0E82, doorHash, rate);
		} // 0x03C27E13B42A0E82 0x4F44AF21 b1207
		static void DOOR_SYSTEM_SET_AUTOMATIC_DISTANCE(Hash doorHash, float distance)
		{
			invoke<int>(0x9BA001CB45CBF627, doorHash, distance);
		} // 0x9BA001CB45CBF627 0x47531446 b1207
		static void N0xB3B1546D23DF8DE1(Any p0, Any p1, Any p2, Any p3, Any p4)
		{
			invoke<int>(0xB3B1546D23DF8DE1, p0, p1, p2, p3, p4);
		} // 0xB3B1546D23DF8DE1 undefined b1207
		// Sets the ajar angle of a door.
		// Ranges from -1.0 to 1.0, and 0.0 is closed / default.
		static void DOOR_SYSTEM_SET_OPEN_RATIO(Hash doorHash, float ajar, BOOL forceUpdate)
		{
			invoke<int>(0xB6E6FBA95C7324AC, doorHash, ajar, forceUpdate);
		} // 0xB6E6FBA95C7324AC 0x34883DE3 b1207
		static void N0x3A77DAE8B4FD7586(Any p0, Any p1)
		{
			invoke<int>(0x3A77DAE8B4FD7586, p0, p1);
		} // 0x3A77DAE8B4FD7586 undefined b1207
		static void DOOR_SYSTEM_SET_ABLE_TO_CHANGE_OPEN_RATIO_WHILE_LOCKED_(Hash doorHash, BOOL p1)
		{
			invoke<int>(0x1F1FABFE9B2A1254, doorHash, p1);
		} // 0x1F1FABFE9B2A1254 undefined b1207
		// Returns true if door is alredy registered with owner
		static BOOL IS_DOOR_REGISTERED_WITH_OWNER_(Hash doorHash)
		{
			return invoke<BOOL>(0x4F89DAD4156BA145, doorHash);
		} // 0x4F89DAD4156BA145 undefined b1207
		static void DOOR_SYSTEM_CHANGE_SCRIPT_OWNER_(Hash doorHash)
		{
			invoke<int>(0x985767F5FA45BC44, doorHash);
		} // 0x985767F5FA45BC44 undefined b1207
		static float DOOR_SYSTEM_GET_AUTOMATIC_RATE_(Hash doorHash)
		{
			return invoke<float>(0x8433E1954BE323FC, doorHash);
		} // 0x8433E1954BE323FC undefined b1207
		static Any N0x6E2AA80BB0C03728(Any p0, Any p1)
		{
			return invoke<Any>(0x6E2AA80BB0C03728, p0, p1);
		} // 0x6E2AA80BB0C03728 undefined b1207
		// _ALLOW_* - _ATTACH_*
		static void DOOR_SYSTEM_SET_AUTOMATIC_STATE_(Hash doorHash, BOOL disable)
		{
			invoke<int>(0x1BC47A9DEDC8DF5D, doorHash, disable);
		} // 0x1BC47A9DEDC8DF5D undefined b1207
		static float DOOR_SYSTEM_GET_OPEN_RATIO(Hash doorHash)
		{
			return invoke<float>(0x65499865FCA6E5EC, doorHash);
		} // 0x65499865FCA6E5EC 0xB74C3BD7 b1207
		static void N0x7F458B543006C8FE(Any p0, Any p1)
		{
			invoke<int>(0x7F458B543006C8FE, p0, p1);
		} // 0x7F458B543006C8FE undefined b1207
		static Any N0xACD4F9831DFAD7F5(Any p0)
		{
			return invoke<Any>(0xACD4F9831DFAD7F5, p0);
		} // 0xACD4F9831DFAD7F5 undefined b1207
		static void N0x0C0A373D181BF900(Any p0)
		{
			invoke<int>(0x0C0A373D181BF900, p0);
		} // 0x0C0A373D181BF900 undefined b1207
		static void N0xA93F925F1942E434(Any p0, Any p1)
		{
			invoke<int>(0xA93F925F1942E434, p0, p1);
		} // 0xA93F925F1942E434 undefined b1207
		static Any N0x4D8611DFE1126478(Any p0)
		{
			return invoke<Any>(0x4D8611DFE1126478, p0);
		} // 0x4D8611DFE1126478 undefined b1207
		static void N0x57C242543B7B8FB9(Any p0, Any p1)
		{
			invoke<int>(0x57C242543B7B8FB9, p0, p1);
		} // 0x57C242543B7B8FB9 undefined b1207
		static void N0x4AE07EBA3462C5D5(Any p0, Any p1)
		{
			invoke<int>(0x4AE07EBA3462C5D5, p0, p1);
		} // 0x4AE07EBA3462C5D5 undefined b1207
		static void N0x22031584496CFB70(Any p0, Any p1)
		{
			invoke<int>(0x22031584496CFB70, p0, p1);
		} // 0x22031584496CFB70 undefined b1207
		static void N0xC07B91B996C1DE89(Any p0, Any p1)
		{
			invoke<int>(0xC07B91B996C1DE89, p0, p1);
		} // 0xC07B91B996C1DE89 undefined b1207
		static BOOL IS_DOOR_REGISTERED_WITH_SYSTEM(Hash doorHash)
		{
			return invoke<BOOL>(0xC153C43EA202C8C1, doorHash);
		} // 0xC153C43EA202C8C1 0x5AFCD8A1 b1207
		static BOOL IS_DOOR_CLOSED(Hash doorHash)
		{
			return invoke<BOOL>(0xC531EE8A1145A149, doorHash);
		} // 0xC531EE8A1145A149 0x48659CD7 b1207
		// Params: p1 = 23 in R* Scripts
		static Any N0x0943113E02322164(Object object, int p1)
		{
			return invoke<Any>(0x0943113E02322164, object, p1);
		} // 0x0943113E02322164 undefined b1207
		static Any N0x614D0B4533F842D3(Any p0)
		{
			return invoke<Any>(0x614D0B4533F842D3, p0);
		} // 0x614D0B4533F842D3 undefined b1207
		static void DOOR_SYSTEM_FORCE_SHUT_(Hash doorHash, BOOL p1)
		{
			invoke<int>(0x276AAF0F1C7F2494, doorHash, p1);
		} // 0x276AAF0F1C7F2494 undefined b1207
		static Any N0xEBA314768FB35D58(Any p0)
		{
			return invoke<Any>(0xEBA314768FB35D58, p0);
		} // 0xEBA314768FB35D58 undefined b1207
		static void N0x5230BF34EB0EC645(Any p0)
		{
			invoke<int>(0x5230BF34EB0EC645, p0);
		} // 0x5230BF34EB0EC645 undefined b1207
		static BOOL DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS(float x, float y, float z, float radius, Hash hash, BOOL p5)
		{
			return invoke<BOOL>(0xBFA48E2FF417213F, x, y, z, radius, hash, p5);
		} // 0xBFA48E2FF417213F 0x23FF2BA4 b1207
		static BOOL IS_POINT_IN_ANGLED_AREA(float p0, float p1, float p2, float p3, float p4, float p5, float p6, float p7, float p8, float p9, BOOL p10, BOOL p11)
		{
			return invoke<BOOL>(0x2A70BAE8883E4C81, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11);
		} // 0x2A70BAE8883E4C81 0x73BCFFDC b1207
		static void SET_OBJECT_ALLOW_LOW_LOD_BUOYANCY(Object object, BOOL toggle)
		{
			invoke<int>(0x4D89D607CB3DD1D2, object, toggle);
		} // 0x4D89D607CB3DD1D2 0x19B17769 b1207
		// Adjust the physics parameters of a prop, or otherwise known as "object". This is useful for simulated gravity.
		//
		// Other parameters seem to be unknown.
		//
		// p2: seems to be weight and gravity related. Higher value makes the obj fall faster. Very sensitive?
		// p3: seems similar to p2
		// p4: makes obj fall slower the higher the value
		// p5: similar to p4
		static void SET_OBJECT_PHYSICS_PARAMS(Object object, float weight, float p2, float p3, float p4, float p5, float gravity, float p7, float p8, float p9, float p10, float buoyancy)
		{
			invoke<int>(0xF6DF6E90DE7DF90F, object, weight, p2, p3, p4, p5, gravity, p7, p8, p9, p10, buoyancy);
		} // 0xF6DF6E90DE7DF90F 0xE8D11C58 b1207
		static float GET_OBJECT_FRAGMENT_DAMAGE_HEALTH(Any p0, BOOL p1)
		{
			return invoke<float>(0xB6FBFD079B8D0596, p0, p1);
		} // 0xB6FBFD079B8D0596 0xF0B330AD b1207
		static Any N0x235C863DA77BD88D(Any p0, Any p1, Any p2)
		{
			return invoke<Any>(0x235C863DA77BD88D, p0, p1, p2);
		} // 0x235C863DA77BD88D undefined b1207
		static void SET_ACTIVATE_OBJECT_PHYSICS_AS_SOON_AS_IT_IS_UNFROZEN(Object object, BOOL toggle)
		{
			invoke<int>(0x406137F8EF90EAF5, object, toggle);
		} // 0x406137F8EF90EAF5 0x3E263AE1 b1207
		static void BREAK_OBJECT_FRAGMENT_CHILD(Object object, Any p1, BOOL p2)
		{
			invoke<int>(0xE7E4C198B0185900, object, p1, p2);
		} // 0xE7E4C198B0185900 0x1E82C2AE b1207
		static void BREAK_ALL_OBJECT_FRAGMENT_BONES(Object object)
		{
			invoke<int>(0x8462BE2341A55B6F, object);
		} // 0x8462BE2341A55B6F undefined b1207
		static void N0xAAACF33CBF9B990A(Any p0, Any p1)
		{
			invoke<int>(0xAAACF33CBF9B990A, p0, p1);
		} // 0xAAACF33CBF9B990A undefined b1207
		static void DAMAGE_BONE_ON_PROP_(Object object, int bone)
		{
			invoke<int>(0xE4EFB315BCD2A838, object, bone);
		} // 0xE4EFB315BCD2A838 undefined b1207
		static void FIX_OBJECT_FRAGMENT(Object object)
		{
			invoke<int>(0xF9C1681347C8BD15, object);
		} // 0xF9C1681347C8BD15  b1207
		static Any N0x58DE624FA7FB0E7F(Any p0)
		{
			return invoke<Any>(0x58DE624FA7FB0E7F, p0);
		} // 0x58DE624FA7FB0E7F undefined b1207
		static void N0x491439AEF410A2FC(Any p0)
		{
			invoke<int>(0x491439AEF410A2FC, p0);
		} // 0x491439AEF410A2FC undefined b1207
		static void SET_OBJECT_BREAK_SCALE_(Object object, float scale)
		{
			invoke<int>(0xFFB99FFD17F65889, object, scale);
		} // 0xFFB99FFD17F65889 undefined b1207
		static void N0xCEAB54F4632C6EF6(Any p0, Any p1)
		{
			invoke<int>(0xCEAB54F4632C6EF6, p0, p1);
		} // 0xCEAB54F4632C6EF6 undefined b1207
		static void TRACK_OBJECT_VISIBILITY(Object object)
		{
			invoke<int>(0xB252BC036B525623, object);
		} // 0xB252BC036B525623 0x46D06B9A b1207
		static BOOL IS_OBJECT_VISIBLE(Object object)
		{
			return invoke<BOOL>(0x8B32ACE6326A7546, object);
		} // 0x8B32ACE6326A7546 0xF4FD8AE4 b1207
		static void SET_OBJECT_TAKES_DAMAGE_FROM_COLLIDING_WITH_BUILDINGS(Object object, BOOL enabled)
		{
			invoke<int>(0xEB6F1A9B5510A5D2, object, enabled);
		} // 0xEB6F1A9B5510A5D2 0xAF016CC1 b1207
		static void ALLOW_DAMAGE_EVENTS_FOR_NON_NETWORKED_OBJECTS(BOOL enabled)
		{
			invoke<int>(0xE2B3B852B537C398, enabled);
		} // 0xE2B3B852B537C398 undefined b1207
		static void N0x6579860A5558524A(Any p0, Any p1)
		{
			invoke<int>(0x6579860A5558524A, p0, p1);
		} // 0x6579860A5558524A undefined b1207
		static void N0xDFA1237F5228263F(Any p0, Any p1)
		{
			invoke<int>(0xDFA1237F5228263F, p0, p1);
		} // 0xDFA1237F5228263F undefined b1207
		static float GET_LIGHT_INTENSITY_FROM_OBJECT_(Object object)
		{
			return invoke<float>(0xFA3B61EC249B4674, object);
		} // 0xFA3B61EC249B4674 undefined b1207
		static void SET_LIGHT_INTENSITY_FOR_OBJECT_(Object object, float lightIntensity)
		{
			invoke<int>(0xF49574E2332A8F06, object, lightIntensity);
		} // 0xF49574E2332A8F06 undefined b1207
		// Params: value = 0.0 - 586.67 (?)
		static void SET_LIGHT_TRANSLUCENCY_FOR_OBJECT_(Object object, float value)
		{
			invoke<int>(0x63E39F09310F481F, object, value);
		} // 0x63E39F09310F481F undefined b1207
		static void SET_LIGHT_SCATTERING_DISABLED_FOR_OBJECT_(Object object, BOOL disable)
		{
			invoke<int>(0x04D1D4E411CE52D0, object, disable);
		} // 0x04D1D4E411CE52D0 undefined b1207
		static void N0x7FCD49388BC9B775(Any p0, Any p1)
		{
			invoke<int>(0x7FCD49388BC9B775, p0, p1);
		} // 0x7FCD49388BC9B775 undefined b1207
		static Any N0xFA99E8E575F2FEF8(Any p0)
		{
			return invoke<Any>(0xFA99E8E575F2FEF8, p0);
		} // 0xFA99E8E575F2FEF8 undefined b1436
		static Object GET_RAYFIRE_MAP_OBJECT(float x, float y, float z, float radius, const char* name)
		{
			return invoke<Object>(0xB48FCED898292E52, x, y, z, radius, name);
		} // 0xB48FCED898292E52 0xA286DE96 b1207
		static void SET_STATE_OF_RAYFIRE_MAP_OBJECT(Object object, int state)
		{
			invoke<int>(0x5C29F698D404C5E1, object, state);
		} // 0x5C29F698D404C5E1 0x21F51560 b1207
		static int GET_STATE_OF_RAYFIRE_MAP_OBJECT(Object object)
		{
			return invoke<int>(0x899BA936634A322E, object);
		} // 0x899BA936634A322E 0xF1B8817A b1207
		static BOOL DOES_RAYFIRE_MAP_OBJECT_EXIST(Object object)
		{
			return invoke<BOOL>(0x52AF537A0C5B8AAD, object);
		} // 0x52AF537A0C5B8AAD 0xE08C834D b1207
		static float GET_RAYFIRE_MAP_OBJECT_ANIM_PHASE(Object object)
		{
			return invoke<float>(0x260EE4FDBDF4DB01, object);
		} // 0x260EE4FDBDF4DB01 0x020497DE b1207
		// https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/Placement%20Flags
		// https://github.com/femga/rdr3_discoveries/blob/master/objects/pickup_list.lua
		static Pickup CREATE_PICKUP(Hash pickupHash, float x, float y, float z, int flags, int p5, BOOL p6, Hash modelHash, int p8, float p9, Any p10)
		{
			return invoke<Pickup>(0xFBA08C503DD5FA58, pickupHash, x, y, z, flags, p5, p6, modelHash, p8, p9, p10);
		} // 0xFBA08C503DD5FA58 0x5E14DF68 b1207
		// flags: see CREATE_PICKUP
		static Pickup CREATE_PICKUP_ROTATE(Hash pickupHash, float posX, float posY, float posZ, float rotX, float rotY, float rotZ, int flags, int p8, int p9, BOOL p10, Hash modelHash, int p12, float p13, Any p14)
		{
			return invoke<Pickup>(0x891804727E0A98B7, pickupHash, posX, posY, posZ, rotX, rotY, rotZ, flags, p8, p9, p10, modelHash, p12, p13, p14);
		} // 0x891804727E0A98B7 0xF015BFE2 b1207
		// flags: see CREATE_PICKUP
		static Object CREATE_AMBIENT_PICKUP(Hash pickupHash, float x, float y, float z, int flags, int value, Hash modelHash, BOOL p7, BOOL p8, int p9, float p10)
		{
			return invoke<Object>(0x673966A0C0FD7171, pickupHash, x, y, z, flags, value, modelHash, p7, p8, p9, p10);
		} // 0x673966A0C0FD7171 0x17B99CE7 b1207
		static Object CREATE_PORTABLE_PICKUP(Hash pickupHash, float x, float y, float z, BOOL placeOnGround, Hash modelHash)
		{
			return invoke<Object>(0x2EAF1FDB2FB55698, pickupHash, x, y, z, placeOnGround, modelHash);
		} // 0x2EAF1FDB2FB55698 0x8C886BE5 b1207
		static void ATTACH_PORTABLE_PICKUP_TO_PED(Object pickupObject, Ped ped)
		{
			invoke<int>(0x8DC39368BDD57755, pickupObject, ped);
		} // 0x8DC39368BDD57755 0x184F6AB3 b1207
		static void DETACH_PORTABLE_PICKUP_FROM_PED(Object pickupObject)
		{
			invoke<int>(0xCF463D1E9A0AECB1, pickupObject);
		} // 0xCF463D1E9A0AECB1 0x1D094562 b1207
		static void HIDE_PICKUP_OBJECT_(Object pickupObject, BOOL toggle)
		{
			invoke<int>(0x2777150CC7D9365E, pickupObject, toggle);
		} // 0x2777150CC7D9365E undefined b1207
		static void SET_MAX_NUM_PORTABLE_PICKUPS_CARRIED_BY_PLAYER(Hash modelHash, int p1)
		{
			invoke<int>(0x0BF3B3BD47D79C08, modelHash, p1);
		} // 0x0BF3B3BD47D79C08 0x7EFBA039 b1207
		static Any N0x3E2616E7EA539480(Any p0)
		{
			return invoke<Any>(0x3E2616E7EA539480, p0);
		} // 0x3E2616E7EA539480 undefined b1207
		static void SET_LOCAL_PLAYER_CAN_COLLECT_PORTABLE_PICKUPS(BOOL toggle)
		{
			invoke<int>(0x78857FC65CADB909, toggle);
		} // 0x78857FC65CADB909 0xA3CDF152 b1207
		static Vector3 GET_SAFE_PICKUP_COORDS(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5)
		{
			return invoke<Vector3>(0x6E16BC2503FF1FF0, p0, p1, p2, p3, p4, p5);
		} // 0x6E16BC2503FF1FF0 0x618B5F67 b1207
		static Vector3 GET_PICKUP_COORDS(Pickup pickup)
		{
			return invoke<Vector3>(0x225B8B35C88029B3, pickup);
		} // 0x225B8B35C88029B3 0xC2E1E2C5 b1207
		static void REMOVE_ALL_PICKUPS_OF_TYPE(Hash pickupHash)
		{
			invoke<int>(0x27F9D613092159CF, pickupHash);
		} // 0x27F9D613092159CF 0x40062C53 b1207
		static BOOL HAS_PICKUP_BEEN_COLLECTED(Pickup pickup)
		{
			return invoke<BOOL>(0x80EC48E6679313F9, pickup);
		} // 0x80EC48E6679313F9 0x0BE5CCED b1207
		static void REMOVE_PICKUP(Pickup pickup)
		{
			invoke<int>(0x3288D8ACAECD2AB2, pickup);
		} // 0x3288D8ACAECD2AB2 0x64A7A0E0 b1207
		static void SET_PICKUP_DO_NOT_AUTO_PLACE_ON_GROUND(Object pickupObject)
		{
			invoke<int>(0x634C19521485AB25, pickupObject);
		} // 0x634C19521485AB25 undefined b1207
		static BOOL DOES_PICKUP_EXIST(Pickup pickup)
		{
			return invoke<BOOL>(0xAFC1CA75AD4074D1, pickup);
		} // 0xAFC1CA75AD4074D1 0x9C6DA0B3 b1207
		static BOOL DOES_PICKUP_OBJECT_EXIST(Object pickupObject)
		{
			return invoke<BOOL>(0xD9EFB6DBF7DAAEA3, pickupObject);
		} // 0xD9EFB6DBF7DAAEA3 0xE0B32108 b1207
		static Object GET_PICKUP_OBJECT(Pickup pickup)
		{
			return invoke<Object>(0x5099BC55630B25AE, pickup);
		} // 0x5099BC55630B25AE 0x6052E62E b1207
		static BOOL IS_OBJECT_A_PORTABLE_PICKUP(Object object)
		{
			return invoke<BOOL>(0x0378C08504160D0D, object);
		} // 0x0378C08504160D0D 0x0F0E94FF b1207
		static BOOL IS_PICKUP_TYPE_VALID_(Hash pickupHash)
		{
			return invoke<BOOL>(0x007BD043587F7C82, pickupHash);
		} // 0x007BD043587F7C82 undefined b1207
		static BOOL DOES_PICKUP_OF_TYPE_EXIST_IN_AREA(Hash pickupHash, float x, float y, float z, float radius)
		{
			return invoke<BOOL>(0xF9C36251F6E48E33, pickupHash, x, y, z, radius);
		} // 0xF9C36251F6E48E33 0xF139681B b1207
		static void SET_PICKUP_REGENERATION_TIME(Pickup pickup, int duration)
		{
			invoke<int>(0x78015C9B4B3ECC9D, pickup, duration);
		} // 0x78015C9B4B3ECC9D 0xAB11267D b1207
		static void FORCE_PICKUP_REGENERATE(Any p0)
		{
			invoke<int>(0x758A5C1B3B1E1990, p0);
		} // 0x758A5C1B3B1E1990  b1207
		// Params: p2 controls whether to make pickups usable/collectable or not in networked games
		static void SET_NETWORK_PICKUP_USABLE_FOR_PLAYER_(Player player, Hash pickupHash, BOOL isUsable)
		{
			invoke<int>(0x94F3D956BFAEAE18, player, pickupHash, isUsable);
		} // 0x94F3D956BFAEAE18 undefined b1207
		// Maximum amount of pickup models that can be disallowed is 10.
		//
		// Old name: _SET_LOCAL_PLAYER_CAN_USE_PICKUPS_WITH_THIS_MODEL
		static void SET_LOCAL_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_WITH_MODEL(Hash modelHash, BOOL toggle)
		{
			invoke<int>(0x88EAEC617CD26926, modelHash, toggle);
		} // 0x88EAEC617CD26926 0x3A8F1BF7 b1207
		static void BLOCK_PICKUP_FROM_PLAYER_COLLECTION(Any p0, Any p1)
		{
			invoke<int>(0xB8F5062070BB6DBD, p0, p1);
		} // 0xB8F5062070BB6DBD undefined b1207
		static void SET_PICKUP_NOT_LOOTABLE(Any p0, Any p1)
		{
			invoke<int>(0x92E87F60F21A0C3A, p0, p1);
		} // 0x92E87F60F21A0C3A undefined b1207
		// _SET_A(MBIENT_PICKUP_?)*
		static void N0x1F5E07E14A86FAFC(BOOL p0)
		{
			invoke<int>(0x1F5E07E14A86FAFC, p0);
		} // 0x1F5E07E14A86FAFC undefined b1207
		static void SET_TEAM_PICKUP_OBJECT(Object object, Any p1, BOOL p2)
		{
			invoke<int>(0x53E0DF1A2A3CF0CA, object, p1, p2);
		} // 0x53E0DF1A2A3CF0CA 0x77687DC5 b1207
		static Any N0x9F52AD67D1A91BAD(Any p0, Any p1)
		{
			return invoke<Any>(0x9F52AD67D1A91BAD, p0, p1);
		} // 0x9F52AD67D1A91BAD undefined b1207
		static void PREVENT_COLLECTION_OF_PORTABLE_PICKUP(Object object, BOOL p1, BOOL p2)
		{
			invoke<int>(0x92AEFB5F6E294023, object, p1, p2);
		} // 0x92AEFB5F6E294023 0xCBB5F9B6 b1207
		static void SET_PICKUP_GENERATION_RANGE_MULTIPLIER(float multiplier)
		{
			invoke<int>(0x318516E02DE3ECE2, multiplier);
		} // 0x318516E02DE3ECE2 0x9879AC51 b1207
		static void SET_PICKUP_UNCOLLECTABLE(Any p0, Any p1)
		{
			invoke<int>(0x4A8CB328CD6F1C9B, p0, p1);
		} // 0x4A8CB328CD6F1C9B  b1207
		static void SET_PICKUP_HIDDEN_WHEN_UNCOLLECTABLE(Any p0, Any p1)
		{
			invoke<int>(0x81218CE01B672219, p0, p1);
		} // 0x81218CE01B672219  b1207
		static void SET_AMBIENT_PICKUP_LIFETIME_(int lifetime)
		{
			invoke<int>(0xAC9AE68F0A463752, lifetime);
		} // 0xAC9AE68F0A463752 undefined b1207
		static void SET_PICKUP_PARTICLE_FX_SPAWN(Any p0, Any p1)
		{
			invoke<int>(0xEB9740A38FD6D634, p0, p1);
		} // 0xEB9740A38FD6D634 undefined b1207
		static void SET_PICKUP_PARTICLE_FX_HIGHLIGHT(Any p0, Any p1)
		{
			invoke<int>(0x1607C7D9B3021DF5, p0, p1);
		} // 0x1607C7D9B3021DF5 undefined b1207
		static void SUPPRESS_PICKUP_REWARD_TYPE(int rewardType, BOOL suppress)
		{
			invoke<int>(0xF92099527DB8E2A7, rewardType, suppress);
		} // 0xF92099527DB8E2A7 0xA7E936FD b1207
		static Any N0x20135AF9C10D2A3D(Any p0)
		{
			return invoke<Any>(0x20135AF9C10D2A3D, p0);
		} // 0x20135AF9C10D2A3D undefined b1207
		static void SET_PICKUP_COLLECTABLE_ON_MOUNT_(Object object)
		{
			invoke<int>(0x00EE08603EADEE92, object);
		} // 0x00EE08603EADEE92 undefined b1207
		static void N0xDE116ECFFDD4B997(Any p0, Any p1)
		{
			invoke<int>(0xDE116ECFFDD4B997, p0, p1);
		} // 0xDE116ECFFDD4B997 undefined b1207
		static Hash GET_WEAPON_TYPE_FROM_PICKUP_TYPE(Hash pickupHash)
		{
			return invoke<Hash>(0x08F96CA6C551AD51, pickupHash);
		} // 0x08F96CA6C551AD51 0xEDD01937 b1207
		static Hash GET_AMMO_TYPE_FROM_PICKUP_TYPE_(Hash pickupHash)
		{
			return invoke<Hash>(0x44B09A23D728045A, pickupHash);
		} // 0x44B09A23D728045A undefined b1207
		// Alt name: _SET_OBJECT_TINT
		//
		// Old name: _SET_OBJECT_TEXTURE_VARIATION
		static void SET_OBJECT_TINT_INDEX(Object object, int textureVariation)
		{
			invoke<int>(0x971DA0055324D033, object, textureVariation);
		} // 0x971DA0055324D033  b1207
		// Returns float value to be used with _SET_LIGHT_INTENSITY_FOR_OBJECT
		static float GET_OBJECT_LIGHT_INTENSITY_(Object object)
		{
			return invoke<float>(0x3397CD4E0353DFBA, object);
		} // 0x3397CD4E0353DFBA undefined b1207
		static void SET_OBJECT_BURN_OPACITY_(Object object, float opacity)
		{
			invoke<int>(0x7D7285EFEAB5AF15, object, opacity);
		} // 0x7D7285EFEAB5AF15 undefined b1207
		static void SET_OBJECT_BURN_INTENSITY_(Object object, float intensity)
		{
			invoke<int>(0xC8E21C1677DC5E6F, object, intensity);
		} // 0xC8E21C1677DC5E6F undefined b1207
		// Seems to mostly have effect on wood-made objects https://imgur.com/a/32oQvOn
		static void SET_OBJECT_BURN_LEVEL_(Object object, float burnLevel, BOOL affectAsh)
		{
			invoke<int>(0x2797C633DCDBBAC5, object, burnLevel, affectAsh);
		} // 0x2797C633DCDBBAC5 undefined b1207
		static void N0x9A74A9CADFA8A598(Any p0)
		{
			invoke<int>(0x9A74A9CADFA8A598, p0);
		} // 0x9A74A9CADFA8A598 undefined b1207
		static void RESET_OBJECT_VELOCITY_(Object object)
		{
			invoke<int>(0xF40AB58D83C35027, object);
		} // 0xF40AB58D83C35027 undefined b1207
		// p2 is usually the same as speed parameter
		static void SET_OBJECT_BURN_SPEED_(Object object, float speed, float p2)
		{
			invoke<int>(0x646564A3B7DF68F8, object, speed, p2);
		} // 0x646564A3B7DF68F8 undefined b1207
		static void N0xCBFBD38F2E0A263B(Any p0, Any p1)
		{
			invoke<int>(0xCBFBD38F2E0A263B, p0, p1);
		} // 0xCBFBD38F2E0A263B undefined b1207
		// Old name: _GET_PICKUP_HASH
		static Hash CONVERT_OLD_PICKUP_TYPE_TO_NEW(Hash pickupHash)
		{
			return invoke<Hash>(0x5EAAD83F8CFB4575, pickupHash);
		} // 0x5EAAD83F8CFB4575 0x6AE36192 b1207
		static void SET_FORCE_OBJECT_THIS_FRAME(float x, float y, float z, float p3)
		{
			invoke<int>(0xF538081986E49E9D, x, y, z, p3);
		} // 0xF538081986E49E9D 0x3DA41C1A b1207
		static Any N0xD91E55B6C005EB09(Any p0, Any p1)
		{
			return invoke<Any>(0xD91E55B6C005EB09, p0, p1);
		} // 0xD91E55B6C005EB09 undefined b1207
		// Old name: _MARK_OBJECT_FOR_DELETION
		static void ONLY_CLEAN_UP_OBJECT_WHEN_OUT_OF_RANGE(Object object)
		{
			invoke<int>(0xADBE4809F19F927A, object);
		} // 0xADBE4809F19F927A 0x2048A7DD b1207
		// _SET_OBJECT_*
		static void N0xCAAF2BCCFEF37F77(Object object, Any p1)
		{
			invoke<int>(0xCAAF2BCCFEF37F77, object, p1);
		} // 0xCAAF2BCCFEF37F77 undefined b1207
		static Any N0x08C5825A2932EA7B(Any p0)
		{
			return invoke<Any>(0x08C5825A2932EA7B, p0);
		} // 0x08C5825A2932EA7B undefined b1207
		static Any N0x7D4411D6736CD295(Any p0, Any p1)
		{
			return invoke<Any>(0x7D4411D6736CD295, p0, p1);
		} // 0x7D4411D6736CD295 undefined b1207
		static Any N0x250EBB11E81A10BE(Any p0)
		{
			return invoke<Any>(0x250EBB11E81A10BE, p0);
		} // 0x250EBB11E81A10BE undefined b1207
		static Any N0x2BF1953C0C21AC88(Any p0)
		{
			return invoke<Any>(0x2BF1953C0C21AC88, p0);
		} // 0x2BF1953C0C21AC88 undefined b1207
		static BOOL CREATE_OBJECT_SKELETON(Object object)
		{
			return invoke<BOOL>(0xB6CBD40F8EA69E8A, object);
		} // 0xB6CBD40F8EA69E8A undefined b1207
		// _PRE* or _Q* or _RE*
		static void MAKE_ITEM_CARRIABLE_(Object object)
		{
			invoke<int>(0x1461DF6DB886BE3F, object);
		} // 0x1461DF6DB886BE3F undefined b1207
		static void N0xF65EDE5D02A7A760(Any p0, Any p1)
		{
			invoke<int>(0xF65EDE5D02A7A760, p0, p1);
		} // 0xF65EDE5D02A7A760 undefined b1207
		// Sets object as auto-jumpable by horse.
		static void SET_AUTO_JUMPABLE_BY_HORSE_(Object object, BOOL p1)
		{
			invoke<int>(0x98D2D9C053A1F449, object, p1);
		} // 0x98D2D9C053A1F449 undefined b1207
		// Sets object as not jumpable by horse.
		static void SET_NOT_JUMPABLE_BY_HORSE_(Object object, BOOL p1)
		{
			invoke<int>(0xE1C708BA4885796B, object, p1);
		} // 0xE1C708BA4885796B undefined b1207
		static void SET_OBJECT_KICKABLE_(Object object, BOOL kickable)
		{
			invoke<int>(0xB7017DA4D498269F, object, kickable);
		} // 0xB7017DA4D498269F undefined b1207
		static void SET_CUSTOM_TEXTURES_ON_OBJECT(Object object, Hash txdHash, Any p2, Any p3)
		{
			invoke<int>(0xE124889AE0521FCF, object, txdHash, p2, p3);
		} // 0xE124889AE0521FCF undefined b1207
		static void N0xD503D6F0986D58BC(Any p0, Any p1)
		{
			invoke<int>(0xD503D6F0986D58BC, p0, p1);
		} // 0xD503D6F0986D58BC undefined b1207
		static void N0xAEE6C800E124CFE1(Any p0, Any p1)
		{
			invoke<int>(0xAEE6C800E124CFE1, p0, p1);
		} // 0xAEE6C800E124CFE1 undefined b1207
		static void N0x3DF1A0A58498E209(Object object, Any p1)
		{
			invoke<int>(0x3DF1A0A58498E209, object, p1);
		} // 0x3DF1A0A58498E209 undefined b1436
	}

	namespace PAD
	{
		// Sets the current control context. Must be called every frame.
		//
		// context: https://alloc8or.re/rdr3/doc/misc/input_contexts.txt
		// For more information, see common:/data/control/settings.meta
		// https://github.com/femga/rdr3_discoveries/tree/master/Controls
		static void SET_CONTROL_CONTEXT_(int control, Hash context)
		{
			invoke<int>(0x2804658EB7D8A50B, control, context);
		} // 0x2804658EB7D8A50B undefined b1207
		// Gets the current control context. See: _SET_CONTROL_CONTEXT
		static Hash GET_CURRENT_CONTROL_CONTEXT_(int control)
		{
			return invoke<Hash>(0xDDCEB0F26C89C00F, control);
		} // 0xDDCEB0F26C89C00F undefined b1207
		static BOOL IS_CONTROL_ACTION_VALID_(Hash action, int control)
		{
			return invoke<BOOL>(0xBC0884BC590951C7, action, control);
		} // 0xBC0884BC590951C7 undefined b1207
		static BOOL IS_CONTROL_ENABLED(int control, Hash action)
		{
			return invoke<BOOL>(0x1CEA6BFDF248E5D9, control, action);
		} // 0x1CEA6BFDF248E5D9 0x9174AF84 b1207
		static BOOL IS_CONTROL_PRESSED(int control, Hash action)
		{
			return invoke<BOOL>(0xF3A21BCD95725A4A, control, action);
		} // 0xF3A21BCD95725A4A 0x517A4384 b1207
		static BOOL IS_CONTROL_RELEASED(int control, Hash action)
		{
			return invoke<BOOL>(0x648EE3E7F38877DD, control, action);
		} // 0x648EE3E7F38877DD 0x1F91A06E b1207
		static BOOL IS_CONTROL_JUST_PRESSED(int control, Hash action)
		{
			return invoke<BOOL>(0x580417101DDB492F, control, action);
		} // 0x580417101DDB492F 0x4487F579 b1207
		static BOOL IS_CONTROL_JUST_RELEASED(int control, Hash action)
		{
			return invoke<BOOL>(0x50F940259D3841E6, control, action);
		} // 0x50F940259D3841E6 0x2314444B b1207
		static int GET_CONTROL_VALUE(int control, Hash action)
		{
			return invoke<int>(0xD95E79E8686D2C27, control, action);
		} // 0xD95E79E8686D2C27 0xC526F3C6 b1207
		static float GET_CONTROL_NORMAL(int control, Hash action)
		{
			return invoke<float>(0xEC3C9B8D5327B563, control, action);
		} // 0xEC3C9B8D5327B563 0x5DE226A5 b1207
		static float GET_CONTROL_UNBOUND_NORMAL(int control, Hash action)
		{
			return invoke<float>(0x5B84D09CEC5209C5, control, action);
		} // 0x5B84D09CEC5209C5 0xC49343BB b1207
		// This is for simulating player input.
		// value is a float value from 0 - 1
		//
		// control: see IS_CONTROL_ENABLED
		//
		// Old name: _SET_CONTROL_NORMAL
		static BOOL SET_CONTROL_VALUE_NEXT_FRAME(int control, Hash action, float value)
		{
			return invoke<BOOL>(0xE8A25867FBA3B05E, control, action, value);
		} // 0xE8A25867FBA3B05E  b1207
		static BOOL IS_DISABLED_CONTROL_PRESSED(int control, Hash action)
		{
			return invoke<BOOL>(0xE2587F8CBBD87B1D, control, action);
		} // 0xE2587F8CBBD87B1D 0x32A93544 b1207
		static BOOL IS_DISABLED_CONTROL_JUST_PRESSED(int control, Hash action)
		{
			return invoke<BOOL>(0x91AEF906BCA88877, control, action);
		} // 0x91AEF906BCA88877 0xEE6ABD32 b1207
		static BOOL IS_DISABLED_CONTROL_JUST_RELEASED(int control, Hash action)
		{
			return invoke<BOOL>(0x305C8DCD79DA8B0F, control, action);
		} // 0x305C8DCD79DA8B0F 0xD6A679E1 b1207
		static float GET_DISABLED_CONTROL_NORMAL(int control, Hash action)
		{
			return invoke<float>(0x11E65974A982637C, control, action);
		} // 0x11E65974A982637C 0x66FF4FAA b1207
		static float GET_DISABLED_CONTROL_UNBOUND_NORMAL(int control, Hash action)
		{
			return invoke<float>(0x4F8A26A890FD62FB, control, action);
		} // 0x4F8A26A890FD62FB 0xF2A65A4C b1207
		// Returns time in ms since last input.
		static int GET_CONTROL_HOW_LONG_AGO(int control)
		{
			return invoke<int>(0xD7D22F5592AED8BA, control);
		} // 0xD7D22F5592AED8BA 0x0E8EF929 b1207
		static int GET_DISABLED_CONTROL_HOW_LONG_AGO_(int control)
		{
			return invoke<int>(0x771DFCB24D19C2F6, control);
		} // 0x771DFCB24D19C2F6 undefined b1207
		// padIndex is not used
		//
		// Old name: _IS_USING_KEYBOARD
		static BOOL IS_USING_KEYBOARD_AND_MOUSE(int control)
		{
			return invoke<BOOL>(0xA571D46727E2B718, control);
		} // 0xA571D46727E2B718  b1207
		static Any N0x43F35DDB2905D945(Any p0, Any p1)
		{
			return invoke<Any>(0x43F35DDB2905D945, p0, p1);
		} // 0x43F35DDB2905D945 undefined b1207
		static Any N0xBD629C1C4F501C80(Any p0)
		{
			return invoke<Any>(0xBD629C1C4F501C80, p0);
		} // 0xBD629C1C4F501C80 undefined b1207
		static BOOL HAVE_CONTROLS_CHANGED(int control)
		{
			return invoke<BOOL>(0x6CD79468A1E595C6, control);
		} // 0x6CD79468A1E595C6  b1207
		// nullsub, doesn't do anything
		//
		// Old name: _SET_CONTROL_GROUP_COLOR
		static void SET_CONTROL_LIGHT_EFFECT_COLOR(int control, int red, int green, int blue)
		{
			invoke<int>(0x8290252FFF36ACB5, control, red, green, blue);
		} // 0x8290252FFF36ACB5  b1207
		// nullsub, doesn't do anything
		static void CLEAR_CONTROL_LIGHT_EFFECT(int control)
		{
			invoke<int>(0xCB0360EFEFB2580D, control);
		} // 0xCB0360EFEFB2580D  b1207
		// nullsub, doesn't do anything
		static void SET_CONTROL_LIGHT_EFFECT_FLASHING_COLOR(int control, int red, int green, int blue)
		{
			invoke<int>(0xA45884DB10EC7EE3, control, red, green, blue);
		} // 0xA45884DB10EC7EE3 undefined b1207
		// Old name: SET_PAD_SHAKE
		static void SET_CONTROL_SHAKE(int control, int duration, int frequency)
		{
			invoke<int>(0x48B3886C1358D0D5, control, duration, frequency);
		} // 0x48B3886C1358D0D5  b1207
		// nullsub, doesn't do anything
		static void SET_CONTROL_TRIGGER_SHAKE(int control, int leftDuration, int leftFrequency, int rightDuration, int rightFrequency)
		{
			invoke<int>(0x14D29BB12D47F68C, control, leftDuration, leftFrequency, rightDuration, rightFrequency);
		} // 0x14D29BB12D47F68C  b1207
		// Old name: STOP_PAD_SHAKE
		static void STOP_CONTROL_SHAKE(int control)
		{
			invoke<int>(0x38C16A305E8CDC8D, control);
		} // 0x38C16A305E8CDC8D  b1207
		// Old name: SET_PAD_SHAKE_SUPPRESSED_ID
		static void SET_CONTROL_SHAKE_SUPPRESSED_ID(int control, int uniqueId)
		{
			invoke<int>(0xF239400E16C23E08, control, uniqueId);
		} // 0xF239400E16C23E08  b1207
		// Old name: _CLEAR_SUPPRESSED_PAD_RUMBLE
		static void CLEAR_CONTROL_SHAKE_SUPPRESSED_ID(int control)
		{
			invoke<int>(0xA0CEFCEA390AAB9B, control);
		} // 0xA0CEFCEA390AAB9B  b1207
		static BOOL IS_LOOK_INVERTED()
		{
			return invoke<BOOL>(0x77B612531280010D);
		} // 0x77B612531280010D 0x313434B2 b1207
		static void SET_INPUT_EXCLUSIVE(int control, Hash action)
		{
			invoke<int>(0xEDE476E5EE29EDB1, control, action);
		} // 0xEDE476E5EE29EDB1 0x4E8E29E6 b1207
		static void DISABLE_CONTROL_ACTION(int control, Hash action, BOOL disableRelatedActions)
		{
			invoke<int>(0xFE99B66D079CF6BC, control, action, disableRelatedActions);
		} // 0xFE99B66D079CF6BC 0x3800C0DC b1207
		static void ENABLE_CONTROL_ACTION(int control, Hash action, BOOL enableRelatedActions)
		{
			invoke<int>(0x351220255D64C155, control, action, enableRelatedActions);
		} // 0x351220255D64C155 0xD2753551 b1207
		static void DISABLE_ALL_CONTROL_ACTIONS(int control)
		{
			invoke<int>(0x5F4B6931816E599B, control);
		} // 0x5F4B6931816E599B 0x16753CF4 b1207
		// rumbleCurve: common_0/data/rumblecurves.meta
		static void N0x5F217BC1190503D8(const char* rumbleCurve, float p1)
		{
			invoke<int>(0x5F217BC1190503D8, rumbleCurve, p1);
		} // 0x5F217BC1190503D8 undefined b1207
		static void N0x709BA8C08C5C008D()
		{
			invoke<int>(0x709BA8C08C5C008D);
		} // 0x709BA8C08C5C008D undefined b1207
		// _IS_R* - _IS_S*
		static BOOL N0x1252C029FC8EBB4D()
		{
			return invoke<BOOL>(0x1252C029FC8EBB4D);
		} // 0x1252C029FC8EBB4D undefined b1207
		static void N0x52C68E92D6E23ADD(Any p0)
		{
			invoke<int>(0x52C68E92D6E23ADD, p0);
		} // 0x52C68E92D6E23ADD undefined b1311
	}

	namespace PATHFIND
	{
		static void SET_ROADS_IN_AREA(float xMin, float yMin, float zMin, float xMax, float yMax, float zMax, Any p6, Any p7, Any p8)
		{
			invoke<int>(0xBF1A602B5BA52FEE, xMin, yMin, zMin, xMax, yMax, zMax, p6, p7, p8);
		} // 0xBF1A602B5BA52FEE 0xEBC7B918 b1207
		static void SET_ROADS_IN_ANGLED_AREA(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9, Any p10)
		{
			invoke<int>(0x1A5AA1208AF5DB59, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
		} // 0x1A5AA1208AF5DB59 0xBD088F4B b1207
		static void SET_ROADS_IN_VOLUME(Volume volume, BOOL p1, BOOL p2, BOOL p3)
		{
			invoke<int>(0xC1799FAFD2FDF52B, volume, p1, p2, p3);
		} // 0xC1799FAFD2FDF52B undefined b1207
		static void RESET_ROADS_IN_VOLUME(Volume volume, BOOL p1)
		{
			invoke<int>(0xD17672447692478E, volume, p1);
		} // 0xD17672447692478E undefined b1207
		static void SET_ROADS_BACK_TO_ORIGINAL(float xMin, float yMin, float zMin, float xMax, float yMax, float zMax, Any p6, Any p7)
		{
			invoke<int>(0x1EE7063B80FFC77C, xMin, yMin, zMin, xMax, yMax, zMax, p6, p7);
		} // 0x1EE7063B80FFC77C 0x86AC4A85 b1207
		static void SET_ROADS_BACK_TO_ORIGINAL_IN_ANGLED_AREA(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8)
		{
			invoke<int>(0x0027501B9F3B407E, p0, p1, p2, p3, p4, p5, p6, p7, p8);
		} // 0x0027501B9F3B407E 0x9DB5D209 b1207
		static void N0xAFE2AE66F6251C66(float xMin, float yMin, float zMin, float xMax, float yMax, float zMax, int p6, Any p7)
		{
			invoke<int>(0xAFE2AE66F6251C66, xMin, yMin, zMin, xMax, yMax, zMax, p6, p7);
		} // 0xAFE2AE66F6251C66 undefined b1207
		static void N0x4358BCF14C91761C(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9)
		{
			invoke<int>(0x4358BCF14C91761C, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
		} // 0x4358BCF14C91761C undefined b1207
		static void N0xB03944057FD735BA(Any p0, Any p1, Any p2)
		{
			invoke<int>(0xB03944057FD735BA, p0, p1, p2);
		} // 0xB03944057FD735BA undefined b1207
		static void N0x6C3F12ECEB6D2E2A(float xMin, float yMin, float zMin, float xMax, float yMax, float zMax, Any p6, Any p7)
		{
			invoke<int>(0x6C3F12ECEB6D2E2A, xMin, yMin, zMin, xMax, yMax, zMax, p6, p7);
		} // 0x6C3F12ECEB6D2E2A undefined b1207
		static void N0x5A4E1A41E3A02AD0(Any p0, Any p1, Any p2)
		{
			invoke<int>(0x5A4E1A41E3A02AD0, p0, p1, p2);
		} // 0x5A4E1A41E3A02AD0 undefined b1207
		static BOOL GET_CLOSEST_VEHICLE_NODE(float x, float y, float z, Vector3* outPosition, int nodeType, float p5, float p6)
		{
			return invoke<BOOL>(0x240A18690AE96513, x, y, z, outPosition, nodeType, p5, p6);
		} // 0x240A18690AE96513 0x6F5F1E6C b1207
		static Any N0xCA27A86CAA4E98ED(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6)
		{
			return invoke<Any>(0xCA27A86CAA4E98ED, p0, p1, p2, p3, p4, p5, p6);
		} // 0xCA27A86CAA4E98ED undefined b1207
		static BOOL GET_CLOSEST_VEHICLE_NODE_WITH_HEADING(float x, float y, float z, Vector3* outPosition, float* outHeading, int nodeType, float p6, float p7)
		{
			return invoke<BOOL>(0x23CFFD4CCB243354, x, y, z, outPosition, outHeading, nodeType, p6, p7);
		} // 0x23CFFD4CCB243354 0x8BD5759B b1207
		static BOOL GET_NTH_CLOSEST_VEHICLE_NODE(float x, float y, float z, int nthClosest, Vector3* outPosition, int unknown1, float unknown2, Any unknown3)
		{
			return invoke<BOOL>(0x5A6D8DF6FBC5D0C4, x, y, z, nthClosest, outPosition, unknown1, unknown2, unknown3);
		} // 0x5A6D8DF6FBC5D0C4 0xF125BFCC b1207
		static int GET_NTH_CLOSEST_VEHICLE_NODE_ID(float x, float y, float z, int nth, int nodetype, float p5, float p6)
		{
			return invoke<int>(0x116443008E5CEFC3, x, y, z, nth, nodetype, p5, p6);
		} // 0x116443008E5CEFC3 0x3F358BEA b1207
		static BOOL GET_NTH_CLOSEST_VEHICLE_NODE_WITH_HEADING(float x, float y, float z, int nthClosest, Vector3* outPosition, float* heading, Any* unknown1, int unknown2, float unknown3, float unknown4)
		{
			return invoke<BOOL>(0x591B40D4390DB54A, x, y, z, nthClosest, outPosition, heading, unknown1, unknown2, unknown3, unknown4);
		} // 0x591B40D4390DB54A 0x7349C856 b1207
		// Returns the nth closest vehicle node with a heading to a coord
		static int GET_NTH_CLOSEST_VEHICLE_NODE_ID_WITH_HEADING(float x, float y, float z, int nthClosest, float* returnHeading, int* returnNumLanes, int nodeFlags, float zMeasureMult, float zTolerance)
		{
			return invoke<int>(0x4114EAA8A7F7766D, x, y, z, nthClosest, returnHeading, returnNumLanes, nodeFlags, zMeasureMult, zTolerance);
		} // 0x4114EAA8A7F7766D 0xC1AEB88D b1207
		static BOOL GET_NTH_CLOSEST_VEHICLE_NODE_FAVOUR_DIRECTION(float x, float y, float z, float desiredX, float desiredY, float desiredZ, int nthClosest, Vector3* outPosition, float* outHeading, int nodetype, Any p10, Any p11)
		{
			return invoke<BOOL>(0x2FAC235A6062F14A, x, y, z, desiredX, desiredY, desiredZ, nthClosest, outPosition, outHeading, nodetype, p10, p11);
		} // 0x2FAC235A6062F14A 0x928A4DEC b1207
		// Returns true if the id is non zero.
		static BOOL IS_VEHICLE_NODE_ID_VALID(int vehicleNodeId)
		{
			return invoke<BOOL>(0x5829A02AF4F0B3CB, vehicleNodeId);
		} // 0x5829A02AF4F0B3CB 0x57DFB1EF b1207
		static void GET_VEHICLE_NODE_POSITION(int nodeId, Vector3* outPosition)
		{
			invoke<int>(0x8E8D72FF24DEE1FB, nodeId, outPosition);
		} // 0x8E8D72FF24DEE1FB 0xE38E252D b1207
		static BOOL GET_VEHICLE_NODE_IS_SWITCHED_OFF(int nodeID)
		{
			return invoke<BOOL>(0x28533DBDDF7C2C97, nodeID);
		} // 0x28533DBDDF7C2C97 0x56737A3C b1207
		static Any GET_CLOSEST_ROAD(float x, float y, float z, float p3, int p4, Vector3* p5, Vector3* p6, Any* p7, Any* p8, float* p9, BOOL p10)
		{
			return invoke<Any>(0x132F52BBA570FE92, x, y, z, p3, p4, p5, p6, p7, p8, p9, p10);
		} // 0x132F52BBA570FE92 0x567B0E11 b1207
		static BOOL ARE_NODES_LOADED_FOR_AREA(float x1, float y1, float x2, float y2)
		{
			return invoke<BOOL>(0xF7B79A50B905A30D, x1, y1, x2, y2);
		} // 0xF7B79A50B905A30D 0x86E80A17 b1207
		// Old name: REQUEST_PATHS_PREFER_ACCURATE_BOUNDINGSTRUCT
		static BOOL REQUEST_PATH_NODES_IN_AREA_THIS_FRAME(float x1, float y1, float x2, float y2)
		{
			return invoke<BOOL>(0x07FB139B592FA687, x1, y1, x2, y2);
		} // 0x07FB139B592FA687 0x2CDA5012 b1207
		static BOOL GET_RANDOM_VEHICLE_NODE(float x, float y, float z, float radius, int minLanes, BOOL avoidDeadEnds, BOOL avoidHighways, Vector3* outPosition, int* nodeId)
		{
			return invoke<BOOL>(0x93E0DB8440B73A7D, x, y, z, radius, minLanes, avoidDeadEnds, avoidHighways, outPosition, nodeId);
		} // 0x93E0DB8440B73A7D 0xAD1476EA b1207
		static void GET_SPAWN_DATA_FOR_ROAD_NODE_(int nodeId, float x, float y, float z, Vector3* outCoords, float* heading)
		{
			invoke<int>(0xA3791B915B8B84C6, nodeId, x, y, z, outCoords, heading);
		} // 0xA3791B915B8B84C6 undefined b1207
		// Gets a value indicating whether the specified position is on a road.
		static BOOL IS_POINT_ON_ROAD(float x, float y, float z, Vehicle vehicle)
		{
			return invoke<BOOL>(0x125BF4ABFC536B09, x, y, z, vehicle);
		} // 0x125BF4ABFC536B09 0xCF198055 b1207
		static void SET_PED_PATHS_IN_AREA(float x1, float y1, float z1, float x2, float y2, float z2, BOOL unknown, Any p7)
		{
			invoke<int>(0x34F060F4BF92E018, x1, y1, z1, x2, y2, z2, unknown, p7);
		} // 0x34F060F4BF92E018 0x2148EA84 b1207
		static void N0xE5EF9DE716FF737E(Any p0, Any p1, Any p2)
		{
			invoke<int>(0xE5EF9DE716FF737E, p0, p1, p2);
		} // 0xE5EF9DE716FF737E undefined b1207
		static BOOL GET_SAFE_COORD_FOR_PED(float x, float y, float z, BOOL onGround, Vector3* outPosition, int flags)
		{
			return invoke<BOOL>(0xB61C8E878A4199CA, x, y, z, onGround, outPosition, flags);
		} // 0xB61C8E878A4199CA 0xB370270A b1207
		static void SET_PED_PATHS_BACK_TO_ORIGINAL(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6)
		{
			invoke<int>(0xE04B48F2CC926253, p0, p1, p2, p3, p4, p5, p6);
		} // 0xE04B48F2CC926253 0x3F1ABDA4 b1207
		static void N0xCF213A5FC3ABFC08(Any p0, Any p1, Any p2)
		{
			invoke<int>(0xCF213A5FC3ABFC08, p0, p1, p2);
		} // 0xCF213A5FC3ABFC08 undefined b1207
		static void ADD_NAVMESH_REQUIRED_REGION(float x, float y, float radius)
		{
			invoke<int>(0x387EAD7EE42F6685, x, y, radius);
		} // 0x387EAD7EE42F6685 0x12B086EA b1207
		// Returns whether navmesh for the region is loaded.
		static BOOL IS_NAVMESH_LOADED_IN_AREA(float x1, float y1, float z1, float x2, float y2, float z2)
		{
			return invoke<BOOL>(0xF813C7E63F9062A5, x1, y1, z1, x2, y2, z2);
		} // 0xF813C7E63F9062A5 0x4C2BA99E b1207
		static int GET_NUM_NAVMESHES_EXISTING_IN_AREA(float p0, float p1, float p2, float p3, float p4, float p5)
		{
			return invoke<int>(0x01708E8DD3FF8C65, p0, p1, p2, p3, p4, p5);
		} // 0x01708E8DD3FF8C65 0x76AFFBB5 b1207
		static BOOL NAVMESH_ACTIVATE_SWAP_(const char* name)
		{
			return invoke<BOOL>(0x7C334FF4D9215912, name);
		} // 0x7C334FF4D9215912 undefined b1207
		static BOOL NAVMESH_DEACTIVATE_SWAP_(const char* name)
		{
			return invoke<BOOL>(0x527B97C203BB8606, name);
		} // 0x527B97C203BB8606 undefined b1207
		static BOOL NAVMESH_IS_SWAP_ACTIVE_(const char* name)
		{
			return invoke<BOOL>(0x5AC0944C156E5F44, name);
		} // 0x5AC0944C156E5F44 undefined b1207
		static BOOL NAVMESH_DOES_SWAP_EXIST_(const char* name)
		{
			return invoke<BOOL>(0x495CFAB2924237C7, name);
		} // 0x495CFAB2924237C7 undefined b1207
		static int N0x5A3B54ADDF5472A3(const char* p0)
		{
			return invoke<int>(0x5A3B54ADDF5472A3, p0);
		} // 0x5A3B54ADDF5472A3 undefined b1207
		static Any* N0xA33914B00CA55756(const char* p0, int p1)
		{
			return invoke<Any*>(0xA33914B00CA55756, p0, p1);
		} // 0xA33914B00CA55756 undefined b1207
		static BOOL NAVMESH_ASSIGN_NAVMESH_TO_VEHICLE_(Vehicle vehicle, const char* navMeshName)
		{
			return invoke<BOOL>(0x44026E3DB3CED602, vehicle, navMeshName);
		} // 0x44026E3DB3CED602 undefined b1207
		static Any ADD_NAVMESH_BLOCKING_OBJECT(float p0, float p1, float p2, float p3, float p4, float p5, float p6, BOOL p7, Any p8)
		{
			return invoke<Any>(0xFCD5C8E06E502F5A, p0, p1, p2, p3, p4, p5, p6, p7, p8);
		} // 0xFCD5C8E06E502F5A 0x2952BA56 b1207
		static void REMOVE_NAVMESH_BLOCKING_OBJECT(Any p0)
		{
			invoke<int>(0x46399A7895957C0E, p0);
		} // 0x46399A7895957C0E 0x098602B0 b1207
		static BOOL DOES_NAVMESH_BLOCKING_OBJECT_EXIST(Any p0)
		{
			return invoke<BOOL>(0x0EAEB0DB4B132399, p0);
		} // 0x0EAEB0DB4B132399 0x4B67D7EE b1207
		static BOOL ADD_NAVMESH_BLOCKING_VOLUME_(Volume volume, int flags)
		{
			return invoke<BOOL>(0x19C7567D2F2287D6, volume, flags);
		} // 0x19C7567D2F2287D6 undefined b1207
		static void REMOVE_NAVMESH_BLOCKING_VOLUME_(Volume volume)
		{
			invoke<int>(0x2C87C3E1C7B96EE2, volume);
		} // 0x2C87C3E1C7B96EE2 undefined b1207
		static BOOL DOES_NAVMESH_BLOCKING_VOLUME_EXIST_(Volume volume)
		{
			return invoke<BOOL>(0xDE0EA444735C1368, volume);
		} // 0xDE0EA444735C1368 undefined b1207
		static void N0x6DAD6630AE4A74CB(Any p0, Any p1)
		{
			invoke<int>(0x6DAD6630AE4A74CB, p0, p1);
		} // 0x6DAD6630AE4A74CB undefined b1207
		// Starts a nav mesh query for a path between coordinates with a given ped and returns a handle to be validated by _NAVMESH_REQUESTED_QUERY_STATUS and then _NAVMESH_REQUESTED_PATH_WAYPOINTS_FOUND
		//
		// Only bit flag values used in scripts are 0, 23, and 29. 23 is used with dogs and horses. 29 with legendary animals.
		static int NAVMESH_REQUEST_PATH(Ped ped, float x1, float y1, float z1, float x2, float y2, float z2, int bitFlag)
		{
			return invoke<int>(0x348F211CA2404039, ped, x1, y1, z1, x2, y2, z2, bitFlag);
		} // 0x348F211CA2404039 undefined b1207
		// Called in scripts after finished with requested pathes. Immediately resets all values connected to the path handle except query status, which changes from 1 to 2 before eventually becoming fully invalidated to 0.
		static BOOL NAVMESH_CLEAR_REQUESTED_PATH_(int path)
		{
			return invoke<BOOL>(0x661BB1E1FF77742D, path);
		} // 0x661BB1E1FF77742D undefined b1207
		// Returns eNavMeshQueryStatus
		// enum eNavMeshQueryStatus
		// {
		// 	QS_NOT_FOUND,
		// 	QS_COMPLETE,
		// 	QS_PENDING
		// };
		//
		// It appears that the pending state of 2 is at least also used when cleaning up a request (_NAVMESH_CLEAR_REQUESTED_PATH) or if a request never completes. Eventually queries are invalidated and return 0.
		//
		// Old name: _NAVMESH_QUERY_STATUS
		static int NAVMESH_REQUESTED_QUERY_STATUS_(int path)
		{
			return invoke<int>(0x3A0F82F6EE2291C8, path);
		} // 0x3A0F82F6EE2291C8 undefined b1207
		// Returns true if a path of waypoints was found. Waypoints can be retrieved with _NAVMESH_REQUESTED_PATH_NUM_WAYPOINTS and _NAVMESH_REQUESTED_PATH_WAYPOINT_BY_INDEX
		static BOOL NAVMESH_REQUESTED_PATH_WAYPOINTS_FOUND_(int path)
		{
			return invoke<BOOL>(0x8800776E410EB669, path);
		} // 0x8800776E410EB669 undefined b1207
		// Returns a bit flag for seemingly terrain within the waypoints in the path. Checked against bit value 2 to match water in the path, seems to always contain at least 1 though regardless of location/ped.
		static int NAVMESH_REQUESTED_PATH_WAYPOINTS_TERRAIN_(int path)
		{
			return invoke<int>(0xF61CFEDEAB627BFA, path);
		} // 0xF61CFEDEAB627BFA undefined b1207
		// Returns the number of waypoints for a requested path (NAVMESH_REQUEST_PATH) if the query is completed (_NAVMESH_REQUESTED_QUERY_STATUS). For use with _NAVMESH_REQUESTED_PATH_WAYPOINT_BY_INDEX
		static int NAVMESH_REQUESTED_PATH_NUM_WAYPOINTS_(int path)
		{
			return invoke<int>(0xD470725E0703D22F, path);
		} // 0xD470725E0703D22F undefined b1207
		// Returns a vector3 waypoint at the specified index for a path. Use _NAVMESH_REQUESTED_PATH_NUM_WAYPOINTS to get available indexes.
		static Vector3 NAVMESH_REQUESTED_PATH_WAYPOINT_BY_INDEX_(int path, int waypointIndex)
		{
			return invoke<Vector3>(0x430F8319AE56C8A9, path, waypointIndex);
		} // 0x430F8319AE56C8A9 undefined b1207
		// Returns CGameWorldHeightMap's minimum Z value at specified point (grid node).
		static float GET_APPROX_FLOOR_FOR_POINT(float x, float y)
		{
			return invoke<float>(0x336511A34F2E5185, x, y);
		} // 0x336511A34F2E5185 0xA07C5B7D b1207
		static void SET_AMBIENT_PED_RANGE_MULTIPLIER_THIS_FRAME(float multiplier)
		{
			invoke<int>(0x0B919E1FB47CC4E0, multiplier);
		} // 0x0B919E1FB47CC4E0 0x3C5085E4 b1207
		// nullsub, doesn't do anything
		static void SET_IGNORE_NO_GPS_FLAG(BOOL toggle)
		{
			invoke<int>(0x72751156E7678833, toggle);
		} // 0x72751156E7678833 0xB72CF194 b1207
		static int GET_GPS_BLIP_ROUTE_LENGTH()
		{
			return invoke<int>(0xBBB45C3CF5C8AA85);
		} // 0xBBB45C3CF5C8AA85 0x4B770634 b1207
		static Any N0xEFC535C9FAF563B3(Any p0)
		{
			return invoke<Any>(0xEFC535C9FAF563B3, p0);
		} // 0xEFC535C9FAF563B3 undefined b1207
		static Any N0x665B21666351CB37(Any p0, Any p1, Any p2)
		{
			return invoke<Any>(0x665B21666351CB37, p0, p1, p2);
		} // 0x665B21666351CB37 undefined b1207
		static BOOL GET_GPS_BLIP_ROUTE_FOUND()
		{
			return invoke<BOOL>(0x869DAACBBE9FA006);
		} // 0x869DAACBBE9FA006 0x286F82CC b1207
		static Any N0x54F4D7B6670FBB5A(Any p0, Any p1, Any p2, Any p3, Any p4)
		{
			return invoke<Any>(0x54F4D7B6670FBB5A, p0, p1, p2, p3, p4);
		} // 0x54F4D7B6670FBB5A undefined b1207
		static void N0x34C9AF25649172D0(Any p0)
		{
			invoke<int>(0x34C9AF25649172D0, p0);
		} // 0x34C9AF25649172D0 undefined b1207
		// GPS disabled zone: p1 = 0
		// Clearing GPS disabled zone: p1 = 1
		static void N0xF2A2177AC848B3A8(Volume volume, int p1, int p2)
		{
			invoke<int>(0xF2A2177AC848B3A8, volume, p1, p2);
		} // 0xF2A2177AC848B3A8 undefined b1207
		static void N0x4BDEBEA5702B97A9(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5)
		{
			invoke<int>(0x4BDEBEA5702B97A9, p0, p1, p2, p3, p4, p5);
		} // 0x4BDEBEA5702B97A9 undefined b1207
		static void N0x264E9A5CD78C338F(Any p0)
		{
			invoke<int>(0x264E9A5CD78C338F, p0);
		} // 0x264E9A5CD78C338F undefined b1207
		static void N0x869A7015BD4606E9(Any p0)
		{
			invoke<int>(0x869A7015BD4606E9, p0);
		} // 0x869A7015BD4606E9 undefined b1207
		static Any SIMULATED_ROUTE_CREATE_(float x1, float y1, float z1, float x2, float y2, float z2, int p6)
		{
			return invoke<Any>(0xFD5BB35AAB83FD48, x1, y1, z1, x2, y2, z2, p6);
		} // 0xFD5BB35AAB83FD48 undefined b1207
		static void SIMULATED_ROUTE_DELETE_(Any p0)
		{
			invoke<int>(0x4907D0E4FB26EE65, p0);
		} // 0x4907D0E4FB26EE65 undefined b1207
		static BOOL SIMULATED_ROUTE_EXISTS_(Any p0)
		{
			return invoke<BOOL>(0x65A8196B8D7F5E0B, p0);
		} // 0x65A8196B8D7F5E0B undefined b1207
		static BOOL SIMULATED_ROUTE_IS_LOADED(Any p0)
		{
			return invoke<BOOL>(0x240915043CB799D7, p0);
		} // 0x240915043CB799D7 undefined b1207
		static void SIMULATED_ROUTE_TRAVEL_TO_POINT(Any p0, float p1, float p2)
		{
			invoke<int>(0xA1A3DE1C215C7394, p0, p1, p2);
		} // 0xA1A3DE1C215C7394 undefined b1207
		static float SIMULATED_ROUTE_GET_ETA(Any p0)
		{
			return invoke<float>(0x2DD5F78D73B24172, p0);
		} // 0x2DD5F78D73B24172 undefined b1207
	}

	namespace PED
	{
		static Ped CREATE_PED(Hash modelHash, float x, float y, float z, float heading, BOOL isNetwork, BOOL bScriptHostPed, BOOL p7, BOOL p8)
		{
			return invoke<Ped>(0xD49F9B0955C367DE, modelHash, x, y, z, heading, isNetwork, bScriptHostPed, p7, p8);
		} // 0xD49F9B0955C367DE 0x0389EF71 b1207
		// Deletes the specified ped, then sets the handle pointed to by the pointer to NULL.
		static void DELETE_PED(Ped* ped)
		{
			invoke<int>(0xCC0EF140F99365C5, ped);
		} // 0xCC0EF140F99365C5 0x13EFB9A0 b1207
		static void SET_REMOVE_PED_NETWORKED_(Ped ped, int p1)
		{
			invoke<int>(0x39A2FC5AF55A52B1, ped, p1);
		} // 0x39A2FC5AF55A52B1 undefined b1207
		// Only used in SP
		// _SET_REMOVE_PED*
		static void N0x7C08E7CB8D951B70(Ped ped, float p1)
		{
			invoke<int>(0x7C08E7CB8D951B70, ped, p1);
		} // 0x7C08E7CB8D951B70 undefined b1207
		static void SET_PED_TO_BE_REMOVED_(Ped ped, float p1, float p2, int p3, Any p4)
		{
			invoke<int>(0x36E4B61DC56DE77C, ped, p1, p2, p3, p4);
		} // 0x36E4B61DC56DE77C undefined b1207
		static Ped CLONE_PED(Ped ped, BOOL isNetwork, BOOL bScriptHostPed, BOOL copyHeadBlendFlag)
		{
			return invoke<Ped>(0xEF29A16337FACADB, ped, isNetwork, bScriptHostPed, copyHeadBlendFlag);
		} // 0xEF29A16337FACADB 0x8C8A8D6E b1207
		// Copies ped's components and props to targetPed.
		// Can be used to clear anything from a ped by cloning it, including bullet holes.
		static void CLONE_PED_TO_TARGET(Ped ped, Ped targetPed)
		{
			invoke<int>(0xE952D6431689AD9A, ped, targetPed);
		} // 0xE952D6431689AD9A 0xFC70EEC7 b1207
		// Gets a value indicating whether the specified ped is in the specified vehicle.
		static BOOL IS_PED_IN_VEHICLE(Ped ped, Vehicle vehicle, BOOL atGetIn)
		{
			return invoke<BOOL>(0xA3EE4A07279BB9DB, ped, vehicle, atGetIn);
		} // 0xA3EE4A07279BB9DB 0x7DA6BC83 b1207
		static BOOL IS_PED_IN_MODEL(Ped ped, Hash modelHash)
		{
			return invoke<BOOL>(0x796D90EFB19AA332, ped, modelHash);
		} // 0x796D90EFB19AA332 0xA6438D4B b1207
		// Gets a value indicating whether the specified ped is in any vehicle.
		static BOOL IS_PED_IN_ANY_VEHICLE(Ped ped, BOOL atGetIn)
		{
			return invoke<BOOL>(0x997ABD671D25CA0B, ped, atGetIn);
		} // 0x997ABD671D25CA0B 0x3B0171EE b1207
		static void N0x9851DE7AEC10B4E1(float x, float y, float z, float p3, int p4, Any p5)
		{
			invoke<int>(0x9851DE7AEC10B4E1, x, y, z, p3, p4, p5);
		} // 0x9851DE7AEC10B4E1 undefined b1207
		// Gets a value indicating whether this ped's health is below its injured threshold.
		//
		// The default threshold is 100.
		static BOOL IS_PED_INJURED(Ped ped)
		{
			return invoke<BOOL>(0x84A2DD9AC37C35C1, ped);
		} // 0x84A2DD9AC37C35C1 0x2530A087 b1207
		// Gets a value indicating whether this ped's health is below its fatally injured threshold. The default threshold is 100.
		// If the handle is invalid, the function returns true.
		static BOOL IS_PED_FATALLY_INJURED(Ped ped)
		{
			return invoke<BOOL>(0xD839450756ED5A80, ped);
		} // 0xD839450756ED5A80 0xBADA0093 b1207
		static BOOL IS_PED_DEAD_OR_DYING(Ped ped, BOOL p1)
		{
			return invoke<BOOL>(0x3317DEDB88C95038, ped, p1);
		} // 0x3317DEDB88C95038 0xCBDB7739 b1207
		// Bleedout profiles:
		// Animal_FastBleedout
		// Animal_Generic
		// Human_FastBleedout
		// Human_Generic
		// Human_Mission
		//
		// For more information, see common/data/ai/peddamageinfo.meta
		static void SET_PED_BLEEDOUT_PROFILE_(Ped ped, Hash bleedoutProfile)
		{
			invoke<int>(0x66C047719B0E80E1, ped, bleedoutProfile);
		} // 0x66C047719B0E80E1 undefined b1207
		static BOOL IS_PED_AIMING_FROM_COVER(Ped ped)
		{
			return invoke<BOOL>(0x3998B1276A3300E5, ped);
		} // 0x3998B1276A3300E5 0xDEBAB2AF b1207
		// Returns whether the specified ped is reloading.
		static BOOL IS_PED_RELOADING(Ped ped)
		{
			return invoke<BOOL>(0x24B100C68C645951, ped);
		} // 0x24B100C68C645951 0x961E1745 b1207
		static BOOL IS_PED_A_PLAYER(Ped ped)
		{
			return invoke<BOOL>(0x12534C348C6CB68B, ped);
		} // 0x12534C348C6CB68B 0x404794CA b1207
		// Returns true only if it's a player ped and an animal as well.
		// _IS_ANY_* - _IS_CONTROL_*
		static BOOL IS_ANIMAL_CONTROLLED_BY_A_PLAYER_(Ped ped)
		{
			return invoke<BOOL>(0x0E2F43516F998269, ped);
		} // 0x0E2F43516F998269 undefined b1311
		// seatIndex:
		// enum eVehicleSeat
		// {
		// 	VS_ANY_PASSENGER = -2,
		// 	VS_DRIVER,
		// 	VS_FRONT_RIGHT,
		// 	VS_BACK_LEFT,
		// 	VS_BACK_RIGHT,
		// 	VS_EXTRA_LEFT_1,
		// 	VS_EXTRA_RIGHT_1,
		// 	VS_EXTRA_LEFT_2,
		// 	VS_EXTRA_RIGHT_2,
		// 	VS_EXTRA_LEFT_3,
		// 	VS_EXTRA_RIGHT_3,
		// 	VS_NUM_SEATS
		// };
		static Ped CREATE_PED_INSIDE_VEHICLE(Vehicle vehicle, Hash modelHash, int seatIndex, BOOL p3, BOOL p4, BOOL p5)
		{
			return invoke<Ped>(0x7DD959874C1FD534, vehicle, modelHash, seatIndex, p3, p4, p5);
		} // 0x7DD959874C1FD534 0x3000F092 b1207
		static void SET_PED_DESIRED_HEADING(Ped ped, float heading)
		{
			invoke<int>(0xAA5A7ECE2AA8FE70, ped, heading);
		} // 0xAA5A7ECE2AA8FE70 0x961458F9 b1207
		// Old name: _FREEZE_PED_CAMERA_ROTATION
		static void FORCE_ALL_HEADING_VALUES_TO_ALIGN(Ped ped)
		{
			invoke<int>(0xFF287323B0E2C69A, ped);
		} // 0xFF287323B0E2C69A 0x290421BE b1207
		// angle is ped's view cone
		static BOOL IS_PED_FACING_PED(Ped ped, Ped otherPed, float angle)
		{
			return invoke<BOOL>(0xD71649DB0A545AA3, ped, otherPed, angle);
		} // 0xD71649DB0A545AA3 0x0B775838 b1207
		// Notes: The function only returns true while the ped is:
		// A.) Swinging a random melee attack (including pistol-whipping)
		//
		// B.) Reacting to being hit by a melee attack (including pistol-whipping)
		//
		// C.) Is locked-on to an enemy (arms up, strafing/skipping in the default fighting-stance, ready to dodge+counter).
		//
		// You don't have to be holding the melee-targeting button to be in this stance; you stay in it by default for a few seconds after swinging at someone. If you do a sprinting punch, it returns true for the duration of the punch animation and then returns false again, even if you've punched and made-angry many peds
		static BOOL IS_PED_IN_MELEE_COMBAT(Ped ped)
		{
			return invoke<BOOL>(0x4E209B2C1EAD5159, ped);
		} // 0x4E209B2C1EAD5159 0xFD7814A5 b1207
		// Only used in R* SP Script winter1: p1 = 5000
		// _SET_PED_M*
		static Any N0x6DB875AFC584FA32(Ped ped, int p1)
		{
			return invoke<Any>(0x6DB875AFC584FA32, ped, p1);
		} // 0x6DB875AFC584FA32 undefined b1207
		static BOOL IS_PED_STOPPED(Ped ped)
		{
			return invoke<BOOL>(0x530944F6F4B8A214, ped);
		} // 0x530944F6F4B8A214 0xA0DC0B87 b1207
		static BOOL IS_PED_SITTING(Ped ped)
		{
			return invoke<BOOL>(0x84D0BF2B21862059, ped);
		} // 0x84D0BF2B21862059 undefined b1207
		static BOOL N0x09D7AFD3716DA8E1(Ped ped, int p1)
		{
			return invoke<BOOL>(0x09D7AFD3716DA8E1, ped, p1);
		} // 0x09D7AFD3716DA8E1 undefined b1207
		// If returned true: CHECK_SHOT_NEAR: Succeeded shot near
		// If returned false: CHECK_SHOT_NEAR: Failed shot near
		static BOOL N0x9C81338B2E62CE0A(Player player, Ped ped, int shotNearRecentlyTime)
		{
			return invoke<BOOL>(0x9C81338B2E62CE0A, player, ped, shotNearRecentlyTime);
		} // 0x9C81338B2E62CE0A undefined b1207
		static BOOL N0xB7DBB2986B87E230(Ped ped, float p1)
		{
			return invoke<BOOL>(0xB7DBB2986B87E230, ped, p1);
		} // 0xB7DBB2986B87E230 undefined b1207
		static BOOL N0xD355E2F1BB41087E(Ped ped, float p1)
		{
			return invoke<BOOL>(0xD355E2F1BB41087E, ped, p1);
		} // 0xD355E2F1BB41087E undefined b1207
		static BOOL IS_ANY_PED_SHOOTING_IN_AREA(float x1, float y1, float z1, float x2, float y2, float z2, BOOL p6, BOOL p7)
		{
			return invoke<BOOL>(0xA0D3D71EA1086C55, x1, y1, z1, x2, y2, z2, p6, p7);
		} // 0xA0D3D71EA1086C55 0x91833867 b1207
		// Returns whether the specified ped is shooting.
		static BOOL IS_PED_SHOOTING(Ped ped)
		{
			return invoke<BOOL>(0x34616828CD07F1A1, ped);
		} // 0x34616828CD07F1A1 0xE7C3405E b1207
		// Returns time since the specified ped last shot, in seconds. (fPlayerJustShotTime)
		static float TIME_SINCE_PED_LAST_SHOT(Ped ped)
		{
			return invoke<float>(0x285D36C5C72B0569, ped);
		} // 0x285D36C5C72B0569 undefined b1207
		// accuracy = 0-100, 100 being perfectly accurate
		static void SET_PED_ACCURACY(Ped ped, int accuracy)
		{
			invoke<int>(0x7AEFB85C1D49DEB6, ped, accuracy);
		} // 0x7AEFB85C1D49DEB6 0x6C17122E b1207
		static int GET_PED_ACCURACY(Ped ped)
		{
			return invoke<int>(0x37F4AD56ECBC0CD6, ped);
		} // 0x37F4AD56ECBC0CD6 0x0A2A0AA0 b1207
		static BOOL IS_PED_MODEL(Ped ped, Hash modelHash)
		{
			return invoke<BOOL>(0xC9D55B1A358A5BF7, ped, modelHash);
		} // 0xC9D55B1A358A5BF7 0x5F1DDFCB b1207
		// Forces the ped to fall back and kills it.
		//
		// It doesn't really explode the ped's head but it kills the ped
		static void EXPLODE_PED_HEAD(Ped ped, Hash weaponHash)
		{
			invoke<int>(0x2D05CED3A38D0F3A, ped, weaponHash);
		} // 0x2D05CED3A38D0F3A 0x05CC1380 b1207
		// Same as SET_PED_ARMOUR, but ADDS 'amount' to the armor the Ped already has.
		static void ADD_ARMOUR_TO_PED(Ped ped, int amount)
		{
			invoke<int>(0x5BA652A0CD14DF2F, ped, amount);
		} // 0x5BA652A0CD14DF2F 0xF686B26E b1207
		// Used in Script Function MP_MAIN_OFFLINE__INITIALIZE_FLOW & PROCESS_GENERIC_PLAYER_INITIALIZATION
		static void N0x5CA20FBE49891BBD(Ped ped, int p1)
		{
			invoke<int>(0x5CA20FBE49891BBD, ped, p1);
		} // 0x5CA20FBE49891BBD undefined b1207
		// Ped: The ped to warp.
		// vehicle: The vehicle to warp the ped into.
		// seatIndex: see CREATE_PED_INSIDE_VEHICLE
		static void SET_PED_INTO_VEHICLE(Ped ped, Vehicle vehicle, int seatIndex)
		{
			invoke<int>(0xF75B0D629E1C063D, ped, vehicle, seatIndex);
		} // 0xF75B0D629E1C063D 0x07500C79 b1207
		static void SET_PED_MOVE_ANIMS_BLEND_OUT(Ped ped)
		{
			invoke<int>(0x9E8C908F41584ECD, ped);
		} // 0x9E8C908F41584ECD 0x20E01957 b1207
		// Not implemented.
		static void N0x606D529DADA3C940(Ped ped, Any p1)
		{
			invoke<int>(0x606D529DADA3C940, ped, p1);
		} // 0x606D529DADA3C940 undefined b1207
		// Returns true/false if the ped is/isn't male.
		static BOOL IS_PED_MALE(Ped ped)
		{
			return invoke<BOOL>(0x6D9F5FAA7488BA46, ped);
		} // 0x6D9F5FAA7488BA46 0x90950455 b1207
		// Returns true/false if the ped is/isn't humanoid.
		static BOOL IS_PED_HUMAN(Ped ped)
		{
			return invoke<BOOL>(0xB980061DA992779D, ped);
		} // 0xB980061DA992779D 0x194BB7B0 b1207
		// Gets the vehicle the specified Ped is in.
		//
		// If the Ped is not in a vehicle and includeLastVehicle is true, the vehicle they were last in is returned.
		static Vehicle GET_VEHICLE_PED_IS_IN(Ped ped, BOOL lastVehicle)
		{
			return invoke<Vehicle>(0x9A9112A0FE9A4713, ped, lastVehicle);
		} // 0x9A9112A0FE9A4713 0xAFE92319 b1207
		// Resets the value for the last vehicle driven by the Ped.
		static void RESET_PED_LAST_VEHICLE(Ped ped)
		{
			invoke<int>(0xBB8DE8CF6A8DD8BB, ped);
		} // 0xBB8DE8CF6A8DD8BB 0x5E3B5942 b1207
		static void N0xC6136B40FFFB778B(BOOL p0)
		{
			invoke<int>(0xC6136B40FFFB778B, p0);
		} // 0xC6136B40FFFB778B undefined b1207
		// Only used in SP R* Script train_robbery3: p1 = CLIPSET@VEH_TRAIN@HANDCART@BASE_PANIC & CLIPSET@VEH_TRAIN@HANDCART@BASE_PANIC_JOHN
		static void N0x6E8B87139854022D(Ped ped, const char* clipset)
		{
			invoke<int>(0x6E8B87139854022D, ped, clipset);
		} // 0x6E8B87139854022D undefined b1207
		static int GET_NUM_FREE_SLOTS_IN_PED_POOL_()
		{
			return invoke<int>(0x313778EDCA9158E2);
		} // 0x313778EDCA9158E2 undefined b1207
		static void RESERVE_AMBIENT_PEDS_(int numPeds)
		{
			invoke<int>(0xED9582B3DA8F02B4, numPeds);
		} // 0xED9582B3DA8F02B4 undefined b1207
		static void RESERVE_AMBIENT_PEDS_TOTAL_(int numPeds)
		{
			invoke<int>(0xF008E0BA1FE1D644, numPeds);
		} // 0xF008E0BA1FE1D644 undefined b1207
		static void UNRESERVE_AMBIENT_PEDS_(int numPeds)
		{
			invoke<int>(0x7D4E70A67A651C71, numPeds);
		} // 0x7D4E70A67A651C71 undefined b1207
		static int GET_NUM_RESERVED_AMBIENT_PEDS_DESIRED_()
		{
			return invoke<int>(0x62DE46F061CAA468);
		} // 0x62DE46F061CAA468 undefined b1207
		static int GET_NUM_RESERVED_AMBIENT_PEDS_READY_()
		{
			return invoke<int>(0x5C16855277819BBF);
		} // 0x5C16855277819BBF undefined b1207
		static BOOL ARE_ALL_AMBIENT_PED_RESERVATIONS_READY_()
		{
			return invoke<BOOL>(0x5E420FF293EE5472);
		} // 0x5E420FF293EE5472 undefined b1207
		static void SET_SCENARIO_PED_RANGE_MULTIPLIER_THIS_FRAME_(float multiplier)
		{
			invoke<int>(0xA77FA7BE9312F8C0, multiplier);
		} // 0xA77FA7BE9312F8C0 undefined b1207
		// Only used in SP R* Script loanshark_hunter
		static void N0x9E3842E5DAD69F80(Volume volume)
		{
			invoke<int>(0x9E3842E5DAD69F80, volume);
		} // 0x9E3842E5DAD69F80 undefined b1207
		static void SET_AMBIENT_PED_DENSITY_MULTIPLIER_THIS_FRAME_(float multiplier)
		{
			invoke<int>(0xAB0D553FE20A6E25, multiplier);
		} // 0xAB0D553FE20A6E25 undefined b1207
		static void SET_SCENARIO_PED_DENSITY_MULTIPLIER_THIS_FRAME(float multiplier)
		{
			invoke<int>(0x7A556143A1C03898, multiplier);
		} // 0x7A556143A1C03898 0x2909ABF0 b1207
		static void SET_AMBIENT_ANIMAL_DENSITY_MULTIPLIER_THIS_FRAME_(float multiplier)
		{
			invoke<int>(0xC0258742B034DFAF, multiplier);
		} // 0xC0258742B034DFAF undefined b1207
		static void SET_AMBIENT_HUMAN_DENSITY_MULTIPLIER_THIS_FRAME_(float multiplier)
		{
			invoke<int>(0xBA0980B5C0A11924, multiplier);
		} // 0xBA0980B5C0A11924 undefined b1207
		static void SET_SCENARIO_ANIMAL_DENSITY_MULTIPLIER_THIS_FRAME_(float multiplier)
		{
			invoke<int>(0xDB48E99F8E064E56, multiplier);
		} // 0xDB48E99F8E064E56 undefined b1207
		static void SET_SCENARIO_HUMAN_DENSITY_MULTIPLIER_THIS_FRAME_(float multiplier)
		{
			invoke<int>(0x28CB6391ACEDD9DB, multiplier);
		} // 0x28CB6391ACEDD9DB undefined b1207
		// Sets the scenario ped density to the given config.
		//
		// Valid configs:
		// - BLACKWATER
		// - DEFAULT
		// - NEWBORDEAUX
		// - RHODES
		// - STRAWBERRY
		// - TUMBLEWEED
		// - VALENTINE
		// - VANHORN
		//
		// See common/data/ai/densityscoringconfigs.meta for more information.
		static void SET_SCENARIO_PED_DENSITY_THIS_FRAME_(Hash configHash)
		{
			invoke<int>(0x95423627A9CA598E, configHash);
		} // 0x95423627A9CA598E undefined b1207
		static void INSTANTLY_FILL_PED_POPULATION()
		{
			invoke<int>(0x4759CC730F947C81);
		} // 0x4759CC730F947C81 0x8C555ADD b1207
		// Only used in R* Script tg_p (CLIENT__AMBIENT_POPULATION - Player starts the populate in region)
		static void N0xBFA6B7731C3BAF02()
		{
			invoke<int>(0xBFA6B7731C3BAF02);
		} // 0xBFA6B7731C3BAF02 undefined b1207
		static BOOL IS_INSTANTLY_FILL_PED_POPULATION_FINISHED()
		{
			return invoke<BOOL>(0x0EE3F0D7FECCC54F);
		} // 0x0EE3F0D7FECCC54F undefined b1207
		// The distance between these points, is the diagonal of a box (remember it's 3D).
		static void SET_PED_NON_CREATION_AREA(float x1, float y1, float z1, float x2, float y2, float z2)
		{
			invoke<int>(0xEE01041D559983EA, x1, y1, z1, x2, y2, z2);
		} // 0xEE01041D559983EA 0x7A97283F b1207
		static void CLEAR_PED_NON_CREATION_AREA()
		{
			invoke<int>(0x2E05208086BA0651);
		} // 0x2E05208086BA0651 0x6F7043A3 b1207
		static void ATTACH_VOLUME_TO_ENTITY_(Volume volume, Entity entity, float offsetX, float offsetY, float offsetZ, float rotX, float rotY, float rotZ, int p8, BOOL p9)
		{
			invoke<int>(0x7C00CFC48A782DC0, volume, entity, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, p8, p9);
		} // 0x7C00CFC48A782DC0 undefined b1207
		static void DETACH_VOLUME_FROM_ENTITY_(Volume volume, Entity entity)
		{
			invoke<int>(0x19C975B81BE53C28, volume, entity);
		} // 0x19C975B81BE53C28 undefined b1207
		static void SET_PED_ONTO_MOUNT(Ped ped, Ped mount, int seatIndex, BOOL p3)
		{
			invoke<int>(0x028F76B6E78246EB, ped, mount, seatIndex, p3);
		} // 0x028F76B6E78246EB undefined b1207
		static void REMOVE_PED_FROM_MOUNT_(Ped ped, BOOL p1, BOOL p2)
		{
			invoke<int>(0x5337B721C51883A9, ped, p1, p2);
		} // 0x5337B721C51883A9 undefined b1207
		static Ped CREATE_PED_ON_MOUNT(Ped mount, Hash modelHash, int index, BOOL p3, BOOL p4, BOOL p5, BOOL p6)
		{
			return invoke<Ped>(0xF89AA2BD01FC06B7, mount, modelHash, index, p3, p4, p5, p6);
		} // 0xF89AA2BD01FC06B7 undefined b1207
		static BOOL IS_MOUNT_SEAT_FREE_(Ped mount, int seat)
		{
			return invoke<BOOL>(0xAAB0FE202E9FC9F0, mount, seat);
		} // 0xAAB0FE202E9FC9F0 undefined b1207
		static BOOL IS_PED_ON_MOUNT(Ped ped)
		{
			return invoke<BOOL>(0x460BC76A0E10655E, ped);
		} // 0x460BC76A0E10655E 0x43103006 b1207
		static BOOL IS_PED_FULLY_ON_MOUNT(Ped ped, BOOL p1)
		{
			return invoke<BOOL>(0x95CBC65780DE7EB1, ped, p1);
		} // 0x95CBC65780DE7EB1 undefined b1207
		static Ped GET_MOUNT(Ped ped)
		{
			return invoke<Ped>(0xE7E11B8DCBED1058, ped);
		} // 0xE7E11B8DCBED1058 0xDD31EC4E b1207
		// Returns last horse the ped was leading
		static Ped GET_LAST_LED_MOUNT_(Ped ped)
		{
			return invoke<Ped>(0x693126B5D0457D0D, ped);
		} // 0x693126B5D0457D0D undefined b1232
		static Ped GET_LAST_MOUNT_(Ped ped)
		{
			return invoke<Ped>(0x4C8B59171957BCF7, ped);
		} // 0x4C8B59171957BCF7 undefined b1207
		// Only used in R* Script nb_stalking_hunter
		static void N0xED1C764997A86D5A(Ped ped1, Ped ped2)
		{
			invoke<int>(0xED1C764997A86D5A, ped1, ped2);
		} // 0xED1C764997A86D5A undefined b1207
		// _SET_HO*
		static void N0xB8AB265426CFE6DD(Ped ped, BOOL p1)
		{
			invoke<int>(0xB8AB265426CFE6DD, ped, p1);
		} // 0xB8AB265426CFE6DD undefined b1207
		// Returns dismounted timestamp
		static int N0xE8D1CCB9375C101B(Ped mount, Player player)
		{
			return invoke<int>(0xE8D1CCB9375C101B, mount, player);
		} // 0xE8D1CCB9375C101B undefined b1207
		static void N0xA691C10054275290(Ped mount, Player player, int dismountedTimestamp)
		{
			invoke<int>(0xA691C10054275290, mount, player, dismountedTimestamp);
		} // 0xA691C10054275290 undefined b1207
		static void N0x6734F0A6A52C371C(Player player, int horseSlot)
		{
			invoke<int>(0x6734F0A6A52C371C, player, horseSlot);
		} // 0x6734F0A6A52C371C undefined b1207
		static void N0x024EC9B649111915(Ped ped, BOOL p1)
		{
			invoke<int>(0x024EC9B649111915, ped, p1);
		} // 0x024EC9B649111915 undefined b1207
		static void SET_PED_OWNS_ANIMAL(Ped ped, Ped animal, BOOL p2)
		{
			invoke<int>(0x931B241409216C1F, ped, animal, p2);
		} // 0x931B241409216C1F undefined b1207
		static Ped GET_ACTIVE_ANIMAL_OWNER_(Ped animal)
		{
			return invoke<Ped>(0xF103823FFE72BB49, animal);
		} // 0xF103823FFE72BB49 undefined b1207
		// Used in Script Functions PLAYER_HORSE_RELEASE_HORSE_TO_AMBIENT_WORLD (p1 = true), HORSE_SETUP_PLAYER_HORSE_ATTRIBUTES (p1 = false)
		// Set to false for player horse in scripts and seems it's only true when releasing/changing a player horse? Cannot determine what effect it has, but it doesn't seem to affect _GET_HORSE_TAMING_STATE
		static void CLEAR_ACTIVE_ANIMAL_OWNER_(Ped horse, BOOL clear)
		{
			invoke<int>(0xBCC76708E5677E1D, horse, clear);
		} // 0xBCC76708E5677E1D undefined b1207
		// Returns an int based on enum eTamingState
		//
		// enum eTamingState
		// {
		// 	ATS_INVALID = 0,
		// 	ATS_INACTIVE,
		// 	ATS_TARGET_DETECTED,
		// 	ATS_CALLED_OUT,
		// 	ATS_MOUNTABLE,
		// 	ATS_BEING_PATTED,
		// 	ATS_BREAKING_ACTIVE,
		// 	ATS_SPOOKED,
		// 	ATS_RETREATING,
		// 	ATS_FLEEING
		// };
		static int GET_HORSE_TAMING_STATE_(Ped horse)
		{
			return invoke<int>(0x454AD4DA6C41B5BD, horse);
		} // 0x454AD4DA6C41B5BD undefined b1207
		static void N0x54D3CD482742C482(Ped animal, float p2)
		{
			invoke<int>(0x54D3CD482742C482, animal, p2);
		} // 0x54D3CD482742C482 undefined b1355
		static void N0x5CB2EBB467BE3ED6(Ped animal, float p2)
		{
			invoke<int>(0x5CB2EBB467BE3ED6, animal, p2);
		} // 0x5CB2EBB467BE3ED6 undefined b1355
		static void N0x9F0F28B42C4EE80A(Ped animal, float p2)
		{
			invoke<int>(0x9F0F28B42C4EE80A, animal, p2);
		} // 0x9F0F28B42C4EE80A undefined b1355
		static void SET_MOUNT_BONDING_LEVEL_(Ped ped, int bondingLevel)
		{
			invoke<int>(0xA69899995997A63B, ped, bondingLevel);
		} // 0xA69899995997A63B undefined b1207
		// Note: this native was added in build 1232.40
		static void SET_MOUNT_SECURITY_ENABLED_(Ped ped, BOOL toggle)
		{
			invoke<int>(0x11E6B9629C46D6EC, ped, toggle);
		} // 0x11E6B9629C46D6EC undefined b1232
		// Only used in SP R* Script winter1: p1 = Winter1Mount
		static void N0x9B65444C07B782BF(Ped ped, const char* p1)
		{
			invoke<int>(0x9B65444C07B782BF, ped, p1);
		} // 0x9B65444C07B782BF undefined b1207
		static BOOL IS_ANIMAL_INTERACTION_POSSIBLE(Ped ped, Ped animal)
		{
			return invoke<BOOL>(0xD543D3A8FDE4F185, ped, animal);
		} // 0xD543D3A8FDE4F185 undefined b1207
		static BOOL IS_ANIMAL_INTERACTION_RUNNING_(Ped ped)
		{
			return invoke<BOOL>(0x7FC84E85D98F063D, ped);
		} // 0x7FC84E85D98F063D undefined b1207
		// Used in Script Function NET_CAMP_DOG_CLIENT_HANDLE_ANIMAL_INTERACTION
		static Ped N0x8BE24D74D74C6E9B(Ped ped)
		{
			return invoke<Ped>(0x8BE24D74D74C6E9B, ped);
		} // 0x8BE24D74D74C6E9B undefined b1207
		// _IS_I* - _IS_L*
		static BOOL N0x77243ED4F7CAAA55(Ped ped)
		{
			return invoke<BOOL>(0x77243ED4F7CAAA55, ped);
		} // 0x77243ED4F7CAAA55 undefined b1207
		// Gets a value indicating whether the specified ped is on top of any vehicle.
		//
		// Return 1 when ped is on vehicle.
		// Return 0 when ped is not on a vehicle.
		static BOOL IS_PED_ON_VEHICLE(Ped ped, BOOL p1)
		{
			return invoke<BOOL>(0x67722AEB798E5FAB, ped, p1);
		} // 0x67722AEB798E5FAB 0xA1AE7CC7 b1207
		static BOOL IS_PED_ON_SPECIFIC_VEHICLE(Ped ped, Vehicle vehicle)
		{
			return invoke<BOOL>(0xEC5F66E459AF3BB2, ped, vehicle);
		} // 0xEC5F66E459AF3BB2 0x63CB4603 b1207
		static void WARP_PED_OUT_OF_VEHICLE_(Ped ped)
		{
			invoke<int>(0xE0B61ED8BB37712F, ped);
		} // 0xE0B61ED8BB37712F undefined b1207
		static void SET_PED_MONEY(Ped ped, int amount)
		{
			invoke<int>(0xA9C8960E8684C1B5, ped, amount);
		} // 0xA9C8960E8684C1B5 0x40D90BF2 b1207
		static int GET_PED_MONEY(Ped ped)
		{
			return invoke<int>(0x3F69145BBA87BAE7, ped);
		} // 0x3F69145BBA87BAE7 0xEB3C4C7E b1207
		static void SET_BLOCKING_OF_NON_TEMPORARY_EVENTS_FOR_AMBIENT_PEDS_THIS_FRAME(BOOL p0)
		{
			invoke<int>(0x9911F4A24485F653, p0);
		} // 0x9911F4A24485F653 0x02A080C8 b1207
		static void N0x34EDDD59364AD74A(Ped ped, Any* p1)
		{
			invoke<int>(0x34EDDD59364AD74A, ped, p1);
		} // 0x34EDDD59364AD74A undefined b1207
		static void N0x2D976DBDC731DF80(Ped ped)
		{
			invoke<int>(0x2D976DBDC731DF80, ped);
		} // 0x2D976DBDC731DF80 undefined b1207
		// Detect if ped is sitting in the specified vehicle
		// [True/False]
		static BOOL IS_PED_SITTING_IN_VEHICLE(Ped ped, Vehicle vehicle)
		{
			return invoke<BOOL>(0xA808AA1D79230FC2, ped, vehicle);
		} // 0xA808AA1D79230FC2 0xDDDE26FA b1207
		// Detect if ped is in any vehicle
		// [True/False]
		static BOOL IS_PED_SITTING_IN_ANY_VEHICLE(Ped ped)
		{
			return invoke<BOOL>(0x826AA586EDB9FEF8, ped);
		} // 0x826AA586EDB9FEF8 0x0EA9CA03 b1207
		static BOOL IS_PED_ON_FOOT(Ped ped)
		{
			return invoke<BOOL>(0x01FEE67DB37F59B2, ped);
		} // 0x01FEE67DB37F59B2 0xC60D0785 b1207
		static BOOL IS_PED_PLANTING_BOMB(Ped ped)
		{
			return invoke<BOOL>(0xC70B5FAE151982D8, ped);
		} // 0xC70B5FAE151982D8 0x0EDAC574 b1207
		static Vector3 GET_DEAD_PED_PICKUP_COORDS(Ped ped, float p1, float p2)
		{
			return invoke<Vector3>(0xCD5003B097200F36, ped, p1, p2);
		} // 0xCD5003B097200F36 0x129F9DC1 b1207
		static BOOL IS_PED_IN_ANY_BOAT(Ped ped)
		{
			return invoke<BOOL>(0x2E0E1C2B4F6CB339, ped);
		} // 0x2E0E1C2B4F6CB339 0x1118A947 b1207
		static BOOL IS_PED_IN_ANY_HELI(Ped ped)
		{
			return invoke<BOOL>(0x298B91AE825E5705, ped);
		} // 0x298B91AE825E5705 0x7AB5523B b1207
		static BOOL IS_PED_IN_ANY_PLANE(Ped ped)
		{
			return invoke<BOOL>(0x5FFF4CFC74D8FB80, ped);
		} // 0x5FFF4CFC74D8FB80 0x51BBCE7E b1207
		static BOOL IS_PED_IN_FLYING_VEHICLE(Ped ped)
		{
			return invoke<BOOL>(0x9134873537FA419C, ped);
		} // 0x9134873537FA419C 0xCA072485 b1207
		// _IS_PED_FL* - _IS_PED_FU*
		static BOOL N0x256EDD55C6BE1482(Ped ped)
		{
			return invoke<BOOL>(0x256EDD55C6BE1482, ped);
		} // 0x256EDD55C6BE1482 undefined b1207
		static BOOL GET_PED_LAST_DAMAGE_BONE(Ped ped, int* outBone)
		{
			return invoke<BOOL>(0xD75960F6BD9EA49C, ped, outBone);
		} // 0xD75960F6BD9EA49C 0xAB933841 b1207
		static void CLEAR_PED_LAST_DAMAGE_BONE(Ped ped)
		{
			invoke<int>(0x8EF6B7AC68E2F01B, ped);
		} // 0x8EF6B7AC68E2F01B 0x56CB715E b1207
		// enum ePedDamageCleanliness
		// {
		// 	PED_DAMAGE_CLEANLINESS_POOR,
		// 	PED_DAMAGE_CLEANLINESS_GOOD,
		// 	PED_DAMAGE_CLEANLINESS_PERFECT
		// };
		static int GET_PED_DAMAGE_CLEANLINESS_(Ped ped)
		{
			return invoke<int>(0x88EFFED5FE8B0B4A, ped);
		} // 0x88EFFED5FE8B0B4A undefined b1207
		// damageCleanliness: see _GET_PED_DAMAGE_CLEANLINESS
		static void SET_PED_DAMAGE_CLEANLINESS_(Ped ped, int damageCleanliness)
		{
			invoke<int>(0x7528720101A807A5, ped, damageCleanliness);
		} // 0x7528720101A807A5 undefined b1207
		// Returns true if _GET_PED_DAMAGE_CLEANLINESS was ever lower than 2
		static BOOL GET_PED_DAMAGED_(Ped ped)
		{
			return invoke<BOOL>(0x6CFC373008A1EDAF, ped);
		} // 0x6CFC373008A1EDAF undefined b1207
		static void SET_PED_DAMAGED_(Ped ped, BOOL damaged)
		{
			invoke<int>(0xDACE03C65C6666DB, ped, damaged);
		} // 0xDACE03C65C6666DB undefined b1207
		// Animal Skin Quality Modifier
		// Params: p2 = 2, p3 = 3 in R* Scripts
		static Any SET_PLAYER_CURRENT_ANIMAL_DAMAGE_MODIFIER_(Player player, float modifier, int p2, int p3)
		{
			return invoke<Any>(0x9EFF3C91DF38304F, player, modifier, p2, p3);
		} // 0x9EFF3C91DF38304F undefined b1311
		static void UPDATE_ANIMAL_DAMAGE_MODIFIER_(Player player)
		{
			invoke<int>(0x0F9E754EBE8FDBFA, player);
		} // 0x0F9E754EBE8FDBFA undefined b1311
		// Returns animal skin quality modifier
		static float GET_PLAYER_CURRENT_ANIMAL_DAMAGE_MODIFIER_(Player player)
		{
			return invoke<float>(0xEE2D5C819A65BF26, player);
		} // 0xEE2D5C819A65BF26 undefined b1311
		// Used in Script Function SATCHEL_COUNT_BREAKDOWN_COMPONENTS
		static Any N0xB29C553BA582D09E(Any* p0, Hash model, int damageCleanliness, int p3)
		{
			return invoke<Any>(0xB29C553BA582D09E, p0, model, damageCleanliness, p3);
		} // 0xB29C553BA582D09E undefined b1207
		static BOOL N0x101B45C5F56D970F(Any* p0, Ped ped, int damageCleanliness, int p3)
		{
			return invoke<BOOL>(0x101B45C5F56D970F, p0, ped, damageCleanliness, p3);
		} // 0x101B45C5F56D970F undefined b1207
		// Related to dead animals items/loots
		// Notice: skinningQuality is partially calculated using pedQuality
		static int COMPUTE_SATCHEL_ITEM_FOR_PED_CARCASS_(Any* outInventoryItemArray, Ped ped, int damageCleanliness, int skinningQuality)
		{
			return invoke<int>(0x6B89FAA36FC909A3, outInventoryItemArray, ped, damageCleanliness, skinningQuality);
		} // 0x6B89FAA36FC909A3 undefined b1207
		static BOOL COMPUTE_SATCHEL_ITEM_FOR_PED_DAMAGE(Any p0, Ped pedAttached, int damageCleanliness)
		{
			return invoke<BOOL>(0x9E7738B291706746, p0, pedAttached, damageCleanliness);
		} // 0x9E7738B291706746 undefined b1207
		static void SET_AI_WEAPON_DAMAGE_MODIFIER(float value)
		{
			invoke<int>(0x1B1E2A40A65B8521, value);
		} // 0x1B1E2A40A65B8521 0x516E30EE b1207
		static void RESET_AI_WEAPON_DAMAGE_MODIFIER()
		{
			invoke<int>(0xEA16670E7BA4743C);
		} // 0xEA16670E7BA4743C 0x6E965420 b1207
		// _SET_W(EAPON?)*
		static void SET_TOTAL_PED_DAMAGE_FROM_AI_(Ped ped, float totalDamage)
		{
			invoke<int>(0x73B6F907B913C860, ped, totalDamage);
		} // 0x73B6F907B913C860 undefined b1207
		// _DELETE_*
		static void N0xA6D6F03095C88F59(Ped ped)
		{
			invoke<int>(0xA6D6F03095C88F59, ped);
		} // 0xA6D6F03095C88F59 undefined b1207
		// _GET_WA*
		static float GET_TOTAL_PED_DAMAGE_FROM_AI_(Ped ped)
		{
			return invoke<float>(0x92C8EACA29F6BED6, ped);
		} // 0x92C8EACA29F6BED6 undefined b1207
		// Old name: _SET_PED_DAMAGE_MODIFIER
		static void SET_PED_TO_PLAYER_WEAPON_DAMAGE_MODIFIER(Ped ped, float damageModifier)
		{
			invoke<int>(0xD77AE48611B7B10A, ped, damageModifier);
		} // 0xD77AE48611B7B10A undefined b1207
		static float GET_PED_TO_PLAYER_WEAPON_DAMAGE_MODIFIER(Ped ped)
		{
			return invoke<float>(0x936E7CAD0AE2EE14, ped);
		} // 0x936E7CAD0AE2EE14 undefined b1207
		static void SET_CURRENT_DEFENSE_AGAINST_PLAYERS_MODIFIER_(Ped horse, float modifier)
		{
			invoke<int>(0x069EDDF1FD4DEB0A, horse, modifier);
		} // 0x069EDDF1FD4DEB0A undefined b1207
		// Used in Script Function NB_EVENT_OVERRIDE__HANDLE__EVENT_DAMAGE_ENTITY
		static float N0x763FA8A9D76EE3A7(Ped ped)
		{
			return invoke<float>(0x763FA8A9D76EE3A7, ped);
		} // 0x763FA8A9D76EE3A7 undefined b1311
		static void SET_AI_MELEE_WEAPON_DAMAGE_MODIFIER(float modifier)
		{
			invoke<int>(0x66460DEDDD417254, modifier);
		} // 0x66460DEDDD417254 0x0F9A401F b1207
		static void SET_ACCURACY_AGAINST_LOCAL_PLAYER_MODIFIER_(Ped ped, float modifier)
		{
			invoke<int>(0xC2266AA617668AD3, ped, modifier);
		} // 0xC2266AA617668AD3 undefined b1207
		static float GET_ACCURACY_AGAINST_LOCAL_PLAYER_MODIFIER_(Ped ped)
		{
			return invoke<float>(0xDC9273D95976BA22, ped);
		} // 0xDC9273D95976BA22 undefined b1207
		static void SET_PED_HEADSHOT_DAMAGE_MULTIPLIER_(Ped ped, float multiplier)
		{
			invoke<int>(0x2BA918C823B8BA56, ped, multiplier);
		} // 0x2BA918C823B8BA56 undefined b1207
		static void N0xDEE8D30AA5C2E28D(Ped ped, Hash p1, BOOL p2)
		{
			invoke<int>(0xDEE8D30AA5C2E28D, ped, p1, p2);
		} // 0xDEE8D30AA5C2E28D undefined b1207
		static void N0xE1B3BE07D3AADDED(Ped ped, int p1, BOOL p2)
		{
			invoke<int>(0xE1B3BE07D3AADDED, ped, p1, p2);
		} // 0xE1B3BE07D3AADDED undefined b1207
		static void N0x32CEDA9A0AB4CEF7(Ped ped, Hash p1, BOOL p2)
		{
			invoke<int>(0x32CEDA9A0AB4CEF7, ped, p1, p2);
		} // 0x32CEDA9A0AB4CEF7 undefined b1207
		static void N0x52A24D8A1DA89658(Ped ped, int p1, BOOL p2)
		{
			invoke<int>(0x52A24D8A1DA89658, ped, p1, p2);
		} // 0x52A24D8A1DA89658 undefined b1207
		static void N0x34B5CEAC180A5D6E(Ped ped, Hash p1, BOOL p2)
		{
			invoke<int>(0x34B5CEAC180A5D6E, ped, p1, p2);
		} // 0x34B5CEAC180A5D6E undefined b1207
		static void N0x4F27603E44A8E4C0(Ped ped, int p1, BOOL p2)
		{
			invoke<int>(0x4F27603E44A8E4C0, ped, p1, p2);
		} // 0x4F27603E44A8E4C0 undefined b1207
		// Changes health bar around heart core icon
		// INITIALISE_NEW_ROLE - Applying Super Jump buffs: p1 = 10, p2 = 0.0f
		// INITIALISE_NEW_ROLE - Clearing up Super Jump buffs: p1 = 10, p2 = 1.0f
		// _SET_D*
		static void N0x3FDCC1F8C17E303E(Ped ped, int p1, float p2)
		{
			invoke<int>(0x3FDCC1F8C17E303E, ped, p1, p2);
		} // 0x3FDCC1F8C17E303E undefined b1207
		// _SET_D*
		static void N0xE50C9816B3F22D8B(Ped ped, Hash p1, float p2)
		{
			invoke<int>(0xE50C9816B3F22D8B, ped, p1, p2);
		} // 0xE50C9816B3F22D8B undefined b1311
		static void SET_DEFENSE_MODIFIER_FOR_PED_(Ped ped, float modifier)
		{
			invoke<int>(0x9B6808EC46BE849B, ped, modifier);
		} // 0x9B6808EC46BE849B undefined b1207
		static void SET_MIN_PED_HEALTH_THRESHOLD_(Ped ped, float healthAmount)
		{
			invoke<int>(0x7883AA809DF43D98, ped, healthAmount);
		} // 0x7883AA809DF43D98 undefined b1355
		// _SET_H* - _SET_I*
		static void N0xC5B78E41DCF8227C(Ped ped, BOOL p1)
		{
			invoke<int>(0xC5B78E41DCF8227C, ped, p1);
		} // 0xC5B78E41DCF8227C undefined b1207
		static void SET_PED_CAN_BE_TARGETTED(Ped ped, BOOL toggle)
		{
			invoke<int>(0x63F58F7C80513AAD, ped, toggle);
		} // 0x63F58F7C80513AAD 0x75C49F74 b1207
		static void SET_PED_CAN_BE_TARGETTED_BY_TEAM(Ped ped, int team, BOOL toggle)
		{
			invoke<int>(0xBF1CA77833E58F2C, ped, team, toggle);
		} // 0xBF1CA77833E58F2C 0xB103A8E1 b1207
		static void SET_PED_CAN_BE_TARGETTED_BY_PLAYER(Ped ped, Player player, BOOL toggle)
		{
			invoke<int>(0x66B57B72E0836A76, ped, player, toggle);
		} // 0x66B57B72E0836A76 0xD050F490 b1207
		static void SET_INTERACTION_LOCKON_FLAG_(Ped ped, Player player, int flag, BOOL enable)
		{
			invoke<int>(0xFECA2081F61ED2CD, ped, player, flag, enable);
		} // 0xFECA2081F61ED2CD undefined b1207
		static BOOL IS_PED_FALLING(Ped ped)
		{
			return invoke<BOOL>(0xFB92A102F1C4DFA3, ped);
		} // 0xFB92A102F1C4DFA3 0xABF77334 b1207
		static BOOL IS_PED_SLIDING_(Ped ped)
		{
			return invoke<BOOL>(0xD6740E14E4CEFC0B, ped);
		} // 0xD6740E14E4CEFC0B undefined b1207
		static BOOL IS_PED_JUMPING(Ped ped)
		{
			return invoke<BOOL>(0xCEDABC5900A0BF97, ped);
		} // 0xCEDABC5900A0BF97 0x07E5BC0E b1207
		static BOOL IS_PED_CLIMBING(Ped ped)
		{
			return invoke<BOOL>(0x53E8CB4F48BFE623, ped);
		} // 0x53E8CB4F48BFE623 0xBCE03D35 b1207
		static BOOL IS_PED_CLIMBING_LADDER_(Ped ped)
		{
			return invoke<BOOL>(0x59643424B68D52B5, ped);
		} // 0x59643424B68D52B5 undefined b1207
		// _IS_PED_C* - _IS_PED_D*
		static BOOL N0x577C60BA06D0EA64(Ped ped)
		{
			return invoke<BOOL>(0x577C60BA06D0EA64, ped);
		} // 0x577C60BA06D0EA64 undefined b1207
		static BOOL IS_PED_VAULTING(Ped ped)
		{
			return invoke<BOOL>(0x117C70D1F5730B5E, ped);
		} // 0x117C70D1F5730B5E 0xC3169BDA b1207
		static BOOL IS_PED_DIVING(Ped ped)
		{
			return invoke<BOOL>(0x5527B8246FEF9B11, ped);
		} // 0x5527B8246FEF9B11 0x7BC5BF3C b1207
		// Returns true if the ped is currently opening a door (CTaskOpenDoor).
		//
		// Old name: _IS_PED_OPENING_A_DOOR
		static BOOL IS_PED_OPENING_DOOR(Ped ped)
		{
			return invoke<BOOL>(0x26AF0E8E30BD2A2C, ped);
		} // 0x26AF0E8E30BD2A2C  b1207
		// _IS_PED_IN*
		static BOOL N0x5C6C7C70CA302801(Ped ped)
		{
			return invoke<BOOL>(0x5C6C7C70CA302801, ped);
		} // 0x5C6C7C70CA302801 undefined b1207
		// _IS_PED_J* - _IS_PED_L*
		static BOOL N0xB91AB3BE7F655D49(Ped ped)
		{
			return invoke<BOOL>(0xB91AB3BE7F655D49, ped);
		} // 0xB91AB3BE7F655D49 undefined b1207
		static BOOL IS_PED_IN_ANY_TAXI(Ped ped)
		{
			return invoke<BOOL>(0x6E575D6A898AB852, ped);
		} // 0x6E575D6A898AB852 0x16FD386C b1207
		static void SET_PED_ID_RANGE(Ped ped, float value)
		{
			invoke<int>(0xF107E836A70DCE05, ped, value);
		} // 0xF107E836A70DCE05 0xEF3B4ED9 b1207
		static float GET_PED_ID_RANGE_(Ped ped)
		{
			return invoke<float>(0x31167ED4324B758D, ped);
		} // 0x31167ED4324B758D undefined b1207
		static void SET_PED_HIGHLY_PERCEPTIVE(Ped ped, BOOL toggle)
		{
			invoke<int>(0x52D59AB61DDC05DD, ped, toggle);
		} // 0x52D59AB61DDC05DD 0x9A2180FF b1207
		static void SET_PED_INJURED_ON_GROUND_BEHAVIOUR(Ped ped, float unk)
		{
			invoke<int>(0xEC4B4B3B9908052A, ped, unk);
		} // 0xEC4B4B3B9908052A 0xF30658D2 b1311
		static void DISABLE_PED_INJURED_ON_GROUND_BEHAVIOUR(Ped ped)
		{
			invoke<int>(0x733C87D4CE22BEA2, ped);
		} // 0x733C87D4CE22BEA2 0x43709044 b1207
		// _SET_ST* - _SET_SW*
		static void N0x028E7B3BBA0BD2FC(Ped ped)
		{
			invoke<int>(0x028E7B3BBA0BD2FC, ped);
		} // 0x028E7B3BBA0BD2FC undefined b1207
		// _HAS_PED_*
		static BOOL N0xFA8C10DCE0706D43(Ped ped)
		{
			return invoke<BOOL>(0xFA8C10DCE0706D43, ped);
		} // 0xFA8C10DCE0706D43 undefined b1207
		static void SET_PED_ANIMAL_DETECTION_MODIFIER_(Ped ped, float modifier)
		{
			invoke<int>(0x43CA928E892CFDB8, ped, modifier);
		} // 0x43CA928E892CFDB8 undefined b1311
		// Used in Script Function CHECK_IS_PLAYER_SEEN
		// _GET_PED_*
		static float N0x2BA9D7BF629F920C(Ped ped)
		{
			return invoke<float>(0x2BA9D7BF629F920C, ped);
		} // 0x2BA9D7BF629F920C undefined b1207
		static void SET_PED_SEEING_RANGE(Ped ped, float value)
		{
			invoke<int>(0xF29CF591C4BF6CEE, ped, value);
		} // 0xF29CF591C4BF6CEE 0x4BD72FE8 b1207
		// Used in Script Function AGGRO_SHOULD_PED_HEAR_DEATH
		// _GET_PED_*
		static float N0x900CA00CE703E1E2(Ped ped)
		{
			return invoke<float>(0x900CA00CE703E1E2, ped);
		} // 0x900CA00CE703E1E2 undefined b1207
		static void SET_PED_HEARING_RANGE(Ped ped, float value)
		{
			invoke<int>(0x33A8F7F7D5F7F33C, ped, value);
		} // 0x33A8F7F7D5F7F33C 0xB32087E0 b1207
		static void SET_PED_VISUAL_FIELD_MIN_ANGLE(Ped ped, float value)
		{
			invoke<int>(0x2DB492222FB21E26, ped, value);
		} // 0x2DB492222FB21E26 0x72E2E18B b1207
		static void SET_PED_VISUAL_FIELD_MAX_ANGLE(Ped ped, float value)
		{
			invoke<int>(0x70793BDCA1E854D4, ped, value);
		} // 0x70793BDCA1E854D4 0x0CEA0F9A b1207
		static void SET_PED_VISUAL_FIELD_PERIPHERAL_RANGE(Ped ped, float range)
		{
			invoke<int>(0x9C74B0BC831B753A, ped, range);
		} // 0x9C74B0BC831B753A 0xFDF2F7C2 b1207
		static void SET_PED_VISUAL_FIELD_CENTER_ANGLE(Ped ped, float angle)
		{
			invoke<int>(0x3B6405E8AB34A907, ped, angle);
		} // 0x3B6405E8AB34A907 0xE57202A1 b1207
		// _SET_PED_M*
		static void N0x9AB33CB5834885B3(Ped ped, float p1, float p2, float p3, float p4)
		{
			invoke<int>(0x9AB33CB5834885B3, ped, p1, p2, p3, p4);
		} // 0x9AB33CB5834885B3 undefined b1207
		// _SET_PED_O*
		static void N0x899DFA0009AC93DE(Ped ped, float p1)
		{
			invoke<int>(0x899DFA0009AC93DE, ped, p1);
		} // 0x899DFA0009AC93DE undefined b1207
		// _SET_PED_MO*
		static void N0x3A5697B80FED5EBE(Ped ped, float p1, float p2, float p3, float p4)
		{
			invoke<int>(0x3A5697B80FED5EBE, ped, p1, p2, p3, p4);
		} // 0x3A5697B80FED5EBE undefined b1207
		// Not implemented.
		static void SET_PED_STEALTH_MOVEMENT(Ped ped, BOOL toggle, Any p2, Any p3)
		{
			invoke<int>(0x88CBB5CEB96B7BD2, ped, toggle, p2, p3);
		} // 0x88CBB5CEB96B7BD2 0x67E28E1D b1207
		// Returns whether the entity is in stealth mode
		static BOOL GET_PED_STEALTH_MOVEMENT(Ped ped)
		{
			return invoke<BOOL>(0x7C2AC9CA66575FBF, ped);
		} // 0x7C2AC9CA66575FBF 0x40321B83 b1207
		static void SET_PED_CROUCH_MOVEMENT_(Ped ped, BOOL state, int p2, BOOL immediately)
		{
			invoke<int>(0x7DE9692C6F64CFE8, ped, state, p2, immediately);
		} // 0x7DE9692C6F64CFE8 undefined b1207
		static BOOL GET_PED_CROUCH_MOVEMENT(Ped ped)
		{
			return invoke<BOOL>(0xD5FE956C70FF370B, ped);
		} // 0xD5FE956C70FF370B undefined b1207
		static BOOL GET_PED_IS_DOING_COMBAT_ROLL(Ped ped)
		{
			return invoke<BOOL>(0xC48A9EB0D499B3E5, ped);
		} // 0xC48A9EB0D499B3E5 undefined b1207
		// Creates a new ped group.
		// Groups can contain up to 8 peds.
		//
		// The parameter is unused.
		//
		// Returns a handle to the created group, or 0 if a group couldn't be created.
		static int CREATE_GROUP(int taskAllocator)
		{
			return invoke<int>(0x90370EBE0FEE1A3D, taskAllocator);
		} // 0x90370EBE0FEE1A3D 0x8DC0368D b1207
		static void SET_PED_AS_GROUP_LEADER(Ped ped, int groupId, BOOL p2)
		{
			invoke<int>(0x2A7819605465FBCE, ped, groupId, p2);
		} // 0x2A7819605465FBCE 0x7265BEA2 b1207
		static void SET_PED_AS_GROUP_MEMBER(Ped ped, int groupId)
		{
			invoke<int>(0x9F3480FE65DB31B5, ped, groupId);
		} // 0x9F3480FE65DB31B5 0x0EE13F92 b1207
		// This only will teleport the ped to the group leader if the group leader teleports (sets coords).
		//
		// Only works in singleplayer
		static void SET_PED_CAN_TELEPORT_TO_GROUP_LEADER(Ped pedHandle, int groupId, BOOL toggle)
		{
			invoke<int>(0x2E2F4240B3F24647, pedHandle, groupId, toggle);
		} // 0x2E2F4240B3F24647 0xD0D8BDBC b1207
		static void REMOVE_GROUP(int groupId)
		{
			invoke<int>(0x8EB2F69076AF7053, groupId);
		} // 0x8EB2F69076AF7053 0x48D72B88 b1207
		static void REMOVE_PED_FROM_GROUP(Ped ped)
		{
			invoke<int>(0xED74007FFB146BC2, ped);
		} // 0xED74007FFB146BC2 0x82697713 b1207
		static BOOL IS_PED_GROUP_MEMBER(Ped ped, int groupId, BOOL p2)
		{
			return invoke<BOOL>(0x9BB01E3834671191, ped, groupId, p2);
		} // 0x9BB01E3834671191 0x876D5363 b1207
		static BOOL IS_PED_GROUP_LEADER_(Ped ped, int groupId)
		{
			return invoke<BOOL>(0x878B68960C1C2A35, ped, groupId);
		} // 0x878B68960C1C2A35 undefined b1207
		static BOOL IS_PED_HANGING_ON_TO_VEHICLE(Ped ped)
		{
			return invoke<BOOL>(0x1C86D8AEF8254B78, ped);
		} // 0x1C86D8AEF8254B78 0x9678D4FF b1207
		// Sets the range at which members will automatically leave the group.
		static void SET_GROUP_SEPARATION_RANGE(int groupId, float separationRange)
		{
			invoke<int>(0x4102C7858CFEE4E4, groupId, separationRange);
		} // 0x4102C7858CFEE4E4 0x7B820CD5 b1207
		// _SET_C*
		static void N0x89E59DBD15E21177(int groupId, int p1)
		{
			invoke<int>(0x89E59DBD15E21177, groupId, p1);
		} // 0x89E59DBD15E21177 undefined b1207
		static BOOL IS_PED_PRONE(Ped ped)
		{
			return invoke<BOOL>(0xD6A86331A537A7B9, ped);
		} // 0xD6A86331A537A7B9 0x02C2A6C3 b1207
		// _IS_PED_IN*
		static BOOL IS_PED_INVESTIGATING_(Ped ped)
		{
			return invoke<BOOL>(0x7583A9D35248B83F, ped);
		} // 0x7583A9D35248B83F undefined b1207
		static BOOL IS_PED_IN_COMBAT(Ped ped, Ped target)
		{
			return invoke<BOOL>(0x4859F1FC66A6278E, ped, target);
		} // 0x4859F1FC66A6278E 0xFE027CB5 b1207
		static BOOL CAN_PED_IN_COMBAT_SEE_TARGET(Ped ped, Ped target)
		{
			return invoke<BOOL>(0xEAD42DE3610D0721, ped, target);
		} // 0xEAD42DE3610D0721 0xCCD525E1 b1207
		static BOOL IS_PED_JACKING(Ped ped)
		{
			return invoke<BOOL>(0x4AE4FF911DFB61DA, ped);
		} // 0x4AE4FF911DFB61DA 0x3B321816 b1207
		static BOOL IS_PED_BEING_JACKED(Ped ped)
		{
			return invoke<BOOL>(0x9A497FE2DF198913, ped);
		} // 0x9A497FE2DF198913 0xD45D605C b1207
		static BOOL IS_PED_BEING_STUNNED(Ped ped, Hash weaponType)
		{
			return invoke<BOOL>(0x4FBACCE3B4138EE8, ped, weaponType);
		} // 0x4FBACCE3B4138EE8 0x0A66CE30 b1207
		static Ped GET_PEDS_JACKER(Ped ped)
		{
			return invoke<Ped>(0x9B128DC36C1E04CF, ped);
		} // 0x9B128DC36C1E04CF 0xDE1DBB59 b1207
		static Ped GET_JACK_TARGET(Ped ped)
		{
			return invoke<Ped>(0x5486A79D9FBD342D, ped);
		} // 0x5486A79D9FBD342D 0x1D196361 b1207
		static BOOL IS_PED_FLEEING(Ped ped)
		{
			return invoke<BOOL>(0xBBCCE00B381F8482, ped);
		} // 0xBBCCE00B381F8482 0x85D813C6 b1207
		static BOOL IS_PED_IN_COVER(Ped ped, BOOL p1, BOOL p2)
		{
			return invoke<BOOL>(0x60DFD0691A170B88, ped, p1, p2);
		} // 0x60DFD0691A170B88 0x972C5A8B b1207
		// _IS_PED_M* - _IS_PED_O*
		static BOOL N0x2DD4E0E26DFAD97D(Ped ped1, Ped ped2, float p2)
		{
			return invoke<BOOL>(0x2DD4E0E26DFAD97D, ped1, ped2, p2);
		} // 0x2DD4E0E26DFAD97D undefined b1207
		static BOOL PED_WAS_KILLED_BY_HEADSHOT_(Ped ped)
		{
			return invoke<BOOL>(0x06FA94C835787C64, ped);
		} // 0x06FA94C835787C64 undefined b1207
		static BOOL PED_DUELING_DID_PLAYER_HEADSHOT_OPPONENT_(Ped ped)
		{
			return invoke<BOOL>(0xBD6B242B8BD5543A, ped);
		} // 0xBD6B242B8BD5543A undefined b1207
		static BOOL IS_PED_IN_COVER_FACING_LEFT(Ped ped)
		{
			return invoke<BOOL>(0x845333B3150583AB, ped);
		} // 0x845333B3150583AB 0xB89DBB80 b1207
		static BOOL IS_PED_GOING_INTO_COVER(Ped ped)
		{
			return invoke<BOOL>(0x9F65DBC537E59AD5, ped);
		} // 0x9F65DBC537E59AD5 0xA3589628 b1207
		static BOOL IS_PED_RESPONDING_TO_THREAT(Ped ped)
		{
			return invoke<BOOL>(0x77525BBF433F2CD6, ped);
		} // 0x77525BBF433F2CD6 undefined b1207
		// Returns kneeling, sitting, squating, and sleeping scenario hashes
		static Hash GET_ACTIVE_DYNAMIC_SCENARIO_2_(Ped ped)
		{
			return invoke<Hash>(0xC22AA08A8ADB87D4, ped);
		} // 0xC22AA08A8ADB87D4 undefined b1207
		// Returns kneeling, sitting, squating, and sleeping scenario hashes
		static Hash GET_ACTIVE_DYNAMIC_SCENARIO_(Ped ped)
		{
			return invoke<Hash>(0x569F1E1237508DEB, ped);
		} // 0x569F1E1237508DEB undefined b1207
		static BOOL GIVE_PED_SCENARIO_PROP_(Ped ped, Object object, const char* conditionalAnim, const char* p3, const char* p4, BOOL p5)
		{
			return invoke<BOOL>(0x3BBDD6143FF16F98, ped, object, conditionalAnim, p3, p4, p5);
		} // 0x3BBDD6143FF16F98 undefined b1207
		static BOOL GIVE_PED_HASH_SCENARIO_PROP(Ped ped, Object object, const char* conditionalAnim, Hash scenarioType, Hash p4, BOOL p5)
		{
			return invoke<BOOL>(0x2B02DB082258625F, ped, object, conditionalAnim, scenarioType, p4, p5);
		} // 0x2B02DB082258625F undefined b1207
		// Only used in SP R* Script rcm_jack2
		static BOOL GIVE_PED_SCENARIO_PROP_DYNAMIC_(Ped ped, Object object, const char* p2, const char* p3, BOOL p4)
		{
			return invoke<BOOL>(0xA0774E388CE4A679, ped, object, p2, p3, p4);
		} // 0xA0774E388CE4A679 undefined b1207
		static Any REQUEST_PROP_SCENARIO_PED_(Ped ped, Object object, const char* p2, const char* p3, const char* p4, BOOL p5)
		{
			return invoke<Any>(0xBEC65C6049B3219D, ped, object, p2, p3, p4, p5);
		} // 0xBEC65C6049B3219D undefined b1207
		static Any REQUEST_PED_FOR_SCENARIO_TYPE_(Ped ped, Object object, const char* p2, Hash scenarioType, const char* p4, BOOL p5)
		{
			return invoke<Any>(0xBDED916A9F9B0604, ped, object, p2, scenarioType, p4, p5);
		} // 0xBDED916A9F9B0604 undefined b1207
		// Gets a registered/attached prop entity for a particular ped. Second parameter will detach the prop entity from the ped if true. Props primarily appear to come from scenarios, such as a broom or hay bale.
		//
		// Known props: https://pastebin.com/ap2NEJqB
		static Entity GET_PED_REGISTER_PROP_(Ped ped, const char* propName, BOOL detachProp)
		{
			return invoke<Entity>(0x4D0D2E3D8BC000EB, ped, propName, detachProp);
		} // 0x4D0D2E3D8BC000EB undefined b1207
		static int GET_SEAT_PED_IS_TRYING_TO_ENTER(Ped ped)
		{
			return invoke<int>(0x6F4C85ACD641BCD2, ped);
		} // 0x6F4C85ACD641BCD2 0xACF162E0 b1207
		// Returns the entity that killed the ped
		//
		// It is best to check if the Ped is dead before asking for its killer.
		static Entity GET_PED_SOURCE_OF_DEATH(Ped ped)
		{
			return invoke<Entity>(0x93C8B64DEB84728C, ped);
		} // 0x93C8B64DEB84728C 0x84ADF9EB b1207
		// Returns the hash of the weapon/model/object that killed the ped.
		static Hash GET_PED_CAUSE_OF_DEATH(Ped ped)
		{
			return invoke<Hash>(0x16FFE42AB2D2DC59, ped);
		} // 0x16FFE42AB2D2DC59 0x63458C27 b1207
		static int GET_PED_TIME_OF_DEATH(Ped ped)
		{
			return invoke<int>(0x1E98817B311AE98A, ped);
		} // 0x1E98817B311AE98A 0xDF6D5D54 b1207
		static int COUNT_PEDS_IN_COMBAT_WITH_TARGET(Ped ped, int flag)
		{
			return invoke<int>(0x5407B7288D0478B7, ped, flag);
		} // 0x5407B7288D0478B7 0xEF0B78E6 b1207
		static int GET_PEDS_IN_COMBAT_WITH_TARGET_(Ped ped, ItemSet itemset, int flag)
		{
			return invoke<int>(0x7BE607DAFF382FD2, ped, itemset, flag);
		} // 0x7BE607DAFF382FD2 undefined b1207
		static int COUNT_PEDS_IN_COMBAT_WITH_TARGET_WITHIN_RADIUS(Ped ped, float x, float y, float z, float radius, int flag)
		{
			return invoke<int>(0x336B3D200AB007CB, ped, x, y, z, radius, flag);
		} // 0x336B3D200AB007CB 0xFB18CB19 b1207
		static Entity GET_CURRENT_TARGET_FOR_PED(Ped ped)
		{
			return invoke<Entity>(0xCD66FEA29400A0B5, ped);
		} // 0xCD66FEA29400A0B5 undefined b1207
		static void SET_PED_RELATIONSHIP_GROUP_DEFAULT_HASH(Ped ped, Hash hash)
		{
			invoke<int>(0xADB3F206518799E8, ped, hash);
		} // 0xADB3F206518799E8 0x423B7BA2 b1207
		static Hash GET_DEFAULT_RELATIONSHIP_GROUP_HASH_(Hash modelHash)
		{
			return invoke<Hash>(0x3CC4A718C258BDD0, modelHash);
		} // 0x3CC4A718C258BDD0 undefined b1207
		static void SET_PED_RELATIONSHIP_GROUP_HASH(Ped ped, Hash relationshipGroup)
		{
			invoke<int>(0xC80A74AC829DDD92, ped, relationshipGroup);
		} // 0xC80A74AC829DDD92 0x79F8C18C b1207
		static void SET_RELATIONSHIP_BETWEEN_GROUPS(int relationship, Hash group1, Hash group2)
		{
			invoke<int>(0xBF25EB89375A37AD, relationship, group1, group2);
		} // 0xBF25EB89375A37AD 0xD4A215BA b1207
		static void CLEAR_RELATIONSHIP_BETWEEN_GROUPS(int relationship, Hash group1, Hash group2)
		{
			invoke<int>(0x5E29243FB56FC6D4, relationship, group1, group2);
		} // 0x5E29243FB56FC6D4 0x994B8C2D b1207
		// The hash of the created relationship group is output in the second parameter.
		static BOOL ADD_RELATIONSHIP_GROUP(const char* name, Hash* groupHash)
		{
			return invoke<BOOL>(0xF372BC22FCB88606, name, groupHash);
		} // 0xF372BC22FCB88606 0x8B635546 b1207
		static void REMOVE_RELATIONSHIP_GROUP(Hash groupHash)
		{
			invoke<int>(0xB6BA2444AB393DA2, groupHash);
		} // 0xB6BA2444AB393DA2 0x4A1DC59A b1207
		static int GET_RELATIONSHIP_BETWEEN_PEDS(Ped ped1, Ped ped2)
		{
			return invoke<int>(0xEBA5AD3A0EAF7121, ped1, ped2);
		} // 0xEBA5AD3A0EAF7121 0xE254C39C b1207
		static Hash GET_PED_RELATIONSHIP_GROUP_DEFAULT_HASH(Ped ped)
		{
			return invoke<Hash>(0x42FDD0F017B1E38E, ped);
		} // 0x42FDD0F017B1E38E 0x714BD6E4 b1207
		static Hash GET_PED_RELATIONSHIP_GROUP_HASH(Ped ped)
		{
			return invoke<Hash>(0x7DBDD04862D95F04, ped);
		} // 0x7DBDD04862D95F04 0x354F283C b1207
		static int GET_RELATIONSHIP_BETWEEN_GROUPS(Hash group1, Hash group2)
		{
			return invoke<int>(0x9E6B70061662AE5C, group1, group2);
		} // 0x9E6B70061662AE5C 0x4E372FE2 b1207
		// Used in Script Function MP_MAIN_OFFLINE__INITIALIZE_GAME
		// _SET_RELATIONSHIP_*
		static void N0xDC91F22F09BC6C2F(Hash group, BOOL p1)
		{
			invoke<int>(0xDC91F22F09BC6C2F, group, p1);
		} // 0xDC91F22F09BC6C2F undefined b1207
		static void N0x9629FAF6460D35CB(Hash group, BOOL p1)
		{
			invoke<int>(0x9629FAF6460D35CB, group, p1);
		} // 0x9629FAF6460D35CB undefined b1207
		static void N0x4E68C7EF706DF35D(Ped ped, float x, float y, float z, float p4, Hash relationshipGroup)
		{
			invoke<int>(0x4E68C7EF706DF35D, ped, x, y, z, p4, relationshipGroup);
		} // 0x4E68C7EF706DF35D undefined b1207
		// Used in R* Script net_fetch (NET_FETCH_UPDATE_RECIPIENT_PROP_ILO_IN_COMBAT) and various SP Scripts
		// Params: p1 = 4/5/6, p5 = 40.f/100.f, coords = Player ped
		// Perhaps returns some distance (Clearing that the local player is able to use ILO while in combat because they are near the recipient but also near hated peds)
		// _GET_NUM_M* - _GET_PEDS_J*
		static int N0x3ACCE14DFA6BA8C2(Ped ped, int p1, float x, float y, float z, float p5, ItemSet itemset)
		{
			return invoke<int>(0x3ACCE14DFA6BA8C2, ped, p1, x, y, z, p5, itemset);
		} // 0x3ACCE14DFA6BA8C2 undefined b1207
		static void SET_PED_TO_INFORM_RESPECTED_FRIENDS(Ped ped, float radius, int maxFriends)
		{
			invoke<int>(0x112942C6E708F70B, ped, radius, maxFriends);
		} // 0x112942C6E708F70B 0xD78AC46C b1207
		// _IS_PED_RE*
		static BOOL N0x40C9155AF8BC13F3(Ped ped)
		{
			return invoke<BOOL>(0x40C9155AF8BC13F3, ped);
		} // 0x40C9155AF8BC13F3 undefined b1207
		// Only used in SP Scripts
		// Returns count / index
		// _C*
		static int N0xF4860514AD354226(ScrHandle shockingEvent, float x, float y, float z, float p4, int* p5)
		{
			return invoke<int>(0xF4860514AD354226, shockingEvent, x, y, z, p4, p5);
		} // 0xF4860514AD354226 undefined b1207
		// eventType: https://alloc8or.re/rdr3/doc/enums/eEventType.txt
		static BOOL IS_PED_RESPONDING_TO_EVENT(Ped ped, Hash eventType)
		{
			return invoke<BOOL>(0x625B774D75C87068, ped, eventType);
		} // 0x625B774D75C87068 0x7A877554 b1207
		// Only used in R* SP Scripts
		// _GET_PED_IN*
		static Entity N0x5E9FAF6C513347B4(Ped ped, Hash eventType)
		{
			return invoke<Entity>(0x5E9FAF6C513347B4, ped, eventType);
		} // 0x5E9FAF6C513347B4 undefined b1207
		// Only used in R* SP Script short_update
		// _GET_TARGET_* - _GET_TRACKED*
		static Any N0x326F7951EF0D7F75(Ped ped, Hash eventType)
		{
			return invoke<Any>(0x326F7951EF0D7F75, ped, eventType);
		} // 0x326F7951EF0D7F75 undefined b1207
		// Used for AUDIO / ANIMSCENE (REFERENCE_REGIONAL_CHARACTER)
		// Params: p1 = 0
		// _GET_PED_IN*
		static Entity N0xE76687023D8C8505(Hash perscharModel, int p1)
		{
			return invoke<Entity>(0xE76687023D8C8505, perscharModel, p1);
		} // 0xE76687023D8C8505 undefined b1207
		// Only used in R* SP Scripts
		// _GET_PLAYER_W* - _GET_RANDOM_*
		static BOOL N0xCB8F4C9343EBE240(Ped ped, Hash eventType, Vector3* coords)
		{
			return invoke<BOOL>(0xCB8F4C9343EBE240, ped, eventType, coords);
		} // 0xCB8F4C9343EBE240 undefined b1207
		// Used in various R* MP & SP Scripts
		static void SET_PED_FIRING_PATTERN(Ped ped, Hash patternHash)
		{
			invoke<int>(0x9AC577F5A12AD8A9, ped, patternHash);
		} // 0x9AC577F5A12AD8A9 0xB4629D66 b1207
		// Used in R* MP Script fm_mission_controller and various R* SP Scripts for ambush*
		static void SET_PED_FIRING_PATTERN_2_(Ped ped, Hash patternHash)
		{
			invoke<int>(0x20E54854DEF6A54A, ped, patternHash);
		} // 0x20E54854DEF6A54A undefined b1207
		// Only used in R* MP Script fm_mission_controller
		static void SET_PED_FIRING_PATTERN_3_(Ped ped, Hash patternHash)
		{
			invoke<int>(0x244E8C282188E40F, ped, patternHash);
		} // 0x244E8C282188E40F undefined b1207
		// Params: shootRate = 0 - 1000
		static void SET_PED_SHOOT_RATE(Ped ped, int shootRate)
		{
			invoke<int>(0x614DA022990752DC, ped, shootRate);
		} // 0x614DA022990752DC 0xFB301746 b1207
		// _SET_PED_TA* - _SET_PED_TO_*
		static void N0x3C529A827998F9B3(Ped ped, int p1, int p2)
		{
			invoke<int>(0x3C529A827998F9B3, ped, p1, p2);
		} // 0x3C529A827998F9B3 undefined b1207
		// Only used in SP R* Scripts
		// Params: p2 = same as p2 of 0x3C529A827998F9B3
		// _SET_PED_TA* - _SET_PED_TO_*
		static void N0x1F44B7E283C09EDE(Ped ped, float p1, int p2)
		{
			invoke<int>(0x1F44B7E283C09EDE, ped, p1, p2);
		} // 0x1F44B7E283C09EDE undefined b1207
		// combatType can be between 0-14. See GET_COMBAT_FLOAT below for a list of possible parameters.
		// https://github.com/femga/rdr3_discoveries/tree/master/AI/COMBAT_FLOATS
		static void SET_COMBAT_FLOAT(Ped ped, int combatType, float newValue)
		{
			invoke<int>(0xFF41B4B141ED981C, ped, combatType, newValue);
		} // 0xFF41B4B141ED981C 0xD8B7637C b1207
		static float GET_COMBAT_FLOAT(Ped ped, int combatType)
		{
			return invoke<float>(0x52DFF8A10508090A, ped, combatType);
		} // 0x52DFF8A10508090A 0x511D7EF8 b1207
		static void GET_GROUP_SIZE(int groupId, BOOL* hasLeader, int* numberOfFollowers)
		{
			invoke<int>(0x8DE69FE35CA09A45, groupId, hasLeader, numberOfFollowers);
		} // 0x8DE69FE35CA09A45 0xF7E1A691 b1207
		static BOOL DOES_GROUP_EXIST(int groupId)
		{
			return invoke<BOOL>(0x7C6B0C22F9F40BBE, groupId);
		} // 0x7C6B0C22F9F40BBE 0x935C978D b1207
		// _DOES_GROUP_* - _DOES_N*
		static BOOL N0x0455546F23FF08E4(int groupId)
		{
			return invoke<BOOL>(0x0455546F23FF08E4, groupId);
		} // 0x0455546F23FF08E4 undefined b1207
		static BOOL IS_GROUP_LOCALLY_CONTROLLED(int groupId)
		{
			return invoke<BOOL>(0x909AD9E9A92A10DF, groupId);
		} // 0x909AD9E9A92A10DF undefined b1207
		// Returns the groupId of which the specified ped is a member of.
		static int GET_PED_GROUP_INDEX(Ped ped)
		{
			return invoke<int>(0xF162E133B4E7A675, ped);
		} // 0xF162E133B4E7A675 0x134E0785 b1207
		static BOOL IS_PED_IN_GROUP(Ped ped)
		{
			return invoke<BOOL>(0x5891CAC5D4ACFF74, ped);
		} // 0x5891CAC5D4ACFF74 0x836D9795 b1207
		// _IS_PED_L* - _IS_PED_M*
		static BOOL IS_PED_LEADING_ANY_GROUP_(Ped ped)
		{
			return invoke<BOOL>(0x917760CFE7A0E0F1, ped);
		} // 0x917760CFE7A0E0F1 undefined b1207
		static Player GET_PLAYER_PED_IS_FOLLOWING(Ped ped)
		{
			return invoke<Player>(0x6A3975DEA89F9A17, ped);
		} // 0x6A3975DEA89F9A17 0xDE7442EE b1207
		// eFormationType
		//
		// 0: Default
		// 1: Circle Around Leader
		// 2: Alternative Circle Around Leader
		// 3: Line, with Leader at center
		static void SET_GROUP_FORMATION(int groupId, int formationType)
		{
			invoke<int>(0xCE2F5FC3AF7E8C1E, groupId, formationType);
		} // 0xCE2F5FC3AF7E8C1E 0x08FAC739 b1207
		static int GET_GROUP_FORMATION_(int groupId)
		{
			return invoke<int>(0x13A1B061007C906B, groupId);
		} // 0x13A1B061007C906B undefined b1207
		static void SET_GROUP_FORMATION_SPACING(int groupId, float p1, float p2, float p3)
		{
			invoke<int>(0x1D9D45004C28C916, groupId, p1, p2, p3);
		} // 0x1D9D45004C28C916 0xB1E086FF b1207
		static void RESET_GROUP_FORMATION_DEFAULT_SPACING(int groupId)
		{
			invoke<int>(0x63DAB4CCB3273205, groupId);
		} // 0x63DAB4CCB3273205 0x267FCEAD b1207
		// Used to set up bad guy groups in nb_kidnapped R* Script (MP_RE_KIDNAPPED): p1 = 4.f
		// _SET_FORMATION_*
		static BOOL N0xB05CC690CDE8A4A9(int groupId, float p1)
		{
			return invoke<BOOL>(0xB05CC690CDE8A4A9, groupId, p1);
		} // 0xB05CC690CDE8A4A9 undefined b1207
		static void ADD_CUSTOM_FORMATION_LOCATION(int groupId, float x, float y, float z, int position)
		{
			invoke<int>(0x4E23CD07BD161E06, groupId, x, y, z, position);
		} // 0x4E23CD07BD161E06 undefined b1207
		static BOOL ADD_FORMATION_LOCATION(int groupId, float p1, float p2, float p3)
		{
			return invoke<BOOL>(0xB05945C1E9E60D91, groupId, p1, p2, p3);
		} // 0xB05945C1E9E60D91 undefined b1207
		static BOOL SET_FORMATION_POSITIONS_TARGET_RADIUS(int groupId, float radius)
		{
			return invoke<BOOL>(0x7CC7D3B7AF7FB71F, groupId, radius);
		} // 0x7CC7D3B7AF7FB71F undefined b1207
		static void SET_FORMATION_AUTO_ASSIGN_POSITION_(int groupId, BOOL toggle)
		{
			invoke<int>(0x478F6B9920446CE2, groupId, toggle);
		} // 0x478F6B9920446CE2 undefined b1207
		static void SET_PED_FORMATION_POSITION_(Ped ped, int position, BOOL toggle)
		{
			invoke<int>(0x0E9E95FDEDCC9D35, ped, position, toggle);
		} // 0x0E9E95FDEDCC9D35 undefined b1207
		// Returns offset (0 < 32) to be used with MISC::SET_BIT
		// _GET_PED_CR*
		static int N0x8AF8E647D6B2A649(int groupId, Ped ped)
		{
			return invoke<int>(0x8AF8E647D6B2A649, groupId, ped);
		} // 0x8AF8E647D6B2A649 undefined b1207
		// _CLEAR_PED_E* - _CLEAR_PED_L*
		static void N0x87C2724A56F66020(Ped ped)
		{
			invoke<int>(0x87C2724A56F66020, ped);
		} // 0x87C2724A56F66020 undefined b1207
		// _SET_FORMATION_*
		static void N0xD5BD1B5318A81994(int groupId, BOOL p1)
		{
			invoke<int>(0xD5BD1B5318A81994, groupId, p1);
		} // 0xD5BD1B5318A81994 undefined b1207
		// _SET_PLAYER_CAN_B* - _SET_PLAYER_CAN_U*
		static void N0x9BBEAF8B0C007F1E(Ped ped, BOOL p1)
		{
			invoke<int>(0x9BBEAF8B0C007F1E, ped, p1);
		} // 0x9BBEAF8B0C007F1E undefined b1207
		// _SET_PLAYER_N* - _SET_PLAYER_S*
		static void N0xC99F104BDF8C7F5A(Ped ped, BOOL p1)
		{
			invoke<int>(0xC99F104BDF8C7F5A, ped, p1);
		} // 0xC99F104BDF8C7F5A undefined b1207
		// _SET_PLAYER_SN* - _SET_PLAYER_STAMINA*
		static void N0x02E741E19E39628C(Ped ped, float p1)
		{
			invoke<int>(0x02E741E19E39628C, ped, p1);
		} // 0x02E741E19E39628C undefined b1207
		// _SET_SCENARIO_PED_* - _SET_SPAWNER_*
		static void N0x97C475212B327666(int groupId, BOOL p1)
		{
			invoke<int>(0x97C475212B327666, groupId, p1);
		} // 0x97C475212B327666 undefined b1207
		// _SET_SCENARIO_PED_* - _SET_SPAWNER_*
		static void N0x154B7E841AC7412F(int groupId, BOOL p1)
		{
			invoke<int>(0x154B7E841AC7412F, groupId, p1);
		} // 0x154B7E841AC7412F undefined b1207
		// _SET_FORMATION_*
		static void N0x8AFCCC0F18D70018(int groupId, BOOL p1)
		{
			invoke<int>(0x8AFCCC0F18D70018, groupId, p1);
		} // 0x8AFCCC0F18D70018 undefined b1207
		// _SET_FORMATION_P*
		static void N0xE1103300F3456DE7(int groupId, float p1, float p2)
		{
			invoke<int>(0xE1103300F3456DE7, groupId, p1, p2);
		} // 0xE1103300F3456DE7 undefined b1207
		// _SET_ENABLE_B* - _SET_ENABLE_H*
		static void N0xA8A95CECB1906EA2(int groupId, BOOL p1)
		{
			invoke<int>(0xA8A95CECB1906EA2, groupId, p1);
		} // 0xA8A95CECB1906EA2 undefined b1207
		// _SET_FORMATION_P*
		static void N0xDDFAD4DEAA7FA362(int groupId, float p1, float p2, float p3, float p4)
		{
			invoke<int>(0xDDFAD4DEAA7FA362, groupId, p1, p2, p3, p4);
		} // 0xDDFAD4DEAA7FA362 undefined b1207
		// _SET_FORMATION_P*
		static void N0x966DE09688A1DE39(int groupId, float p1, float p2, float p3, float p4)
		{
			invoke<int>(0x966DE09688A1DE39, groupId, p1, p2, p3, p4);
		} // 0x966DE09688A1DE39 undefined b1207
		// _SET_FORMATION_P*
		static void N0x7E5185B979706210(int groupId, int p1)
		{
			invoke<int>(0x7E5185B979706210, groupId, p1);
		} // 0x7E5185B979706210 undefined b1207
		// _SET_SCENARIO_PED_* - _SET_SPAWNER_*
		static void N0x40C3524D4ED83554(int groupId, BOOL p1)
		{
			invoke<int>(0x40C3524D4ED83554, groupId, p1);
		} // 0x40C3524D4ED83554 undefined b1207
		static void N0x86FAFC18E3D4380C(int groupId, BOOL p1)
		{
			invoke<int>(0x86FAFC18E3D4380C, groupId, p1);
		} // 0x86FAFC18E3D4380C undefined b1207
		static void N0x07EA5B053FA60AC7(int groupId, BOOL p1)
		{
			invoke<int>(0x07EA5B053FA60AC7, groupId, p1);
		} // 0x07EA5B053FA60AC7 undefined b1207
		// Used in Script Function PLAYER_HEAD_TRACKING_MAINTAIN
		static void N0xF9CBD46433E36713(Ped ped, Entity targetEntity, float p2, float p3, float p4, float p5, float p6, float p7, float p8, const char* p9)
		{
			invoke<int>(0xF9CBD46433E36713, ped, targetEntity, p2, p3, p4, p5, p6, p7, p8, p9);
		} // 0xF9CBD46433E36713 undefined b1207
		static Vehicle GET_VEHICLE_PED_IS_USING(Ped ped)
		{
			return invoke<Vehicle>(0x6094AD011A2EA87D, ped);
		} // 0x6094AD011A2EA87D 0x6DE3AADA b1207
		static Vehicle GET_VEHICLE_PED_IS_ENTERING(Ped ped)
		{
			return invoke<Vehicle>(0xF92691AED837A5FC, ped);
		} // 0xF92691AED837A5FC 0x56E0C163 b1207
		static Vehicle GET_VEHICLE_DRAFT_HORSE_IS_ATTACHED_TO_(Ped horse)
		{
			return invoke<Vehicle>(0xE4770DA1B8FF4FD1, horse);
		} // 0xE4770DA1B8FF4FD1 undefined b1207
		static Vehicle GET_LAST_VEHICLE_DRAFT_HORSE_WAS_ATTACHED_TO_(Ped horse)
		{
			return invoke<Vehicle>(0x5064DB5083C29921, horse);
		} // 0x5064DB5083C29921 undefined b1207
		static int GET_SEAT_PED_IS_USING(Ped ped)
		{
			return invoke<int>(0x4E76CB57222A00E5, ped);
		} // 0x4E76CB57222A00E5 undefined b1207
		static Entity GET_TRANSPORT_PED_IS_SEATED_ON_(Ped ped)
		{
			return invoke<Entity>(0x849BD6C6314793D0, ped);
		} // 0x849BD6C6314793D0 undefined b1207
		static BOOL IS_PED_ENTERING_ANY_TRANSPORT(Ped ped)
		{
			return invoke<BOOL>(0x1D46B417F926D34D, ped);
		} // 0x1D46B417F926D34D undefined b1207
		static void SET_PED_GRAVITY(Ped ped, BOOL toggle)
		{
			invoke<int>(0x9FF447B6B6AD960A, ped, toggle);
		} // 0x9FF447B6B6AD960A 0x3CA16652 b1207
		// Only used in R* Script mob4 combined with SET_ANIMAL_TUNING_BOOL_PARAM
		// _SET_PED_S* - _SET_PED_TARGET_*
		static void N0x96595B36D6A2279B(Ped animal, BOOL toggle)
		{
			invoke<int>(0x96595B36D6A2279B, animal, toggle);
		} // 0x96595B36D6A2279B undefined b1207
		// Only used in R* Script beat_sharp_shooter
		// Blocks ped from swimming underwater
		static void SET_PED_IMMERSION_FLAG_(Ped ped, BOOL toggle)
		{
			invoke<int>(0x7FB0088E8769CDDB, ped, toggle);
		} // 0x7FB0088E8769CDDB undefined b1207
		// Only used in R* Script mob4 and rcm_mason4
		// _SET_PED_DEFENSIVE_* - _SET_PED_DESIRED_*
		static void N0xA90684ED185CCB4B(Ped animal, BOOL p1, float p2, float p3)
		{
			invoke<int>(0xA90684ED185CCB4B, animal, p1, p2, p3);
		} // 0xA90684ED185CCB4B undefined b1207
		static void FAKE_SET_PED_LOCO_INJURED_(Ped ped, BOOL enabled)
		{
			invoke<int>(0x8B3CB08158E98481, ped, enabled);
		} // 0x8B3CB08158E98481 undefined b1207
		static void FORCE_PED_DEATH_(Ped ped, Ped pedKiller, Hash weapon)
		{
			invoke<int>(0x1CE875505D45338A, ped, pedKiller, weapon);
		} // 0x1CE875505D45338A undefined b1207
		// damages a ped with the given amount
		static void APPLY_DAMAGE_TO_PED(Ped ped, int damageAmount, BOOL damageArmour, int boneId, Ped pedKiller)
		{
			invoke<int>(0x697157CED63F18D4, ped, damageAmount, damageArmour, boneId, pedKiller);
		} // 0x697157CED63F18D4 0x4DC27FCF b1207
		// _SET_PED_D*
		static void N0xBAD2A311667A50D7(Ped ped, BOOL p1)
		{
			invoke<int>(0xBAD2A311667A50D7, ped, p1);
		} // 0xBAD2A311667A50D7 undefined b1207
		static int GET_PED_TYPE(Ped ped)
		{
			return invoke<int>(0xFF059E1E4C01E63C, ped);
		} // 0xFF059E1E4C01E63C 0xB1460D43 b1207
		// Turns the desired ped into a cop. If you use this on the player ped, you will become almost invisible to cops dispatched for you. You will also report your own crimes, get a generic cop voice, get a cop-vision-cone on the radar, and you will be unable to shoot at other cops. Toggling ped as "false" has no effect; you must change p0's ped model to disable the effect.
		// toggle = bSetRelGroup
		static void SET_PED_AS_COP(Ped ped, BOOL toggle)
		{
			invoke<int>(0xBB03C38DD3FB7FFD, ped, toggle);
		} // 0xBB03C38DD3FB7FFD 0x84E7DE9F b1207
		// _SET_PED_A*
		static void N0x405180B14DA5A935(Ped ped, BOOL p1)
		{
			invoke<int>(0x405180B14DA5A935, ped, p1);
		} // 0x405180B14DA5A935 undefined b1207
		// personality (script_mp_rel): NONE, AGGRESSIVE, TIMID (non-aggressive), CRIPPS, SCRIPTEDINTIMIDATION, MAGGIE, MARCEL, SCRIPTEDSALOON
		// personality (script_rel): AVOID, SCRIPTEDOUTLAW, TIMIDGUARDDOG, SCRIPTEDTIMIDROB, AGGRESSIVECAMPER, LAZYDOG, KIERANTIEDUP, SCRIPTEDGALA
		static void SET_PED_INTERACTION_PERSONALITY_(Ped ped, Hash personality)
		{
			invoke<int>(0x24C82EF607105FAA, ped, personality);
		} // 0x24C82EF607105FAA undefined b1207
		static Hash GET_PED_INTERACTION_PERSONALITY_(Ped ped)
		{
			return invoke<Hash>(0xD7AD3C7EBAF88C92, ped);
		} // 0xD7AD3C7EBAF88C92 undefined b1207
		// Hashes: STANDARD_PED_AGRO_GUARD, BOUNTY_HUNTER, PLAYER_HORSE, LAW_POLICE, GUARD_DOG, ATTACK_DOG
		// Personalities can also be found in common:/data/ai/interactionpersonalities
		static void SET_PED_PERSONALITY_(Ped ped, Hash personality)
		{
			invoke<int>(0xB8B6430EAD2D2437, ped, personality);
		} // 0xB8B6430EAD2D2437 undefined b1207
		// _SET_PED_P* - _SET_PED_R*
		static void N0x329772C47DBB2FBC(Ped ped)
		{
			invoke<int>(0x329772C47DBB2FBC, ped);
		} // 0x329772C47DBB2FBC undefined b1207
		// Returns true if ped is in a dispute another ped (pedInDisputeWith can also be 0)
		static BOOL GET_IS_PED_IN_DISPUTE_WITH_PED_(Ped ped, Ped pedInDisputeWith)
		{
			return invoke<BOOL>(0x331550B212014B92, ped, pedInDisputeWith);
		} // 0x331550B212014B92 undefined b1207
		// _GET_IS_PED_*
		static BOOL N0x94132D7C8D3575C4(Ped ped)
		{
			return invoke<BOOL>(0x94132D7C8D3575C4, ped);
		} // 0x94132D7C8D3575C4 undefined b1207
		// _SET_PED_IN*
		static void N0x8AF46E5159A5B620(Ped ped, Hash speechParams)
		{
			invoke<int>(0x8AF46E5159A5B620, ped, speechParams);
		} // 0x8AF46E5159A5B620 undefined b1207
		// _SET_PED_IN*
		static void N0x45FEA6D5539BD474(Ped ped, const char* p1)
		{
			invoke<int>(0x45FEA6D5539BD474, ped, p1);
		} // 0x45FEA6D5539BD474 undefined b1207
		static void SET_PED_INTERACTION_POSITIVE_RESPONSE_(Ped ped, const char* speech)
		{
			invoke<int>(0x20C5459379D75C1C, ped, speech);
		} // 0x20C5459379D75C1C undefined b1207
		// _SET_PED_IN*
		static void N0xE37ACEE15AC50C7E(Ped ped, const char* p1)
		{
			invoke<int>(0xE37ACEE15AC50C7E, ped, p1);
		} // 0xE37ACEE15AC50C7E undefined b1207
		static void SET_PED_INTERACTION_NEGATIVE_RESPONSE_(Ped ped, const char* speech)
		{
			invoke<int>(0xA3C53CDE922BC78B, ped, speech);
		} // 0xA3C53CDE922BC78B undefined b1207
		// _SET_PED_IN*
		static void N0x41C23A8E6B344867(Ped ped, const char* p1)
		{
			invoke<int>(0x41C23A8E6B344867, ped, p1);
		} // 0x41C23A8E6B344867 undefined b1207
		static BOOL GET_IS_PED_RESPONDING_TO_POSITIVE_INTERACTION(Ped ped, Player player)
		{
			return invoke<BOOL>(0x9337183FDA2E9035, ped, player);
		} // 0x9337183FDA2E9035 undefined b1207
		static BOOL GET_IS_PED_RESPONDING_TO_NEGATIVE_INTERACTION(Ped ped, Player player)
		{
			return invoke<BOOL>(0xA454D234E45BB6E5, ped, player);
		} // 0xA454D234E45BB6E5 undefined b1207
		// _CLEAR_PED_B* - _CLEAR_PED_C*
		static void N0xA7DC9266ED6A4E51(Ped ped)
		{
			invoke<int>(0xA7DC9266ED6A4E51, ped);
		} // 0xA7DC9266ED6A4E51 undefined b1207
		// _GET_PED_B* - _GET_PED_C*
		static Any N0x89816B58C3466262(Ped ped)
		{
			return invoke<Any>(0x89816B58C3466262, ped);
		} // 0x89816B58C3466262 undefined b1207
		// _CLEAR*
		static void N0x97B06669AC569003(Ped ped1, Ped ped2)
		{
			invoke<int>(0x97B06669AC569003, ped1, ped2);
		} // 0x97B06669AC569003 undefined b1207
		// Used in Script Function SKCS_PLAYER_ROBBING
		// _SET_PED_A*
		static void N0x85F500F4E24CA43E(Ped ped, float p1)
		{
			invoke<int>(0x85F500F4E24CA43E, ped, p1);
		} // 0x85F500F4E24CA43E undefined b1207
		// Used in Script Function SKCS_PLAYER_ROBBING
		// _SET_PED_SHOULD_PLAY_* - _SET_PED_SW*
		static void N0x9B9B9FA0EA283E3D(Ped ped, float p1)
		{
			invoke<int>(0x9B9B9FA0EA283E3D, ped, p1);
		} // 0x9B9B9FA0EA283E3D undefined b1207
		// _SET_C*
		static void N0xEC60D1D225BC50AA(Ped ped, float p1)
		{
			invoke<int>(0xEC60D1D225BC50AA, ped, p1);
		} // 0xEC60D1D225BC50AA undefined b1207
		// _SET_A* - _SET_B*
		static void N0x12F2D161BF4031FC(Ped ped, float p1)
		{
			invoke<int>(0x12F2D161BF4031FC, ped, p1);
		} // 0x12F2D161BF4031FC undefined b1207
		static void N0x0ADA3EC589E1736E()
		{
			invoke<int>(0x0ADA3EC589E1736E);
		} // 0x0ADA3EC589E1736E undefined b1207
		// If p2 is false, then this native will return true until the interaction is complete. If true, the native will return true until player pockets robbery item.
		// _GET_IS_PED_[M-R]*
		static BOOL GET_IS_PED_BEING_ROBBED_(Ped ped, Player player, BOOL trueUntilPlayerPocketsItem)
		{
			return invoke<BOOL>(0xE33F98BD76490ABC, ped, player, trueUntilPlayerPocketsItem);
		} // 0xE33F98BD76490ABC undefined b1207
		// Used in Script Function LA_CHECK_ALERTED
		// _GET_IS_PED_*
		static BOOL N0xD55DB4466D00A258(Ped legendaryAnimal)
		{
			return invoke<BOOL>(0xD55DB4466D00A258, legendaryAnimal);
		} // 0xD55DB4466D00A258 undefined b1207
		// Sets the maximum health of a ped.
		static void SET_PED_MAX_HEALTH(Ped ped, int value)
		{
			invoke<int>(0xF5F6378C4F3419D3, ped, value);
		} // 0xF5F6378C4F3419D3 0x5533F60B b1207
		static int GET_PED_MAX_HEALTH(Ped ped)
		{
			return invoke<int>(0x4700A416E8324EF3, ped);
		} // 0x4700A416E8324EF3 0xA45B6C8D b1207
		// configHash: see pedhealth.meta
		static void SET_PED_HEALTH_CONFIG_(Ped ped, Hash configHash)
		{
			invoke<int>(0xF6B82FCE03B43A37, ped, configHash);
		} // 0xF6B82FCE03B43A37 undefined b1207
		static void INIT_PED_DEFAULT_HEALTH(Ped ped)
		{
			invoke<int>(0x7DD7FB3480D8083E, ped);
		} // 0x7DD7FB3480D8083E undefined b1207
		static void SET_PED_MAX_TIME_IN_WATER(Ped ped, float value)
		{
			invoke<int>(0x43C851690662113D, ped, value);
		} // 0x43C851690662113D 0xFE0A106B b1207
		static void SET_PED_MAX_TIME_UNDERWATER(Ped ped, float value)
		{
			invoke<int>(0x6BA428C528D9E522, ped, value);
		} // 0x6BA428C528D9E522 0x082EF240 b1207
		// _CLEAR_PED_D*
		static void N0xAF041C10756C30FB(Ped ped, BOOL p1, BOOL p2, BOOL p3)
		{
			invoke<int>(0xAF041C10756C30FB, ped, p1, p2, p3);
		} // 0xAF041C10756C30FB undefined b1207
		// _SET_C*
		static void N0x5AF24CA9C974E51A(Ped ped1, Ped ped2)
		{
			invoke<int>(0x5AF24CA9C974E51A, ped1, ped2);
		} // 0x5AF24CA9C974E51A undefined b1207
		// state:
		// enum eKnockOffVehicle
		// {
		// 	KNOCKOFFVEHICLE_DEFAULT,
		// 	KNOCKOFFVEHICLE_NEVER,
		// 	KNOCKOFFVEHICLE_EASY,
		// 	KNOCKOFFVEHICLE_HARD
		// };
		static void SET_PED_CAN_BE_KNOCKED_OFF_VEHICLE(Ped ped, int state)
		{
			invoke<int>(0x7A6535691B477C48, ped, state);
		} // 0x7A6535691B477C48 0x8A251612 b1207
		static BOOL CAN_KNOCK_PED_OFF_VEHICLE(Ped ped)
		{
			return invoke<BOOL>(0x51AC07A44D4F5B8A, ped);
		} // 0x51AC07A44D4F5B8A 0xC9D098B3 b1207
		static void KNOCK_PED_OFF_VEHICLE(Ped ped)
		{
			invoke<int>(0x45BBCBA77C29A841, ped);
		} // 0x45BBCBA77C29A841 0xACDD0674 b1207
		static Ped GET_PED_AS_GROUP_MEMBER(int groupID, int memberNumber)
		{
			return invoke<Ped>(0x51455483CF23ED97, groupID, memberNumber);
		} // 0x51455483CF23ED97 0x9AA3CC8C b1207
		static Ped GET_PED_AS_GROUP_LEADER(int groupID)
		{
			return invoke<Ped>(0x5CCE68DBD5FE93EC, groupID);
		} // 0x5CCE68DBD5FE93EC 0x52873C6A b1207
		static void SET_PED_KEEP_TASK(Ped ped, BOOL toggle)
		{
			invoke<int>(0x971D38760FBC02EF, ped, toggle);
		} // 0x971D38760FBC02EF 0xA7EC79CE b1207
		static BOOL IS_PED_SWIMMING(Ped ped)
		{
			return invoke<BOOL>(0x9DE327631295B4C2, ped);
		} // 0x9DE327631295B4C2 0x7AB43DB8 b1207
		static BOOL IS_PED_SWIMMING_UNDER_WATER(Ped ped)
		{
			return invoke<BOOL>(0xC024869A53992F34, ped);
		} // 0xC024869A53992F34 0x0E8D524F b1207
		// _IS_PED_IN_* (near water?)
		// Returns true if ped is swimming in water
		static BOOL N0xDC88D06719070C39(Ped ped)
		{
			return invoke<BOOL>(0xDC88D06719070C39, ped);
		} // 0xDC88D06719070C39 undefined b1207
		static void SET_CREATE_RANDOM_COPS(BOOL toggle)
		{
			invoke<int>(0x102E68B2024D536D, toggle);
		} // 0x102E68B2024D536D 0x23441648 b1207
		static BOOL IS_PED_IN_ANY_TRAIN(Ped ped)
		{
			return invoke<BOOL>(0x6F972C1AB75A1ED0, ped);
		} // 0x6F972C1AB75A1ED0 0x759EF63A b1207
		static BOOL IS_PED_GETTING_INTO_A_VEHICLE(Ped ped)
		{
			return invoke<BOOL>(0xBB062B2B5722478E, ped);
		} // 0xBB062B2B5722478E 0x90E805AC b1207
		// _HAS_PED_*
		static BOOL N0x550CB89DD7F4FA3D(Ped ped1, Ped ped2)
		{
			return invoke<BOOL>(0x550CB89DD7F4FA3D, ped1, ped2);
		} // 0x550CB89DD7F4FA3D undefined b1207
		// Ped can not pull out a weapon when true
		static void SET_ENABLE_HANDCUFFS(Ped ped, BOOL p1, BOOL p2)
		{
			invoke<int>(0xDF1AF8B5D56542FA, ped, p1, p2);
		} // 0xDF1AF8B5D56542FA 0xAC9BBA23 b1207
		static void SET_ENABLE_BOUND_ANKLES(Ped ped, BOOL toggle)
		{
			invoke<int>(0xC52E0F855C58FC2E, ped, toggle);
		} // 0xC52E0F855C58FC2E 0x9208D689 b1207
		// If returned true, SET_ENABLE_BOUND_ANKLES is called in R* Script guama2
		// _GET_D* - _GET_E*
		static BOOL N0x8822F139408B8D0A(Ped ped)
		{
			return invoke<BOOL>(0x8822F139408B8D0A, ped);
		} // 0x8822F139408B8D0A undefined b1207
		// Only used in R* Script train_robbery4
		// _SET_PED_D*
		static void N0x8822F124788B8D0A(Ped ped, BOOL p1)
		{
			invoke<int>(0x8822F124788B8D0A, ped, p1);
		} // 0x8822F124788B8D0A undefined b1207
		static void RESET_PED_WEAPON_MOVEMENT_CLIPSET(Ped ped)
		{
			invoke<int>(0x97B0DB5B4AA74E77, ped);
		} // 0x97B0DB5B4AA74E77 0xC60C9ACD b1207
		static void SET_PED_GETUP_ANIMATION_(Ped ped, const char* animName, BOOL p2)
		{
			invoke<int>(0x3AE3552E7C207CC5, ped, animName, p2);
		} // 0x3AE3552E7C207CC5 undefined b1207
		// Used in R* Script generic_weight_control_item
		// _CLEAR_PED_E* - CLEAR_PED_(G?)L*
		static void N0x88A95BB640FC186F(Ped ped)
		{
			invoke<int>(0x88A95BB640FC186F, ped);
		} // 0x88A95BB640FC186F undefined b1207
		static void RESET_PED_IN_VEHICLE_CONTEXT(Ped ped)
		{
			invoke<int>(0x22EF8FF8778030EB, ped);
		} // 0x22EF8FF8778030EB 0x3C94D88A b1207
		static void N0x878E8104FA27CDAE(Vehicle vehicle, Hash p1)
		{
			invoke<int>(0x878E8104FA27CDAE, vehicle, p1);
		} // 0x878E8104FA27CDAE undefined b1207
		static void SET_PED_GESTURE_GROUP(Ped ped, const char* gesture, int p2)
		{
			invoke<int>(0xDDF803377F94AAA8, ped, gesture, p2);
		} // 0xDDF803377F94AAA8 0x170DA109 b1207
		// Seems to set the ped's loco type.
		// Values used in the scripts:
		// algie
		// angry_female
		// arthur_healthy
		// cowboy
		// cowboy_f
		// default
		// default_female
		// free_slave_01
		// free_slave_02
		// gold_panner
		// guard_lantern
		// injured_general
		// john_marston
		// lilly_millet
		// lone_prisoner
		// lost_man
		// mp_ova_hunter
		// mp_ova_hunter_female
		// murfree
		// old_female
		// primate
		// rally
		// waiter
		// war_veteran
		static void SET_PED_DESIRED_LOCO_FOR_MODEL_(Ped ped, const char* locomotionArchetype)
		{
			invoke<int>(0x923583741DC87BCE, ped, locomotionArchetype);
		} // 0x923583741DC87BCE undefined b1207
		// Clears locomotion archetype
		static void CLEAR_PED_DESIRED_LOCO_FOR_MODEL_(Ped ped)
		{
			invoke<int>(0x4FD80C3DD84B817B, ped);
		} // 0x4FD80C3DD84B817B undefined b1207
		// Sets peds motion type
		static void SET_PED_DESIRED_LOCO_MOTION_TYPE_(Ped ped, const char* locoMotionType)
		{
			invoke<int>(0x89F5E7ADECCCB49C, ped, locoMotionType);
		} // 0x89F5E7ADECCCB49C undefined b1207
		static void CLEAR_PED_DESIRED_LOCO_MOTION_TYPE_(Ped ped)
		{
			invoke<int>(0x58F7DB5BD8FA2288, ped);
		} // 0x58F7DB5BD8FA2288 undefined b1207
		static void N0x2371C39D4F91C288(Ped ped)
		{
			invoke<int>(0x2371C39D4F91C288, ped);
		} // 0x2371C39D4F91C288 undefined b1207
		// Known get up animation types: REAR, FRONT
		static void REQUEST_PED_GETUP_ANIMATION_(Ped ped, const char* getUpType)
		{
			invoke<int>(0xEAA8242C8479C27D, ped, getUpType);
		} // 0xEAA8242C8479C27D undefined b1207
		static void PED_COWER_IN_PLACE(Ped ped, Ped ped2)
		{
			invoke<int>(0xF6E1E9F47A7686F8, ped, ped2);
		} // 0xF6E1E9F47A7686F8 undefined b1207
		static void PED_COWER_MOVE_TO_POINT(Ped ped, float p1, float p2, float p3, Ped ped2, float p5)
		{
			invoke<int>(0x1E4C940233FC0C6F, ped, p1, p2, p3, ped2, p5);
		} // 0x1E4C940233FC0C6F undefined b1207
		// _PED_COWER_M*
		static void N0x16F798A05BB9E3B5(Ped ped)
		{
			invoke<int>(0x16F798A05BB9E3B5, ped);
		} // 0x16F798A05BB9E3B5 undefined b1207
		// target: 0 affects everyone
		// duration: -1 indefinite
		// flag: always 4 in R* Scripts
		static void PED_EMOTIONAL_PRESET_LOCO_MOTION_(Ped ped, const char* presetName, Ped targetPed, int duration, int flag)
		{
			invoke<int>(0xAAB050DA48B57978, ped, presetName, targetPed, duration, flag);
		} // 0xAAB050DA48B57978 undefined b1207
		static void PED_CLEAR_LOCO_MOTION_(Ped ped)
		{
			invoke<int>(0x935CF6E42BAF7F4D, ped);
		} // 0x935CF6E42BAF7F4D undefined b1207
		// _STOP_(?)*
		static void N0x32CCAD8A981B53D3(Ped ped)
		{
			invoke<int>(0x32CCAD8A981B53D3, ped);
		} // 0x32CCAD8A981B53D3 undefined b1207
		// SOBER = 0.0f, SLIGHTLY_DRUNK = 0.25f, MODERATELY_DRUNK = 0.5f, VERY_DRUNK = 1.0f
		static void SET_PED_DRUNKNESS_(Ped ped, BOOL enabled, float drunknessLevel)
		{
			invoke<int>(0x406CCF555B04FAD3, ped, enabled, drunknessLevel);
		} // 0x406CCF555B04FAD3 undefined b1207
		static BOOL IS_PED_DRUNK_(Ped ped)
		{
			return invoke<BOOL>(0x50F124E6EF188B22, ped);
		} // 0x50F124E6EF188B22 undefined b1207
		// Returns ped drunk level
		// _H* or _I*
		static float GET_PED_DRUNKNESS_(Ped ped)
		{
			return invoke<float>(0x6FB76442469ABD68, ped);
		} // 0x6FB76442469ABD68 undefined b1207
		static Vector3 GET_ANIM_INITIAL_OFFSET_POSITION(const char* animDict, const char* animName, float x, float y, float z, float xRot, float yRot, float zRot, float p8, int p9)
		{
			return invoke<Vector3>(0xBE22B26DD764C040, animDict, animName, x, y, z, xRot, yRot, zRot, p8, p9);
		} // 0xBE22B26DD764C040 0xC59D4268 b1207
		static Vector3 GET_ANIM_INITIAL_OFFSET_ROTATION(const char* animDict, const char* animName, float x, float y, float z, float xRot, float yRot, float zRot, float p8, int p9)
		{
			return invoke<Vector3>(0x4B805E6046EE9E47, animDict, animName, x, y, z, xRot, yRot, zRot, p8, p9);
		} // 0x4B805E6046EE9E47 0x5F7789E6 b1207
		static void SET_PED_RANDOM_COMPONENT_VARIATION(Ped ped, int p1)
		{
			invoke<int>(0xC8A9481A01E63C28, ped, p1);
		} // 0xC8A9481A01E63C28 0x4111BA46 b1207
		static void KNOCK_OFF_PED_PROP(Ped ped, BOOL p1, BOOL p2, BOOL p3, BOOL p4)
		{
			invoke<int>(0x6FD7816A36615F48, ped, p1, p2, p3, p4);
		} // 0x6FD7816A36615F48 0x08D8B180 b1207
		static void SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(Ped ped, BOOL toggle)
		{
			invoke<int>(0x9F8AA94D6D97DBF4, ped, toggle);
		} // 0x9F8AA94D6D97DBF4 0xDFE34E4A b1207
		static BOOL GET_BLOCKING_OF_NON_TEMPORARY_EVENTS_(Ped ped)
		{
			return invoke<BOOL>(0x268B3AEBF032A88D, ped);
		} // 0x268B3AEBF032A88D undefined b1207
		// _SET_PED_P* - _SET_PED_R*
		static void N0xC17A94CC8FC3C61A(Entity entity, int boneId, float p2, float p3, float p4)
		{
			invoke<int>(0xC17A94CC8FC3C61A, entity, boneId, p2, p3, p4);
		} // 0xC17A94CC8FC3C61A undefined b1207
		static void SET_PED_SCALE_(Ped ped, float scale)
		{
			invoke<int>(0x25ACFC650B65C538, ped, scale);
		} // 0x25ACFC650B65C538 undefined b1207
		// _GET_PED_M*
		static float N0x134775B093AD5C38(Ped ped)
		{
			return invoke<float>(0x134775B093AD5C38, ped);
		} // 0x134775B093AD5C38 undefined b1207
		static float GET_PED_HEIGHT_(Ped ped)
		{
			return invoke<float>(0x1D491CCF7211FB74, ped);
		} // 0x1D491CCF7211FB74 undefined b1207
		// PS_SMALL = 0,
		// PS_MEDIUM,
		// PS_MEDIUM_LARGE,
		// PS_LARGE,
		// PS_EXTRA_LARGE
		static int GET_PED_MODEL_SIZE_FROM_HASH_(Hash modelHash)
		{
			return invoke<int>(0xA65AA1ACE81E5A77, modelHash);
		} // 0xA65AA1ACE81E5A77 undefined b1311
		static void REGISTER_TARGET(Ped ped, Ped targetPed, BOOL p2)
		{
			invoke<int>(0x2F25D9AEFA34FBA2, ped, targetPed, p2);
		} // 0x2F25D9AEFA34FBA2 0x50A95442 b1207
		static void REGISTER_HATED_TARGETS_IN_AREA_(Ped ped, float x, float y, float z, float radius)
		{
			invoke<int>(0xD8736EFDA38EDC5C, ped, x, y, z, radius);
		} // 0xD8736EFDA38EDC5C undefined b1207
		// Based on TASK_COMBAT_HATED_TARGETS_AROUND_PED, the parameters are likely similar (PedHandle, and area to attack in).
		static void REGISTER_HATED_TARGETS_AROUND_PED(Ped ped, float radius)
		{
			invoke<int>(0x9222F300BF8354FE, ped, radius);
		} // 0x9222F300BF8354FE 0x7F87559E b1207
		static BOOL IS_TARGET_(Ped ped, Ped targetPed)
		{
			return invoke<BOOL>(0x6E5CBCB3941D7D08, ped, targetPed);
		} // 0x6E5CBCB3941D7D08 undefined b1207
		static void REMOVE_TARGET_(Ped ped, Ped targetPed)
		{
			invoke<int>(0x4707E9C23D8CA3FE, ped, targetPed);
		} // 0x4707E9C23D8CA3FE undefined b1207
		// Gets the closest ped in a radius.
		static BOOL GET_CLOSEST_PED(float x, float y, float z, float radius, BOOL p4, BOOL p5, Ped* outPed, BOOL p7, BOOL p8, BOOL p9, int pedType)
		{
			return invoke<BOOL>(0xC33AB876A77F8164, x, y, z, radius, p4, p5, outPed, p7, p8, p9, pedType);
		} // 0xC33AB876A77F8164 0x8F6C1F55 b1207
		static BOOL CAN_PED_RAGDOLL(Ped ped)
		{
			return invoke<BOOL>(0x128F79EDCECE4FD5, ped);
		} // 0x128F79EDCECE4FD5 0xC0EFB7A3 b1207
		// nmTaskMessageParameterName: See physicstasks.ymt. Search for DraggedByCart or 0xD00820D7 (Used in R* SP Script marston8)
		static BOOL SET_PED_TO_RAGDOLL(Ped ped, int timeMin, int timeMax, int ragdollType, BOOL abortIfInjured, BOOL abortIfDead, const char* nmTaskMessageParameterName)
		{
			return invoke<BOOL>(0xAE99FB955581844A, ped, timeMin, timeMax, ragdollType, abortIfInjured, abortIfDead, nmTaskMessageParameterName);
		} // 0xAE99FB955581844A 0x83CB5052 b1207
		static BOOL SET_PED_TO_RAGDOLL_WITH_FALL(Ped ped, int timeMin, int timeMax, int ragdollType, float falldirX, float falldirY, float falldirZ, float p7, float p8, float p9, float p10, float p11, float p12, float p13)
		{
			return invoke<BOOL>(0xD76632D99E4966C8, ped, timeMin, timeMax, ragdollType, falldirX, falldirY, falldirZ, p7, p8, p9, p10, p11, p12, p13);
		} // 0xD76632D99E4966C8 0xFA12E286 b1207
		// Causes Ped to ragdoll on collision with any object (e.g Running into trashcan). If applied to player you will sometimes trip on the sidewalk.
		static void SET_PED_RAGDOLL_ON_COLLISION(Ped ped, BOOL toggle, BOOL p2)
		{
			invoke<int>(0xF0A4F1BBF4FA7497, ped, toggle, p2);
		} // 0xF0A4F1BBF4FA7497 0x2654A0F4 b1207
		static void SET_PED_TO_DISABLE_RAGDOLL_(Ped ped, BOOL toggle)
		{
			invoke<int>(0x221F4D9912B7FE86, ped, toggle);
		} // 0x221F4D9912B7FE86 undefined b1207
		// If the ped handle passed through the parenthesis is in a ragdoll state this will return true.
		static BOOL IS_PED_RAGDOLL(Ped ped)
		{
			return invoke<BOOL>(0x47E4E977581C5B55, ped);
		} // 0x47E4E977581C5B55 0xC833BBE1 b1207
		static BOOL IS_PED_RUNNING_RAGDOLL_TASK(Ped ped)
		{
			return invoke<BOOL>(0xE3B6097CC25AA69E, ped);
		} // 0xE3B6097CC25AA69E 0x44A153F2 b1207
		static void SET_PED_RAGDOLL_FORCE_FALL(Ped ped)
		{
			invoke<int>(0x01F6594B923B9251, ped);
		} // 0x01F6594B923B9251 0x20A5BDE0 b1207
		// _SET_PED_T* - SET_PED_U*
		static void N0x8CB2553C559102C1(Ped ped, int p1, BOOL p2)
		{
			invoke<int>(0x8CB2553C559102C1, ped, p1, p2);
		} // 0x8CB2553C559102C1 undefined b1207
		// _DISABLE_A* - _DISABLE_C*
		static void N0xFD3C31A2E45671E7(Ped ped, int p1)
		{
			invoke<int>(0xFD3C31A2E45671E7, ped, p1);
		} // 0xFD3C31A2E45671E7 undefined b1207
		static void RESET_PED_RAGDOLL_TIMER(Ped ped)
		{
			invoke<int>(0x9FA4664CF62E47E8, ped);
		} // 0x9FA4664CF62E47E8 0xF2865370 b1207
		static void SET_PED_CAN_RAGDOLL(Ped ped, BOOL toggle)
		{
			invoke<int>(0xB128377056A54E2A, ped, toggle);
		} // 0xB128377056A54E2A 0xCF1384C4 b1207
		// _IS_PED_R*
		static BOOL N0x3AEC4A410ECAF30D(Ped ped)
		{
			return invoke<BOOL>(0x3AEC4A410ECAF30D, ped);
		} // 0x3AEC4A410ECAF30D undefined b1207
		static BOOL IS_PED_RUNNING_MOBILE_PHONE_TASK(Ped ped)
		{
			return invoke<BOOL>(0x2AFE52F782F25775, ped);
		} // 0x2AFE52F782F25775 0xFB2AFED1 b1207
		// https://github.com/femga/rdr3_discoveries/tree/master/AI/RAGDOLL_BLOCKING_FLAGS
		//
		// flags:
		// enum eRagdollBlockingFlags
		// {
		// 	RBF_BULLET_IMPACT = (1 << 0),
		// 	RBF_VEHICLE_IMPACT = (1 << 1),
		// 	RBF_FIRE = (1 << 2),
		// 	RBF_ELECTROCUTION = (1 << 3),
		// 	RBF_PLAYER_IMPACT = (1 << 4),
		// 	RBF_EXPLOSION = (1 << 5),
		// 	RBF_IMPACT_OBJECT = (1 << 6),
		// 	RBF_MELEE = (1 << 7),
		// 	RBF_RUBBER_BULLET = (1 << 8),
		// 	RBF_FALLING = (1 << 9),
		// 	RBF_WATER_JET = (1 << 10),
		// 	RBF_DROWNING = (1 << 11),
		// 	RBF_0x9F52E2C4 = (1 << 12),
		// 	RBF_PLAYER_BUMP = (1 << 13),
		// 	RBF_PLAYER_RAGDOLL_BUMP = (1 << 14),
		// 	RBF_PED_RAGDOLL_BUMP = (1 << 15),
		// 	RBF_VEHICLE_GRAB = (1 << 16),
		// 	RBF_SMOKE_GRENADE = (1 << 17),
		// 	RBF_HORSE_BUMP = (1 << 18),
		// 	RBF_ACTIVATE_ON_COLLISION = (1 << 19)
		// };
		static void SET_RAGDOLL_BLOCKING_FLAGS(Ped ped, int flags)
		{
			invoke<int>(0x26695EC767728D84, ped, flags);
		} // 0x26695EC767728D84 0x9C8F830D b1207
		// flags: see SET_RAGDOLL_BLOCKING_FLAGS
		static void CLEAR_RAGDOLL_BLOCKING_FLAGS(Ped ped, int flags)
		{
			invoke<int>(0xD86D101FCFD00A4B, ped, flags);
		} // 0xD86D101FCFD00A4B 0x77CBA290 b1207
		static void N0x9F933E0985E12C51(Ped ped, float p1, float p2, float p3)
		{
			invoke<int>(0x9F933E0985E12C51, ped, p1, p2, p3);
		} // 0x9F933E0985E12C51 undefined b1207
		static void N0x88B2026A3B0BE33D(Ped ped, float p1)
		{
			invoke<int>(0x88B2026A3B0BE33D, ped, p1);
		} // 0x88B2026A3B0BE33D undefined b1207
		static void SET_PED_DEFENSIVE_AREA_VOLUME(Ped ped, Volume volume, BOOL p2, BOOL p3, BOOL p4)
		{
			invoke<int>(0xFC3DB99C8144CD81, ped, volume, p2, p3, p4);
		} // 0xFC3DB99C8144CD81 undefined b1207
		static void SET_PED_SPHERE_DEFENSIVE_AREA(Ped ped, float x, float y, float z, float radius, BOOL p5, BOOL p6, BOOL p7)
		{
			invoke<int>(0x9D3151A373974804, ped, x, y, z, radius, p5, p6, p7);
		} // 0x9D3151A373974804 0xBD96D8E8 b1207
		static void SET_PED_DEFENSIVE_SPHERE_ATTACHED_TO_ENTITY_(Ped ped, Entity entity, float x, float y, float z, float radius, int p6, BOOL p7)
		{
			invoke<int>(0x1854217C640B39EC, ped, entity, x, y, z, radius, p6, p7);
		} // 0x1854217C640B39EC undefined b1207
		// _SET_PED_(A?)*
		static void SET_PED_DEFENSIVE_AREA_TO_ANGLED_AREA_(Ped ped, float x1, float y1, float z1, float x2, float y2, float z2, Any p7, BOOL p8, BOOL p9, Entity entity, BOOL p11)
		{
			invoke<int>(0xEB2BFE5D009F0331, ped, x1, y1, z1, x2, y2, z2, p7, p8, p9, entity, p11);
		} // 0xEB2BFE5D009F0331 undefined b1232
		static void SET_PED_DEFENSIVE_AREA_DIRECTION(Ped ped, float p1, float p2, float p3, BOOL p4)
		{
			invoke<int>(0x413C6C763A4AFFAD, ped, p1, p2, p3, p4);
		} // 0x413C6C763A4AFFAD 0xB66B0C9A b1207
		// Ped will no longer get angry when you stay near him.
		static void REMOVE_PED_DEFENSIVE_AREA(Ped ped, BOOL toggle)
		{
			invoke<int>(0x74D4E028107450A9, ped, toggle);
		} // 0x74D4E028107450A9 0x34AAAFA5 b1207
		static Vector3 GET_PED_DEFENSIVE_AREA_POSITION(Ped ped, BOOL p1)
		{
			return invoke<Vector3>(0x3C06B8786DD94CD1, ped, p1);
		} // 0x3C06B8786DD94CD1 0xCB65198D b1207
		static BOOL IS_PED_DEFENSIVE_AREA_ACTIVE(Ped ped, BOOL p1)
		{
			return invoke<BOOL>(0xBA63D9FE45412247, ped, p1);
		} // 0xBA63D9FE45412247 0x6D88BCD3 b1207
		static Volume GET_PED_DEFENSIVE_VOLUME_(Ped ped, Any p1)
		{
			return invoke<Volume>(0xEF2E6F870783369B, ped, p1);
		} // 0xEF2E6F870783369B undefined b1207
		// _SET_PED_A*
		static void N0x4EC4EA2F72B36358(Ped ped, BOOL p1)
		{
			invoke<int>(0x4EC4EA2F72B36358, ped, p1);
		} // 0x4EC4EA2F72B36358 undefined b1207
		// _SET_PED_COMBAT_*
		static void N0xCF0B19806473D324(Ped ped, float x, float y, float z)
		{
			invoke<int>(0xCF0B19806473D324, ped, x, y, z);
		} // 0xCF0B19806473D324 undefined b1207
		// _RESET_PED_C*
		static void N0xB4B7C92FCE7347B7(Ped ped)
		{
			invoke<int>(0xB4B7C92FCE7347B7, ped);
		} // 0xB4B7C92FCE7347B7 undefined b1207
		static void REVIVE_INJURED_PED(Ped ped)
		{
			invoke<int>(0x8D8ACD8388CD99CE, ped);
		} // 0x8D8ACD8388CD99CE 0x14D3E6E3 b1207
		// This function will simply bring the dead ped back to life.
		//
		// Before calling this function, you may want to declare the position, where your Resurrected ped to be spawn at because theres a chance the ped will fall through the map
		//
		// Also, disabling any assigned task immediately helped in the number of scenarios, where If you want peds to perform certain decided tasks.
		static void RESURRECT_PED(Ped ped)
		{
			invoke<int>(0x71BC8E838B9C6035, ped);
		} // 0x71BC8E838B9C6035 0xA4B82097 b1207
		// nullsub, doesn't do anything
		static void SET_PED_NAME_DEBUG(Ped ped, const char* name)
		{
			invoke<int>(0x98EFA132A4117BE1, ped, name);
		} // 0x98EFA132A4117BE1 0x20D6273E b1207
		static void SPECIAL_FUNCTION_DO_NOT_USE(Ped ped, BOOL p1)
		{
			invoke<int>(0xF9ACF4A08098EA25, ped, p1);
		} // 0xF9ACF4A08098EA25 0x141CC936 b1207
		// _HAS_*
		static BOOL N0x7020839C7302D8AC(Ped ped)
		{
			return invoke<BOOL>(0x7020839C7302D8AC, ped);
		} // 0x7020839C7302D8AC undefined b1207
		// _C*
		static void N0xE1AADD0055D76603(Ped ped, Entity entity, int boneIndex1, int boneIndex2, float x, float y, float z, float p7, BOOL p8, BOOL p9, int p10)
		{
			invoke<int>(0xE1AADD0055D76603, ped, entity, boneIndex1, boneIndex2, x, y, z, p7, p8, p9, p10);
		} // 0xE1AADD0055D76603 undefined b1207
		// _C*
		static void N0x5A1A929C8B729B4A(Ped ped)
		{
			invoke<int>(0x5A1A929C8B729B4A, ped);
		} // 0x5A1A929C8B729B4A undefined b1207
		// _SET_PED_D*
		static void N0x97A38B65EBDA3D50(Ped ped, BOOL p1)
		{
			invoke<int>(0x97A38B65EBDA3D50, ped, p1);
		} // 0x97A38B65EBDA3D50 undefined b1207
		// _GET_PED_D*
		static BOOL N0x06A10B4D7F50B0C3(Ped ped)
		{
			return invoke<BOOL>(0x06A10B4D7F50B0C3, ped);
		} // 0x06A10B4D7F50B0C3 undefined b1207
		static BOOL N0x88A5564B19C15391(Ped ped)
		{
			return invoke<BOOL>(0x88A5564B19C15391, ped);
		} // 0x88A5564B19C15391 undefined b1207
		static int N0x354CA4DDDEEC397A(Ped ped)
		{
			return invoke<int>(0x354CA4DDDEEC397A, ped);
		} // 0x354CA4DDDEEC397A undefined b1207
		// METAPED_PLAYER_COMPONENTS_SET_META_TYPE_TO_BE_BYPASSED: Setting visibility
		// _SET_M* - _SET_P*
		static void N0xFEA6126C34DF2532(Ped ped, BOOL p1)
		{
			invoke<int>(0xFEA6126C34DF2532, ped, p1);
		} // 0xFEA6126C34DF2532 undefined b1207
		// _SET_PED_P* - _SET_PED_R*
		static void N0xA967D6A8ED2D713B(Ped ped, BOOL p1)
		{
			invoke<int>(0xA967D6A8ED2D713B, ped, p1);
		} // 0xA967D6A8ED2D713B undefined b1207
		static void APPLY_PED_BLOOD_SPECIFIC(Ped ped, Any p1, float p2, float p3, float p4, float p5, Any p6, float p7, Any* p8)
		{
			invoke<int>(0xEF0D582CBF2D9B0F, ped, p1, p2, p3, p4, p5, p6, p7, p8);
		} // 0xEF0D582CBF2D9B0F 0xFC13CE80 b1207
		static void N0x58D32261AE0F0843(Ped ped, int boneId, float p2, float p3, float p4, float p5, float p6, float p7, const char* p8)
		{
			invoke<int>(0x58D32261AE0F0843, ped, boneId, p2, p3, p4, p5, p6, p7, p8);
		} // 0x58D32261AE0F0843 undefined b1207
		// _SET_PED_F*
		static void N0x735662994E60A710(Ped ped, BOOL p1)
		{
			invoke<int>(0x735662994E60A710, ped, p1);
		} // 0x735662994E60A710 undefined b1207
		static void N0x91BAB9E064F036CD(Any p0, Any p1)
		{
			invoke<int>(0x91BAB9E064F036CD, p0, p1);
		} // 0x91BAB9E064F036CD undefined b1207
		static void N0x897934E868EDDD6C(Ped ped, int p1, float p2, float p3, float p4)
		{
			invoke<int>(0x897934E868EDDD6C, ped, p1, p2, p3, p4);
		} // 0x897934E868EDDD6C undefined b1207
		// bloodFountainPressure: visible effect from 0.0 till 20.0
		// yaw: visible effect from -3.0 till 3.0
		// bloodFountainDirection: 1.0 left side, -1.0 right side
		// bloodFountainPulse: from 0.1 (low) till 1.0 (fast)
		// make blood fountain from your stomach: _SET_PED_ACTIVATE_WOUND_EFFECT(ped, unk, 2, 14411, 0.0, 0.1, 0.0, 0.0, 3.0, -1.0, 1.0)
		static void SET_PED_ACTIVATE_WOUND_EFFECT_(Ped ped, int p1, int boneId, float moveWoundLeftRight, float bloodFountainPressure, float yaw, float bloodFountainDirection, float bloodFountainPulse, float p8, float p9)
		{
			invoke<int>(0xFFD54D9FE71B966A, ped, p1, boneId, moveWoundLeftRight, bloodFountainPressure, yaw, bloodFountainDirection, bloodFountainPulse, p8, p9);
		} // 0xFFD54D9FE71B966A undefined b1207
		// Params: 0.0f to remove wound effects
		static void UPDATE_PED_WOUND_EFFECT_(Ped ped, float value)
		{
			invoke<int>(0x66B1CB778D911F49, ped, value);
		} // 0x66B1CB778D911F49 undefined b1207
		// https://github.com/femga/rdr3_discoveries/blob/master/peds_customization/ped_decals.lua
		static void APPLY_PED_DAMAGE_PACK(Ped ped, const char* damagePack, float damage, float mult)
		{
			invoke<int>(0x46DF918788CB093F, ped, damagePack, damage, mult);
		} // 0x46DF918788CB093F 0x208D0CB8 b1207
		static void CLEAR_PED_BLOOD_DAMAGE(Ped ped)
		{
			invoke<int>(0x8FE22675A5A45817, ped);
		} // 0x8FE22675A5A45817 0xF7ADC960 b1207
		static void CLEAR_PED_BLOOD_DAMAGE_BY_ZONE(Ped ped, int p1)
		{
			invoke<int>(0x56E3B78C5408D9F4, ped, p1);
		} // 0x56E3B78C5408D9F4 0xF210BE69 b1207
		static void CLEAR_PED_DAMAGE_DECAL_BY_ZONE(Ped ped, int p1, const char* p2)
		{
			invoke<int>(0x523C79AEEFCC4A2A, ped, p1, p2);
		} // 0x523C79AEEFCC4A2A 0x70AA5B7D b1207
		static void CLEAR_PED_BLOOD_DAMAGE_FACIAL_(Ped ped, int p1)
		{
			invoke<int>(0x7F5D88333EE8A86F, ped, p1);
		} // 0x7F5D88333EE8A86F undefined b1207
		static void N0x34C11114887150FD(Any p0, Any p1)
		{
			invoke<int>(0x34C11114887150FD, p0, p1);
		} // 0x34C11114887150FD undefined b1207
		// METAPED_PLAYER_COMPONENTS_SET_META_TYPE_TO_BE_BYPASSED: Setting visibility
		// p1 is mostly 10
		// _CLEAR_PED_N* - _CLEAR_PED_W*
		static void N0xD8544F6260F5F01E(Ped ped, int p1)
		{
			invoke<int>(0xD8544F6260F5F01E, ped, p1);
		} // 0xD8544F6260F5F01E undefined b1232
		// Washing player's face/hands now
		// _FA* - _FI*
		static void N0xEB8886E1065654CD(Ped ped, int p1, const char* p2, float p3)
		{
			invoke<int>(0xEB8886E1065654CD, ped, p1, p2, p3);
		} // 0xEB8886E1065654CD undefined b1207
		static void FADE_AND_DESTROY_PED(Ped* ped)
		{
			invoke<int>(0x7043D0681285BA2D, ped);
		} // 0x7043D0681285BA2D undefined b1207
		static BOOL IS_PED_QUEUED_FOR_DELETION_(Ped ped)
		{
			return invoke<BOOL>(0x8D9BFCE3352DE47F, ped);
		} // 0x8D9BFCE3352DE47F undefined b1207
		// It clears the wetness of the selected Ped/Player. Clothes have to be wet to notice the difference.
		static void CLEAR_PED_WETNESS(Ped ped)
		{
			invoke<int>(0x9C720776DAA43E7E, ped);
		} // 0x9C720776DAA43E7E 0x629F15BD b1207
		// It adds the wetness level to the player clothing/outfit. As if player just got out from water surface.
		static void SET_PED_WETNESS_HEIGHT(Ped ped, float height)
		{
			invoke<int>(0x44CB6447D2571AA0, ped, height);
		} // 0x44CB6447D2571AA0 0x7B33289A b1207
		// _SET_PED_WETNESS*
		static void N0xF9CFF5BB70E8A2CB(Ped ped, float p1)
		{
			invoke<int>(0xF9CFF5BB70E8A2CB, ped, p1);
		} // 0xF9CFF5BB70E8A2CB undefined b1207
		// combined with PED::SET_PED_WETNESS_HEIGHT(), this native makes the ped drenched in water up to the height specified in the other function
		static void SET_PED_WETNESS_ENABLED_THIS_FRAME(Ped ped)
		{
			invoke<int>(0xB5485E4907B53019, ped);
		} // 0xB5485E4907B53019 0xBDE749F7 b1207
		// Washing player's face/hands now
		// _CLEAR_PED_E* - _CLEAR_PED_L*
		static void N0xA7A806677F8DE138(Ped ped)
		{
			invoke<int>(0xA7A806677F8DE138, ped);
		} // 0xA7A806677F8DE138 undefined b1207
		static void N0xA064BBABB064446F(Any p0)
		{
			invoke<int>(0xA064BBABB064446F, p0);
		} // 0xA064BBABB064446F undefined b1207
		static void CLEAR_PED_ENV_DIRT(Ped ped)
		{
			invoke<int>(0x6585D955A68452A5, ped);
		} // 0x6585D955A68452A5 0xA993915F b1207
		static void SET_PED_SWEAT(Ped ped, float sweat)
		{
			invoke<int>(0x27B0405F59637D1F, ped, sweat);
		} // 0x27B0405F59637D1F 0x76A1DB9F b1207
		static void CLEAR_PED_DECORATIONS(Ped ped)
		{
			invoke<int>(0x0E5173C163976E38, ped);
		} // 0x0E5173C163976E38 0xD4496BF3 b1207
		// Despite this function's name, it simply returns whether the specified handle is a Ped.
		static BOOL WAS_PED_SKELETON_UPDATED(Ped ped)
		{
			return invoke<BOOL>(0x11B499C1E0FF8559, ped);
		} // 0x11B499C1E0FF8559 0xF7E2FBAD b1207
		// Gets the position of the specified bone of the specified ped.
		//
		// ped: The ped to get the position of a bone from.
		// boneId: The ID of the bone to get the position from. This is NOT the index.
		// offsetX: The X-component of the offset to add to the position relative to the bone's rotation.
		// offsetY: The Y-component of the offset to add to the position relative to the bone's rotation.
		// offsetZ: The Z-component of the offset to add to the position relative to the bone's rotation.
		static Vector3 GET_PED_BONE_COORDS(Ped ped, int boneId, float offsetX, float offsetY, float offsetZ)
		{
			return invoke<Vector3>(0x17C07FC640E86B4E, ped, boneId, offsetX, offsetY, offsetZ);
		} // 0x17C07FC640E86B4E 0x4579CAB1 b1207
		// blockingFlags: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eScenarioBlockingFlags
		static int ADD_SCENARIO_BLOCKING_AREA(float x1, float y1, float z1, float x2, float y2, float z2, BOOL p6, int blockingFlags)
		{
			return invoke<int>(0x1B5C85C612E5256E, x1, y1, z1, x2, y2, z2, p6, blockingFlags);
		} // 0x1B5C85C612E5256E 0xA38C0234 b1207
		static void REMOVE_SCENARIO_BLOCKING_AREAS()
		{
			invoke<int>(0xD37401D78A929A49);
		} // 0xD37401D78A929A49 0x4DDF845F b1207
		static void REMOVE_SCENARIO_BLOCKING_AREA(Any p0, BOOL p1)
		{
			invoke<int>(0x31D16B74C6E29D66, p0, p1);
		} // 0x31D16B74C6E29D66 0x4483EF06 b1207
		// flag: see ADD_SCENARIO_BLOCKING_AREA
		static Any ADD_SCENARIO_BLOCKING_VOLUME_(Volume volume, BOOL p1, int flag)
		{
			return invoke<Any>(0x4C39C95AE5DB1329, volume, p1, flag);
		} // 0x4C39C95AE5DB1329 undefined b1207
		static Any N0x6F46F8ACB44C4FC1(Any p0)
		{
			return invoke<Any>(0x6F46F8ACB44C4FC1, p0);
		} // 0x6F46F8ACB44C4FC1 undefined b1207
		static BOOL IS_SCENARIO_BLOCKING_AREA_VALID_(Any p0)
		{
			return invoke<BOOL>(0x91A5F9CBEBB9D936, p0);
		} // 0x91A5F9CBEBB9D936 undefined b1207
		// Equivalent to IS_PED_USING_SCENARIO from V but takes a hash instead of a string.
		static BOOL IS_PED_USING_SCENARIO_HASH(Ped ped, Hash scenarioHash)
		{
			return invoke<BOOL>(0x34D6AC1157C8226C, ped, scenarioHash);
		} // 0x34D6AC1157C8226C undefined b1207
		static BOOL IS_PED_USING_ANY_SCENARIO(Ped ped)
		{
			return invoke<BOOL>(0x57AB4A3080F85143, ped);
		} // 0x57AB4A3080F85143 0x195EF5B7 b1207
		static BOOL IS_PED_USING_THIS_SCENARIO(Ped ped, int scenario)
		{
			return invoke<BOOL>(0x9C54041BB66BCF9E, ped, scenario);
		} // 0x9C54041BB66BCF9E undefined b1207
		// p2 is always 0, p3 is always 0, p4 is always 1
		static BOOL CAN_PED_USE_SCENARIO_POINT_(Ped ped, int scenario, Any p2, Any p3, Any p4)
		{
			return invoke<BOOL>(0xAB643407D0B26F07, ped, scenario, p2, p3, p4);
		} // 0xAB643407D0B26F07 undefined b1207
		// _CAN_PED_SEE* - _CAN_PED_USE_(SCENARIO_HASH?)*
		static BOOL N0x1148F706CF4EBDDA(Ped ped, Hash p1, int p2)
		{
			return invoke<BOOL>(0x1148F706CF4EBDDA, ped, p1, p2);
		} // 0x1148F706CF4EBDDA undefined b1207
		static BOOL SET_PED_PANIC_EXIT_SCENARIO(Ped ped, float x, float y, float z)
		{
			return invoke<BOOL>(0xFE07FF6495D52E2A, ped, x, y, z);
		} // 0xFE07FF6495D52E2A 0x59DE73AC b1207
		// If toggle is true, when the ped is using a scenario he will stop it and become scared
		// If toggle is false, the ped will not be scared anymore and continue his scenario
		//
		// Old name: _SET_PED_SCARED_WHEN_USING_SCENARIO
		static void TOGGLE_SCENARIO_PED_COWER_IN_PLACE(Ped ped, BOOL toggle)
		{
			invoke<int>(0x9A77DFD295E29B09, ped, toggle);
		} // 0x9A77DFD295E29B09 0xC08FE5F6 b1207
		static void N0xD8CEEED54C672B5D(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6)
		{
			invoke<int>(0xD8CEEED54C672B5D, p0, p1, p2, p3, p4, p5, p6);
		} // 0xD8CEEED54C672B5D undefined b1207
		// Old name: _SET_PED_SHOULD_PLAY_DIRECTED_SCENARIO_EXIT
		static BOOL SET_PED_SHOULD_PLAY_DIRECTED_NORMAL_SCENARIO_EXIT(Ped ped, float x, float y, float z)
		{
			return invoke<BOOL>(0xEC6935EBE0847B90, ped, x, y, z);
		} // 0xEC6935EBE0847B90  b1207
		static void SET_PED_SHOULD_PLAY_NORMAL_SCENARIO_EXIT(Ped ped)
		{
			invoke<int>(0xA3A9299C4F2ADB98, ped);
		} // 0xA3A9299C4F2ADB98 0x033F43FA b1207
		static void SET_PED_SHOULD_PLAY_IMMEDIATE_SCENARIO_EXIT(Ped ped)
		{
			invoke<int>(0xF1C03A5352243A30, ped);
		} // 0xF1C03A5352243A30 0x4C684C81 b1207
		// lookIntensity:
		// 0 - REACT_LOOK_NONE
		// 1 - REACT_LOOK_LOW
		// 2 - REACT_LOOK_MEDIUM
		// 3 - REACT_LOOK_HIGH
		static BOOL SET_PED_SHOULD_PLAY_FLEE_SCENARIO_EXIT(Ped ped, float x, float y, float z, int lookIntensity)
		{
			return invoke<BOOL>(0xEEED8FAFEC331A70, ped, x, y, z, lookIntensity);
		} // 0xEEED8FAFEC331A70 0x7B4C3E6F b1207
		// lookIntensity: see SET_PED_SHOULD_PLAY_FLEE_SCENARIO_EXIT
		static BOOL SET_PED_SHOULD_PLAY_COMBAT_SCENARIO_EXIT(Ped ped, float x, float y, float z, int lookIntensity)
		{
			return invoke<BOOL>(0x802092B07E3B1EEA, ped, x, y, z, lookIntensity);
		} // 0x802092B07E3B1EEA undefined b1207
		// lookIntensity: see SET_PED_SHOULD_PLAY_FLEE_SCENARIO_EXIT
		static BOOL SET_PED_SHOULD_PLAY_EMOTIONAL_SCENARIO_EXIT(Ped ped, float x, float y, float z, int lookIntensity, BOOL p5)
		{
			return invoke<BOOL>(0x62FDAD5E01D2DD47, ped, x, y, z, lookIntensity, p5);
		} // 0x62FDAD5E01D2DD47 undefined b1207
		// lookIntensity: see SET_PED_SHOULD_PLAY_FLEE_SCENARIO_EXIT
		static BOOL SET_PED_SHOULD_PLAY_QUICK_SCENARIO_EXIT(Ped ped, float x, float y, float z, int lookIntensity, BOOL p5)
		{
			return invoke<BOOL>(0x463803429297117C, ped, x, y, z, lookIntensity, p5);
		} // 0x463803429297117C undefined b1207
		static BOOL N0xF9331B3A314EB49D(Ped ped)
		{
			return invoke<BOOL>(0xF9331B3A314EB49D, ped);
		} // 0xF9331B3A314EB49D undefined b1207
		static void N0xE735A7DA22E88359(Any p0)
		{
			invoke<int>(0xE735A7DA22E88359, p0);
		} // 0xE735A7DA22E88359 undefined b1207
		static Any N0x82CB0F3F0C7785E5(Any p0)
		{
			return invoke<Any>(0x82CB0F3F0C7785E5, p0);
		} // 0x82CB0F3F0C7785E5 undefined b1207
		static void N0xCA95C156C14B2054(Any p0, Any p1)
		{
			invoke<int>(0xCA95C156C14B2054, p0, p1);
		} // 0xCA95C156C14B2054 undefined b1207
		static void SET_FACIAL_IDLE_ANIM_OVERRIDE(Ped ped, const char* animName, const char* animDict)
		{
			invoke<int>(0xFFC24B988B938B38, ped, animName, animDict);
		} // 0xFFC24B988B938B38 0x9BA19C13 b1207
		static void CLEAR_FACIAL_IDLE_ANIM_OVERRIDE(Ped ped)
		{
			invoke<int>(0x726256CC1EEB182F, ped);
		} // 0x726256CC1EEB182F 0x5244F4E2 b1207
		// mood: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/fwFacialAnimRequest__Mood
		// Params: p2 = 6 in R* Scripts
		static void REQUEST_PED_FACIAL_MOOD_THIS_FRAME_(Ped ped, Hash mood, int p2)
		{
			invoke<int>(0x8B3B71C80A29A4BB, ped, mood, p2);
		} // 0x8B3B71C80A29A4BB undefined b1207
		static void N0xD2F0FE8805D91647(Any p0, Any p1)
		{
			invoke<int>(0xD2F0FE8805D91647, p0, p1);
		} // 0xD2F0FE8805D91647 undefined b1207
		static void SET_PED_CAN_PLAY_GESTURE_ANIMS(Ped ped, Any p1, Any p2)
		{
			invoke<int>(0xBAF20C5432058024, ped, p1, p2);
		} // 0xBAF20C5432058024 0xE131E3B3 b1207
		// Only used in R* Script net_moonshine_property
		// _A* - _B*
		static void N0x7EDB3C766B0D073F(Ped ped)
		{
			invoke<int>(0x7EDB3C766B0D073F, ped);
		} // 0x7EDB3C766B0D073F undefined b1232
		static void SET_PED_CAN_PLAY_AMBIENT_ANIMS(Ped ped, BOOL toggle)
		{
			invoke<int>(0x6373D1349925A70E, ped, toggle);
		} // 0x6373D1349925A70E 0xF8053081 b1207
		static void SET_PED_CAN_PLAY_AMBIENT_BASE_ANIMS(Ped ped, BOOL toggle)
		{
			invoke<int>(0x0EB0585D15254740, ped, toggle);
		} // 0x0EB0585D15254740 0x5720A5DD b1207
		// Only used in R* Script shop_harriet
		// _SET_PED_F*
		static void N0x4F63433CE3C08230(Ped ped, BOOL p1)
		{
			invoke<int>(0x4F63433CE3C08230, ped, p1);
		} // 0x4F63433CE3C08230 undefined b1311
		static void SET_PED_CAN_ARM_IK(Ped ped, BOOL toggle)
		{
			invoke<int>(0x6C3B4D6D13B4C841, ped, toggle);
		} // 0x6C3B4D6D13B4C841 0x343B4DE0 b1207
		// _SET_PED_CAN_(?)_IK*
		static void SET_PED_CAN_UNK_BODYPART_IK_(Ped ped, BOOL toggle)
		{
			invoke<int>(0xEE9DF765990E8D1D, ped, toggle);
		} // 0xEE9DF765990E8D1D undefined b1207
		static void SET_PED_CAN_HEAD_IK(Ped ped, BOOL toggle)
		{
			invoke<int>(0xC11C18092C5530DC, ped, toggle);
		} // 0xC11C18092C5530DC 0xD3B04476 b1207
		static void SET_PED_CAN_LEG_IK(Ped ped, BOOL toggle)
		{
			invoke<int>(0x73518ECE2485412B, ped, toggle);
		} // 0x73518ECE2485412B 0x9955BC6F b1207
		static void SET_PED_CAN_TORSO_IK(Ped ped, BOOL toggle)
		{
			invoke<int>(0xF2B7106D37947CE0, ped, toggle);
		} // 0xF2B7106D37947CE0 0x8E5D4EAB b1207
		static void SET_PED_CAN_TORSO_REACT_IK(Ped ped, BOOL toggle)
		{
			invoke<int>(0xF5846EDB26A98A24, ped, toggle);
		} // 0xF5846EDB26A98A24 0x7B0040A8 b1207
		static void SET_PED_CAN_TORSO_VEHICLE_IK(Ped ped, BOOL toggle)
		{
			invoke<int>(0x6647C5F6F5792496, ped, toggle);
		} // 0x6647C5F6F5792496 0x0FDA62DE b1207
		static void SET_PED_CAN_USE_AUTO_CONVERSATION_LOOKAT(Ped ped, BOOL toggle)
		{
			invoke<int>(0xEC4686EC06434678, ped, toggle);
		} // 0xEC4686EC06434678 0x584C5178 b1207
		static BOOL IS_PED_HEADTRACKING_PED(Ped ped1, Ped ped2)
		{
			return invoke<BOOL>(0x5CD3CB88A7F8850D, ped1, ped2);
		} // 0x5CD3CB88A7F8850D 0x2A5DF721 b1207
		static BOOL IS_PED_HEADTRACKING_ENTITY(Ped ped, Entity entity)
		{
			return invoke<BOOL>(0x813A0A7C9D2E831F, ped, entity);
		} // 0x813A0A7C9D2E831F 0x233C9ACF b1207
		static void DISABLE_AMBIENT_LOOK_AT_REQUESTS_(Any p0, Any p1)
		{
			invoke<int>(0x80038740C96AD17F, p0, p1);
		} // 0x80038740C96AD17F undefined b1207
		static void DISABLE_ALL_LOOK_AT_REQUESTS_(Ped ped, int p1)
		{
			invoke<int>(0xE1965A380342BE1F, ped, p1);
		} // 0xE1965A380342BE1F undefined b1355
		// _SET_PED_R* - _SET_PED_S*
		static void N0xCD9E5F94A2F38683(Ped ped, BOOL p1)
		{
			invoke<int>(0xCD9E5F94A2F38683, ped, p1);
		} // 0xCD9E5F94A2F38683 undefined b1207
		// Old name: SET_PED_CLOTH_PACKAGE_INDEX
		static void SET_PED_CLOTH_PIN_FRAMES(Ped ped, BOOL p1)
		{
			invoke<int>(0x78C4E9961DB3EB5B, ped, p1);
		} // 0x78C4E9961DB3EB5B  b1207
		// _SET_PED_CA* - _SET_PED_CO*
		static void N0x1D4636C90BBEFACB(Ped ped, int p1)
		{
			invoke<int>(0x1D4636C90BBEFACB, ped, p1);
		} // 0x1D4636C90BBEFACB undefined b1207
		// _ADD_*
		static void N0xEF371232BC6053E1(Ped ped)
		{
			invoke<int>(0xEF371232BC6053E1, ped);
		} // 0xEF371232BC6053E1 undefined b1207
		// _SET_PED_*
		static void N0x86F0B6730C32AC14(Ped ped, BOOL p1)
		{
			invoke<int>(0x86F0B6730C32AC14, ped, p1);
		} // 0x86F0B6730C32AC14 undefined b1207
		// _ATTACH_*
		static void N0x8101BA1C0B462412(Ped ped, int ropeId)
		{
			invoke<int>(0x8101BA1C0B462412, ped, ropeId);
		} // 0x8101BA1C0B462412 undefined b1207
		// flagId: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/ePedScriptConfigFlags
		// https://alloc8or.re/rdr3/doc/enums/ePedScriptConfigFlags.txt
		// https://github.com/femga/rdr3_discoveries/tree/master/AI/CPED_CONFIG_FLAGS
		static void SET_PED_CONFIG_FLAG(Ped ped, int flagId, BOOL value)
		{
			invoke<int>(0x1913FE4CBF41C463, ped, flagId, value);
		} // 0x1913FE4CBF41C463 0x9CFBE10D b1207
		// Needs to be called every frame
		//
		// flagid:https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/ePedScriptResetFlags
		// https://github.com/femga/rdr3_discoveries/tree/master/AI/CPED_RESET_FLAGS
		static void SET_PED_RESET_FLAG(Ped ped, int flagId, BOOL doReset)
		{
			invoke<int>(0xC1E8A365BF3B29F2, ped, flagId, doReset);
		} // 0xC1E8A365BF3B29F2 0xCFF6FF66 b1207
		// flagId: see SET_PED_CONFIG_FLAG
		static BOOL GET_PED_CONFIG_FLAG(Ped ped, int flagId, BOOL p2)
		{
			return invoke<BOOL>(0x7EE53118C892B513, ped, flagId, p2);
		} // 0x7EE53118C892B513 0xABE98267 b1207
		static BOOL GET_PED_RESET_FLAG(Ped ped, int flagId)
		{
			return invoke<BOOL>(0xAF9E59B1B1FBF2A0, ped, flagId);
		} // 0xAF9E59B1B1FBF2A0 0x2FC10D11 b1207
		static void N0xC6981AFF6D2A71C2(Any p0)
		{
			invoke<int>(0xC6981AFF6D2A71C2, p0);
		} // 0xC6981AFF6D2A71C2 undefined b1207
		static void N0xE0FE107AB174D64A(Any p0, Any p1)
		{
			invoke<int>(0xE0FE107AB174D64A, p0, p1);
		} // 0xE0FE107AB174D64A undefined b1207
		static void SET_PED_GROUP_MEMBER_PASSENGER_INDEX(Ped ped, int index)
		{
			invoke<int>(0x0BDDB8D9EC6BCF3C, ped, index);
		} // 0x0BDDB8D9EC6BCF3C 0x2AB3670B b1207
		// Presumably returns the Entity that the Ped is currently diving out of the way of.
		static BOOL IS_PED_EVASIVE_DIVING(Ped ped, Entity* evadingEntity)
		{
			return invoke<BOOL>(0x414641C26E105898, ped, evadingEntity);
		} // 0x414641C26E105898 0xD82829DC b1207
		// Triggers a gunshot
		// Params: p5 = -1 in R* Scripts
		static Any SHOOT_TRIGGER_AT_COORDS_(Ped ped, float x, float y, float z, int p4, float p5, int p6, float p7)
		{
			return invoke<Any>(0x4C57F27D1554E6B0, ped, x, y, z, p4, p5, p6, p7);
		} // 0x4C57F27D1554E6B0 undefined b1207
		static BOOL IS_THIS_MODEL_A_HORSE_(Hash model)
		{
			return invoke<BOOL>(0x772A1969F649E902, model);
		} // 0x772A1969F649E902 undefined b1207
		static void SET_PED_MODEL_IS_SUPPRESSED(Hash model, BOOL toggle)
		{
			invoke<int>(0xE163A4BCE4DE6F11, model, toggle);
		} // 0xE163A4BCE4DE6F11 0x7820CA43 b1207
		static BOOL IS_PED_MODEL_SUPPRESSED_(Hash model)
		{
			return invoke<BOOL>(0xAA9F048DCF69B6DC, model);
		} // 0xAA9F048DCF69B6DC undefined b1207
		static void N0x7ABBD9E449E0DB00(Ped ped, BOOL p1)
		{
			invoke<int>(0x7ABBD9E449E0DB00, ped, p1);
		} // 0x7ABBD9E449E0DB00 undefined b1207
		// Disables being able to kick move ped.
		static void SET_PED_DISABLE_KICK_MOVE_(Ped ped, BOOL disable)
		{
			invoke<int>(0xADD31A5C7A5FAA73, ped, disable);
		} // 0xADD31A5C7A5FAA73 undefined b1207
		static void SET_PED_CAN_RAGDOLL_FROM_PLAYER_IMPACT(Ped ped, BOOL toggle)
		{
			invoke<int>(0xDF993EE5E90ABA25, ped, toggle);
		} // 0xDF993EE5E90ABA25 0xE9BD733A b1207
		static void N0xE6CB36F43A95D75F(Any p0)
		{
			invoke<int>(0xE6CB36F43A95D75F, p0);
		} // 0xE6CB36F43A95D75F undefined b1207
		static void SET_PED_LEG_IK_MODE(Ped ped, int mode)
		{
			invoke<int>(0xC396F5B86FF9FEBD, ped, mode);
		} // 0xC396F5B86FF9FEBD 0xFDDB042E b1207
		// If returned true: There are enemy peds near friendly turn in ped. Going to aggro.
		// If returned false: Moving back to idle as there aren't any remaining enemy peds near ped
		// _IS_PED_IN_*
		static BOOL IS_PED_IN_POINT_(Ped ped, float x, float y, float z, float radius, BOOL p5)
		{
			return invoke<BOOL>(0x078076AB50FB117F, ped, x, y, z, radius, p5);
		} // 0x078076AB50FB117F undefined b1207
		// SET_PED_CAN_*
		static void SET_PED_CAN_BE_LASSOED_(Ped ped, BOOL toggle)
		{
			invoke<int>(0xFD6943B6DF77E449, ped, toggle);
		} // 0xFD6943B6DF77E449 undefined b1207
		// 0 - Stationary (Will just stand in place)
		// 1 - Defensive (Will try to find cover and very likely to blind fire)
		// 2 - Offensive (Will attempt to charge at enemy but take cover as well)
		// 3 - Suicidal Offensive (Will try to flank enemy in a suicidal attack)
		static void SET_PED_COMBAT_MOVEMENT(Ped ped, int combatMovement)
		{
			invoke<int>(0x4D9CA1009AFBD057, ped, combatMovement);
		} // 0x4D9CA1009AFBD057 0x12E62F9E b1207
		static int GET_PED_COMBAT_MOVEMENT(Ped ped)
		{
			return invoke<int>(0xDEA92412FCAEB3F5, ped);
		} // 0xDEA92412FCAEB3F5 0xF3E7730E b1207
		// _SET_PED_COMBAT_R - _SET_PED_C*
		static void N0x815C0074A1BC0D93(Ped ped, int p1)
		{
			invoke<int>(0x815C0074A1BC0D93, ped, p1);
		} // 0x815C0074A1BC0D93 undefined b1207
		// _GET_PED_COMBAT_M* - _GET_PED_C*
		static int N0xFFDE295662405B25(Ped ped)
		{
			return invoke<int>(0xFFDE295662405B25, ped);
		} // 0xFFDE295662405B25 undefined b1207
		// abilityLevel:
		// enum eCombatAbilityLevel
		// {
		// 	CAL_POOR,
		// 	CAL_AVERAGE,
		// 	CAL_PROFESSIONAL
		// };
		static void SET_PED_COMBAT_ABILITY(Ped ped, int abilityLevel)
		{
			invoke<int>(0xC7622C0D36B2FDA8, ped, abilityLevel);
		} // 0xC7622C0D36B2FDA8 0x6C23D329 b1207
		// range:
		// enum eCombatRange
		// {
		// 	CR_NEAR,
		// 	CR_MEDIUM,
		// 	CR_FAR,
		// 	CR_VERY_FAR
		// };
		static void SET_PED_COMBAT_RANGE(Ped ped, int range)
		{
			invoke<int>(0x3C606747B23E497B, ped, range);
		} // 0x3C606747B23E497B 0x8818A959 b1207
		// attributeIndex: https://alloc8or.re/rdr3/doc/enums/eCombatAttribute.txt
		// https://github.com/femga/rdr3_discoveries/tree/master/AI/COMBAT_ATTRIBUTES
		static void SET_PED_COMBAT_ATTRIBUTES(Ped ped, int attributeIndex, BOOL enabled)
		{
			invoke<int>(0x9F7794730795E019, ped, attributeIndex, enabled);
		} // 0x9F7794730795E019 0x81D64248 b1207
		static BOOL GET_PED_COMBAT_ATTRIBUTE_(Ped ped, int attributeIndex)
		{
			return invoke<BOOL>(0xCC2B20596E29E4E3, ped, attributeIndex);
		} // 0xCC2B20596E29E4E3 undefined b1207
		// Hashes: GUARD, COMBAT_ANIMAL, LAW, LAW_SHERIFF
		// _SET_PED_COMBAT_A* - _SET_PED_COMBAT_M*
		static void SET_PED_COMBAT_ATTRIBUTE_HASH_(Ped ped, Hash p1)
		{
			invoke<int>(0xBD75500141E4725C, ped, p1);
		} // 0xBD75500141E4725C undefined b1207
		// TLR_ExitTask = 0,
		// TLR_NeverLoseTarget,
		// TLR_SearchForTarget
		static void SET_PED_TARGET_LOSS_RESPONSE(Ped ped, int responseType)
		{
			invoke<int>(0x0703B9079823DA4A, ped, responseType);
		} // 0x0703B9079823DA4A 0xCFA613FF b1207
		static void N0x0A4618FFD517E24D(Any p0, Any p1)
		{
			invoke<int>(0x0A4618FFD517E24D, p0, p1);
		} // 0x0A4618FFD517E24D undefined b1207
		// _SET_PED_MO*
		static void N0x712B2C2B2471B493(Ped ped, Hash p1)
		{
			invoke<int>(0x712B2C2B2471B493, ped, p1);
		} // 0x712B2C2B2471B493 undefined b1207
		static void N0x00B380FF2DF6AB7A(Any p0, Any p1)
		{
			invoke<int>(0x00B380FF2DF6AB7A, p0, p1);
		} // 0x00B380FF2DF6AB7A undefined b1207
		// https://github.com/femga/rdr3_discoveries/tree/master/AI/COMBAT_STYLES
		// Params: p2 is usually 1, sometimes 0 or 2
		// duration in seconds, -1.0 = forever
		static void SET_PED_COMBAT_STYLE_(Ped ped, Hash combatStyleHash, int p2, float duration)
		{
			invoke<int>(0x8ACC0506743A8A5C, ped, combatStyleHash, p2, duration);
		} // 0x8ACC0506743A8A5C undefined b1207
		// Params: p1 = 1 in R* Scripts
		static void CLEAR_PED_COMBAT_STYLE_(Ped ped, int p1)
		{
			invoke<int>(0x78815FC52832B690, ped, p1);
		} // 0x78815FC52832B690 undefined b1207
		// duration in seconds, -1.0 = forever
		static void SET_PED_COMBAT_STYLE_MOD_(Ped ped, Hash combatStyleModHash, float duration)
		{
			invoke<int>(0x8B1E8E35A6E814EA, ped, combatStyleModHash, duration);
		} // 0x8B1E8E35A6E814EA undefined b1207
		// _CLEAR_PED_COMBAT_*
		static void CLEAR_PED_COMBAT_STYLE_MOD_(Ped ped, Hash combatStyleModHash)
		{
			invoke<int>(0x1FA132CBCD7CB239, ped, combatStyleModHash);
		} // 0x1FA132CBCD7CB239 undefined b1207
		// _IS_PED_B* - _IS_PED_C*
		static BOOL N0x5BF0B9D9A8E227A0(Ped ped)
		{
			return invoke<BOOL>(0x5BF0B9D9A8E227A0, ped);
		} // 0x5BF0B9D9A8E227A0 undefined b1207
		// _SET_PED_M*
		static void N0x642720D8D69328B6(Ped ped, Hash p1)
		{
			invoke<int>(0x642720D8D69328B6, ped, p1);
		} // 0x642720D8D69328B6 undefined b1207
		static BOOL IS_PED_PERFORMING_MELEE_ACTION(Ped ped, int p1, Hash p2)
		{
			return invoke<BOOL>(0xDCCA191DF9980FD7, ped, p1, p2);
		} // 0xDCCA191DF9980FD7 0x139C0875 b1207
		// _CAN_PED_*
		static BOOL N0x99DF2639DA76C1DC(Ped ped1, Ped ped2, int p2)
		{
			return invoke<BOOL>(0x99DF2639DA76C1DC, ped1, ped2, p2);
		} // 0x99DF2639DA76C1DC undefined b1232
		static float GET_PED_MELEE_ACTION_PHASE_(Ped ped)
		{
			return invoke<float>(0x6127F25ED21C533C, ped);
		} // 0x6127F25ED21C533C undefined b1207
		static BOOL IS_PED_BEING_STEALTH_KILLED(Ped ped)
		{
			return invoke<BOOL>(0x863B23EFDE9C5DF2, ped);
		} // 0x863B23EFDE9C5DF2 0xD044C8AF b1207
		static Ped GET_MELEE_TARGET_FOR_PED(Ped ped)
		{
			return invoke<Ped>(0x18A3E9EE1297FD39, ped);
		} // 0x18A3E9EE1297FD39 0xAFEC26A4 b1207
		static void N0xDEDBED3020DA49DC(Any p0)
		{
			invoke<int>(0xDEDBED3020DA49DC, p0);
		} // 0xDEDBED3020DA49DC undefined b1207
		static void N0xA405BF9F01960C16(Any p0)
		{
			invoke<int>(0xA405BF9F01960C16, p0);
		} // 0xA405BF9F01960C16 undefined b1207
		static Hash GET_PED_BRAWLING_STYLE_(Ped ped)
		{
			return invoke<Hash>(0xEC6B59BE445FEC51, ped);
		} // 0xEC6B59BE445FEC51 undefined b1207
		// brawlingStyle:
		// enum eBrawlingStyle : Hash
		// {
		// 	BS_AI = 0x802C604D,
		// 	BS_AI_BARBRAWL = 0x4FF5F0C7,
		// 	BS_AI_DEFENSIVE = 0xD888F2FD,
		// 	BS_AI_MOONSHINE_BARBRAWL = 0xA01B433A,
		// 	BS_ALLIGATOR = 0x7A5548ED,
		// 	BS_ALLIGATOR_LARGE = 0x368EC7CB,
		// 	BS_ALLY = 0x69C76C14,
		// 	BS_ANIMAL = 0xD777C754,
		// 	BS_BADGER = 0x7E7C3F53,
		// 	BS_BEAR = 0x0BC66E35,
		// 	BS_BEAVER = 0x4E313783,
		// 	BS_BOAR = 0x176A5831,
		// 	BS_BOUNTY_HUNTER = 0x3900654C,
		// 	BS_BRUISER = 0x4514DB61,
		// 	BS_BULL = 0x4E50C5D2,
		// 	BS_COUGAR = 0x9DAA7CCB,
		// 	BS_COW = 0xB0E91295,
		// 	BS_COYOTE = 0xA448EB69,
		// 	BS_DEER = 0xA781E6B3,
		// 	BS_DOG = 0x5A4155C4,
		// 	BS_ELK = 0x408697F0,
		// 	BS_FEMALE = 0x6A3BB2C2,
		// 	BS_FEMALE_STRONG = 0x4DAFDD84,
		// 	BS_GANGUP = 0xD0CECFF2,
		// 	BS_GOAT = 0x078E649F,
		// 	BS_HORSE = 0xF6B775F3,
		// 	BS_MICAH_FINALE = 0x1F0BB27A,
		// 	BS_MOOSE = 0x968917AB,
		// 	BS_MUSKRAT = 0x1EDC33AC,
		// 	BS_NO_MELEE = 0x25B5F931,
		// 	BS_PIG = 0x22EAD110,
		// 	BS_PLAYER = 0x78BAEF07,
		// 	BS_PLAYER_FINALE = 0xF9E77D2D,
		// 	BS_PLAYER_MOONSHINER = 0x687BF19F,
		// 	BS_PLAYER_WINTER1 = 0x3C6A802F,
		// 	BS_QUICK = 0xC4CABB1B,
		// 	BS_RACCOON = 0x505F8917,
		// 	BS_SHEEP = 0x6827CCCF,
		// 	BS_SNAKE = 0x82BEBC4B,
		// 	BS_TIMID = 0x431AEF77,
		// 	BS_WOLF = 0xA8F023D4
		// };
		static void SET_PED_BRAWLING_STYLE_(Ped ped, Hash brawlingStyle)
		{
			invoke<int>(0x8BA83CC4288CD56D, ped, brawlingStyle);
		} // 0x8BA83CC4288CD56D undefined b1207
		// _RESET_PED_*
		static void N0x9D8DFE2DE9CB4DFC(Ped ped)
		{
			invoke<int>(0x9D8DFE2DE9CB4DFC, ped);
		} // 0x9D8DFE2DE9CB4DFC undefined b1207
		// _SET_PED_M*
		static Any N0xC48AF420371C7407(Ped ped, Hash grapple)
		{
			return invoke<Any>(0xC48AF420371C7407, ped, grapple);
		} // 0xC48AF420371C7407 undefined b1207
		static Any N0x5EFA8A3D8A60D662(Any p0, Any p1)
		{
			return invoke<Any>(0x5EFA8A3D8A60D662, p0, p1);
		} // 0x5EFA8A3D8A60D662 undefined b1207
		static Any N0x242EDF85D4E87B65(Any p0)
		{
			return invoke<Any>(0x242EDF85D4E87B65, p0);
		} // 0x242EDF85D4E87B65 undefined b1207
		static void SET_PED_COMBAT_BEHAVIOUR_(Ped ped, Hash behaviour)
		{
			invoke<int>(0x9238A3D970BBB0A9, ped, behaviour);
		} // 0x9238A3D970BBB0A9 undefined b1207
		static void N0x9A4AC116CC1EEE14(Any p0)
		{
			invoke<int>(0x9A4AC116CC1EEE14, p0);
		} // 0x9A4AC116CC1EEE14 undefined b1207
		static void N0xE20027B414BFE6C7(Any p0, Any p1)
		{
			invoke<int>(0xE20027B414BFE6C7, p0, p1);
		} // 0xE20027B414BFE6C7 undefined b1207
		// NET_FETCH_CLIENT_UPDATE_PED_FIGHT_PROFICIENCY: Changing parry multiplier for ped
		static void SET_PED_BEAT_MULTIPLIER_(Ped ped, float p1)
		{
			invoke<int>(0x6DBF2D78709AD70B, ped, p1);
		} // 0x6DBF2D78709AD70B undefined b1207
		// https://github.com/femga/rdr3_discoveries/tree/master/AI/COMBAT_ACTION_DISABLE_FLAGS
		static void SET_PED_ACTION_DISABLE_FLAG_(Ped ped, int actionDisableFlag)
		{
			invoke<int>(0xB8DE69D9473B7593, ped, actionDisableFlag);
		} // 0xB8DE69D9473B7593 undefined b1207
		static void CLEAR_PED_ACTION_DISABLE_FLAG_(Ped ped, int actionDisableFlag)
		{
			invoke<int>(0x949B2F9ED2917F5D, ped, actionDisableFlag);
		} // 0x949B2F9ED2917F5D undefined b1207
		static BOOL IS_PED_ACTION_DISABLE_FLAG_ENABLED_(Ped ped, int actionDisableFlag)
		{
			return invoke<BOOL>(0xB346C85D49CC998E, ped, actionDisableFlag);
		} // 0xB346C85D49CC998E undefined b1207
		static void SET_PED_TARGET_ACTION_DISABLE_FLAG_(Ped ped, int actionDisableFlag)
		{
			invoke<int>(0xC163DAC52AC975D3, ped, actionDisableFlag);
		} // 0xC163DAC52AC975D3 undefined b1207
		static void CLEAR_PED_TARGET_ACTION_DISABLE_FLAG_(Ped ped, int actionDisableFlag)
		{
			invoke<int>(0xBBF6D1D07C02D00A, ped, actionDisableFlag);
		} // 0xBBF6D1D07C02D00A undefined b1207
		static BOOL IS_PED_TARGET_ACTION_DISABLE_FLAG_ENABLED_(Ped ped, int actionDisableFlag)
		{
			return invoke<BOOL>(0x02AA2096FE00F3E1, ped, actionDisableFlag);
		} // 0x02AA2096FE00F3E1 undefined b1207
		// _SET_PED_M*
		static void N0x57F35552E771BE9D(Ped ped, int p1)
		{
			invoke<int>(0x57F35552E771BE9D, ped, p1);
		} // 0x57F35552E771BE9D undefined b1207
		// _CLEAR_PED_M*
		static void N0x7C10221CE718AA72(Ped ped, int p1)
		{
			invoke<int>(0x7C10221CE718AA72, ped, p1);
		} // 0x7C10221CE718AA72 undefined b1207
		// _IS_PED_M*
		static BOOL N0x0D3B1568917EBDA0(Ped ped, int p1)
		{
			return invoke<BOOL>(0x0D3B1568917EBDA0, ped, p1);
		} // 0x0D3B1568917EBDA0 undefined b1207
		static void N0x29F3539189D3E277(Any p0, Any p1)
		{
			invoke<int>(0x29F3539189D3E277, p0, p1);
		} // 0x29F3539189D3E277 undefined b1207
		static void N0xE9E06EA514A69061(Any p0, Any p1)
		{
			invoke<int>(0xE9E06EA514A69061, p0, p1);
		} // 0xE9E06EA514A69061 undefined b1207
		static void SET_PED_WRITHING_DURATION_(Ped ped, float writhingDuration1, float writhingDuration2, int p3)
		{
			invoke<int>(0x4DB9D03AC4E1FA84, ped, writhingDuration1, writhingDuration2, p3);
		} // 0x4DB9D03AC4E1FA84 undefined b1207
		// normalized / non normalized
		// 0.0        / 1000.0         STARTED IN WRITHE STAGE
		// 1.0        / 0.0            END OF WRITHE, DEAD
		// -1.0                        DEAD
		//
		// Returns some value from AI task 562 (unknown).
		static float GET_PED_REMAINING_REVIVAL_TIME_(Ped ped, BOOL normalized)
		{
			return invoke<float>(0xEBE89623EB861271, ped, normalized);
		} // 0xEBE89623EB861271 undefined b1207
		static void SET_PAUSE_PED_WRITHE_BLEEDOUT(Ped ped, BOOL toggle)
		{
			invoke<int>(0x925A160133003AC6, ped, toggle);
		} // 0x925A160133003AC6 undefined b1207
		// _GET_IS_PED_(BLEEDING_OUT?)*
		static BOOL N0x12EB4E31F092C9B3(Ped ped)
		{
			return invoke<BOOL>(0x12EB4E31F092C9B3, ped);
		} // 0x12EB4E31F092C9B3 undefined b1207
		static BOOL GET_PED_IS_GRAPPLING(Ped ped)
		{
			return invoke<BOOL>(0x0E99E3BF11BB6367, ped);
		} // 0x0E99E3BF11BB6367 undefined b1207
		static BOOL GET_PED_IS_BEING_GRAPPLED(Ped ped)
		{
			return invoke<BOOL>(0x3BDFCF25B58B0415, ped);
		} // 0x3BDFCF25B58B0415 undefined b1207
		static Ped GET_PED_GRAPPLER_(Ped ped)
		{
			return invoke<Ped>(0xD0B7AEB56229D317, ped);
		} // 0xD0B7AEB56229D317 undefined b1207
		static int GET_PED_GRAPPLE_STATE(Ped ped)
		{
			return invoke<int>(0x2311F15D971AA680, ped);
		} // 0x2311F15D971AA680 undefined b1207
		static Hash GET_PED_GRAPPLE_STYLE_(Ped ped)
		{
			return invoke<Hash>(0x753B15AD0FD6F3E3, ped);
		} // 0x753B15AD0FD6F3E3 undefined b1207
		// Hashes: GS_DRAGGING, GS_FACE_TO_BACK, GS_FACE_TO_FACE, GS_FACE_TO_FACE_WALL, GS_MOUNTED
		static Any SET_PED_GRAPPLE_STYLE_(Ped ped, Hash style)
		{
			return invoke<Any>(0x630E7B01F091A197, ped, style);
		} // 0x630E7B01F091A197 undefined b1207
		static void SET_PED_GRAPPLE_SEQUENCE_(Ped ped, const char* grappleSequence)
		{
			invoke<int>(0x604190F0CF0DF158, ped, grappleSequence);
		} // 0x604190F0CF0DF158 undefined b1207
		static void SET_PED_GRAPPLE_FLAG_(Ped ped, int flag, BOOL enable)
		{
			invoke<int>(0x789DABD18E9024DB, ped, flag, enable);
		} // 0x789DABD18E9024DB undefined b1207
		static void CLEAR_PED_GRAPPLE_FLAG_(Ped ped, int flag)
		{
			invoke<int>(0xEAE3B5B019C8D23F, ped, flag);
		} // 0xEAE3B5B019C8D23F undefined b1207
		static int GET_PED_GRAPPLE_FLAG_(Ped ped)
		{
			return invoke<int>(0xF3C873ED0C595109, ped);
		} // 0xF3C873ED0C595109 undefined b1207
		static void SET_PED_GRAPPLE_ACTION_(Ped ped, Hash grappleAction)
		{
			invoke<int>(0x8301D87B1B89E219, ped, grappleAction);
		} // 0x8301D87B1B89E219 undefined b1207
		static Any SET_PED_GRAPPLE_EFFECT_MULTIPLIER_(Ped ped, float multiplier)
		{
			return invoke<Any>(0x99A6E246C315BF60, ped, multiplier);
		} // 0x99A6E246C315BF60 undefined b1207
		static void SET_PED_GRAPPLE_ANIMATION_(Ped ped, Hash grappleAnim)
		{
			invoke<int>(0x56E9C26CD29D1ED6, ped, grappleAnim);
		} // 0x56E9C26CD29D1ED6 undefined b1207
		// https://github.com/femga/rdr3_discoveries/tree/master/AI/FLEE_ATTRIBUTES
		//
		// attributeFlags:
		// enum eFleeAttribute
		// {
		// 	FA_FORCE_EXIT_VEHICLE = (1 << 16),
		// 	FA_DISABLE_MOUNT_USAGE = (1 << 20),
		// 	FA_DISABLE_ENTER_VEHICLES = (1 << 22),
		// };
		static void SET_PED_FLEE_ATTRIBUTES(Ped ped, int attributeFlags, BOOL enable)
		{
			invoke<int>(0x70A2D1137C8ED7C9, ped, attributeFlags, enable);
		} // 0x70A2D1137C8ED7C9 0xA717A875 b1207
		static BOOL IS_PED_COWERING_(Ped ped)
		{
			return invoke<BOOL>(0xB086C8C0F5701D14, ped);
		} // 0xB086C8C0F5701D14 undefined b1207
		static BOOL IS_ANY_PED_NEAR_POINT(float x, float y, float z, float radius)
		{
			return invoke<BOOL>(0x083961498679DC9F, x, y, z, radius);
		} // 0x083961498679DC9F 0xFBD9B050 b1207
		static void FORCE_PED_AI_AND_ANIMATION_UPDATE(Ped ped, BOOL p1, BOOL p2)
		{
			invoke<int>(0x2208438012482A1A, ped, p1, p2);
		} // 0x2208438012482A1A 0x187B9070 b1207
		// _FORCE_PED_*
		static void N0xC2722B252C79E641(Ped ped, Any p1, Any p2, BOOL p3)
		{
			invoke<int>(0xC2722B252C79E641, ped, p1, p2, p3);
		} // 0xC2722B252C79E641 undefined b1232
		static BOOL IS_PED_DOING_SCENARIO_TRANSITION_(Ped ped)
		{
			return invoke<BOOL>(0xC488B8C0E52560D8, ped);
		} // 0xC488B8C0E52560D8 undefined b1207
		// _IS_PED_D*
		static BOOL N0x2DC0E8DCBD3546E9(Ped ped)
		{
			return invoke<BOOL>(0x2DC0E8DCBD3546E9, ped);
		} // 0x2DC0E8DCBD3546E9 undefined b1207
		// Forces transition now, called together with 0xD65FDC686A031C83
		static void ADD_SCENARIO_TRANSITION_(Ped ped)
		{
			invoke<int>(0x6D07B371E9439019, ped);
		} // 0x6D07B371E9439019 undefined b1207
		// Ped Command Hash are special commands, that can be activated to change conditional anim variations or trigger transitions between conditional anims.
		// https://github.com/femga/rdr3_discoveries/blob/master/animations/scenarios
		static void GIVE_PED_HASH_COMMAND_(Ped ped, Hash commandHash, float activationDuration)
		{
			invoke<int>(0xD65FDC686A031C83, ped, commandHash, activationDuration);
		} // 0xD65FDC686A031C83 undefined b1207
		static BOOL GET_IS_PED_COMMAND_HASH_PRESENT_(Ped ped, Hash commandHash)
		{
			return invoke<BOOL>(0x68821369A2CEADD5, ped, commandHash);
		} // 0x68821369A2CEADD5 undefined b1207
		static BOOL IS_PED_HEADING_TOWARDS_POSITION(Ped ped, float x, float y, float z, float p4)
		{
			return invoke<BOOL>(0xFCF37A457CB96DC0, ped, x, y, z, p4);
		} // 0xFCF37A457CB96DC0 0x45037B9B b1207
		// Not implemented.
		static void N0x600BBDD29820370C(Ped ped)
		{
			invoke<int>(0x600BBDD29820370C, ped);
		} // 0x600BBDD29820370C undefined b1207
		static void REQUEST_PED_VISIBILITY_TRACKING(Ped ped)
		{
			invoke<int>(0x7D7A2E43E74E2EB8, ped);
		} // 0x7D7A2E43E74E2EB8 0x840D24D3 b1207
		static void RELEASE_PED_VISIBILITY_TRACKING(Ped ped)
		{
			invoke<int>(0x3088634CF8C819CF, ped);
		} // 0x3088634CF8C819CF undefined b1207
		static void REQUEST_PED_VEHICLE_VISIBILITY_TRACKING(Ped ped, BOOL p1)
		{
			invoke<int>(0x2BC338A7B21F4608, ped, p1);
		} // 0x2BC338A7B21F4608 0x31C31DAA b1207
		static void REQUEST_PED_USE_SMALL_BBOX_VISIBILITY_TRACKING(Ped ped, BOOL p1)
		{
			invoke<int>(0x75BA1CB3B7D40CAF, ped, p1);
		} // 0x75BA1CB3B7D40CAF 0x9194DB71 b1207
		static int GET_TRACKED_PED_PIXELCOUNT(Ped ped)
		{
			return invoke<int>(0x511F1A683387C7E2, ped);
		} // 0x511F1A683387C7E2 0x5B1B70AA b1207
		// Returns whether or not a ped is visible within your FOV, not this check auto's to false after a certain distance.
		// Target needs to be tracked first, won't work otherwise.
		static BOOL IS_TRACKED_PED_VISIBLE(Ped ped)
		{
			return invoke<BOOL>(0x91C8E617F64188AC, ped);
		} // 0x91C8E617F64188AC 0x33248CC1 b1207
		static BOOL IS_TRACKED_PED_VISIBILITY_PERCENTAGE_NOT_LESS_THAN_(Ped ped, float percent)
		{
			return invoke<BOOL>(0x164CECC59E70DF86, ped, percent);
		} // 0x164CECC59E70DF86 undefined b1207
		static BOOL IS_PED_VISIBILITY_TRACKED_(Ped ped)
		{
			return invoke<BOOL>(0x5102307CE88798EB, ped);
		} // 0x5102307CE88798EB undefined b1207
		static BOOL CAN_PED_BE_MOUNTED(Ped ped)
		{
			return invoke<BOOL>(0x2D64376CF437363E, ped);
		} // 0x2D64376CF437363E undefined b1207
		// Returns true if given ped is a fish.
		// _IS_ME* - _IS_MO*
		static BOOL IS_META_PED_FISH_(Ped ped)
		{
			return invoke<BOOL>(0x118D476A6F1A13F1, ped);
		} // 0x118D476A6F1A13F1 undefined b1207
		static BOOL IS_EVENT_IN_QUEUE(Ped ped, Hash eventType)
		{
			return invoke<BOOL>(0xC8D523BF5BBD3808, ped, eventType);
		} // 0xC8D523BF5BBD3808 undefined b1207
		// Returns:
		// 0 - CTR_CANNOT_TARGET
		// 1 - CTR_CAN_TARGET
		// 2 - CTR_NOT_SURE_YET
		static int CAN_PED_SEE_ENTITY(Ped ped, Entity targetEntity, BOOL p2, BOOL p3)
		{
			return invoke<int>(0x7F9B9791D4CB71F6, ped, targetEntity, p2, p3);
		} // 0x7F9B9791D4CB71F6 undefined b1207
		static int CAN_PED_SEE_PED_CACHED(Ped ped, Ped targetPed, BOOL p2)
		{
			return invoke<int>(0x9D9473CB82D83A30, ped, targetPed, p2);
		} // 0x9D9473CB82D83A30 undefined b1207
		// _CAN_PED_B* - _CAN_PED_I*
		static float N0x0EA9EACBA3B01601(Ped ped1, Ped ped2, BOOL p2)
		{
			return invoke<float>(0x0EA9EACBA3B01601, ped1, ped2, p2);
		} // 0x0EA9EACBA3B01601 undefined b1207
		// no bone = -1
		static int GET_PED_BONE_INDEX(Ped ped, int boneId)
		{
			return invoke<int>(0x3F428D08BE5AAE31, ped, boneId);
		} // 0x3F428D08BE5AAE31 0x259C6BA2 b1207
		// Returns boneIndex
		// _GET_PED_N* - _GET_PED_R*
		static int N0xC5303F460A40D21D(Ped ped, int p1)
		{
			return invoke<int>(0xC5303F460A40D21D, ped, p1);
		} // 0xC5303F460A40D21D undefined b1207
		// _SET_PED_R* -_SET_PED_S*
		static void N0xE29D8CD66553DBAA(Ped horse)
		{
			invoke<int>(0xE29D8CD66553DBAA, horse);
		} // 0xE29D8CD66553DBAA undefined b1207
		static void N0xB06F5F1DEF417216(Any p0, Any p1, Any p2, Any p3)
		{
			invoke<int>(0xB06F5F1DEF417216, p0, p1, p2, p3);
		} // 0xB06F5F1DEF417216 undefined b1207
		static void N0xFC23348F0F4E245F(Any p0, Any p1, Any p2, Any p3)
		{
			invoke<int>(0xFC23348F0F4E245F, p0, p1, p2, p3);
		} // 0xFC23348F0F4E245F undefined b1207
		static void N0x9184788BFF1EDAD7(Any p0, Any p1)
		{
			invoke<int>(0x9184788BFF1EDAD7, p0, p1);
		} // 0x9184788BFF1EDAD7 undefined b1207
		// Params: ped, 0f, -1, true, true in R* MP Scripts
		// _SET_PED_DE* - _SET_PED_F*
		static void SET_PED_DIRT_CLEANED_(Ped ped, float p1, int p2, BOOL p3, BOOL p4)
		{
			invoke<int>(0xE3144B932DFDFF65, ped, p1, p2, p3, p4);
		} // 0xE3144B932DFDFF65 undefined b1207
		static Any N0x0105FEE8F9091255(Any p0, Any p1)
		{
			return invoke<Any>(0x0105FEE8F9091255, p0, p1);
		} // 0x0105FEE8F9091255 undefined b1207
		static void N0xD049920CD29F6CC8(Any p0, Any p1, Any p2, Any p3, Any p4)
		{
			invoke<int>(0xD049920CD29F6CC8, p0, p1, p2, p3, p4);
		} // 0xD049920CD29F6CC8 undefined b1207
		static Any N0xBB3E5370EBB6BE28(Any p0, Any p1)
		{
			return invoke<Any>(0xBB3E5370EBB6BE28, p0, p1);
		} // 0xBB3E5370EBB6BE28 undefined b1207
		static void N0x2FA568BFA725F8D6(Any p0, Any p1, Any p2, Any p3)
		{
			invoke<int>(0x2FA568BFA725F8D6, p0, p1, p2, p3);
		} // 0x2FA568BFA725F8D6 undefined b1207
		static Any N0x56E4BAD93D33453C(Any p0, Any p1)
		{
			return invoke<Any>(0x56E4BAD93D33453C, p0, p1);
		} // 0x56E4BAD93D33453C undefined b1207
		static void N0x75A082563B4452E5(Any p0, Any p1, Any p2, Any p3)
		{
			invoke<int>(0x75A082563B4452E5, p0, p1, p2, p3);
		} // 0x75A082563B4452E5 undefined b1207
		static void N0x16802C32B2FCA06B(Any p0, Any p1, Any p2, Any p3)
		{
			invoke<int>(0x16802C32B2FCA06B, p0, p1, p2, p3);
		} // 0x16802C32B2FCA06B undefined b1207
		static void N0x8BA0C65AC15A7D33(Any p0, Any p1, Any p2, Any p3)
		{
			invoke<int>(0x8BA0C65AC15A7D33, p0, p1, p2, p3);
		} // 0x8BA0C65AC15A7D33 undefined b1207
		static void N0x0FFDF937E5C11382(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5)
		{
			invoke<int>(0x0FFDF937E5C11382, p0, p1, p2, p3, p4, p5);
		} // 0x0FFDF937E5C11382 undefined b1207
		static void N0x5FCF25D584065BFD(Any p0, Any p1, Any p2, Any p3)
		{
			invoke<int>(0x5FCF25D584065BFD, p0, p1, p2, p3);
		} // 0x5FCF25D584065BFD undefined b1207
		// _SET_PED_*
		static void N0xA2116C1E4ED85C24(Ped ped, BOOL inverted)
		{
			invoke<int>(0xA2116C1E4ED85C24, ped, inverted);
		} // 0xA2116C1E4ED85C24 undefined b1207
		// motionStateHash: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/FORCE_PED_MOTION_STATE
		static BOOL FORCE_PED_MOTION_STATE(Ped ped, Hash motionStateHash, BOOL p2, int p3, BOOL p4)
		{
			return invoke<BOOL>(0xF28965D04F570DCA, ped, motionStateHash, p2, p3, p4);
		} // 0xF28965D04F570DCA 0x164DDEFF b1207
		static void N0x75D3333409CD33CE(Any p0, Any p1, Any p2)
		{
			invoke<int>(0x75D3333409CD33CE, p0, p1, p2);
		} // 0x75D3333409CD33CE undefined b1207
		// Old name: _GET_PED_CURRENT_MOVEMENT_SPEED
		static BOOL GET_PED_CURRENT_MOVE_BLEND_RATIO(Ped ped, float* speedX, float* speedY)
		{
			return invoke<BOOL>(0xF60165E1D2C5370B, ped, speedX, speedY);
		} // 0xF60165E1D2C5370B  b1207
		static void SET_PED_MAX_MOVE_BLEND_RATIO(Ped ped, float value)
		{
			invoke<int>(0x433083750C5E064A, ped, value);
		} // 0x433083750C5E064A 0xEAD0269A b1207
		static void SET_PED_MIN_MOVE_BLEND_RATIO(Ped ped, float value)
		{
			invoke<int>(0x01A898D26E2333DD, ped, value);
		} // 0x01A898D26E2333DD 0x383EC364 b1207
		static void N0xBC1DC48270468444(Any p0)
		{
			invoke<int>(0xBC1DC48270468444, p0);
		} // 0xBC1DC48270468444 undefined b1207
		// Returns vehicle (desired) speed
		// _COMPUTE_(VEHICLE_SPEED_USING_BLEND_RATIO?)*
		static float N0x46BF2A810679D6E6(Ped ped, float maxMoveBlendRatio)
		{
			return invoke<float>(0x46BF2A810679D6E6, ped, maxMoveBlendRatio);
		} // 0x46BF2A810679D6E6 undefined b1207
		// Returns vehicle speed
		// _COMPUTE_*
		static float N0xCA95924C893A0C91(Ped ped, float p1)
		{
			return invoke<float>(0xCA95924C893A0C91, ped, p1);
		} // 0xCA95924C893A0C91 undefined b1207
		// _H* - _I*
		static void HORSE_AGITATE_(Ped mount, BOOL kickOffRider)
		{
			invoke<int>(0xBAE08F00021BFFB2, mount, kickOffRider);
		} // 0xBAE08F00021BFFB2 undefined b1207
		static void N0x413697EC260AABBF(Any p0, Any p1, Any p2)
		{
			invoke<int>(0x413697EC260AABBF, p0, p1, p2);
		} // 0x413697EC260AABBF undefined b1207
		static void N0xCAC43D060099EA72(Ped ped)
		{
			invoke<int>(0xCAC43D060099EA72, ped);
		} // 0xCAC43D060099EA72 undefined b1207
		static void N0xC9151483CC06A414(Ped ped)
		{
			invoke<int>(0xC9151483CC06A414, ped);
		} // 0xC9151483CC06A414 undefined b1207
		static void N0xAD3330E3C3E98007(Any p0, Any p1)
		{
			invoke<int>(0xAD3330E3C3E98007, p0, p1);
		} // 0xAD3330E3C3E98007 undefined b1207
		static Any N0xB8E2D655E1D5BD39(Any p0)
		{
			return invoke<Any>(0xB8E2D655E1D5BD39, p0);
		} // 0xB8E2D655E1D5BD39 undefined b1207
		static Any N0x7BB810E8B343AC7B(Any p0)
		{
			return invoke<Any>(0x7BB810E8B343AC7B, p0);
		} // 0x7BB810E8B343AC7B undefined b1207
		// Min: 0.0f
		// Max: 1.15f
		static void SET_PED_MOVE_RATE_OVERRIDE(Ped ped, float value)
		{
			invoke<int>(0x085BF80FA50A39D1, ped, value);
		} // 0x085BF80FA50A39D1 0x900008C6 b1207
		static int GET_PED_NEARBY_VEHICLES(Ped ped, Any* sizeAndVehs)
		{
			return invoke<int>(0xCFF869CBFA210D82, ped, sizeAndVehs);
		} // 0xCFF869CBFA210D82 0xCB716F68 b1207
		static int GET_PED_NEARBY_PEDS(Ped ped, Any* sizeAndPeds, int ignoredPedType, int p3)
		{
			return invoke<int>(0x23F8F5FC7E8C4A6B, ped, sizeAndPeds, ignoredPedType, p3);
		} // 0x23F8F5FC7E8C4A6B 0x4D3325F4 b1207
		static BOOL IS_PED_READY_TO_RENDER(Ped ped)
		{
			return invoke<BOOL>(0xA0BC8FAED8CFEB3C, ped);
		} // 0xA0BC8FAED8CFEB3C undefined b1207
		static void N0x6A489892E813951A(Any p0)
		{
			invoke<int>(0x6A489892E813951A, p0);
		} // 0x6A489892E813951A undefined b1207
		static BOOL IS_PED_USING_ACTION_MODE(Ped ped)
		{
			return invoke<BOOL>(0x00E73468D085F745, ped);
		} // 0x00E73468D085F745 0x5AE7EDA2 b1207
		static BOOL IS_PED_USING_ACTION_MODE_2_(Ped ped)
		{
			return invoke<BOOL>(0xEBB208D6AE712C03, ped);
		} // 0xEBB208D6AE712C03 undefined b1207
		static void SET_PED_USING_ACTION_MODE(Ped ped, BOOL bActionModeEnabled, int p2, const char* action)
		{
			invoke<int>(0xD75ACCF5E0FB5367, ped, bActionModeEnabled, p2, action);
		} // 0xD75ACCF5E0FB5367 0x8802F696 b1207
		// Overrides the ped's collision capsule radius for the current tick.
		// Must be called every tick to be effective.
		//
		// Setting this to 0.001 will allow warping through some objects.
		static void SET_PED_CAPSULE(Ped ped, float value)
		{
			invoke<int>(0x364DF566EC833DE2, ped, value);
		} // 0x364DF566EC833DE2 0xB153E1B9 b1207
		static Ped GET_RIDER_OF_MOUNT_(Ped mount, BOOL p1)
		{
			return invoke<Ped>(0xB676EFDA03DADA52, mount, p1);
		} // 0xB676EFDA03DADA52 undefined b1207
		// Params: p4 = 35.f, duration = 5000 in R* Scripts
		static void SPAWNPOINTS_START_SEARCH(float x, float y, float z, float width, float p4, int spawnpointsFlag, float p6, int duration, float p8)
		{
			invoke<int>(0x2DF9038C90AD5264, x, y, z, width, p4, spawnpointsFlag, p6, duration, p8);
		} // 0x2DF9038C90AD5264 0x909A1D76 b1207
		// Searching area between coords 1 and 2
		static void SPAWNPOINTS_START_SEARCH_IN_ANGLED_AREA(float x1, float y1, float z1, float x2, float y2, float z2, float width, int spawnpointsFlag, float p8, int duration, float p10)
		{
			invoke<int>(0xB2AFF10216DEFA2F, x1, y1, z1, x2, y2, z2, width, spawnpointsFlag, p8, duration, p10);
		} // 0xB2AFF10216DEFA2F 0x4AAD0ECB b1207
		static void SPAWNPOINTS_START_SEARCH_WITH_VOLUME_(Volume volume, int spawnpointsFlag, float p2, int duration, float p4)
		{
			invoke<int>(0x83ED1FC9DF3411F5, volume, spawnpointsFlag, p2, duration, p4);
		} // 0x83ED1FC9DF3411F5 undefined b1311
		static void SPAWNPOINTS_CANCEL_SEARCH()
		{
			invoke<int>(0xFEE4A5459472A9F8);
		} // 0xFEE4A5459472A9F8 0x492C9E46 b1207
		static BOOL SPAWNPOINTS_IS_SEARCH_ACTIVE()
		{
			return invoke<BOOL>(0x3C67506996001F5E);
		} // 0x3C67506996001F5E 0x814A28F4 b1207
		static BOOL SPAWNPOINTS_IS_SEARCH_COMPLETE()
		{
			return invoke<BOOL>(0xA586FBEB32A53DBB);
		} // 0xA586FBEB32A53DBB 0x0B60D2BA b1207
		static BOOL SPAWNPOINTS_IS_SEARCH_FAILED()
		{
			return invoke<BOOL>(0xF445DE8DA80A1792);
		} // 0xF445DE8DA80A1792 0x6B83ABDF b1207
		static int SPAWNPOINTS_GET_NUM_SEARCH_RESULTS()
		{
			return invoke<int>(0xA635C11B8C44AFC2);
		} // 0xA635C11B8C44AFC2 0xF46B4DC8 b1207
		static void SPAWNPOINTS_GET_SEARCH_RESULT(int randomInt, float* x, Any* y, float* z)
		{
			invoke<int>(0x280C7E3AC7F56E90, randomInt, x, y, z);
		} // 0x280C7E3AC7F56E90 0x36A4AC65 b1207
		static void SPAWNPOINTS_GET_SEARCH_RESULT_FLAGS(Any p0, Any* p1)
		{
			invoke<int>(0xB782F8238512BAD5, p0, p1);
		} // 0xB782F8238512BAD5 0xBA699DDF b1207
		static void SET_IK_TARGET(Ped ped, int ikIndex, Entity entityLookAt, int boneLookAt, float offsetX, float offsetY, float offsetZ, Any p7, int blendInDuration, int blendOutDuration)
		{
			invoke<int>(0xC32779C16FCEECD9, ped, ikIndex, entityLookAt, boneLookAt, offsetX, offsetY, offsetZ, p7, blendInDuration, blendOutDuration);
		} // 0xC32779C16FCEECD9 0x6FE5218C b1207
		// For more information, see common:/data/emotional_presets.meta
		static void REQUEST_PED_EMOTIONAL_PRESET_(Ped ped, const char* name)
		{
			invoke<int>(0x5C3C55EAAD19915F, ped, name);
		} // 0x5C3C55EAAD19915F undefined b1207
		// See _REQUEST_PED_EMOTIONAL_PRESET
		static BOOL HAS_PED_EMOTIONAL_PRESET_LOADED_(Ped ped, const char* name)
		{
			return invoke<BOOL>(0xDE3904B22695D9F9, ped, name);
		} // 0xDE3904B22695D9F9 undefined b1207
		// See _REQUEST_PED_EMOTIONAL_PRESET
		static void REMOVE_PED_EMOTIONAL_PRESET_(Ped ped, const char* name)
		{
			invoke<int>(0xFC3BAB1801A8255A, ped, name);
		} // 0xFC3BAB1801A8255A undefined b1207
		static void REQUEST_MOTION_TYPE_ASSET_(Hash nameHash, Ped ped)
		{
			invoke<int>(0xF7EA250B9A919E03, nameHash, ped);
		} // 0xF7EA250B9A919E03 undefined b1207
		static BOOL HAS_MOTION_TYPE_ASSET_LOADED(Hash nameHash, Ped ped)
		{
			return invoke<BOOL>(0x854BC9B1A1CCD034, nameHash, ped);
		} // 0x854BC9B1A1CCD034 undefined b1207
		static void REMOVE_MOTION_TYPE_ASSET_(Hash nameHash, Ped ped)
		{
			invoke<int>(0xDE7B2B4144906CDF, nameHash, ped);
		} // 0xDE7B2B4144906CDF undefined b1207
		// _IS_PED_L* - _IS_PED_M*
		static BOOL N0x290B2E6CCDE532E1(Ped ped)
		{
			return invoke<BOOL>(0x290B2E6CCDE532E1, ped);
		} // 0x290B2E6CCDE532E1 undefined b1207
		// _IS_PED_L* - _IS_PED_M*
		static BOOL N0x0EEF7A81C17679DB(Ped ped)
		{
			return invoke<BOOL>(0x0EEF7A81C17679DB, ped);
		} // 0x0EEF7A81C17679DB undefined b1207
		static void SET_PED_LOD_MULTIPLIER(Ped ped, float multiplier)
		{
			invoke<int>(0xDC2C5C242AAC342B, ped, multiplier);
		} // 0xDC2C5C242AAC342B 0x1D2B5C70 b1207
		static float GET_PED_LOD_MULTIPLIER_(Ped ped)
		{
			return invoke<float>(0x1B710E6F4AB69341, ped);
		} // 0x1B710E6F4AB69341 undefined b1355
		static Any N0xA218D2BBCAA7388C(Any p0, Any p1)
		{
			return invoke<Any>(0xA218D2BBCAA7388C, p0, p1);
		} // 0xA218D2BBCAA7388C undefined b1207
		static BOOL IS_ANY_HOSTILE_PED_NEAR_POINT(Ped ped, float x, float y, float z, float radius)
		{
			return invoke<BOOL>(0x68772DB2B2526F9F, ped, x, y, z, radius);
		} // 0x68772DB2B2526F9F 0x1A464167 b1311
		static void N0xCBDE59C48F2B06F5(Any p0, Any p1, Any p2)
		{
			invoke<int>(0xCBDE59C48F2B06F5, p0, p1, p2);
		} // 0xCBDE59C48F2B06F5 undefined b1207
		static void N0x6A190B94C2541A99(Any p0)
		{
			invoke<int>(0x6A190B94C2541A99, p0);
		} // 0x6A190B94C2541A99 undefined b1207
		// Returns true if ped is in perception (focused and looking at target ped)
		// Most float params are -1.f in R* Scripts
		static BOOL IS_TARGET_PED_IN_PERCEPTION_AREA(Ped ped, Ped targetPed, float p2, float customDistance, float p4, float p5)
		{
			return invoke<BOOL>(0x06087579E7AA85A9, ped, targetPed, p2, customDistance, p4, p5);
		} // 0x06087579E7AA85A9 0xD0567D41 b1207
		static void SET_POP_CONTROL_SPHERE_THIS_FRAME(Any p0, Any p1, Any p2, Any p3, Any p4)
		{
			invoke<int>(0xD8C3BE3EE94CAF2D, p0, p1, p2, p3, p4);
		} // 0xD8C3BE3EE94CAF2D 0x4BBE5E2C b1207
		static BOOL IS_PED_HOGTIED(Ped ped)
		{
			return invoke<BOOL>(0x3AA24CCC0D451379, ped);
		} // 0x3AA24CCC0D451379 undefined b1207
		static BOOL IS_PED_BEING_HOGTIED(Ped ped)
		{
			return invoke<BOOL>(0xD453BB601D4A606E, ped);
		} // 0xD453BB601D4A606E undefined b1207
		static Ped N0x3D9F958834AB9C30(Ped ped)
		{
			return invoke<Ped>(0x3D9F958834AB9C30, ped);
		} // 0x3D9F958834AB9C30 undefined b1207
		// _IS_PED_S* - _IS_PED_U*
		static BOOL N0x913D04A5176F84C9(Ped ped)
		{
			return invoke<BOOL>(0x913D04A5176F84C9, ped);
		} // 0x913D04A5176F84C9 undefined b1207
		static BOOL IS_PED_HOGTYING(Ped ped)
		{
			return invoke<BOOL>(0x42429C674B61238B, ped);
		} // 0x42429C674B61238B undefined b1207
		// https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/Lasso%20Hogtie%20Flags
		// https://github.com/femga/rdr3_discoveries/tree/master/AI/LASSO_HOGTIE_FLAG
		static BOOL GET_PED_LASSO_HOGTIE_FLAG_(Ped ped, int flagId)
		{
			return invoke<BOOL>(0x2C76FA0E01681F8D, ped, flagId);
		} // 0x2C76FA0E01681F8D undefined b1207
		static void SET_PED_LASSO_HOGTIE_FLAG(Ped ped, int flagId, BOOL value)
		{
			invoke<int>(0xAE6004120C18DF97, ped, flagId, value);
		} // 0xAE6004120C18DF97 undefined b1207
		static int N0x4642182A298187D0(Ped ped, int p1, Any* p2, int p3, int p4)
		{
			return invoke<int>(0x4642182A298187D0, ped, p1, p2, p3, p4);
		} // 0x4642182A298187D0 undefined b1207
		static void N0x6B67320E0D57856A(Ped ped, Any* p1, int p2, BOOL p3)
		{
			invoke<int>(0x6B67320E0D57856A, ped, p1, p2, p3);
		} // 0x6B67320E0D57856A undefined b1207
		static Entity GET_FIRST_ENTITY_PED_IS_CARRYING_(Ped ped)
		{
			return invoke<Entity>(0xD806CD2A4F2C2996, ped);
		} // 0xD806CD2A4F2C2996 undefined b1207
		static void N0xAA6C49AE90A32299(Ped ped, Hash p1)
		{
			invoke<int>(0xAA6C49AE90A32299, ped, p1);
		} // 0xAA6C49AE90A32299 undefined b1207
		static Ped GET_CARRIER_AS_PED_(Entity entity)
		{
			return invoke<Ped>(0x09B83E68DE004CD4, entity);
		} // 0x09B83E68DE004CD4 undefined b1207
		static Ped GET_CARRIER_AS_MOUNT_(Entity entity)
		{
			return invoke<Ped>(0xA033D7E4BBF9844D, entity);
		} // 0xA033D7E4BBF9844D undefined b1207
		static Ped GET_CARRIER_AS_HUMAN_(Entity entity)
		{
			return invoke<Ped>(0x79443D56C8DF45EE, entity);
		} // 0x79443D56C8DF45EE undefined b1207
		static Any GET_CARRIED_ATTACHED_INFO_FOR_SLOT(Any p0, Any p1, Any p2, Any p3)
		{
			return invoke<Any>(0x608BC6A6AACD5036, p0, p1, p2, p3);
		} // 0x608BC6A6AACD5036 undefined b1207
		static void DETACH_CARRIABLE_ENTITY(Entity entity, BOOL p1, BOOL p2)
		{
			invoke<int>(0xED00D72F81CF7278, entity, p1, p2);
		} // 0xED00D72F81CF7278 undefined b1207
		static void FIND_ALL_ATTACHED_CARRIABLE_ENTITIES(Ped ped, ItemSet itemset)
		{
			invoke<int>(0xB5ACE8B23A438EC0, ped, itemset);
		} // 0xB5ACE8B23A438EC0 undefined b1207
		static BOOL IS_PED_CARRYING_SOMETHING(Ped ped)
		{
			return invoke<BOOL>(0xA911EE21EDF69DAF, ped);
		} // 0xA911EE21EDF69DAF undefined b1207
		static BOOL N0xB65927F861E7AE39(Ped ped, int p1)
		{
			return invoke<BOOL>(0xB65927F861E7AE39, ped, p1);
		} // 0xB65927F861E7AE39 undefined b1207
		static BOOL N0xA1FBAC56D38563E2(Volume volume)
		{
			return invoke<BOOL>(0xA1FBAC56D38563E2, volume);
		} // 0xA1FBAC56D38563E2 undefined b1207
		static Any N0x6F43C351A5D51E2F(Ped ped, Any* p1)
		{
			return invoke<Any>(0x6F43C351A5D51E2F, ped, p1);
		} // 0x6F43C351A5D51E2F undefined b1207
		static BOOL IS_PED_LASSOED(Ped ped)
		{
			return invoke<BOOL>(0x9682F850056C9ADE, ped);
		} // 0x9682F850056C9ADE undefined b1207
		// _IS_PED_S* - _IS_PED_U*
		static Entity GET_LASSOER_OF_PED_(Ped ped)
		{
			return invoke<Entity>(0x833F0053340EF413, ped);
		} // 0x833F0053340EF413 undefined b1207
		static Entity GET_LASSO_TARGET_(Ped ped)
		{
			return invoke<Entity>(0xB65A4DAB460A19BD, ped);
		} // 0xB65A4DAB460A19BD undefined b1207
		static Ped GET_LASSOED_LASSOER_(Ped ped)
		{
			return invoke<Ped>(0x0C31C51168E80365, ped);
		} // 0x0C31C51168E80365 undefined b1207
		// https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/CLootingFlags__Flags
		// https://github.com/femga/rdr3_discoveries/tree/master/AI/LOOTING_FLAGS
		//
		// lootFlag:
		// enum eLootFlag
		// {
		// 	LOOT_FLAG_IS_CRITICAL_LOOT_TARGET = 7,
		// 	LOOT_FLAG_IGNORE_WATER_CHECKS = 8,
		// 	LOOT_FLAG_ANIMAL_FLAGGED_FOR_TAGGING = 23,
		// };
		static void SET_LOOTING_FLAG(Ped ped, int lootFlag, BOOL enabled)
		{
			invoke<int>(0x6569F31A01B4C097, ped, lootFlag, enabled);
		} // 0x6569F31A01B4C097 undefined b1207
		// lootFlag: see SET_LOOTING_FLAG
		static BOOL GET_LOOTING_FLAG_(Ped ped, int lootFlag)
		{
			return invoke<BOOL>(0xE4C11F104620DDCE, ped, lootFlag);
		} // 0xE4C11F104620DDCE undefined b1207
		// Returns loot state
		// enum eLootState
		// {
		// 	LAP_NONE,
		// 	LAP_RESUMING,
		// 	LAP_GETTING_ON_FOOT,
		// 	LAP_DISTANT_NAV,
		// 	LAP_CHOOSING_ACTION,
		// 	LAP_APPROACHING,
		// 	LAP_ENTERING,
		// 	LAP_LOOTING,
		// 	LAP_EXITING
		// };
		//
		// _POSSE_* - _REGISTER_HATED*
		static int REFRESH_LOOT_STATE_FOR_PED_(Ped ped, int p1, Ped* lootTarget, int p3, int p4)
		{
			return invoke<int>(0x5463C962BC7777C3, ped, p1, lootTarget, p3, p4);
		} // 0x5463C962BC7777C3 undefined b1207
		// enum ePedLootStatus
		// {
		// 	PLS_NONE,
		// 	PLS_PRE_LOOT,
		// 	PLS_SAMPLING,
		// 	PLS_SKINNING
		// };
		static int GET_PED_LOOT_STATUS_MP(Ped ped)
		{
			return invoke<int>(0xC737697C41628340, ped);
		} // 0xC737697C41628340 undefined b1311
		static Ped N0x4B19F171450E0D4F(Ped ped)
		{
			return invoke<Ped>(0x4B19F171450E0D4F, ped);
		} // 0x4B19F171450E0D4F undefined b1207
		static BOOL N0x758F081DB204DDDE(Ped ped)
		{
			return invoke<BOOL>(0x758F081DB204DDDE, ped);
		} // 0x758F081DB204DDDE undefined b1207
		static Entity GET_LOOTING_PICKUP_TARGET_ENTITY(Ped ped)
		{
			return invoke<Entity>(0x14169FA823679E41, ped);
		} // 0x14169FA823679E41 undefined b1207
		static Any N0x7B5C293238EE4F20(Any p0)
		{
			return invoke<Any>(0x7B5C293238EE4F20, p0);
		} // 0x7B5C293238EE4F20 undefined b1207
		static void N0xAE6B68A83ABBE7C0(Any p0)
		{
			invoke<int>(0xAE6B68A83ABBE7C0, p0);
		} // 0xAE6B68A83ABBE7C0 undefined b1207
		static BOOL N0xA4B6432E3880F2F9(Ped ped)
		{
			return invoke<BOOL>(0xA4B6432E3880F2F9, ped);
		} // 0xA4B6432E3880F2F9 undefined b1311
		static BOOL ADD_PED_SUBSCRIBE_TO_LEGENDARY_BLIPS_(Ped ped)
		{
			return invoke<BOOL>(0xE37287EE358939C3, ped);
		} // 0xE37287EE358939C3 undefined b1311
		static BOOL REMOVE_PED_SUBSCRIBE_TO_LEGENDARY_BLIPS_(Ped ped)
		{
			return invoke<BOOL>(0x011A42FD923D41CA, ped);
		} // 0x011A42FD923D41CA undefined b1311
		static BOOL IS_PED_INCAPACITATED(Ped ped)
		{
			return invoke<BOOL>(0xB655DB7582AEC805, ped);
		} // 0xB655DB7582AEC805 undefined b1207
		static void SET_PED_INCAPACITATION_MODIFIERS_(Ped ped, BOOL canBeIncapacitated, int threshold, int bleedoutTime, int p4)
		{
			invoke<int>(0x39ED303390DDEAC7, ped, canBeIncapacitated, threshold, bleedoutTime, p4);
		} // 0x39ED303390DDEAC7 undefined b1207
		static BOOL GET_PED_CAN_BE_INCAPACITATED_THIS_FRAME_(Ped ped)
		{
			return invoke<BOOL>(0x7A4E00364B5D727B, ped);
		} // 0x7A4E00364B5D727B undefined b1207
		// When set on a player ped, its just like when you die in RDO
		static void SET_PED_CAN_BE_INCAPACITATED(Ped ped, BOOL toggle)
		{
			invoke<int>(0x5240864E847C691C, ped, toggle);
		} // 0x5240864E847C691C undefined b1207
		static int GET_PED_INCAPACITATION_HEALTH_(Ped ped)
		{
			return invoke<int>(0x89BFDF6D53145545, ped);
		} // 0x89BFDF6D53145545 undefined b1207
		static void SET_PED_INCAPACITATION_TOTAL_BLEED_OUT_DURATION_(Ped ped, float duration)
		{
			invoke<int>(0x2890418B39BC8FFF, ped, duration);
		} // 0x2890418B39BC8FFF undefined b1207
		static void RESET_PED_INCAPACITATION_BLEED_OUT_DURATION_(Ped ped)
		{
			invoke<int>(0x4B9668DB91DC39B8, ped);
		} // 0x4B9668DB91DC39B8 undefined b1207
		static void SET_PED_INCAPACITATION_FLAGS_(Ped ped, int flags)
		{
			invoke<int>(0xD67B6F3BCF81BA47, ped, flags);
		} // 0xD67B6F3BCF81BA47 undefined b1207
		static void N0x92A1B55A59720395(Any p0, Any p1)
		{
			invoke<int>(0x92A1B55A59720395, p0, p1);
		} // 0x92A1B55A59720395 undefined b1207
		static void INCAPACITATED_REVIVE_(Ped ped, Ped ped2)
		{
			invoke<int>(0xF6262491C7704A63, ped, ped2);
		} // 0xF6262491C7704A63 undefined b1207
		static int GET_INCAPACITATION_TIME_REMAINING_(Ped ped)
		{
			return invoke<int>(0x88D9D76D78065487, ped);
		} // 0x88D9D76D78065487 undefined b1207
		static void SET_PED_KNOCKED_BY_ONE_HIT_(Ped ped, float p1)
		{
			invoke<int>(0x5BCF0B79D4F5DBA3, ped, p1);
		} // 0x5BCF0B79D4F5DBA3 undefined b1207
		static void N0x2E5B5D1F1453E08E(Ped ped, int p1)
		{
			invoke<int>(0x2E5B5D1F1453E08E, ped, p1);
		} // 0x2E5B5D1F1453E08E undefined b1207
		// _SET_PED_K* or _SET_PED_L*
		static void N0x29924EB8EE9DB926(Ped ped, float p1)
		{
			invoke<int>(0x29924EB8EE9DB926, ped, p1);
		} // 0x29924EB8EE9DB926 undefined b1207
		// Params: hash - ARTHUR or JOHN
		// _SET_PED_(A-D)*
		static void SET_PED_ACTIVE_PLAYER_TYPE_(Ped ped, Hash playerType)
		{
			invoke<int>(0xB285AD0EC870B2DF, ped, playerType);
		} // 0xB285AD0EC870B2DF undefined b1207
		static Any N0xCB86D3E3E3708901(Any p0, Any p1, Any p2, Any p3, Any p4)
		{
			return invoke<Any>(0xCB86D3E3E3708901, p0, p1, p2, p3, p4);
		} // 0xCB86D3E3E3708901 undefined b1207
		static void N0x633F83B301C87994(Any p0, Any p1)
		{
			invoke<int>(0x633F83B301C87994, p0, p1);
		} // 0x633F83B301C87994 undefined b1207
		static BOOL N0x5203038FF8BAE577(Ped ped, int p1, int p2)
		{
			return invoke<BOOL>(0x5203038FF8BAE577, ped, p1, p2);
		} // 0x5203038FF8BAE577 undefined b1207
		static BOOL N0x7F090958AE95B61B(Ped ped, int p1)
		{
			return invoke<BOOL>(0x7F090958AE95B61B, ped, p1);
		} // 0x7F090958AE95B61B undefined b1207
		// [WARDROBE] Player took off their disguise: p1 = 13
		// [WARDROBE] Player put on a disguise: p1 = 0
		static void N0xC494C76A34266E82(Ped ped, int p1)
		{
			invoke<int>(0xC494C76A34266E82, ped, p1);
		} // 0xC494C76A34266E82 undefined b1207
		// _GET_PED_G* - _GET_PED_I*
		static BOOL N0xC3995D396F1D97B6(Ped ped, int p1, int p2)
		{
			return invoke<BOOL>(0xC3995D396F1D97B6, ped, p1, p2);
		} // 0xC3995D396F1D97B6 undefined b1207
		static void N0x15F4732C357B1D6D(Any p0, Any p1, Any p2)
		{
			invoke<int>(0x15F4732C357B1D6D, p0, p1, p2);
		} // 0x15F4732C357B1D6D undefined b1207
		// flags: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/0x947E43F544B6AB34
		// _GET_PED_G* - _GET_PED_I(NTERACTION?)*
		static BOOL N0x947E43F544B6AB34(Ped ped, Player player, int flag, int ms)
		{
			return invoke<BOOL>(0x947E43F544B6AB34, ped, player, flag, ms);
		} // 0x947E43F544B6AB34 undefined b1207
		static Any N0x32417CB860A3BDC4(Any p0, Any p1)
		{
			return invoke<Any>(0x32417CB860A3BDC4, p0, p1);
		} // 0x32417CB860A3BDC4 undefined b1207
		// Only used in R* Script nb_animal_attack: p2 = 120000
		// _SET_PED_SH* - _SET_PED_SP*
		static void N0xE737D5F14304A2EC(Ped ped, Player player, int p2)
		{
			invoke<int>(0xE737D5F14304A2EC, ped, player, p2);
		} // 0xE737D5F14304A2EC undefined b1207
		static void N0xEBD49472BCCF7642(Any p0, Any p1)
		{
			invoke<int>(0xEBD49472BCCF7642, p0, p1);
		} // 0xEBD49472BCCF7642 undefined b1207
		static void SET_PLAYER_GREET_DISABLED_FOR_PED_(Ped ped, Player player, int duration)
		{
			invoke<int>(0x19173C3F15367B54, ped, player, duration);
		} // 0x19173C3F15367B54 undefined b1207
		static void SET_PLAYER_ANTAGONIZE_DISABLED_FOR_PED_(Ped ped, Player player, int duration)
		{
			invoke<int>(0x5708EDD71B50C008, ped, player, duration);
		} // 0x5708EDD71B50C008 undefined b1207
		static void N0xB9BDFAE609DFB7C5(Any p0, Any p1, Any p2)
		{
			invoke<int>(0xB9BDFAE609DFB7C5, p0, p1, p2);
		} // 0xB9BDFAE609DFB7C5 undefined b1207
		static Any N0xF7327ACC7A89AEF1(Any p0, Any p1, Any p2)
		{
			return invoke<Any>(0xF7327ACC7A89AEF1, p0, p1, p2);
		} // 0xF7327ACC7A89AEF1 undefined b1207
		// AI_ATTITUDE_NEUTRAL = 0,
		// AI_ATTITUDE_FRIENDLY,
		// AI_ATTITUDE_WARY,
		// AI_ATTITUDE_COMBATIVE,
		// AI_ATTITUDE_NEVER_MET
		static int GET_PED_ATTITUDE_(Ped ped, Player player)
		{
			return invoke<int>(0x7CC2186C32D3540A, ped, player);
		} // 0x7CC2186C32D3540A undefined b1207
		static BOOL N0x1E017404784AA6A3(Ped ped, Hash p1)
		{
			return invoke<BOOL>(0x1E017404784AA6A3, ped, p1);
		} // 0x1E017404784AA6A3 undefined b1207
		static void N0x2B4CE170DE09F346(Ped ped, Hash p1)
		{
			invoke<int>(0x2B4CE170DE09F346, ped, p1);
		} // 0x2B4CE170DE09F346 undefined b1207
		static Any N0x7C8AA850617651D9(Any p0, Any p1)
		{
			return invoke<Any>(0x7C8AA850617651D9, p0, p1);
		} // 0x7C8AA850617651D9 undefined b1207
		// If targetPed is set to 0 the ped motivationState affects everyone
		static float GET_PED_MOTIVATION_(Ped ped, int motivationState, Ped targetPed)
		{
			return invoke<float>(0x42688E94E96FD9B4, ped, motivationState, targetPed);
		} // 0x42688E94E96FD9B4 undefined b1207
		// enum eMotivationState
		// {
		// 	TOILET_STATE,
		// 	FEAR_STATE,
		// 	ANGRY_STATE,
		// 	AGITATION_STATE,
		// 	HUNGRY_STATE,
		// 	TIRED_STATE,
		// 	SAD_STATE,
		// 	BRAVE_STATE,
		// 	OFFER_ITEM_STATE,
		// 	SUSPICION,
		// 	DRUNK_STATE
		// };
		//
		// If targetPed is set to 0 the ped motivationState affects everyone
		static void SET_PED_MOTIVATION_(Ped ped, int motivationState, float threshold, Ped targetPed)
		{
			invoke<int>(0x06D26A96CA1BCA75, ped, motivationState, threshold, targetPed);
		} // 0x06D26A96CA1BCA75 undefined b1207
		static void N0x23BDE06596A22CEC(Ped ped, int p1, float p2, Any p3)
		{
			invoke<int>(0x23BDE06596A22CEC, ped, p1, p2, p3);
		} // 0x23BDE06596A22CEC undefined b1207
		static void N0xCDFB8C04D4C95D9B(Any p0, Any p1, Any p2, Any p3)
		{
			invoke<int>(0xCDFB8C04D4C95D9B, p0, p1, p2, p3);
		} // 0xCDFB8C04D4C95D9B undefined b1207
		// motivationState: see _SET_PED_MOTIVATION
		static BOOL GET_IS_PED_MOTIVATION_STATE_ENABLED_(Ped ped, int motivationState)
		{
			return invoke<BOOL>(0x33FA048675821DA7, ped, motivationState);
		} // 0x33FA048675821DA7 undefined b1207
		// motivationState: see _SET_PED_MOTIVATION
		static void SET_PED_MOTIVATION_STATE_OVERRIDE_(Ped ped, int motivationState, BOOL enabled)
		{
			invoke<int>(0x2EB75FB86C41F026, ped, motivationState, enabled);
		} // 0x2EB75FB86C41F026 undefined b1207
		// The higher the modifier, the slower the motivationState value will decrease
		static void SET_PED_MOTIVATION_MODIFIER_(Ped ped, int motivationState, float modifier)
		{
			invoke<int>(0xA1EB5D029E0191D3, ped, motivationState, modifier);
		} // 0xA1EB5D029E0191D3 undefined b1207
		static void N0xFD8E853F0BC2E942(Any p0, Any p1)
		{
			invoke<int>(0xFD8E853F0BC2E942, p0, p1);
		} // 0xFD8E853F0BC2E942 undefined b1207
		// 0.0 - 1.0
		// Modifies the "scent line" on the ped's body when using Eagle Eye.
		static void SET_PED_SCENT_(Ped ped, float scent)
		{
			invoke<int>(0x01B21B81865E2A1F, ped, scent);
		} // 0x01B21B81865E2A1F undefined b1207
		static void SET_PED_LADDER_MOVEMENT_SPEED_MODIFIER_(Ped ped, float p1)
		{
			invoke<int>(0x05CE6AF4DF071D23, ped, p1);
		} // 0x05CE6AF4DF071D23 undefined b1207
		static void RESET_PED_LADDER_MOVEMENT_SPEED_MODIFIER_(Ped ped)
		{
			invoke<int>(0x801917E7D7BCE418, ped);
		} // 0x801917E7D7BCE418 undefined b1207
		static void N0xC6C4E15CF7D52FEA(Any p0, Any p1)
		{
			invoke<int>(0xC6C4E15CF7D52FEA, p0, p1);
		} // 0xC6C4E15CF7D52FEA undefined b1207
		// _SET_PED_S* - _SET_PED_T*
		static void SET_PED_VOICE_VOLUME_(Ped ped, float volume)
		{
			invoke<int>(0xD05AD61F242C626B, ped, volume);
		} // 0xD05AD61F242C626B undefined b1207
		static void N0x0F967019CC853BCC(Any p0, Any p1)
		{
			invoke<int>(0x0F967019CC853BCC, p0, p1);
		} // 0x0F967019CC853BCC undefined b1207
		static BOOL IS_PED_DRAGGING_(Ped ped)
		{
			return invoke<BOOL>(0x226CF9B159E38F42, ped);
		} // 0x226CF9B159E38F42 undefined b1207
		static BOOL IS_PED_BEING_DRAGGED(Ped ped)
		{
			return invoke<BOOL>(0xEF3A8772F085B4AA, ped);
		} // 0xEF3A8772F085B4AA undefined b1207
		static void N0x070A3841406C43D5(Any p0, Any p1)
		{
			invoke<int>(0x070A3841406C43D5, p0, p1);
		} // 0x070A3841406C43D5 undefined b1207
		static BOOL ADD_PED_STAY_OUT_VOLUME_(Ped ped, Volume volume)
		{
			return invoke<BOOL>(0xE9B168527B337BF0, ped, volume);
		} // 0xE9B168527B337BF0 undefined b1207
		static BOOL REMOVE_PED_STAY_OUT_VOLUME_(Ped ped, Volume volume)
		{
			return invoke<BOOL>(0x0CAB404CD2DB41F5, ped, volume);
		} // 0x0CAB404CD2DB41F5 undefined b1207
		static void N0x9E66708B2B41F14A(Any p0, Any p1)
		{
			invoke<int>(0x9E66708B2B41F14A, p0, p1);
		} // 0x9E66708B2B41F14A undefined b1207
		static void N0xF634E2892220EF34(Ped ped, Any p1)
		{
			invoke<int>(0xF634E2892220EF34, ped, p1);
		} // 0xF634E2892220EF34 undefined b1207
		static void N0xAAC0EE3B4999ABB5(Ped ped, Ped targetPed)
		{
			invoke<int>(0xAAC0EE3B4999ABB5, ped, targetPed);
		} // 0xAAC0EE3B4999ABB5 undefined b1207
		static Entity GET_PED_MOTION_FOCUS_ENTITY(Ped ped)
		{
			return invoke<Entity>(0x243E1B4607040057, ped);
		} // 0x243E1B4607040057 undefined b1207
		// Sets MetaPedExpression at index specified. Morphs components, such as changing body size or facial features.
		//
		// Note: You have to update the ped's variation (using 0xCC8CA3E88256E58F) after calling this native
		//
		// index = MetaPedExpression IDs
		// List of face features: https://pastebin.com/9jb88FXW
		// Full list of MetaPedExpressions: https://pastebin.com/Ld76cAn7
		// value: -1.0 to 1.0 (values beyond this likely won't sync to other clients)
		//
		// This native also allows you to change a horse's gender.
		//
		// Old name: _SET_PED_FACE_FEATURE
		static void SET_CHAR_EXPRESSION_(Ped ped, int index, float value)
		{
			invoke<int>(0x5653AB26C82938CF, ped, index, value);
		} // 0x5653AB26C82938CF undefined b1207
		// Gets MetaPedExpression at index specified
		//
		// For index, see: _SET_CHAR_EXPRESSION
		//
		// Old name: _GET_PED_FACE_FEATURE
		static float GET_CHAR_EXPRESSION_(Ped ped, int index)
		{
			return invoke<float>(0xFD1BA1EEF7985BB8, ped, index);
		} // 0xFD1BA1EEF7985BB8 undefined b1207
		static void N0x5BB04BC74A474B47(Any p0, Any p1)
		{
			invoke<int>(0x5BB04BC74A474B47, p0, p1);
		} // 0x5BB04BC74A474B47 undefined b1207
		static void N0x9078FB0557364099(Any p0)
		{
			invoke<int>(0x9078FB0557364099, p0);
		} // 0x9078FB0557364099 undefined b1207
		static BOOL IS_PED_FALLING_OVER(Ped ped)
		{
			return invoke<BOOL>(0x3E592D0486DEC0F6, ped);
		} // 0x3E592D0486DEC0F6 undefined b1207
		static BOOL HAS_PED_BEEN_SHOVED_RECENTLY_(Ped ped, int ms)
		{
			return invoke<BOOL>(0x29FCE825613FEFCA, ped, ms);
		} // 0x29FCE825613FEFCA undefined b1207
		static Ped GET_PED_TRANQUILIZER_(Ped ped)
		{
			return invoke<Ped>(0x65C75FDCCAC86464, ped);
		} // 0x65C75FDCCAC86464 undefined b1355
		static void N0x0D497AA69059FE40(Any p0, Any p1)
		{
			invoke<int>(0x0D497AA69059FE40, p0, p1);
		} // 0x0D497AA69059FE40 undefined b1207
		static void N0xD7D2F45C56A4F4DF(Any p0, Any p1, Any p2)
		{
			invoke<int>(0xD7D2F45C56A4F4DF, p0, p1, p2);
		} // 0xD7D2F45C56A4F4DF undefined b1207
		// The higher the multiplier the less the engine renders culls (https://docs.unity3d.com/Manual/OcclusionCulling.html)
		static void SET_PED_CULL_RANGE_(Ped ped, float p1, float p2)
		{
			invoke<int>(0x8AC1D721B2097B6E, ped, p1, p2);
		} // 0x8AC1D721B2097B6E undefined b1207
		static void N0x1D23D3F70606D788(Any p0, Any p1)
		{
			invoke<int>(0x1D23D3F70606D788, p0, p1);
		} // 0x1D23D3F70606D788 undefined b1207
		// enum eMetaPedType
		// {
		// 	MPT_MALE,
		// 	MPT_FEMALE,
		// 	MPT_TEEN,
		// 	MPT_ANIMAL,
		// 	MPT_NONE
		// };
		static int GET_META_PED_TYPE_(Ped ped)
		{
			return invoke<int>(0xEC9A1261BF0CE510, ped);
		} // 0xEC9A1261BF0CE510 undefined b1207
		static BOOL IS_META_PED_USING_COMPONENT_(Ped ped, Hash component)
		{
			return invoke<BOOL>(0xFB4891BD7578CDC1, ped, component);
		} // 0xFB4891BD7578CDC1 undefined b1207
		// _IS_PED_M* - _IS_PED_O*
		static BOOL N0xBD0E4F52F6D95242(Ped ped)
		{
			return invoke<BOOL>(0xBD0E4F52F6D95242, ped);
		} // 0xBD0E4F52F6D95242 undefined b1207
		static BOOL IS_PED_CHILD_(Ped ped)
		{
			return invoke<BOOL>(0x137772000DAF42C5, ped);
		} // 0x137772000DAF42C5 undefined b1207
		static void N0xFFA1594703ED27CA(Ped ped, int p1)
		{
			invoke<int>(0xFFA1594703ED27CA, ped, p1);
		} // 0xFFA1594703ED27CA undefined b1207
		// Use to apply metaped player components
		// Replaces asset, alternatively you can remove assets using REMOVE_TAG_FROM_META_PED
		static void SET_META_PED_TAG_(Ped ped, Hash drawable, Hash albedo, Hash normal, Hash material, Hash palette, int tint0, int tint1, int tint2)
		{
			invoke<int>(0xBC6DF00D7A4A6819, ped, drawable, albedo, normal, material, palette, tint0, tint1, tint2);
		} // 0xBC6DF00D7A4A6819 undefined b1207
		static void REMOVE_TAG_FROM_META_PED(Ped ped, Hash component, int p2)
		{
			invoke<int>(0xD710A5007C2AC539, ped, component, p2);
		} // 0xD710A5007C2AC539 undefined b1207
		static void N0xA2B8E47442C76CEC(Any p0, Any p1)
		{
			invoke<int>(0xA2B8E47442C76CEC, p0, p1);
		} // 0xA2B8E47442C76CEC undefined b1207
		// Works similar to 0x90403E8107B60E81 (_GET_NUM_COMPONENTS_IN_PED) but is used to get category hashes instead
		static int GET_NUM_COMPONENT_CATEGORIES_IN_PED_(Ped ped)
		{
			return invoke<int>(0xA622E66EEE92A08D, ped);
		} // 0xA622E66EEE92A08D undefined b1207
		// Returns category hash that each ped component has. Hash examples: MASKS, HATS, HEADS, HORSE_MANES
		static Hash GET_PED_COMPONENT_CATEGORY_BY_INDEX_(Ped ped, int index)
		{
			return invoke<Hash>(0xCCB97B51893C662F, ped, index);
		} // 0xCCB97B51893C662F undefined b1207
		static int GET_NUM_COMPONENTS_IN_PED_(Ped ped)
		{
			return invoke<int>(0x90403E8107B60E81, ped);
		} // 0x90403E8107B60E81 undefined b1207
		static Any N0x9B90842304C938A7(Any p0, Any p1, Any p2)
		{
			return invoke<Any>(0x9B90842304C938A7, p0, p1, p2);
		} // 0x9B90842304C938A7 undefined b1207
		// Update variation on ped, needed after first creation, or when component or texture/overlay is changed
		static void UPDATE_PED_VARIATION_(Ped ped, BOOL p1, BOOL p2, BOOL p3, BOOL p4, BOOL p5)
		{
			invoke<int>(0xCC8CA3E88256E58F, ped, p1, p2, p3, p4, p5);
		} // 0xCC8CA3E88256E58F undefined b1207
		static void N0xCB1A3864C524F784(Any p0, Any p1)
		{
			invoke<int>(0xCB1A3864C524F784, p0, p1);
		} // 0xCB1A3864C524F784 undefined b1207
		static void N0xFA0D206B489A6846(Any p0, Any p1, Any p2, Any p3, Any p4)
		{
			invoke<int>(0xFA0D206B489A6846, p0, p1, p2, p3, p4);
		} // 0xFA0D206B489A6846 undefined b1207
		static Any N0xA4AC05B1A364EBC5(Any p0, Any p1, Any p2)
		{
			return invoke<Any>(0xA4AC05B1A364EBC5, p0, p1, p2);
		} // 0xA4AC05B1A364EBC5 undefined b1207
		static void N0x1298B3D8E4C2409F(Any p0)
		{
			invoke<int>(0x1298B3D8E4C2409F, p0);
		} // 0x1298B3D8E4C2409F undefined b1207
		static Any N0xA274F51EF7E34B95(Any p0, Any p1)
		{
			return invoke<Any>(0xA274F51EF7E34B95, p0, p1);
		} // 0xA274F51EF7E34B95 undefined b1207
		static Any N0xC2EF407645BEECDC(Any p0)
		{
			return invoke<Any>(0xC2EF407645BEECDC, p0);
		} // 0xC2EF407645BEECDC undefined b1207
		// Note: you have to update your ped's variation after calling (using 0xCC8CA3E88256E58F)
		//
		// Body Types:
		// MPCREATOR_NEUTRAL
		// MPCREATOR_SKINNY
		// MPCREATOR_SKINNY_MUSCULAR
		// MPCREATOR_HEAVY
		// MPCREATOR_HEAVY_MUSCULAR
		//
		// eBodyWeightOutfit (pedattributes.ymt):
		// -2045421226 (smallest)
		// -1745814259
		// -325933489
		// -1065791927
		// -844699484
		// -1273449080
		// 927185840
		// 149872391
		// 399015098
		// -644349862
		// 1745919061 (default)
		// 1004225511
		// 1278600348
		// 502499352
		// -2093198664
		// -1837436619
		// 1736416063
		// 2040610690
		// -1173634986
		// -867801909
		// 1960266524 (biggest)
		//
		// https://github.com/femga/rdr3_discoveries/blob/master/peds_customization/ped_outfits.lua
		//
		// Alt name: _EQUIP_META_PED_OUTFIT_COMPONENT
		static void EQUIP_META_PED_OUTFIT_(Ped ped, Hash hash)
		{
			invoke<int>(0x1902C4CFCC5BE57C, ped, hash);
		} // 0x1902C4CFCC5BE57C undefined b1207
		static void N0xFA742B82D093D848(Any p0, Any p1, Any p2)
		{
			invoke<int>(0xFA742B82D093D848, p0, p1, p2);
		} // 0xFA742B82D093D848 undefined b1207
		static Hash GET_PED_META_OUTFIT_HASH_(Ped ped)
		{
			return invoke<Hash>(0x30569F348D126A5A, ped);
		} // 0x30569F348D126A5A undefined b1207
		static void N0xA2F8B3B5FEDFC100(Any p0, Any p1)
		{
			invoke<int>(0xA2F8B3B5FEDFC100, p0, p1);
		} // 0xA2F8B3B5FEDFC100 undefined b1207
		static void EQUIP_META_PED_SUBOUTFIT_(Ped ped, Hash suboutfit, int p2)
		{
			invoke<int>(0x66FF395445A88A6E, ped, suboutfit, p2);
		} // 0x66FF395445A88A6E undefined b1207
		static BOOL DOES_META_PED_OUTFIT_EXIST_FOR_PED_MODEL_(Hash outfit, Hash model)
		{
			return invoke<BOOL>(0xC0E880B7A441164D, outfit, model);
		} // 0xC0E880B7A441164D undefined b1207
		static BOOL DOES_META_PED_SUBOUTFIT_EXIST_FOR_PED_MODEL_(Hash outfit, Hash suboutfit, Hash model)
		{
			return invoke<BOOL>(0x4FF3C2B4E6A196C1, outfit, suboutfit, model);
		} // 0x4FF3C2B4E6A196C1 undefined b1207
		// Returns p1 value for 0x8E84119A23C16623
		static Any N0x62FDF4E678E40CC6(Entity entity, Any p1)
		{
			return invoke<Any>(0x62FDF4E678E40CC6, entity, p1);
		} // 0x62FDF4E678E40CC6 undefined b1207
		static void RESET_PED_COMPONENTS_(Ped ped)
		{
			invoke<int>(0x0BFA1BD465CDFEFD, ped);
		} // 0x0BFA1BD465CDFEFD undefined b1207
		// _RESET_PED_*
		static void N0x370A973252741AC4(Ped ped, BOOL p1)
		{
			invoke<int>(0x370A973252741AC4, ped, p1);
		} // 0x370A973252741AC4 undefined b1207
		static void SET_RANDOM_OUTFIT_VARIATION_(Ped ped, BOOL p1)
		{
			invoke<int>(0x283978A15512B2FE, ped, p1);
		} // 0x283978A15512B2FE undefined b1207
		static int GET_NUM_META_PED_OUTFITS(Ped ped)
		{
			return invoke<int>(0x10C70A515BC03707, ped);
		} // 0x10C70A515BC03707 undefined b1207
		// Sets the outfit preset for the ped. The presetId is an index which determines its preset outfit. p2 is always false in the scripts.
		// If p2 is true as player, then certain components like facial hair and hair will not be removed.
		// Old name: _SET_PED_OUTFIT_PRESET
		static void EQUIP_META_PED_OUTFIT_PRESET_(Ped ped, int presetId, BOOL p2)
		{
			invoke<int>(0x77FF8D35EEC6BBC4, ped, presetId, p2);
		} // 0x77FF8D35EEC6BBC4 undefined b1207
		// Changes Multiplayer ped face and body type components, they can be stacked
		// Params: p3 = 1
		// Body shape for mp_male from 124 - 128, 110 - 115 for mp_female
		// Face shape for mp_male from 110 - 123, 96 - 109 for mp_female
		// Cloth type for mp_male from 0 - 109, 0 - 95 for mp_female
		static void EQUIP_META_PED_OUTFIT_EXTRA_(Ped ped, int component, Any p2, Any p3)
		{
			invoke<int>(0xA5BAE410B03E7371, ped, component, p2, p3);
		} // 0xA5BAE410B03E7371 undefined b1207
		// Used in script function HORSE_IS_META_PED_OUTFIT_SADDLE_EQUIPPED
		static BOOL IS_META_PED_OUTFIT_EQUIPPED_(Ped ped, Hash outfit)
		{
			return invoke<BOOL>(0x98082246107A6ACF, ped, outfit);
		} // 0x98082246107A6ACF undefined b1207
		static void N0x851966E1E35AF491(Any p0, Any p1)
		{
			invoke<int>(0x851966E1E35AF491, p0, p1);
		} // 0x851966E1E35AF491 undefined b1207
		// Used in script function METAPED_CLOTHING__XML__APPLY_OUTFIT_TINTS_TO_PED
		static void SET_TEXTURE_OUTFIT_TINTS_(Ped ped, Hash componentCategory, Hash palette, int tint0, int tint1, int tint2)
		{
			invoke<int>(0x4EFC1F8FF1AD94DE, ped, componentCategory, palette, tint0, tint1, tint2);
		} // 0x4EFC1F8FF1AD94DE undefined b1207
		// Returns requestId
		// Params: p1 = 1 in R* Scripts (Used in SP only)
		static int REQUEST_META_PED_(Hash model, int p1)
		{
			return invoke<int>(0xF97C34C33487D569, model, p1);
		} // 0xF97C34C33487D569 undefined b1207
		static BOOL HAS_META_PED_REQUEST_LOADED_(int requestId)
		{
			return invoke<BOOL>(0xC0940AC858C1E126, requestId);
		} // 0xC0940AC858C1E126 undefined b1207
		static BOOL IS_META_PED_REQUEST_VALID_(int requestId)
		{
			return invoke<BOOL>(0x43E4DA469541A9C9, requestId);
		} // 0x43E4DA469541A9C9 undefined b1207
		// Only used in SP scripts, for example odriscolls1: BOOLS: true, true, true, false, false
		static Ped CREATE_META_PED_(int requestId, float x, float y, float z, float heading, BOOL p5, BOOL p6, BOOL p7, BOOL p8, BOOL p9)
		{
			return invoke<Ped>(0x0BCD4091C8EABA42, requestId, x, y, z, heading, p5, p6, p7, p8, p9);
		} // 0x0BCD4091C8EABA42 undefined b1207
		static void RELEASE_META_PED_REQUEST_(int requestId)
		{
			invoke<int>(0x3972F78A78B5D9DF, requestId);
		} // 0x3972F78A78B5D9DF undefined b1207
		// https://github.com/femga/rdr3_discoveries/blob/master/clothes/metaped_outfits.lua
		// Returns requestId, to be used with 0x74F512E29CB717E2
		static int REQUEST_META_PED_OUTFIT_(Hash model, Hash outfit)
		{
			return invoke<int>(0x13154A76CE0CF9AB, model, outfit);
		} // 0x13154A76CE0CF9AB undefined b1207
		static Any N0x27E8A84C12B0B7D1(Any p0, Any p1, Any p2)
		{
			return invoke<Any>(0x27E8A84C12B0B7D1, p0, p1, p2);
		} // 0x27E8A84C12B0B7D1 undefined b1207
		static Any N0x273915CE30780986(Any p0, Any p1)
		{
			return invoke<Any>(0x273915CE30780986, p0, p1);
		} // 0x273915CE30780986 undefined b1207
		static void RELEASE_META_PED_OUTFIT_REQUEST_(int requestId)
		{
			invoke<int>(0x4592B8B9B0EF5F48, requestId);
		} // 0x4592B8B9B0EF5F48 undefined b1207
		// Used for script function PROCESS_PLAYER_HAT_EVENT
		// Returns requestId to be used with 0x13E7320C762F0477
		static int N0x3FCBB5FCFD968698(Hash drawable, Hash albedo, Hash normal, Hash material, Any p4)
		{
			return invoke<int>(0x3FCBB5FCFD968698, drawable, albedo, normal, material, p4);
		} // 0x3FCBB5FCFD968698 undefined b1207
		// Returns requestId
		// Params: p1 = 1 in R* Scripts
		static int REQUEST_META_PED_ASSET_BUNDLE_(Hash asset, int p1)
		{
			return invoke<int>(0x91FE941F9FCFB702, asset, p1);
		} // 0x91FE941F9FCFB702 undefined b1207
		static Any REQUEST_META_PED_COMPONENT_(int metaPedType, Any p1, int p2, int p3, int p4)
		{
			return invoke<Any>(0xF6D9E1F3560CBF8E, metaPedType, p1, p2, p3, p4);
		} // 0xF6D9E1F3560CBF8E undefined b1207
		static void RELEASE_META_PED_ASSET_REQUEST_(int requestId)
		{
			invoke<int>(0x13E7320C762F0477, requestId);
		} // 0x13E7320C762F0477 undefined b1207
		static BOOL HAS_META_PED_ASSET_LOADED_(int requestId)
		{
			return invoke<BOOL>(0xB0B2C6D170B0E8E5, requestId);
		} // 0xB0B2C6D170B0E8E5 undefined b1207
		static BOOL IS_META_PED_ASSET_VALID_(int requestId)
		{
			return invoke<BOOL>(0x93FFD92F05EC32FD, requestId);
		} // 0x93FFD92F05EC32FD undefined b1207
		// Creates prop from metaped asset bundle
		// https://github.com/femga/rdr3_discoveries/blob/master/objects/metaped_asset_bundles_list.lua
		// Creates a pickup-able metaped component. asset doesn't seems to be related to component hashes. Hash example : 0xD20354AB (https ://i.imgur.com/dzHkcDb.png)
		static Entity CREATE_META_PED_ASSET_(Hash asset, float posX, float posY, float posZ, float rotX, float rotY, float rotZ, BOOL p7, BOOL p8, BOOL p9)
		{
			return invoke<Entity>(0x9641A9A20310F6B8, asset, posX, posY, posZ, rotX, rotY, rotZ, p7, p8, p9);
		} // 0x9641A9A20310F6B8 undefined b1207
		static BOOL HAS_META_PED_OUTFIT_LOADED_(int requestId)
		{
			return invoke<BOOL>(0x610438375E5D1801, requestId);
		} // 0x610438375E5D1801 undefined b1207
		static BOOL IS_META_PED_OUTFIT_REQUEST_VALID_(int requestId)
		{
			return invoke<BOOL>(0xB25E57FC8E37114D, requestId);
		} // 0xB25E57FC8E37114D undefined b1207
		// Creates metaped from ped outfit requestId. See _REQUEST_METAPED_OUTFIT
		static Ped CREATE_META_PED_OUTFIT_PED_(int requestId, float x, float y, float z, float heading, BOOL p5, BOOL p6, BOOL p7, BOOL p8)
		{
			return invoke<Ped>(0xEAF682A14F8E5F53, requestId, x, y, z, heading, p5, p6, p7, p8);
		} // 0xEAF682A14F8E5F53 undefined b1207
		// https://github.com/femga/rdr3_discoveries/blob/master/clothes/metaped_outfits.lua
		static BOOL APPLY_PED_META_PED_OUTFIT_(int requestId, Ped ped, BOOL p2, BOOL p3)
		{
			return invoke<BOOL>(0x74F512E29CB717E2, requestId, ped, p2, p3);
		} // 0x74F512E29CB717E2 undefined b1207
		// Sets ped eye redness, weariness: 0.f to 1.f
		static void SET_META_PED_WEARINESS_(Ped ped, float weariness)
		{
			invoke<int>(0x314C5465195F3B30, ped, weariness);
		} // 0x314C5465195F3B30 undefined b1207
		// Used in Script Function MOONSHINE_BAND_CLIENT_PATRON_UPDATE
		static void N0xF47D54B986F0A346(Ped ped, int danceIntensity)
		{
			invoke<int>(0xF47D54B986F0A346, ped, danceIntensity);
		} // 0xF47D54B986F0A346 undefined b1232
		static void N0x3EFED081B4834BA1(Any p0)
		{
			invoke<int>(0x3EFED081B4834BA1, p0);
		} // 0x3EFED081B4834BA1 undefined b1232
		static void N0x0FB1BA7FF73B41E1(Any p0, Any p1, Any p2)
		{
			invoke<int>(0x0FB1BA7FF73B41E1, p0, p1, p2);
		} // 0x0FB1BA7FF73B41E1 undefined b1207
		static Any N0xB292203008EBBAAC(Any p0)
		{
			return invoke<Any>(0xB292203008EBBAAC, p0);
		} // 0xB292203008EBBAAC undefined b1207
		static BOOL N0xD4D403EA031F351C(Ped ped)
		{
			return invoke<BOOL>(0xD4D403EA031F351C, ped);
		} // 0xD4D403EA031F351C undefined b1207
		// Returns peltId
		static int GET_PELT_FROM_HORSE_(Ped horse, int index)
		{
			return invoke<int>(0x0CEEB6F4780B1F2F, horse, index);
		} // 0x0CEEB6F4780B1F2F undefined b1207
		static void SET_PELT_FOR_HORSE_(Ped horse, int peltId)
		{
			invoke<int>(0xA73F50E8796150D5, horse, peltId);
		} // 0xA73F50E8796150D5 undefined b1207
		static void N0xC412AA1C73111FE0(Any p0, Any p1, Any p2, Any p3, Any p4)
		{
			invoke<int>(0xC412AA1C73111FE0, p0, p1, p2, p3, p4);
		} // 0xC412AA1C73111FE0 undefined b1207
		static void CLEAR_PELT_FROM_HORSE_(Ped horse, int peltId)
		{
			invoke<int>(0x627F7F3A0C4C51FF, horse, peltId);
		} // 0x627F7F3A0C4C51FF undefined b1207
		static void SET_PED_LIGHTS_(Ped ped, BOOL toggle)
		{
			invoke<int>(0x13A210949FCBD92B, ped, toggle);
		} // 0x13A210949FCBD92B undefined b1207
		static void N0xD049FDAF089FDDB0(Ped ped, Hash p1, float p2)
		{
			invoke<int>(0xD049FDAF089FDDB0, ped, p1, p2);
		} // 0xD049FDAF089FDDB0 undefined b1207
		static void N0xDD9540E7B1C9714F(Ped ped, Hash p1, float r, float g, float b)
		{
			invoke<int>(0xDD9540E7B1C9714F, ped, p1, r, g, b);
		} // 0xDD9540E7B1C9714F undefined b1207
		static void N0x55546004A244302A(Any p0, Any p1)
		{
			invoke<int>(0x55546004A244302A, p0, p1);
		} // 0x55546004A244302A undefined b1207
		static void SET_HEALTH_RECHARGE_MULTIPLIER_(Ped ped, int multiplier)
		{
			invoke<int>(0xDE1B1907A83A1550, ped, multiplier);
		} // 0xDE1B1907A83A1550 undefined b1207
		static float GET_HEALTH_RECHARGE_MULTIPLIER_(Ped ped)
		{
			return invoke<float>(0x95B8E397B8F4360F, ped);
		} // 0x95B8E397B8F4360F undefined b1207
		static void SET_STAMINA_DEPLETION_MULTIPLIER_(Ped ped, int multiplier)
		{
			invoke<int>(0xEF5A3D2285D8924B, ped, multiplier);
		} // 0xEF5A3D2285D8924B undefined b1207
		static float GET_STAMINA_DEPLETION_MULTIPLIER_(Ped ped)
		{
			return invoke<float>(0x825F6DD559A0895B, ped);
		} // 0x825F6DD559A0895B undefined b1207
		static void SET_STAMINA_RECHARGE_MULTIPLIER_(Ped ped, int multiplier)
		{
			invoke<int>(0x345C9F993A8AB4A4, ped, multiplier);
		} // 0x345C9F993A8AB4A4 undefined b1207
		static float GET_STAMINA_RECHARGE_MULTIPLIER_(Ped ped)
		{
			return invoke<float>(0xE7687EB2F634ABF0, ped);
		} // 0xE7687EB2F634ABF0 undefined b1207
		// Alters entity's stamina by 'amount'. Can be negative (to drain stamina). float amount: -1000.0 - 1000.0
		static BOOL CHANGE_PED_STAMINA_(Ped ped, float amount)
		{
			return invoke<BOOL>(0xC3D4B754C0E86B9E, ped, amount);
		} // 0xC3D4B754C0E86B9E undefined b1207
		static float GET_PED_STAMINA_(Ped ped)
		{
			return invoke<float>(0x775A1CA7893AA8B5, ped);
		} // 0x775A1CA7893AA8B5 undefined b1207
		// Returns stamina normalizedValue / normalizedUnlockedMax
		static float GET_PED_STAMINA_NORMALIZED_(Ped ped)
		{
			return invoke<float>(0x22F2A386D43048A9, ped);
		} // 0x22F2A386D43048A9 undefined b1207
		static float GET_PED_MAX_STAMINA_(Ped ped)
		{
			return invoke<float>(0xCB42AFE2B613EE55, ped);
		} // 0xCB42AFE2B613EE55 undefined b1207
		// _RESET_PED_*
		static void N0x36513AFFC703C60D(Any p0)
		{
			invoke<int>(0x36513AFFC703C60D, p0);
		} // 0x36513AFFC703C60D undefined b1207
		// 0.0 <= stamina <= 100.0
		static void RESTORE_PED_STAMINA_(Ped ped, float stamina)
		{
			invoke<int>(0x675680D089BFA21F, ped, stamina);
		} // 0x675680D089BFA21F undefined b1207
		static int N0xFC3B580C4380B5B7(Ped ped)
		{
			return invoke<int>(0xFC3B580C4380B5B7, ped);
		} // 0xFC3B580C4380B5B7 undefined b1207
		static void N0xEA8763E505AFD49A(Any p0, Any p1, Any p2)
		{
			invoke<int>(0xEA8763E505AFD49A, p0, p1, p2);
		} // 0xEA8763E505AFD49A undefined b1207
		static void N0xE4EF4382E22C780C(Any p0)
		{
			invoke<int>(0xE4EF4382E22C780C, p0);
		} // 0xE4EF4382E22C780C undefined b1207
		static void N0xD61FCF9FCFD515B7(Any p0, Any p1, Any p2)
		{
			invoke<int>(0xD61FCF9FCFD515B7, p0, p1, p2);
		} // 0xD61FCF9FCFD515B7 undefined b1207
		static void N0x8D9DB115FBA8E23D(Any p0)
		{
			invoke<int>(0x8D9DB115FBA8E23D, p0);
		} // 0x8D9DB115FBA8E23D undefined b1207
		static Any GET_NUM_RESERVED_HEALTH_(Ped ped)
		{
			return invoke<Any>(0x16F2C8C084AB2092, ped);
		} // 0x16F2C8C084AB2092 undefined b1207
		static Any N0xD97BC27AC039F681(Any p0, Any p1, Any p2, Any p3)
		{
			return invoke<Any>(0xD97BC27AC039F681, p0, p1, p2, p3);
		} // 0xD97BC27AC039F681 undefined b1311
		static Any N0xF6A8C4B4A11AE89C(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5)
		{
			return invoke<Any>(0xF6A8C4B4A11AE89C, p0, p1, p2, p3, p4, p5);
		} // 0xF6A8C4B4A11AE89C undefined b1207
		static void N0xE4C95E0AE31C6512(Ped ped, Any p1)
		{
			invoke<int>(0xE4C95E0AE31C6512, ped, p1);
		} // 0xE4C95E0AE31C6512 undefined b1207
		static Object GET_PED_LAST_DROPPED_HAT_(Ped ped)
		{
			return invoke<Object>(0x1F714E7A9DADFC42, ped);
		} // 0x1F714E7A9DADFC42 undefined b1207
		// Related to ped hat
		// _SET_PED_LA* - _SET_PED_LE*
		static void N0x5D4CD22A8C82A81A(Ped ped, BOOL p1)
		{
			invoke<int>(0x5D4CD22A8C82A81A, ped, p1);
		} // 0x5D4CD22A8C82A81A undefined b1207
		static void N0xBF567DF2BEF211A6(Any p0, Any p1)
		{
			invoke<int>(0xBF567DF2BEF211A6, p0, p1);
		} // 0xBF567DF2BEF211A6 undefined b1207
		// Creates a handle to an instance of "CScriptResource_GravityWell", this system forces local ped to target specified position when moving, however player still can interrupt this.
		// Can be useful to "point" player at some specific position.
		// Only works while on-foot.
		//
		// _CREATE_[P-Z]
		static int CREATE_GRAVITY_WELL_(float xPos, float yPos, float zPos, float heading, float radius, float p5, float p6, float p7, BOOL stopAtDestination)
		{
			return invoke<int>(0x4F5EBE70081E5A20, xPos, yPos, zPos, heading, radius, p5, p6, p7, stopAtDestination);
		} // 0x4F5EBE70081E5A20 undefined b1207
		// Removes gravity well by handle returned from 0x4F5EBE70081E5A20
		static void REMOVE_GRAVITY_WELL_(int handle)
		{
			invoke<int>(0x87247BC60B60BED8, handle);
		} // 0x87247BC60B60BED8 undefined b1207
		static BOOL IS_PED_INTIMIDATED_(Ped ped)
		{
			return invoke<BOOL>(0x57779B55B83E2BEA, ped);
		} // 0x57779B55B83E2BEA undefined b1207
		// _IS_PED_H* - _IS_PED_I*
		static BOOL N0x7EE3A8660F38797E(Ped ped)
		{
			return invoke<BOOL>(0x7EE3A8660F38797E, ped);
		} // 0x7EE3A8660F38797E undefined b1207
		static Any N0xA180FBD502A03125(Any p0, Any p1, Any p2)
		{
			return invoke<Any>(0xA180FBD502A03125, p0, p1, p2);
		} // 0xA180FBD502A03125 undefined b1207
		// Creates a texture override data for ped and returns it's index.
		// So you can replace any texture of any ped's component.
		// Also, you can add overlays on it, such as aging, lipstick and more.
		// Textures can be reused by multiple peds at once.
		// You can keep only 32 textures at once(including other peds).
		//
		// https://github.com/femga/rdr3_discoveries/blob/master/clothes/change_overlays_script.lua
		// materialHash: https://github.com/femga/rdr3_discoveries/blob/master/clothes/cloth_drawable_albedo_normal_material_TEMPORARY.lua
		static int REQUEST_TEXTURE_(Hash albedoHash, Hash normalHash, Hash materialHash)
		{
			return invoke<int>(0xC5E7204F322E49EB, albedoHash, normalHash, materialHash);
		} // 0xC5E7204F322E49EB undefined b1207
		static void APPLY_TEXTURE_ON_PED_(Ped ped, Hash componentHash, int textureId)
		{
			invoke<int>(0x0B46E25761519058, ped, componentHash, textureId);
		} // 0x0B46E25761519058 undefined b1207
		// Removes a texture created by 0xC5E7204F322E49EB.
		static void RELEASE_TEXTURE_(int textureId)
		{
			invoke<int>(0x6BEFAA907B076859, textureId);
		} // 0x6BEFAA907B076859 undefined b1207
		// Should be called at least once for any new texture override.
		// Otherwise component textures will be just black.
		// Also needs to be called for updating any ped overlays to apply the changes.
		static void UPDATE_PED_TEXTURE_(int textureId)
		{
			invoke<int>(0x92DAABA2C1C10B0E, textureId);
		} // 0x92DAABA2C1C10B0E undefined b1207
		// Removes every texture layer but the base layer
		// Clearing texture's data: setting params to default values, but keep overlays.
		static void RESET_PED_TEXTURE_(int textureId)
		{
			invoke<int>(0x8472A1789478F82F, textureId);
		} // 0x8472A1789478F82F undefined b1207
		static BOOL IS_TEXTURE_VALID_(int textureId)
		{
			return invoke<BOOL>(0x31DC8D3F216D8509, textureId);
		} // 0x31DC8D3F216D8509 undefined b1207
		// Creates ped overlay in texture override data and returns it's index.
		// This index are used for further overlay editing.
		//
		// albedoHash: a hash of overlay's albedo texture
		// colorType: a color type(from 0 to 2). 0 is used for overlays with RGB colors usually.
		static int ADD_TEXTURE_LAYER_(int textureId, Hash albedoHash, Hash normalHash, Hash materialHash, int blendType, float texAlpha, int sheetGridIndex)
		{
			return invoke<int>(0x86BB5FF45F193A02, textureId, albedoHash, normalHash, materialHash, blendType, texAlpha, sheetGridIndex);
		} // 0x86BB5FF45F193A02 undefined b1207
		static void REMOVE_PED_OVERLAY_(int textureId, int overlayId)
		{
			invoke<int>(0x96C349DE04C49011, textureId, overlayId);
		} // 0x96C349DE04C49011 undefined b1207
		static void SET_TEXTURE_LAYER_SHEET_GRID_INDEX_(int textureId, int layerId, int sheetGridIndex)
		{
			invoke<int>(0x3329AAE2882FC8E4, textureId, layerId, sheetGridIndex);
		} // 0x3329AAE2882FC8E4 undefined b1207
		static void SET_TEXTURE_LAYER_ALPHA_(int textureId, int layerId, float texAlpha)
		{
			invoke<int>(0x6C76BC24F8BB709A, textureId, layerId, texAlpha);
		} // 0x6C76BC24F8BB709A undefined b1207
		static void SET_TEXTURE_LAYER_ROUGHNESS_(int textureId, int layerId, float texRough)
		{
			invoke<int>(0x057C4F092E2298BE, textureId, layerId, texRough);
		} // 0x057C4F092E2298BE undefined b1207
		// paletteHash: https://raw.githubusercontent.com/femga/rdr3_discoveries/master/clothes/cloth_color_palletes.lua
		static void SET_TEXTURE_LAYER_PALLETE_(int textureId, int layerId, Hash paletteHash)
		{
			invoke<int>(0x1ED8588524AC9BE1, textureId, layerId, paletteHash);
		} // 0x1ED8588524AC9BE1 undefined b1207
		// Seem color is not RGB or HSV
		static void SET_TEXTURE_LAYER_TINT_(int textureId, int layerId, int tint0, int tint1, int tint2)
		{
			invoke<int>(0x2DF59FFE6FFD6044, textureId, layerId, tint0, tint1, tint2);
		} // 0x2DF59FFE6FFD6044 undefined b1207
		static void SET_TEXTURE_LAYER_MOD_(int textureId, int layerId, Hash modTextureHash, float modAlpha, int modChannel)
		{
			invoke<int>(0xF2EA041F1146D75B, textureId, layerId, modTextureHash, modAlpha, modChannel);
		} // 0xF2EA041F1146D75B undefined b1207
		static void SET_TEXTURE_LAYER_TEXTURE_MAP_(int textureId, int layerId, Hash albedoHash, Hash normalHash, Hash materialHash)
		{
			invoke<int>(0x253A63B5BADBC398, textureId, layerId, albedoHash, normalHash, materialHash);
		} // 0x253A63B5BADBC398 undefined b1207
		// Removes every texture layer
		// Old Name: _RESET_PED_TEXTURE_2
		static void CLEAR_PED_TEXTURE_(int textureId)
		{
			invoke<int>(0xB63B9178D0F58D82, textureId);
		} // 0xB63B9178D0F58D82 undefined b1207
		// Not implemented.
		static void N0xC991EF46FE323867(Ped ped, Any p1)
		{
			invoke<int>(0xC991EF46FE323867, ped, p1);
		} // 0xC991EF46FE323867 undefined b1207
		static void N0x1F8215D0E446F593(Any p0, Any p1, Any p2)
		{
			invoke<int>(0x1F8215D0E446F593, p0, p1, p2);
		} // 0x1F8215D0E446F593 undefined b1207
		static BOOL IS_LOCATION_SPAWN_SAFE(Ped ped, float p1)
		{
			return invoke<BOOL>(0xFB1E7998B8595825, ped, p1);
		} // 0xFB1E7998B8595825 undefined b1207
		static void N0x53BA7D96B9A421D9(Any p0, Any p1)
		{
			invoke<int>(0x53BA7D96B9A421D9, p0, p1);
		} // 0x53BA7D96B9A421D9 undefined b1207
		static void N0x96C7B659854DE629(Any p0, Any p1)
		{
			invoke<int>(0x96C7B659854DE629, p0, p1);
		} // 0x96C7B659854DE629 undefined b1207
		// -1 - HORSE_ASSIST__NO_CHANGE
		//  0 - HORSE_ASSIST__MANUAL
		//  1 - HORSE_ASSIST__SEMIASSIST
		//  2 - HORSE_ASSIST__FULLASSIST
		static void SET_HORSE_AVOIDANCE_LEVEL(Ped horse, int avoidanceLevel)
		{
			invoke<int>(0xDDCF6FEA5D7ACC17, horse, avoidanceLevel);
		} // 0xDDCF6FEA5D7ACC17 undefined b1207
		static void RESET_HORSE_AVOIDANCE_LEVEL_TO_DEFAULT(Ped horse)
		{
			invoke<int>(0x2A5AFD2B8381A6E1, horse);
		} // 0x2A5AFD2B8381A6E1 undefined b1207
		// Doesn't actually return anything.
		static Any SET_PED_USE_HORSE_MAP_COLLISION_(Ped ped, BOOL toggle)
		{
			return invoke<Any>(0xEB72453B6F5B45B0, ped, toggle);
		} // 0xEB72453B6F5B45B0 undefined b1232
		static void N0x5B73975B4F12F7F3(Any p0, Any p1, Any p2, Any p3, Any p4)
		{
			invoke<int>(0x5B73975B4F12F7F3, p0, p1, p2, p3, p4);
		} // 0x5B73975B4F12F7F3 undefined b1207
		// This is a way to get what drawables a ped has equipped
		// Example: you are able to tell if the ped has the drawable PLAYER_ZERO_HAT_017 attached
		// Note: this works with non shop components, direct .ydd files.
		static BOOL GET_META_PED_ASSET_GUIDS(Ped ped, int index, Hash* drawable, Hash* albedo, Hash* normal, Hash* material)
		{
			return invoke<BOOL>(0xA9C28516A6DC9D56, ped, index, drawable, albedo, normal, material);
		} // 0xA9C28516A6DC9D56 undefined b1207
		static BOOL GET_META_PED_ASSET_TINT(Ped ped, int index, Hash* pallete, int* tint0, int* tint1, int* tint2)
		{
			return invoke<BOOL>(0xE7998FEC53A33BBE, ped, index, pallete, tint0, tint1, tint2);
		} // 0xE7998FEC53A33BBE undefined b1207
		// https://github.com/femga/rdr3_discoveries/tree/master/AI/BLACKBOARDS
		// Blackboard natives allow you to apply and check certain data to/for peds.
		// Blackboard bools, floats and strings are subdivided into 6 sections: "all", "animation", "any", "code", "global" and "script"
		// Most changes are only visible for "script" blackboards, some "script" blackboards change ped motions
		// "removeTimer" is self-removal timer, can be "-1" so your data will not be removed by the game (forever); 100 = 1 second
		static void SET_PED_BLACKBOARD_INT_(Ped ped, const char* variableName, int value, int removeTimer)
		{
			invoke<int>(0x5F53010C4C3F6BAF, ped, variableName, value, removeTimer);
		} // 0x5F53010C4C3F6BAF undefined b1207
		static void SET_PED_BLACKBOARD_BOOL_(Ped ped, const char* variableName, BOOL value, int removeTimer)
		{
			invoke<int>(0xCB9401F918CB0F75, ped, variableName, value, removeTimer);
		} // 0xCB9401F918CB0F75 undefined b1207
		static void SET_PED_BLACKBOARD_FLOAT_(Ped ped, const char* variableName, float value, int removeTimer)
		{
			invoke<int>(0x437C08DB4FEBE2BD, ped, variableName, value, removeTimer);
		} // 0x437C08DB4FEBE2BD undefined b1207
		// p1:
		// BodyPartChained
		// OverloadMostInjuredBodyPart
		//
		// p2:
		// LeftLeg
		// Legs
		// RightArm
		static void SET_PED_BLACKBOARD_HASH_(Ped ped, const char* variableName, const char* value, int removeTimer)
		{
			invoke<int>(0xA762C9D6CF165E0D, ped, variableName, value, removeTimer);
		} // 0xA762C9D6CF165E0D undefined b1207
		static void REMOVE_PED_BLACKBOARD_INT_(Ped ped, const char* variableName)
		{
			invoke<int>(0x81B75428A7813E67, ped, variableName);
		} // 0x81B75428A7813E67 undefined b1207
		static void REMOVE_PED_BLACKBOARD_BOOL_(Ped ped, const char* variableName)
		{
			invoke<int>(0xA6F67BEC53379A32, ped, variableName);
		} // 0xA6F67BEC53379A32 undefined b1207
		static void REMOVE_PED_BLACKBOARD_FLOAT_(Ped ped, const char* variableName)
		{
			invoke<int>(0x411189E51B8020BA, ped, variableName);
		} // 0x411189E51B8020BA undefined b1207
		static void REMOVE_PED_BLACKBOARD_HASH_(Ped ped, const char* variableName)
		{
			invoke<int>(0x0E17378642156790, ped, variableName);
		} // 0x0E17378642156790 undefined b1207
		// Can be used to get a peds foliage active status: variableName = FoliageActive
		static BOOL GET_PED_BLACKBOARD_BOOL_(Ped ped, const char* variableName)
		{
			return invoke<BOOL>(0x498F2E77982D6945, ped, variableName);
		} // 0x498F2E77982D6945 undefined b1207
		// Can be used to get a peds foliage raw height: variableName = FoliageHeight
		static float GET_PED_BLACKBOARD_FLOAT_(Ped ped, const char* variableName)
		{
			return invoke<float>(0x56E58D4D118FB45E, ped, variableName);
		} // 0x56E58D4D118FB45E undefined b1207
		static Hash GET_PED_BLACKBOARD_HASH_(Ped ped, const char* variableName)
		{
			return invoke<Hash>(0xBF5E791BBBF90A3C, ped, variableName);
		} // 0xBF5E791BBBF90A3C undefined b1207
		static int GET_PED_BLACKBOARD_SCRIPT_INT(Ped ped, const char* variableName)
		{
			return invoke<int>(0xB71B91B398F8F067, ped, variableName);
		} // 0xB71B91B398F8F067 undefined b1207
		static BOOL GET_PED_BLACKBOARD_SCRIPT_BOOL(Ped ped, const char* variableName)
		{
			return invoke<BOOL>(0x4912DFE492DB98CD, ped, variableName);
		} // 0x4912DFE492DB98CD undefined b1207
		static float GET_PED_BLACKBOARD_SCRIPT_FLOAT(Ped ped, const char* variableName)
		{
			return invoke<float>(0xA29FD00D45311EB7, ped, variableName);
		} // 0xA29FD00D45311EB7 undefined b1207
		// Size will be permanent
		static void SET_TANK_ATTRIBUTE_SIZE_(Ped ped, int attributeIndex, float size)
		{
			invoke<int>(0x7FF72DE061DF55E2, ped, attributeIndex, size);
		} // 0x7FF72DE061DF55E2 undefined b1207
		static Any N0xA31D350D66FA1855(Any p0)
		{
			return invoke<Any>(0xA31D350D66FA1855, p0);
		} // 0xA31D350D66FA1855 undefined b1207
		// _IS_TRACKED_* - IS_V*
		static BOOL IS_USING_SLIPSTREAM_(Ped ped)
		{
			return invoke<BOOL>(0xAF61B3CD8C3B82C3, ped);
		} // 0xAF61B3CD8C3B82C3 undefined b1207
		static void N0xEEDC9B29314B2733(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9)
		{
			invoke<int>(0xEEDC9B29314B2733, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
		} // 0xEEDC9B29314B2733 undefined b1207
		static void N0x5C90E20C25E6D83C(Any p0)
		{
			invoke<int>(0x5C90E20C25E6D83C, p0);
		} // 0x5C90E20C25E6D83C undefined b1207
		// NB_CUSTOM_CLIENT_ON_CREATE_COMPLETE - set legendary to not avoid prey
		static void N0x10F96086123B939F(Ped legendaryPed, Ped preyPed, float p2)
		{
			invoke<int>(0x10F96086123B939F, legendaryPed, preyPed, p2);
		} // 0x10F96086123B939F undefined b1207
		static void N0x3FDBB99EFD8CE4AF(Any p0, Any p1, Any p2)
		{
			invoke<int>(0x3FDBB99EFD8CE4AF, p0, p1, p2);
		} // 0x3FDBB99EFD8CE4AF undefined b1207
		static void N0x7E8F9949B7AABBF0(Any p0, Any p1, Any p2)
		{
			invoke<int>(0x7E8F9949B7AABBF0, p0, p1, p2);
		} // 0x7E8F9949B7AABBF0 undefined b1207
		static Any N0x5DA36CCCB63C0895(Any p0, Any p1, Any p2)
		{
			return invoke<Any>(0x5DA36CCCB63C0895, p0, p1, p2);
		} // 0x5DA36CCCB63C0895 undefined b1207
		static void N0x56076667E7C2DCD6(Any p0, Any p1)
		{
			invoke<int>(0x56076667E7C2DCD6, p0, p1);
		} // 0x56076667E7C2DCD6 undefined b1311
		static void APPLY_SHOP_ITEM_TO_PED_(Ped ped, Hash componentHash, BOOL immediately, BOOL isMp, BOOL p4)
		{
			invoke<int>(0xD3A7B003ED343FD9, ped, componentHash, immediately, isMp, p4);
		} // 0xD3A7B003ED343FD9 undefined b1207
		// Directly removes a shop item component from a ped
		// Params: p2 and p3 are always 0
		static void REMOVE_SHOP_ITEM_FROM_PED_(Ped ped, Hash componentHash, int p2, BOOL p3)
		{
			invoke<int>(0x0D7FFA1B2F69ED82, ped, componentHash, p2, p3);
		} // 0x0D7FFA1B2F69ED82 undefined b1355
		// Params: p2, p3 usually 0 in R* Scripts
		static void REMOVE_SHOP_ITEM_FROM_PED_BY_CATEGORY(Ped ped, Hash componentCategory, int p2, BOOL p3)
		{
			invoke<int>(0xDF631E4BCE1B1FC4, ped, componentCategory, p2, p3);
		} // 0xDF631E4BCE1B1FC4 undefined b1207
		static void UPDATE_SHOP_ITEM_WEARABLE_STATE_(Ped ped, Hash componentHash, Hash wearableState, int p3, BOOL p4, int p5)
		{
			invoke<int>(0x66B957AAC2EAAEAB, ped, componentHash, wearableState, p3, p4, p5);
		} // 0x66B957AAC2EAAEAB undefined b1207
		static Hash GET_SHOP_ITEM_COMPONENT_AT_INDEX_(Ped ped, int index, BOOL p2, Any* argStruct, Any* argStruct2)
		{
			return invoke<Hash>(0x77BA37622E22023B, ped, index, p2, argStruct, argStruct2);
		} // 0x77BA37622E22023B undefined b1207
		// Returns the number of wearable states available for a shop item / component. p2 seems to be true in scripts.
		//
		// For use with 0x6243635AF2F1B826 (_GET_SHOP_ITEM_AVAILABLE_WEARABLE_STATE_BY_INDEX)
		static int GET_SHOP_ITEM_NUM_WEARABLE_STATES_(Hash componentHash, BOOL isMpFemale, BOOL p2)
		{
			return invoke<int>(0xFFCC2DB2D9953401, componentHash, isMpFemale, p2);
		} // 0xFFCC2DB2D9953401 undefined b1207
		// Gets an available wearable state by index for a shop item / component - it does not retreive what the current state is. p3 seems to be true in scripts.
		//
		// Use 0xFFCC2DB2D9953401 (_GET_SHOP_ITEM_NUM_WEARABLE_STATES) to get the number of available wearable states
		static Hash GET_SHOP_ITEM_WEARABLE_STATE_BY_INDEX_(Hash componentHash, int wearableStateIndex, BOOL isMpFemale, BOOL p3)
		{
			return invoke<Hash>(0x6243635AF2F1B826, componentHash, wearableStateIndex, isMpFemale, p3);
		} // 0x6243635AF2F1B826 undefined b1207
		static Hash GET_SHOP_ITEM_COMPONENT_CATEGORY_(Hash componentHash, int metapedType, BOOL isMP)
		{
			return invoke<Hash>(0x5FF9A878C3D115B8, componentHash, metapedType, isMP);
		} // 0x5FF9A878C3D115B8 undefined b1207
		static Any N0x31B2E7F2E3C58B89(Any p0, Any p1, Any p2, Any p3)
		{
			return invoke<Any>(0x31B2E7F2E3C58B89, p0, p1, p2, p3);
		} // 0x31B2E7F2E3C58B89 undefined b1207
		static BOOL GET_SHOP_ITEM_BASE_LAYERS_(Hash shopItem, Any p1, Ped ped, int metapedType, BOOL p4, Hash* drawable, Hash* albedo, Hash* normal, Hash* material, Hash* p9, Hash* p10, Hash* p11, Hash* p12)
		{
			return invoke<BOOL>(0x63342C50EC115CE8, shopItem, p1, ped, metapedType, p4, drawable, albedo, normal, material, p9, p10, p11, p12);
		} // 0x63342C50EC115CE8 undefined b1207
		// Related to _0x704C908E9C405136 for component loading
		// _S*
		static Any N0xAAB86462966168CE(Ped ped, BOOL isMP)
		{
			return invoke<Any>(0xAAB86462966168CE, ped, isMP);
		} // 0xAAB86462966168CE undefined b1207
		static Any GET_SHOP_ITEM_HAT_COMPONENT_(Ped ped, int metapedType, BOOL p2)
		{
			return invoke<Any>(0x7E02E4218D916B94, ped, metapedType, p2);
		} // 0x7E02E4218D916B94 undefined b1207
		// p1 is always 1
		static void REFRESH_META_PED_SHOP_ITEMS_(Ped ped, int p1)
		{
			invoke<int>(0x59BD177A1A48600A, ped, p1);
		} // 0x59BD177A1A48600A undefined b1207
		// Params: p1 either a 1 or 0, so perhaps BOOL
		// _SET_PED_A*
		static void N0xD103F6DBB5442BE8(Ped ped, int p1)
		{
			invoke<int>(0xD103F6DBB5442BE8, ped, p1);
		} // 0xD103F6DBB5442BE8 undefined b1207
		static void SET_PED_PROMPT_NAME_FROM_GXT_ENTRY_(Ped ped, Hash gxtEntryHash)
		{
			invoke<int>(0xFCA8FB9E15FA80D3, ped, gxtEntryHash);
		} // 0xFCA8FB9E15FA80D3 undefined b1207
		static void SET_PED_PROMPT_NAME_(Ped ped, const char* name)
		{
			invoke<int>(0x4A48B6E03BABB4AC, ped, name);
		} // 0x4A48B6E03BABB4AC undefined b1207
		static void SET_PED_PROMPT_NAME_FROM_GXT_ENTRY_2_(Ped ped, Hash gxtEntryHash)
		{
			invoke<int>(0xC2745D9261664901, ped, gxtEntryHash);
		} // 0xC2745D9261664901 undefined b1207
		static void SET_PED_PROMPT_NAME_2_(Ped ped, const char* name)
		{
			invoke<int>(0x19B14E04B009E28B, ped, name);
		} // 0x19B14E04B009E28B undefined b1207
		static void N0xF917F92BF22ECBAB(Any p0)
		{
			invoke<int>(0xF917F92BF22ECBAB, p0);
		} // 0xF917F92BF22ECBAB undefined b1207
		static void N0x49DADFC4CD808B0A(Any p0, Any p1, Any p2)
		{
			invoke<int>(0x49DADFC4CD808B0A, p0, p1, p2);
		} // 0x49DADFC4CD808B0A undefined b1207
		// limb: 3 = Left Hand, 4 = Left Arm, 6 = Right Hand, 7 = Right Arm, 9 = Left Foot, 10 = Left Leg, 12 = Right Foot, 13 = Right Leg, 37 = Head
		static BOOL HAS_PED_TAKEN_GORE_DAMAGE_(Ped ped, int limb)
		{
			return invoke<BOOL>(0xBA208A8D6399A3AC, ped, limb);
		} // 0xBA208A8D6399A3AC undefined b1207
		// _CLEAR*
		static void N0x704C908E9C405136(Ped ped)
		{
			invoke<int>(0x704C908E9C405136, ped);
		} // 0x704C908E9C405136 undefined b1207
		static void N0x7406C71F4AC2FFCC(Any p0)
		{
			invoke<int>(0x7406C71F4AC2FFCC, p0);
		} // 0x7406C71F4AC2FFCC undefined b1207
		static void N0x28508173C6A7CC18(Any p0)
		{
			invoke<int>(0x28508173C6A7CC18, p0);
		} // 0x28508173C6A7CC18 undefined b1311
		static Any N0x52250B92EA70BE3D(Any p0)
		{
			return invoke<Any>(0x52250B92EA70BE3D, p0);
		} // 0x52250B92EA70BE3D undefined b1207
		// quality: see _GET_PED_QUALITY
		static void SET_PED_QUALITY_(Ped ped, int quality)
		{
			invoke<int>(0xCE6B874286D640BB, ped, quality);
		} // 0xCE6B874286D640BB undefined b1207
		// Returns Ped Quality to be used to calculate Skinning Quality
		//
		// enum ePedQuality
		// {
		// 	PQ_INVALID = -1,
		// 	PQ_LOW,
		// 	PQ_MEDIUM,
		// 	PQ_HIGH,
		// 	PQ_MAX
		// };
		static int GET_PED_QUALITY_(Ped ped)
		{
			return invoke<int>(0x7BCC6087D130312A, ped);
		} // 0x7BCC6087D130312A undefined b1207
		static void N0xCE7A6C1D5CDE1F9D(Ped ped, Object object, const char* propName, const char* animName)
		{
			invoke<int>(0xCE7A6C1D5CDE1F9D, ped, object, propName, animName);
		} // 0xCE7A6C1D5CDE1F9D undefined b1207
		static void N0x604E1010E3162E86(Any p0, Any p1, Any p2)
		{
			invoke<int>(0x604E1010E3162E86, p0, p1, p2);
		} // 0x604E1010E3162E86 undefined b1207
		static void N0xE8ABE3B73FC7FE17(Any p0, Any p1, Any p2, Any p3)
		{
			invoke<int>(0xE8ABE3B73FC7FE17, p0, p1, p2, p3);
		} // 0xE8ABE3B73FC7FE17 undefined b1207
		static void REMOVE_PED_PROP_(Ped ped, const char* propName)
		{
			invoke<int>(0x3A50753042B6891B, ped, propName);
		} // 0x3A50753042B6891B undefined b1207
		// _SET_W(EAPON?)*
		static void SET_TOTAL_PED_DAMAGE_FALLOFF_BONUS_(Ped ped, float bonus)
		{
			invoke<int>(0x932786CE3C76477C, ped, bonus);
		} // 0x932786CE3C76477C undefined b1207
		static Any N0x095C2277FED731DB(Any p0)
		{
			return invoke<Any>(0x095C2277FED731DB, p0);
		} // 0x095C2277FED731DB undefined b1207
		static void N0x09171A6F8FDE5DC1(Any p0, Any p1, Any p2, Any p3, Any p4)
		{
			invoke<int>(0x09171A6F8FDE5DC1, p0, p1, p2, p3, p4);
		} // 0x09171A6F8FDE5DC1 undefined b1207
		static void N0x09E378C52B1433B5(Any p0, Any p1, Any p2, Any p3, Any p4)
		{
			invoke<int>(0x09E378C52B1433B5, p0, p1, p2, p3, p4);
		} // 0x09E378C52B1433B5 undefined b1207
		// _IS_N* - _IS_P*
		static BOOL N0x6507AC3BD7C99009(float x, float y, float z, float p3)
		{
			return invoke<BOOL>(0x6507AC3BD7C99009, x, y, z, p3);
		} // 0x6507AC3BD7C99009 undefined b1207
		// Returns how deep the water is below the ped (if in water)
		// -1.0f = Not in water
		// 10.0f = Max water depth
		static float GET_PLAYER_PED_WATER_DEPTH_(Ped ped)
		{
			return invoke<float>(0x2942457417A5FD24, ped);
		} // 0x2942457417A5FD24 undefined b1207
		// duration in seconds
		static void SET_PED_TRAIL_EFFECT_(Ped ped, BOOL p1, float duration)
		{
			invoke<int>(0xA5950E16B8F31052, ped, p1, duration);
		} // 0xA5950E16B8F31052 undefined b1207
		// If returned true: PROCESS_RESIZING_TRACKING_BOUNDS_VOLUME - Scaling UP the bounds due to tracking
		// If returned false: PROCESS_RESIZING_TRACKING_BOUNDS_VOLUME - Scaling DOWN the bounds due to tracking
		// _IS_PED_T* - _IS_PED_U*
		static BOOL N0xEBAAC9A750E7563B(Ped ped)
		{
			return invoke<BOOL>(0xEBAAC9A750E7563B, ped);
		} // 0xEBAAC9A750E7563B undefined b1207
		static void N0x992187D975635DF5(Any p0, Any p1)
		{
			invoke<int>(0x992187D975635DF5, p0, p1);
		} // 0x992187D975635DF5 undefined b1311
		static void N0x0B787A37EEDD226F(Any p0, Any p1)
		{
			invoke<int>(0x0B787A37EEDD226F, p0, p1);
		} // 0x0B787A37EEDD226F undefined b1311
	}

	namespace PERSCHAR
	{
		static void N0x63AA2B8EB087886A(Any p0, Any p1)
		{
			invoke<int>(0x63AA2B8EB087886A, p0, p1);
		} // 0x63AA2B8EB087886A undefined b1207
		static Hash GET_PERSCHAR_MODEL_NAME_(Hash persCharHash)
		{
			return invoke<Hash>(0xA00DF706C60173D1, persCharHash);
		} // 0xA00DF706C60173D1 undefined b1207
		static void N0x8BC555034A5A5E8C(Any p0, Any p1)
		{
			invoke<int>(0x8BC555034A5A5E8C, p0, p1);
		} // 0x8BC555034A5A5E8C undefined b1207
		static void N0x70605812ABC9FF0F(Any p0, Any p1)
		{
			invoke<int>(0x70605812ABC9FF0F, p0, p1);
		} // 0x70605812ABC9FF0F undefined b1207
		static Any N0xDC9655D47DEC0353(Any p0)
		{
			return invoke<Any>(0xDC9655D47DEC0353, p0);
		} // 0xDC9655D47DEC0353 undefined b1207
		static void N0x2DF89CD2ED1D0BDE(Any p0, Any p1)
		{
			invoke<int>(0x2DF89CD2ED1D0BDE, p0, p1);
		} // 0x2DF89CD2ED1D0BDE undefined b1207
		static void N0x535A66AAD2BF68F9(Any p0, Any p1)
		{
			invoke<int>(0x535A66AAD2BF68F9, p0, p1);
		} // 0x535A66AAD2BF68F9 undefined b1207
		static Any N0xCEB40B678E403759(Any p0)
		{
			return invoke<Any>(0xCEB40B678E403759, p0);
		} // 0xCEB40B678E403759 undefined b1207
		static void SET_PERSCHAR_SCHEDULE_(Hash persCharHash, const char* schedule)
		{
			invoke<int>(0x187D65F3AEC5D679, persCharHash, schedule);
		} // 0x187D65F3AEC5D679 undefined b1207
		static void N0x8B44273A92CD406C(Any p0)
		{
			invoke<int>(0x8B44273A92CD406C, p0);
		} // 0x8B44273A92CD406C undefined b1207
		static void N0xE0E65E0D261F7507(Any p0)
		{
			invoke<int>(0xE0E65E0D261F7507, p0);
		} // 0xE0E65E0D261F7507 undefined b1207
		static Any N0x112DDF56300BC6E5(Any p0)
		{
			return invoke<Any>(0x112DDF56300BC6E5, p0);
		} // 0x112DDF56300BC6E5 undefined b1207
		static PersChar CREATE_PERSISTENT_CHARACTER_(Hash hash)
		{
			return invoke<PersChar>(0x4F76E3676583D951, hash);
		} // 0x4F76E3676583D951 undefined b1207
		static BOOL IS_PERSISTENT_CHARACTER_VALID_(PersChar persChar)
		{
			return invoke<BOOL>(0x800DF3FC913355F3, persChar);
		} // 0x800DF3FC913355F3 undefined b1207
		static void DELETE_PERSCHAR_(PersChar persChar)
		{
			invoke<int>(0xFC77C5B44D5FF7C0, persChar);
		} // 0xFC77C5B44D5FF7C0 undefined b1207
		static Vector3 N0x5EE6FCCC9C832CA2(Any p0)
		{
			return invoke<Vector3>(0x5EE6FCCC9C832CA2, p0);
		} // 0x5EE6FCCC9C832CA2 undefined b1207
		static void N0x59C7AD6FEA2AC449(Any p0, Any p1, Any p2, Any p3)
		{
			invoke<int>(0x59C7AD6FEA2AC449, p0, p1, p2, p3);
		} // 0x59C7AD6FEA2AC449 undefined b1207
		static void N0xBB68908CD11AEBDC(PersChar persChar)
		{
			invoke<int>(0xBB68908CD11AEBDC, persChar);
		} // 0xBB68908CD11AEBDC undefined b1207
		static Vector3 N0x94995829ED15A598(Any p0)
		{
			return invoke<Vector3>(0x94995829ED15A598, p0);
		} // 0x94995829ED15A598 undefined b1207
		static Ped GET_PERSCHAR_PED_INDEX_(PersChar persChar)
		{
			return invoke<Ped>(0x31C70A716CAE1FEE, persChar);
		} // 0x31C70A716CAE1FEE undefined b1207
		static PersChar GET_PERSCHAR_INDEX_FROM_PED_INDEX_(Ped ped)
		{
			return invoke<PersChar>(0x32A1E3B83D501096, ped);
		} // 0x32A1E3B83D501096 undefined b1207
		static Any N0xF8DE7154F7D1458F(Any p0)
		{
			return invoke<Any>(0xF8DE7154F7D1458F, p0);
		} // 0xF8DE7154F7D1458F undefined b1207
		static void N0x669C25840C6F7AE2(Any p0, Any p1)
		{
			invoke<int>(0x669C25840C6F7AE2, p0, p1);
		} // 0x669C25840C6F7AE2 undefined b1207
		static void RETASK_PERSISTENT_CHARACTER_(PersChar persChar)
		{
			invoke<int>(0x631CD2D77FDC0316, persChar);
		} // 0x631CD2D77FDC0316 undefined b1207
		static void N0x0B3A99AB6713AA52(Any p0)
		{
			invoke<int>(0x0B3A99AB6713AA52, p0);
		} // 0x0B3A99AB6713AA52 undefined b1207
		static BOOL IS_PERSISTENT_CHARACTER_DEAD_(PersChar persChar)
		{
			return invoke<BOOL>(0xEB98B38CA60742D7, persChar);
		} // 0xEB98B38CA60742D7 undefined b1207
		static BOOL REVIVE_PERSCHAR_(PersChar persChar)
		{
			return invoke<BOOL>(0x49A8C2CD97815215, persChar);
		} // 0x49A8C2CD97815215 undefined b1207
		static void N0xD4B614179BCD0654(Any p0)
		{
			invoke<int>(0xD4B614179BCD0654, p0);
		} // 0xD4B614179BCD0654 undefined b1207
		static void N0x406808610220405B(Any p0)
		{
			invoke<int>(0x406808610220405B, p0);
		} // 0x406808610220405B undefined b1207
		static void N0xA2B18FF8D39F6D87(Any p0)
		{
			invoke<int>(0xA2B18FF8D39F6D87, p0);
		} // 0xA2B18FF8D39F6D87 undefined b1207
		static Any N0xE4C51A8A3BD1664C(Any p0)
		{
			return invoke<Any>(0xE4C51A8A3BD1664C, p0);
		} // 0xE4C51A8A3BD1664C undefined b1207
		static void N0x8AE4EFA464DAE42D(Any p0, Any p1)
		{
			invoke<int>(0x8AE4EFA464DAE42D, p0, p1);
		} // 0x8AE4EFA464DAE42D undefined b1207
		static void N0xA4DCB3F0DD7488BD(Any p0, Any p1, Any p2, Any p3, Any p4)
		{
			invoke<int>(0xA4DCB3F0DD7488BD, p0, p1, p2, p3, p4);
		} // 0xA4DCB3F0DD7488BD undefined b1207
		static void N0xD95D777F828B2BBB(Any p0)
		{
			invoke<int>(0xD95D777F828B2BBB, p0);
		} // 0xD95D777F828B2BBB undefined b1207
		static void N0x92690B0822493CE0()
		{
			invoke<int>(0x92690B0822493CE0);
		} // 0x92690B0822493CE0 undefined b1207
		static void N0xEFC5C6670E0B99BA()
		{
			invoke<int>(0xEFC5C6670E0B99BA);
		} // 0xEFC5C6670E0B99BA undefined b1207
		static void N0x2E957AA81F2C61C9()
		{
			invoke<int>(0x2E957AA81F2C61C9);
		} // 0x2E957AA81F2C61C9 undefined b1207
		static void N0xB173599D61FAEB31()
		{
			invoke<int>(0xB173599D61FAEB31);
		} // 0xB173599D61FAEB31 undefined b1207
		static Entity N0x08FC896D2CB31FCC(Any p0, BOOL p1)
		{
			return invoke<Entity>(0x08FC896D2CB31FCC, p0, p1);
		} // 0x08FC896D2CB31FCC undefined b1207
		static Entity FORCE_SPAWN_PERSCHAR_(PersChar persChar, BOOL p1)
		{
			return invoke<Entity>(0x0CADC3A977997472, persChar, p1);
		} // 0x0CADC3A977997472 undefined b1207
		static void FORCE_DESPAWN_PERSCHAR_(PersChar persChar)
		{
			invoke<int>(0x7B204F88F6C3D287, persChar);
		} // 0x7B204F88F6C3D287 undefined b1207
		static void N0xFCC6DB8DBE709BC8(PersChar persChar)
		{
			invoke<int>(0xFCC6DB8DBE709BC8, persChar);
		} // 0xFCC6DB8DBE709BC8 undefined b1207
		static void N0xA8C406C2A56EDC16(PersChar persChar)
		{
			invoke<int>(0xA8C406C2A56EDC16, persChar);
		} // 0xA8C406C2A56EDC16 undefined b1207
		static void N0x4F81EAD1DE8FA19B(PersChar persChar)
		{
			invoke<int>(0x4F81EAD1DE8FA19B, persChar);
		} // 0x4F81EAD1DE8FA19B undefined b1207
		static void N0x6759BEE6762E140B(PersChar persChar)
		{
			invoke<int>(0x6759BEE6762E140B, persChar);
		} // 0x6759BEE6762E140B undefined b1207
		static void N0xB65E7F733956CF25(PersChar persChar)
		{
			invoke<int>(0xB65E7F733956CF25, persChar);
		} // 0xB65E7F733956CF25 undefined b1207
		static Any N0x4AFC7288C77238B3(Any p0)
		{
			return invoke<Any>(0x4AFC7288C77238B3, p0);
		} // 0x4AFC7288C77238B3 undefined b1207
		static Any N0xA8120EBEAF290C7A(Any p0)
		{
			return invoke<Any>(0xA8120EBEAF290C7A, p0);
		} // 0xA8120EBEAF290C7A undefined b1207
		static Any N0x69786495C92A3044(Any p0)
		{
			return invoke<Any>(0x69786495C92A3044, p0);
		} // 0x69786495C92A3044 undefined b1207
		static Any N0xEC254C2C9B0F08F1(Any p0, Any p1)
		{
			return invoke<Any>(0xEC254C2C9B0F08F1, p0, p1);
		} // 0xEC254C2C9B0F08F1 undefined b1207
		static Any N0x9C7F95946E304778(Any p0, Any p1)
		{
			return invoke<Any>(0x9C7F95946E304778, p0, p1);
		} // 0x9C7F95946E304778 undefined b1207
	}

	namespace PERSISTENCE
	{
		static void N0x7A1BD123E5CDB6E5()
		{
			invoke<int>(0x7A1BD123E5CDB6E5);
		} // 0x7A1BD123E5CDB6E5 undefined b1207
		static void PERSISTENCE_REMOVE_ALL_ENTITIES_IN_AREA(float x, float y, float z, float radius)
		{
			invoke<int>(0x9D16896F0DBE78A2, x, y, z, radius);
		} // 0x9D16896F0DBE78A2 undefined b1207
		static void N0x065887B694359799(Any p0)
		{
			invoke<int>(0x065887B694359799, p0);
		} // 0x065887B694359799 undefined b1207
		static void N0xFC9806DA9A460093(float x1, float y1, float z1, float x2, float y2, float z2)
		{
			invoke<int>(0xFC9806DA9A460093, x1, y1, z1, x2, y2, z2);
		} // 0xFC9806DA9A460093 undefined b1207
		// nullsub, doesn't do anything
		static void N0xB03140014ACA6C40(Any p0, Any p1)
		{
			invoke<int>(0xB03140014ACA6C40, p0, p1);
		} // 0xB03140014ACA6C40 undefined b1207
		static void N0xE225CEF1901F6108(Any p0, Any p1)
		{
			invoke<int>(0xE225CEF1901F6108, p0, p1);
		} // 0xE225CEF1901F6108 undefined b1207
		static void N0x8DE104BEC243A73B(Any p0)
		{
			invoke<int>(0x8DE104BEC243A73B, p0);
		} // 0x8DE104BEC243A73B undefined b1207
		// Only used in R* script long_update.ysc in script function REFRESH_CLOSEST_TOWN
		static void PERSISTENCE_REFRESH_TOWN_VOLUME_(Volume volume)
		{
			invoke<int>(0xEFB5F34CC0953B27, volume);
		} // 0xEFB5F34CC0953B27 undefined b1207
		static Any N0xBA2C49EA6A8D24FF(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6)
		{
			return invoke<Any>(0xBA2C49EA6A8D24FF, p0, p1, p2, p3, p4, p5, p6);
		} // 0xBA2C49EA6A8D24FF undefined b1207
		static Any N0x2E545965DF98D476(Any p0)
		{
			return invoke<Any>(0x2E545965DF98D476, p0);
		} // 0x2E545965DF98D476 undefined b1207
		static void N0xF5622FA6ACFCA7DB(Any p0, Any p1)
		{
			invoke<int>(0xF5622FA6ACFCA7DB, p0, p1);
		} // 0xF5622FA6ACFCA7DB undefined b1207
		static void N0x3CA5E58C9731A16B(Any p0, Any p1)
		{
			invoke<int>(0x3CA5E58C9731A16B, p0, p1);
		} // 0x3CA5E58C9731A16B undefined b1207
		static void N0xDC0A1F0ECEC9F0C0(Any p0, Any p1)
		{
			invoke<int>(0xDC0A1F0ECEC9F0C0, p0, p1);
		} // 0xDC0A1F0ECEC9F0C0 undefined b1207
		static Any N0x5A79220F6D38D7C3(Any p0)
		{
			return invoke<Any>(0x5A79220F6D38D7C3, p0);
		} // 0x5A79220F6D38D7C3 undefined b1207
		static Any N0xCFDA2518F322D836(Any p0)
		{
			return invoke<Any>(0xCFDA2518F322D836, p0);
		} // 0xCFDA2518F322D836 undefined b1207
		static Any N0x1F56FB3FDB4EAF65(Any p0)
		{
			return invoke<Any>(0x1F56FB3FDB4EAF65, p0);
		} // 0x1F56FB3FDB4EAF65 undefined b1207
		static void N0x291CC21D1FB6790E(Any p0)
		{
			invoke<int>(0x291CC21D1FB6790E, p0);
		} // 0x291CC21D1FB6790E undefined b1207
		static void PERSISTENCE_ADD_SCENARIO_LOOTED(int scenario)
		{
			invoke<int>(0x8245C1F3262F4AC2, scenario);
		} // 0x8245C1F3262F4AC2 undefined b1207
		static BOOL PERSISTENCE_IS_SCENARIO_MARKED_AS_LOOTED_(int scenario)
		{
			return invoke<BOOL>(0xFB7CF1DE938A3E22, scenario);
		} // 0xFB7CF1DE938A3E22 undefined b1207
		static BOOL PERSISTENCE_IS_SCENARIO_MARKED_AS_LOOTED_AT_COORDS_(float x, float y, float z)
		{
			return invoke<BOOL>(0xB6E1A185C2B9319A, x, y, z);
		} // 0xB6E1A185C2B9319A undefined b1207
		static BOOL PERSISTENCE_IS_SCENARIO_MARKED_AS_LOOTED_AT_COORDS_WITH_MODEL_(float x, float y, float z, Hash model)
		{
			return invoke<BOOL>(0x188313616D184213, x, y, z, model);
		} // 0x188313616D184213 undefined b1207
		// _PERSISTENCE_*
		static void N0x66DAA3A9274E8E82()
		{
			invoke<int>(0x66DAA3A9274E8E82);
		} // 0x66DAA3A9274E8E82 undefined b1232
	}

	namespace PHYSICS
	{
		// There are 19 types of rope, from type = 0 to type = 18
		// Rope definitions are stored in ropedata.xml
		// Rope types 0, 15 and 18 have proper physics for hanging objects (taut, do not sag, small to medium diameter, good aspect for a rope)
		static int ADD_ROPE(float x, float y, float z, float rotX, float rotY, float rotZ, float length, int ropeType, float maxLength, float minLength, float p10, BOOL p11, BOOL p12, BOOL rigid, float p14, BOOL breakWhenShot, Any* unkPtr, BOOL p17)
		{
			return invoke<int>(0xE832D760399EB220, x, y, z, rotX, rotY, rotZ, length, ropeType, maxLength, minLength, p10, p11, p12, rigid, p14, breakWhenShot, unkPtr, p17);
		} // 0xE832D760399EB220 0xA592EC74 b1207
		static int ADD_ROPE_2_(float x, float y, float z, float rotX, float rotY, float rotZ, float length, int ropeType, BOOL isNetworked, int p9, float p10)
		{
			return invoke<int>(0xE9C59F6809373A99, x, y, z, rotX, rotY, rotZ, length, ropeType, isNetworked, p9, p10);
		} // 0xE9C59F6809373A99 undefined b1207
		static void DELETE_ROPE(int* ropeId)
		{
			invoke<int>(0x52B4829281364649, ropeId);
		} // 0x52B4829281364649 0x748D72AF b1207
		static void RELEASE_ROPE_(int ropeId)
		{
			invoke<int>(0x6076213101A47B3B, ropeId);
		} // 0x6076213101A47B3B undefined b1207
		static void DELETE_CHILD_ROPE(int ropeId)
		{
			invoke<int>(0xAA5D6B1888E4DB20, ropeId);
		} // 0xAA5D6B1888E4DB20 0xB19B4706 b1207
		// ropeTop returns top half of rope, ropeBottom returns bottom half of rope
		static void BREAK_ROPE_(int* ropeId, int* ropeTop, int* ropeBottom, float offsetX, float offsetY, float offsetZ, int p6)
		{
			invoke<int>(0x4CFA2B7FAE115ECB, ropeId, ropeTop, ropeBottom, offsetX, offsetY, offsetZ, p6);
		} // 0x4CFA2B7FAE115ECB undefined b1207
		static BOOL DOES_ROPE_EXIST(int ropeId)
		{
			return invoke<BOOL>(0xFD5448BE3111ED96, ropeId);
		} // 0xFD5448BE3111ED96 0x66E4A3AC b1207
		static BOOL IS_ROPE_BROKEN_(int ropeId)
		{
			return invoke<BOOL>(0x79C2BEC82CFD7F7F, ropeId);
		} // 0x79C2BEC82CFD7F7F undefined b1207
		static void ROPE_CHANGE_VISIBILITY_(int* ropeId, BOOL visible)
		{
			invoke<int>(0x7A54D82227A139DB, ropeId, visible);
		} // 0x7A54D82227A139DB undefined b1207
		static void ROPE_DRAW_SHADOW_ENABLED(int* ropeId, BOOL toggle)
		{
			invoke<int>(0xF159A63806BB5BA8, ropeId, toggle);
		} // 0xF159A63806BB5BA8 0x51523B8C b1207
		static int GET_ROPE_VERTEX_COUNT(int ropeId)
		{
			return invoke<int>(0x3655F544CD30F0B5, ropeId);
		} // 0x3655F544CD30F0B5 0x5131CD2C b1207
		static void N0xE54BF2CE6C7D23A9(int ropeId, int p1, float x, float y, float z)
		{
			invoke<int>(0xE54BF2CE6C7D23A9, ropeId, p1, x, y, z);
		} // 0xE54BF2CE6C7D23A9 undefined b1207
		static void N0x9C24846D0A4A2776(Any p0)
		{
			invoke<int>(0x9C24846D0A4A2776, p0);
		} // 0x9C24846D0A4A2776 undefined b1207
		static void N0x0CB16D05E03FB525(Any p0)
		{
			invoke<int>(0x0CB16D05E03FB525, p0);
		} // 0x0CB16D05E03FB525 undefined b1207
		static void N0xF27F1A8DE4F50A1B(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6)
		{
			invoke<int>(0xF27F1A8DE4F50A1B, p0, p1, p2, p3, p4, p5, p6);
		} // 0xF27F1A8DE4F50A1B undefined b1207
		static void N0x21D0890D88DFB0B0(int ropeId, BOOL p1, float p2, float p3, float p4, float p5, float p6, float p7, float p8, float p9, int p10)
		{
			invoke<int>(0x21D0890D88DFB0B0, ropeId, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
		} // 0x21D0890D88DFB0B0 undefined b1207
		// Attaches entity 1 to entity 2.
		// If you use a boneName (p12/p13) make sure boneId (p15/p16) is set to -1.
		static void ATTACH_ENTITIES_TO_ROPE(int ropeId, Entity entity1, Entity entity2, float ent1X, float ent1Y, float ent1Z, float ent2X, float ent2Y, float ent2Z, float length, int alwaysZero1, int alwaysZero2, const char* boneName1, const char* boneName2, BOOL p14, int boneId1, int boneId2, int alwaysZero3, int alwaysZero4, BOOL p19, BOOL p20)
		{
			invoke<int>(0x3D95EC8B6D940AC3, ropeId, entity1, entity2, ent1X, ent1Y, ent1Z, ent2X, ent2Y, ent2Z, length, alwaysZero1, alwaysZero2, boneName1, boneName2, p14, boneId1, boneId2, alwaysZero3, alwaysZero4, p19, p20);
		} // 0x3D95EC8B6D940AC3 0x7508668F b1207
		// Attaches a rope to two entities: binds two bones from two entities; one entity can be an object, i.e. a suspension point, the other an NPC bone
		static void ATTACH_ENTITIES_TO_ROPE_2_(int ropeId, Entity entity1, Entity entity2, float ent1X, float ent1Y, float ent1Z, float ent2X, float ent2Y, float ent2Z, const char* boneName1, const char* boneName2)
		{
			invoke<int>(0x462FF2A432733A44, ropeId, entity1, entity2, ent1X, ent1Y, ent1Z, ent2X, ent2Y, ent2Z, boneName1, boneName2);
		} // 0x462FF2A432733A44 undefined b1207
		static void ATTACH_ENTITES_TO_ROPE_3_(int ropeId, Entity entity1, Entity entity2, float p3, float p4, float p5, float p6, float p7, float p8, Any p9, Any p10)
		{
			invoke<int>(0xE9CD9A67834985A7, ropeId, entity1, entity2, p3, p4, p5, p6, p7, p8, p9, p10);
		} // 0xE9CD9A67834985A7 undefined b1207
		static void N0x69C810B72291D831(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6)
		{
			invoke<int>(0x69C810B72291D831, p0, p1, p2, p3, p4, p5, p6);
		} // 0x69C810B72291D831 undefined b1207
		static void N0xB7469CB9AC3C0FD4(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7)
		{
			invoke<int>(0xB7469CB9AC3C0FD4, p0, p1, p2, p3, p4, p5, p6, p7);
		} // 0xB7469CB9AC3C0FD4 undefined b1207
		static void N0xC64E7A62632AD2FE(int ropeId, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7)
		{
			invoke<int>(0xC64E7A62632AD2FE, ropeId, p1, p2, p3, p4, p5, p6, p7);
		} // 0xC64E7A62632AD2FE undefined b1207
		static BOOL IS_ROPE_ATTACHED_TO_ENTITY_(int ropeId, Entity entity)
		{
			return invoke<BOOL>(0x9B4F7E3E4F9C77B3, ropeId, entity);
		} // 0x9B4F7E3E4F9C77B3 undefined b1207
		static void DETACH_ROPE_FROM_ENTITY(int ropeId, Entity entity)
		{
			invoke<int>(0xBCF3026912A8647D, ropeId, entity);
		} // 0xBCF3026912A8647D 0x3E720BEE b1207
		static void HITCH_HORSE_(Ped horse, float x, float y, float z)
		{
			invoke<int>(0x06AADE17334F7A40, horse, x, y, z);
		} // 0x06AADE17334F7A40 undefined b1207
		static void UNHITCH_HORSE_(Ped horse)
		{
			invoke<int>(0x0348469DAA17576C, horse);
		} // 0x0348469DAA17576C undefined b1207
		static void N0x6EA0E93CFFA472CC(Any p0)
		{
			invoke<int>(0x6EA0E93CFFA472CC, p0);
		} // 0x6EA0E93CFFA472CC undefined b1207
		static void N0xBDDA142759307528(Any p0)
		{
			invoke<int>(0xBDDA142759307528, p0);
		} // 0xBDDA142759307528 undefined b1207
		static void N0x32F4DBFDFCCCC735(Any p0, Any p1, Any p2)
		{
			invoke<int>(0x32F4DBFDFCCCC735, p0, p1, p2);
		} // 0x32F4DBFDFCCCC735 undefined b1207
		static void N0xF8CA39D5C0D1D9A1(Any p0, Any p1)
		{
			invoke<int>(0xF8CA39D5C0D1D9A1, p0, p1);
		} // 0xF8CA39D5C0D1D9A1 undefined b1207
		static void N0xEAF529446488EB18(Any p0)
		{
			invoke<int>(0xEAF529446488EB18, p0);
		} // 0xEAF529446488EB18 undefined b1207
		static void N0x31160EC47E7C9549(Any p0, Any p1)
		{
			invoke<int>(0x31160EC47E7C9549, p0, p1);
		} // 0x31160EC47E7C9549 undefined b1207
		static void N0x5E981C764DF33117(Any p0, Any p1)
		{
			invoke<int>(0x5E981C764DF33117, p0, p1);
		} // 0x5E981C764DF33117 undefined b1207
		static void ROPE_SET_UPDATE_ORDER(int ropeId, Any p1)
		{
			invoke<int>(0xDC57A637A20006ED, ropeId, p1);
		} // 0xDC57A637A20006ED 0x80DB77A7 b1207
		static void N0xFB9153A54AC713E8(int ropeId, BOOL p1)
		{
			invoke<int>(0xFB9153A54AC713E8, ropeId, p1);
		} // 0xFB9153A54AC713E8 undefined b1207
		static void N0xD699E688B49C0FD2(int ropeId, float p1, float p2, float p3, BOOL p4)
		{
			invoke<int>(0xD699E688B49C0FD2, ropeId, p1, p2, p3, p4);
		} // 0xD699E688B49C0FD2 undefined b1207
		static void N0xBB3E9B073E66C3C9(int ropeId, BOOL p1, BOOL p2, BOOL p3, BOOL p4)
		{
			invoke<int>(0xBB3E9B073E66C3C9, ropeId, p1, p2, p3, p4);
		} // 0xBB3E9B073E66C3C9 undefined b1207
		static void N0x522FA3F490E2F7AC(int ropeId, Any p1, Any p2)
		{
			invoke<int>(0x522FA3F490E2F7AC, ropeId, p1, p2);
		} // 0x522FA3F490E2F7AC undefined b1207
		static void N0x3900491C0D61ED4B(Any p0, Any p1)
		{
			invoke<int>(0x3900491C0D61ED4B, p0, p1);
		} // 0x3900491C0D61ED4B undefined b1207
		static void N0xC89E7410A93AC19A(int ropeId, float p1)
		{
			invoke<int>(0xC89E7410A93AC19A, ropeId, p1);
		} // 0xC89E7410A93AC19A undefined b1207
		static void N0x1D97DA8ACB5D2582(int ropeId, int p1)
		{
			invoke<int>(0x1D97DA8ACB5D2582, ropeId, p1);
		} // 0x1D97DA8ACB5D2582 undefined b1207
		// Combining this with ADD_ROPE enables winding
		// p1: mostly empty (0)
		// ropeModelType: RB_L_Wrist02, RB_R_Wrist02, ropeAttach, noose01x_Rope_03, SKEL_Neck0, SKEL_L_FOOT, SKEL_Neck1, Root_s_meatbit_Chunck_Xlarge01x
		// _CREATE_*
		static void CREATE_ROPE_WINDING_ABILITY_(int ropeId, const char* p1, const char* ropeModelType, float length, BOOL p4)
		{
			invoke<int>(0x3C6490D940FF5D0B, ropeId, p1, ropeModelType, length, p4);
		} // 0x3C6490D940FF5D0B undefined b1207
		static Vector3 GET_ROPE_LAST_VERTEX_COORD(int ropeId)
		{
			return invoke<Vector3>(0x21BB0FBD3E217C2D, ropeId);
		} // 0x21BB0FBD3E217C2D 0x91F6848B b1207
		static Vector3 GET_ROPE_VERTEX_COORD(int ropeId, int vertex)
		{
			return invoke<Vector3>(0xEA61CA8E80F09E4D, ropeId, vertex);
		} // 0xEA61CA8E80F09E4D 0x84374452 b1207
		static void START_ROPE_WINDING(int ropeId)
		{
			invoke<int>(0x1461C72C889E343E, ropeId);
		} // 0x1461C72C889E343E 0x5187BED3 b1207
		static void STOP_ROPE_WINDING(int ropeId)
		{
			invoke<int>(0xCB2D4AB84A19AA7C, ropeId);
		} // 0xCB2D4AB84A19AA7C 0x46826B53 b1207
		static void START_ROPE_UNWINDING_FRONT(int ropeId)
		{
			invoke<int>(0x538D1179EC1AA9A9, ropeId);
		} // 0x538D1179EC1AA9A9 0xFC0DB4C3 b1207
		static void STOP_ROPE_UNWINDING_FRONT(int ropeId)
		{
			invoke<int>(0xFFF3A50779EFBBB3, ropeId);
		} // 0xFFF3A50779EFBBB3 0x2EEDB18F b1207
		static void START_ROPE_UNWINDING_BACK_(int ropeId)
		{
			invoke<int>(0x00F611A794A3C36E, ropeId);
		} // 0x00F611A794A3C36E undefined b1207
		static void STOP_ROPE_UNWINDING_BACK_(int ropeId)
		{
			invoke<int>(0x10DAA76CB8A201A1, ropeId);
		} // 0x10DAA76CB8A201A1 undefined b1207
		static void N0x461FCBDEB4D06717(int ropeId, BOOL p1)
		{
			invoke<int>(0x461FCBDEB4D06717, ropeId, p1);
		} // 0x461FCBDEB4D06717 undefined b1207
		static void N0x423C6B1F3786D28B(Any p0, Any p1)
		{
			invoke<int>(0x423C6B1F3786D28B, p0, p1);
		} // 0x423C6B1F3786D28B undefined b1207
		static void N0x76BAD9D538BCA1AA(int ropeId, float p1)
		{
			invoke<int>(0x76BAD9D538BCA1AA, ropeId, p1);
		} // 0x76BAD9D538BCA1AA undefined b1207
		static void N0xB40EA9E0D2E2F7F3(int ropeId, float p1)
		{
			invoke<int>(0xB40EA9E0D2E2F7F3, ropeId, p1);
		} // 0xB40EA9E0D2E2F7F3 undefined b1207
		static float ROPE_GET_FORCED_LENGTH_(int ropeId)
		{
			return invoke<float>(0x3D69537039F8D824, ropeId);
		} // 0x3D69537039F8D824 undefined b1207
		static void N0x751DF00EEFF122E3(Any p0)
		{
			invoke<int>(0x751DF00EEFF122E3, p0);
		} // 0x751DF00EEFF122E3 undefined b1207
		// Forces a rope to a certain length.
		static void ROPE_FORCE_LENGTH(int ropeId, float length)
		{
			invoke<int>(0xD009F759A723DB1B, ropeId, length);
		} // 0xD009F759A723DB1B 0xABF3130F b1207
		// _ROPE_SET_*
		static void N0x8D59079C37C21D78(int ropeId, float p1)
		{
			invoke<int>(0x8D59079C37C21D78, ropeId, p1);
		} // 0x8D59079C37C21D78 undefined b1207
		static void N0x814D453FCFDF119F(Any p0, Any p1, Any p2)
		{
			invoke<int>(0x814D453FCFDF119F, p0, p1, p2);
		} // 0x814D453FCFDF119F undefined b1207
		static void N0x1FC92BDBA1106BD2(int ropeId, float p1)
		{
			invoke<int>(0x1FC92BDBA1106BD2, ropeId, p1);
		} // 0x1FC92BDBA1106BD2 undefined b1207
		static void N0xDEDE679ED29DD4E7(int ropeId, BOOL p1)
		{
			invoke<int>(0xDEDE679ED29DD4E7, ropeId, p1);
		} // 0xDEDE679ED29DD4E7 undefined b1207
		static void N0xF1EA2A881EB7F2CD(int ropeId, BOOL p1)
		{
			invoke<int>(0xF1EA2A881EB7F2CD, ropeId, p1);
		} // 0xF1EA2A881EB7F2CD undefined b1207
		static void N0x5A989B7EE3672A56(Any p0, Any p1)
		{
			invoke<int>(0x5A989B7EE3672A56, p0, p1);
		} // 0x5A989B7EE3672A56 undefined b1207
		static void N0x483D4E917B0D35A9(Any p0, Any p1)
		{
			invoke<int>(0x483D4E917B0D35A9, p0, p1);
		} // 0x483D4E917B0D35A9 undefined b1207
		static Player ROPE_GET_BREAKER_OF_ROPE_(int ropeId)
		{
			return invoke<Player>(0xEE360CFC80C8B2BC, ropeId);
		} // 0xEE360CFC80C8B2BC undefined b1311
		static void SET_DAMPING(Entity entity, int vertex, float value)
		{
			invoke<int>(0xEEA3B200A6FEB65B, entity, vertex, value);
		} // 0xEEA3B200A6FEB65B 0xCFB37773 b1207
		static void ACTIVATE_PHYSICS(Entity entity)
		{
			invoke<int>(0x710311ADF0E20730, entity);
		} // 0x710311ADF0E20730 0x031711B8 b1207
		static void BREAK_ENTITY_GLASS(Entity entity, float p1, float p2, float p3, float p4, float p5, float p6, float p7, float p8, Any p9, BOOL p10)
		{
			invoke<int>(0x2E648D16F6E308F3, entity, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
		} // 0x2E648D16F6E308F3 0xD0E0402F b1207
		static void N0x8EEDFD8921389928(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9)
		{
			invoke<int>(0x8EEDFD8921389928, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
		} // 0x8EEDFD8921389928 undefined b1207
		static void SET_DISABLE_BREAKING(Object object, BOOL toggle)
		{
			invoke<int>(0x5CEC1A84620E7D5B, object, toggle);
		} // 0x5CEC1A84620E7D5B 0xEE77C326 b1207
		static void SET_DISABLE_FRAG_DAMAGE(Object object, BOOL toggle)
		{
			invoke<int>(0x01BA3AED21C16CFB, object, toggle);
		} // 0x01BA3AED21C16CFB 0x97269DC8 b1207
		static void N0x5BD7457221CC5FF4(Any p0, Any p1)
		{
			invoke<int>(0x5BD7457221CC5FF4, p0, p1);
		} // 0x5BD7457221CC5FF4 undefined b1207
	}

	namespace PLAYER
	{
		static Ped GET_PLAYER_PED(Player player)
		{
			return invoke<Ped>(0x275F255ED201B937, player);
		} // 0x275F255ED201B937 0x6E31E993 b1207
		static Ped GET_PLAYER_PED_2_(Player player)
		{
			return invoke<Ped>(0x5EBE38A20BC51C27, player);
		} // 0x5EBE38A20BC51C27 undefined b1207
		// Only used in script function UPDATE_PLAYER_JUST_DIED_STATE
		static void N0x325434C68358D282(BOOL toggle)
		{
			invoke<int>(0x325434C68358D282, toggle);
		} // 0x325434C68358D282 undefined b1207
		// Does the same like PLAYER::GET_PLAYER_PED
		static Ped GET_PLAYER_PED_SCRIPT_INDEX(Player player)
		{
			return invoke<Ped>(0x5C880F9056D784C8, player);
		} // 0x5C880F9056D784C8 0x6AC64990 b1207
		// Make sure to request the model first and wait until it has loaded.
		static void SET_PLAYER_MODEL(Player player, Hash modelHash, BOOL p2)
		{
			invoke<int>(0xED40380076A31506, player, modelHash, p2);
		} // 0xED40380076A31506 0x774A4C54 b1207
		// Returns true if the given player has a valid ped.
		static BOOL NETWORK_HAS_PLAYER_VALID_PED_(Player player)
		{
			return invoke<BOOL>(0x0760D6F70EBCC05C, player);
		} // 0x0760D6F70EBCC05C undefined b1207
		// Gets the player's team.
		// Returns -1 in singleplayer.
		static int GET_PLAYER_TEAM(Player player)
		{
			return invoke<int>(0xB464EB6A40C7975B, player);
		} // 0xB464EB6A40C7975B 0x9873E404 b1207
		// Sets the player's team.
		static void SET_PLAYER_TEAM(Player player, int team, BOOL bRestrictToThisScript)
		{
			invoke<int>(0xE8DD8536F01DE600, player, team, bRestrictToThisScript);
		} // 0xE8DD8536F01DE600 0x725ADCF2 b1207
		static const char* GET_PLAYER_NAME(Player player)
		{
			return invoke<const char*>(0x7124FD9AC0E01BA0, player);
		} // 0x7124FD9AC0E01BA0 0x406B4B20 b1207
		static const char* FORMAT_PLAYER_NAME_STRING_(const char* string)
		{
			return invoke<const char*>(0x5B6193813E03E4E9, string);
		} // 0x5B6193813E03E4E9 undefined b1207
		static float GET_WANTED_LEVEL_RADIUS(int p0)
		{
			return invoke<float>(0x80B00EB26D9521C7, p0);
		} // 0x80B00EB26D9521C7 0x1CF7D7DA b1207
		static int GET_WANTED_LEVEL_THRESHOLD(int wantedLevel)
		{
			return invoke<int>(0x1B1A3B358F7D8F07, wantedLevel);
		} // 0x1B1A3B358F7D8F07 0xD9783F6B b1207
		// nullsub, doesn't do anything
		static void SET_PLAYER_WANTED_LEVEL(Player player, int wantedLevel, BOOL disableNoMission)
		{
			invoke<int>(0x384D4765395E006C, player, wantedLevel, disableNoMission);
		} // 0x384D4765395E006C 0xB7A0914B b1207
		static BOOL IS_PLAYER_WANTED_LEVEL_GREATER(Player player, int wantedLevel)
		{
			return invoke<BOOL>(0xE1C0AD4C24324C36, player, wantedLevel);
		} // 0xE1C0AD4C24324C36 0x589A2661 b1207
		// nullsub, doesn't do anything
		static void CLEAR_PLAYER_WANTED_LEVEL(Player player)
		{
			invoke<int>(0x4E4B996C928C7AA6, player);
		} // 0x4E4B996C928C7AA6 0x54EA5BCC b1207
		static BOOL IS_PLAYER_DEAD(Player player)
		{
			return invoke<BOOL>(0x2E9C3FCB6798F397, player);
		} // 0x2E9C3FCB6798F397 0x140CA5A8 b1207
		// flags: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eSetPlayerControlFlags
		static void SET_PLAYER_CONTROL(Player player, BOOL toggle, int flags, BOOL bPreventHeadingChange)
		{
			invoke<int>(0x4D51E59243281D80, player, toggle, flags, bPreventHeadingChange);
		} // 0x4D51E59243281D80 0xD17AFCD8 b1207
		static int GET_PLAYER_WANTED_LEVEL(Player player)
		{
			return invoke<int>(0xABC532F9098BFD9D, player);
		} // 0xABC532F9098BFD9D 0xBDCDD163 b1207
		static void SET_MAX_WANTED_LEVEL(int maxWantedLevel)
		{
			invoke<int>(0x28A4BD2CEE236E19, maxWantedLevel);
		} // 0x28A4BD2CEE236E19 0x665A06F5 b1207
		static void SET_MAX_WANTED_LEVEL_2_(int maxWantedLevel)
		{
			invoke<int>(0xEA6DE0CD15AECBE2, maxWantedLevel);
		} // 0xEA6DE0CD15AECBE2 undefined b1207
		// If toggle is set to false:
		//  The police won't be shown on the (mini)map
		//
		// If toggle is set to true:
		//  The police will be shown on the (mini)map
		static void SET_POLICE_RADAR_BLIPS(BOOL toggle)
		{
			invoke<int>(0x6FD7DD6B63F2820E, toggle);
		} // 0x6FD7DD6B63F2820E 0x8E114B10 b1207
		// Checks whether the specified player has a Ped, the Ped is not dead, is not injured and is not arrested.
		static BOOL IS_PLAYER_PLAYING(Player player)
		{
			return invoke<BOOL>(0xBFFB35986CAAE58C, player);
		} // 0xBFFB35986CAAE58C 0xE15D777F b1207
		static void SET_EVERYONE_IGNORE_PLAYER(Player player, BOOL toggle)
		{
			invoke<int>(0x34630A768925B852, player, toggle);
		} // 0x34630A768925B852 0xC915285E b1207
		static BOOL GET_IS_PLAYER_UI_PROMPT_ACTIVE(Player player, int p1)
		{
			return invoke<BOOL>(0x51BEA356B1C60225, player, p1);
		} // 0x51BEA356B1C60225 undefined b1207
		// Params: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/ePromptType
		// promptType is mostly 34 (PP_TRACK_ANIMAL), promptMode = 0 (PP_MODE_BLOCK) in R* Scripts
		static void MODIFY_PLAYER_UI_PROMPT_(Player player, int promptType, int promptMode, BOOL disabled)
		{
			invoke<int>(0x0751D461F06E41CE, player, promptType, promptMode, disabled);
		} // 0x0751D461F06E41CE undefined b1207
		// Returns false if PromptType is enabled
		// Params: See 0x0751D461F06E41CE
		static BOOL GET_PLAYER_UI_PROMPT_IS_DISABLED_(Player player, int promptType, int promptMode)
		{
			return invoke<BOOL>(0x6614F9039BD31931, player, promptType, promptMode);
		} // 0x6614F9039BD31931 undefined b1207
		// Params: See 0x0751D461F06E41CE
		static void MODIFY_PLAYER_UI_PROMPT_FOR_PED_(Player player, Ped ped, int promptType, int promptMode, BOOL enabled)
		{
			invoke<int>(0xA3DB37EDF9A74635, player, ped, promptType, promptMode, enabled);
		} // 0xA3DB37EDF9A74635 undefined b1207
		// Returns true if PromptType is enabled for ped (mount)
		// Params: See 0x0751D461F06E41CE
		static BOOL GET_PLAYER_UI_PROMPT_FOR_PED_IS_ENABLED_(Player player, Ped ped, int promptType, int promptMode)
		{
			return invoke<BOOL>(0xEA8F168A76A0B9BC, player, ped, promptType, promptMode);
		} // 0xEA8F168A76A0B9BC undefined b1207
		static void N0x93624B36E8851B42(Player player)
		{
			invoke<int>(0x93624B36E8851B42, player);
		} // 0x93624B36E8851B42 undefined b1207
		static void N0x9073EC5456651A90(Any p0, Any p1)
		{
			invoke<int>(0x9073EC5456651A90, p0, p1);
		} // 0x9073EC5456651A90 undefined b1207
		static void N0x2E67707BEC52CA4B(Any p0)
		{
			invoke<int>(0x2E67707BEC52CA4B, p0);
		} // 0x2E67707BEC52CA4B undefined b1207
		// Sets whether all random peds will run away from player if they are agitated (threatened) (bool=true), or some peds can stand up for themselves (bool=false).
		static void SET_ALL_RANDOM_PEDS_FLEE(Player player, BOOL toggle)
		{
			invoke<int>(0xE705309B8C6445A4, player, toggle);
		} // 0xE705309B8C6445A4 0x49EAE968 b1207
		static void SET_ALL_RANDOM_PEDS_FLEE_THIS_FRAME(Player player)
		{
			invoke<int>(0xD5C198A62F1DEB0A, player);
		} // 0xD5C198A62F1DEB0A 0xBF974891 b1207
		static void SET_ALL_NEUTRAL_RANDOM_PEDS_FLEE_THIS_FRAME(Player player)
		{
			invoke<int>(0x16752DAA7E6D3F72, player);
		} // 0x16752DAA7E6D3F72 0x02DF7AF4 b1207
		static void N0x1D256EED194F5B58(Any p0)
		{
			invoke<int>(0x1D256EED194F5B58, p0);
		} // 0x1D256EED194F5B58 undefined b1207
		static Any N0x5B7B97E99F84138B(Any p0)
		{
			return invoke<Any>(0x5B7B97E99F84138B, p0);
		} // 0x5B7B97E99F84138B undefined b1207
		// Disables the players ability to be wanted by lawmen
		static void SET_DISABLE_PLAYER_WANTED_LEVEL_(Player player, BOOL disable)
		{
			invoke<int>(0x8674D138391FFB1B, player, disable);
		} // 0x8674D138391FFB1B undefined b1207
		// Returns -1.0f if no multiplier has been set
		static float GET_WANTED_LEVEL_MULTIPLIER_()
		{
			return invoke<float>(0xA82964B9D8D6A983);
		} // 0xA82964B9D8D6A983 undefined b1207
		static void SET_WANTED_LEVEL_MULTIPLIER(float multiplier)
		{
			invoke<int>(0xD7FA719CB54866C2, multiplier);
		} // 0xD7FA719CB54866C2 0x1359292F b1207
		static void RESET_WANTED_LEVEL_DIFFICULTY(Player player)
		{
			invoke<int>(0x062D14F18E8B0CAE, player);
		} // 0x062D14F18E8B0CAE 0xA64C378D b1207
		static void UPDATE_WANTED_POSITION_THIS_FRAME(Player player)
		{
			invoke<int>(0xD0B0B044112BF424, player);
		} // 0xD0B0B044112BF424 0x6B34A160 b1207
		static void SUPPRESS_WITNESSES_CALLING_POLICE_THIS_FRAME(Player player)
		{
			invoke<int>(0x96722257E5381E00, player);
		} // 0x96722257E5381E00 0x3A7E5FB6 b1207
		static void REPORT_POLICE_SPOTTED_PLAYER(Player player)
		{
			invoke<int>(0xCBCCF73FFA69CC6B, player);
		} // 0xCBCCF73FFA69CC6B 0xD15C4B1C b1207
		static void SET_LAW_RESPONSE_DELAY_OVERRIDE(float p0)
		{
			invoke<int>(0xD2DFC9CCA5596A11, p0);
		} // 0xD2DFC9CCA5596A11 0xBF6993C7 b1207
		static void RESET_LAW_RESPONSE_DELAY_OVERRIDE()
		{
			invoke<int>(0x5CE5CACC01D0F985);
		} // 0x5CE5CACC01D0F985 0x47CAB814 b1207
		static BOOL CAN_PLAYER_START_MISSION(Player player)
		{
			return invoke<BOOL>(0x2DF170B1185AF777, player);
		} // 0x2DF170B1185AF777 0x39E3CB3F b1207
		static BOOL IS_PLAYER_READY_FOR_CUTSCENE(Player player)
		{
			return invoke<BOOL>(0xAA67BCB0097F2FA3, player);
		} // 0xAA67BCB0097F2FA3 0xBB77E9CD b1207
		static BOOL IS_PLAYER_TARGETTING_ENTITY(Player player, Entity entity, BOOL p2)
		{
			return invoke<BOOL>(0x27F89FDC16688A7A, player, entity, p2);
		} // 0x27F89FDC16688A7A 0xF3240B77 b1207
		static BOOL GET_PLAYER_TARGET_ENTITY(Player player, Entity* entity)
		{
			return invoke<BOOL>(0xAE663DDD99C8A670, player, entity);
		} // 0xAE663DDD99C8A670 0xF6AAA2D7 b1207
		// _GET_A* - _GET_C*
		static BOOL N0x927861B2C08DBEA5(Player player)
		{
			return invoke<BOOL>(0x927861B2C08DBEA5, player);
		} // 0x927861B2C08DBEA5 undefined b1207
		// Checks if player is focused on any entity
		static BOOL IS_PLAYER_FREE_FOCUSING_(Player player)
		{
			return invoke<BOOL>(0x1A51BFE60708E482, player);
		} // 0x1A51BFE60708E482 undefined b1207
		static BOOL GET_PLAYER_INTERACTION_TARGET_ENTITY(Player player, Entity* outEntity, BOOL p2, BOOL p3)
		{
			return invoke<BOOL>(0x3EE1F7A8C32F24E1, player, outEntity, p2, p3);
		} // 0x3EE1F7A8C32F24E1 undefined b1207
		// _GET_PLAYER_I*
		static Any N0xBEA3A6E5F5F79A6F(Any p0, Any p1)
		{
			return invoke<Any>(0xBEA3A6E5F5F79A6F, p0, p1);
		} // 0xBEA3A6E5F5F79A6F undefined b1207
		static BOOL IS_PLAYER_IN_SCOPE_(Player player)
		{
			return invoke<BOOL>(0x04D7F33640662FA2, player);
		} // 0x04D7F33640662FA2 undefined b1207
		// Gets a value indicating whether the specified player is currently aiming freely.
		static BOOL IS_PLAYER_FREE_AIMING(Player player)
		{
			return invoke<BOOL>(0x936F967D4BE1CE9D, player);
		} // 0x936F967D4BE1CE9D 0x1DEC67B7 b1207
		// Gets a value indicating whether the specified player is currently aiming freely at the specified entity.
		static BOOL IS_PLAYER_FREE_AIMING_AT_ENTITY(Player player, Entity entity)
		{
			return invoke<BOOL>(0x8C67C11C68713D25, player, entity);
		} // 0x8C67C11C68713D25 0x7D80EEAA b1207
		static BOOL GET_ENTITY_PLAYER_IS_FREE_AIMING_AT(Player player, Entity* entity)
		{
			return invoke<BOOL>(0xA6817C110B830EAD, player, entity);
		} // 0xA6817C110B830EAD 0x8866D9D0 b1207
		static void N0x3DAABE78A23694BC(Any p0, Any p1)
		{
			invoke<int>(0x3DAABE78A23694BC, p0, p1);
		} // 0x3DAABE78A23694BC undefined b1207
		// Only used in script function PROCESS_PED_INTERRUPT_DIALOGUE
		// _GET_PLAYER_*
		static BOOL N0x7AE93C45EC14A166(Player player, Ped* ped)
		{
			return invoke<BOOL>(0x7AE93C45EC14A166, player, ped);
		} // 0x7AE93C45EC14A166 undefined b1207
		// Affects the range of auto aim target.
		static void SET_PLAYER_LOCKON_RANGE_OVERRIDE(Player player, float range)
		{
			invoke<int>(0x3A3CD06597388322, player, range);
		} // 0x3A3CD06597388322 0x74D42C03 b1207
		// Sets whether this player can be hassled by gangs.
		static void SET_PLAYER_CAN_BE_HASSLED_BY_GANGS(Player player, BOOL toggle)
		{
			invoke<int>(0xC7FE774412046825, player, toggle);
		} // 0xC7FE774412046825 0x71B305BB b1207
		// Sets whether this player can take cover.
		static void SET_PLAYER_CAN_USE_COVER(Player player, BOOL toggle)
		{
			invoke<int>(0x5EDA520F7A3BAF4E, player, toggle);
		} // 0x5EDA520F7A3BAF4E 0x13CAFAFA b1207
		static void N0xD1A70C1E8D1031FE(Any p0, Any p1)
		{
			invoke<int>(0xD1A70C1E8D1031FE, p0, p1);
		} // 0xD1A70C1E8D1031FE undefined b1207
		// _SET_PLAYER_CAN_BE_* - _SET_PLAYER_CAN_USE_*
		static void N0xACA45DDCEF6071C4(Player player, BOOL p1)
		{
			invoke<int>(0xACA45DDCEF6071C4, player, p1);
		} // 0xACA45DDCEF6071C4 undefined b1207
		// Params: p1 is mostly 15, sometimes 1 in R* Scripts (Function: PLAYER_TOGGLE_PICK_UP_HATS)
		// _SET_PLAYER_*
		static void N0xA0C683284DF027C7(Player player, int p1, BOOL enable)
		{
			invoke<int>(0xA0C683284DF027C7, player, p1, enable);
		} // 0xA0C683284DF027C7 undefined b1207
		static void SET_PLAYER_CAN_MERCY_KILL_(Player player, BOOL toggle)
		{
			invoke<int>(0x39363DFD04E91496, player, toggle);
		} // 0x39363DFD04E91496 undefined b1311
		static void N0x4EC8BE63B8A5D4EF(Player player, int p1)
		{
			invoke<int>(0x4EC8BE63B8A5D4EF, player, p1);
		} // 0x4EC8BE63B8A5D4EF undefined b1207
		// Gets the maximum wanted level the player can get.
		// Ranges from 0 to 5.
		static int GET_MAX_WANTED_LEVEL()
		{
			return invoke<int>(0xD04CFAD1E2B7984A);
		} // 0xD04CFAD1E2B7984A 0x457F1E44 b1207
		static BOOL IS_PLAYER_TARGETTING_ANYTHING(Player player)
		{
			return invoke<BOOL>(0x4605C66E0F935F83, player);
		} // 0x4605C66E0F935F83 0x456DB50D b1207
		static void RESTORE_PLAYER_STAMINA(Player player, float p1)
		{
			invoke<int>(0xC41F4B6E23FE6A4A, player, p1);
		} // 0xC41F4B6E23FE6A4A 0x62A93608 b1207
		// SET_PLAYER_S/T*
		static void N0x8591EE69CC3ED257(Player player, BOOL toggle)
		{
			invoke<int>(0x8591EE69CC3ED257, player, toggle);
		} // 0x8591EE69CC3ED257 undefined b1207
		// Returns the group ID the player is member of.
		static int GET_PLAYER_GROUP(Player player)
		{
			return invoke<int>(0x9BAB31815159ABCF, player);
		} // 0x9BAB31815159ABCF 0xA5EDCDE8 b1207
		static void N0x3D9DA5C9EFD20D88(Any p0, Any p1)
		{
			invoke<int>(0x3D9DA5C9EFD20D88, p0, p1);
		} // 0x3D9DA5C9EFD20D88 undefined b1207
		static void N0x2BEED53B912537D0(Any p0, Any p1, Any p2)
		{
			invoke<int>(0x2BEED53B912537D0, p0, p1, p2);
		} // 0x2BEED53B912537D0 undefined b1207
		static void N0x908D4B72854C8F62(Any p0)
		{
			invoke<int>(0x908D4B72854C8F62, p0);
		} // 0x908D4B72854C8F62 undefined b1207
		static Any N0xD1F6B912785BFD35(Any p0)
		{
			return invoke<Any>(0xD1F6B912785BFD35, p0);
		} // 0xD1F6B912785BFD35 undefined b1207
		static void N0xC4873B053054C04B(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7)
		{
			invoke<int>(0xC4873B053054C04B, p0, p1, p2, p3, p4, p5, p6, p7);
		} // 0xC4873B053054C04B undefined b1207
		static void N0xCA59808E51FD67C4(Any p0, Any p1)
		{
			invoke<int>(0xCA59808E51FD67C4, p0, p1);
		} // 0xCA59808E51FD67C4 undefined b1207
		static void N0xBA5CA1FEB5DE0DF6(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5)
		{
			invoke<int>(0xBA5CA1FEB5DE0DF6, p0, p1, p2, p3, p4, p5);
		} // 0xBA5CA1FEB5DE0DF6 undefined b1207
		static void N0x0869D499A7848309(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7)
		{
			invoke<int>(0x0869D499A7848309, p0, p1, p2, p3, p4, p5, p6, p7);
		} // 0x0869D499A7848309 undefined b1207
		// _IS_PLAYER_I* - _IS_PLAYER_P*
		static BOOL N0xB331D8A73F9D2BDF(Player player, Any* p1)
		{
			return invoke<BOOL>(0xB331D8A73F9D2BDF, player, p1);
		} // 0xB331D8A73F9D2BDF undefined b1207
		// Used in script function: NET_AUTO_FOLLOW_UPDATE_LEADER_VALUES
		// followMode:
		// HORSEFOLLOWMODE_AUTO = 0,
		// HORSEFOLLOWMODE_SIDE_ONLY,
		// HORSEFOLLOWMODE_BEHIND_ONLY,
		// HORSEFOLLOWMODE_BEHIND_AND_SIDE,
		// HORSEFOLLOWMODE_BEHIND_CLOSE
		// followPriority:
		// HORSEFOLLOWPRIORITY_STEER_ASSIST = 0,
		// HORSEFOLLOWPRIORITY_AMBIENT,
		// HORSEFOLLOWPRIORITY_NORMAL,
		// HORSEFOLLOWPRIORITY_HIGH
		static void ADD_PLAYER_AS_FOLLOW_TARGET_(Player player, Ped ped, float p2, float p3, int followMode, int followPriority, BOOL p6)
		{
			invoke<int>(0xAC22AA6DF4D1C1DE, player, ped, p2, p3, followMode, followPriority, p6);
		} // 0xAC22AA6DF4D1C1DE undefined b1207
		static void REMOVE_PLAYER_AS_FOLLOW_TARGET_(Player player, Ped ped)
		{
			invoke<int>(0x0C6B89876262A99D, player, ped);
		} // 0x0C6B89876262A99D undefined b1207
		static void N0x12E09E278C6C29B7(Any p0)
		{
			invoke<int>(0x12E09E278C6C29B7, p0);
		} // 0x12E09E278C6C29B7 undefined b1207
		static void N0xDD33A82352C4652F(Player player, Ped ped, int p2)
		{
			invoke<int>(0xDD33A82352C4652F, player, ped, p2);
		} // 0xDD33A82352C4652F undefined b1207
		static void N0x1FDA57E8908F2609(Player player, Ped ped, BOOL useSteerassist)
		{
			invoke<int>(0x1FDA57E8908F2609, player, ped, useSteerassist);
		} // 0x1FDA57E8908F2609 undefined b1207
		static void N0x84481018E668E1B8(Player player, Ped ped, Any p2)
		{
			invoke<int>(0x84481018E668E1B8, player, ped, p2);
		} // 0x84481018E668E1B8 undefined b1207
		// _IS_PLAYER_F*
		static BOOL N0x2009F8AB7A5E9D6D(Player player)
		{
			return invoke<BOOL>(0x2009F8AB7A5E9D6D, player);
		} // 0x2009F8AB7A5E9D6D undefined b1207
		static BOOL IS_PLAYER_FOLLOWING_TARGET_(Player player, Ped ped)
		{
			return invoke<BOOL>(0xE24C64D9ADED2EF5, player, ped);
		} // 0xE24C64D9ADED2EF5 undefined b1207
		// _IS_PLAYER_A* - _IS_PLAYER_BE*
		static BOOL N0xE7F8707269544B29(Player player, Ped ped)
		{
			return invoke<BOOL>(0xE7F8707269544B29, player, ped);
		} // 0xE7F8707269544B29 undefined b1207
		static Any N0xE631EAF35828FA67(Any p0)
		{
			return invoke<Any>(0xE631EAF35828FA67, p0);
		} // 0xE631EAF35828FA67 undefined b1207
		static void N0x086549F3B0381CB1(Any p0, Any p1)
		{
			invoke<int>(0x086549F3B0381CB1, p0, p1);
		} // 0x086549F3B0381CB1 undefined b1207
		// Returns whether the player can control himself.
		static BOOL IS_PLAYER_CONTROL_ON(Player player)
		{
			return invoke<BOOL>(0x7964097FCE4C244B, player);
		} // 0x7964097FCE4C244B 0x618857F2 b1207
		static BOOL IS_PLAYER_SCRIPT_CONTROL_ON(Player player)
		{
			return invoke<BOOL>(0xB78350754157C00F, player);
		} // 0xB78350754157C00F 0x61B00A84 b1207
		// Returns TRUE if the player ('s ped) is climbing at the moment.
		static BOOL IS_PLAYER_CLIMBING(Player player)
		{
			return invoke<BOOL>(0xB8A70C22FD48197A, player);
		} // 0xB8A70C22FD48197A 0x4A9E9AE0 b1207
		static void N0xEBB6E27AC2FF32DA(Any p0, Any p1, Any p2, Any p3, Any p4)
		{
			invoke<int>(0xEBB6E27AC2FF32DA, p0, p1, p2, p3, p4);
		} // 0xEBB6E27AC2FF32DA undefined b1207
		static Any N0xB15CD2F9932C9AB5(Any p0)
		{
			return invoke<Any>(0xB15CD2F9932C9AB5, p0);
		} // 0xB15CD2F9932C9AB5 undefined b1207
		// _IS_PLAYER_S* - _IS_PLAYER_T*
		static BOOL N0x621D1B289CAF5978(Player player)
		{
			return invoke<BOOL>(0x621D1B289CAF5978, player);
		} // 0x621D1B289CAF5978 undefined b1207
		// Return true while player is being arrested / busted.
		//
		// If atArresting is set to 1, this function will return 1 when player is being arrested (while player is putting his hand up, but still have control)
		//
		// If atArresting is set to 0, this function will return 1 only when the busted screen is shown.
		static BOOL IS_PLAYER_BEING_ARRESTED(Player player, BOOL atArresting)
		{
			return invoke<BOOL>(0xC8183AE963C58374, player, atArresting);
		} // 0xC8183AE963C58374 0x7F6A60D3 b1207
		static void RESET_PLAYER_ARREST_STATE(Player player)
		{
			invoke<int>(0x12917931C31F1750, player);
		} // 0x12917931C31F1750 0x453C7CAB b1207
		static void N0xCBB54CC7FFFFAB86(Any p0, Any p1, Any p2, Any p3)
		{
			invoke<int>(0xCBB54CC7FFFFAB86, p0, p1, p2, p3);
		} // 0xCBB54CC7FFFFAB86 undefined b1207
		static void N0xBED386157F65942C(Any p0, Any p1)
		{
			invoke<int>(0xBED386157F65942C, p0, p1);
		} // 0xBED386157F65942C undefined b1207
		static Any N0xDAB6A2FC56B7DE65(Any p0)
		{
			return invoke<Any>(0xDAB6A2FC56B7DE65, p0);
		} // 0xDAB6A2FC56B7DE65 undefined b1207
		static Any N0x0F4EAF69DA41AF43(Any p0)
		{
			return invoke<Any>(0x0F4EAF69DA41AF43, p0);
		} // 0x0F4EAF69DA41AF43 undefined b1207
		static void SET_BOUNTY_TARGET_(Player player, Player target)
		{
			invoke<int>(0x6ADF821FBF21920E, player, target);
		} // 0x6ADF821FBF21920E undefined b1207
		static void CLEAR_BOUNTY_TARGET_(Player player)
		{
			invoke<int>(0x8F2A81C09DA9124A, player);
		} // 0x8F2A81C09DA9124A undefined b1207
		static Vehicle GET_PLAYERS_LAST_VEHICLE()
		{
			return invoke<Vehicle>(0x2F96E7720B0B19EA);
		} // 0x2F96E7720B0B19EA 0xE2757AC1 b1207
		// Returns the same as PLAYER_ID and NETWORK_PLAYER_ID_TO_INT
		static Player GET_PLAYER_INDEX()
		{
			return invoke<Player>(0x47E385B0D957C8D4);
		} // 0x47E385B0D957C8D4 0x309BBDC1 b1207
		// Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
		static Player INT_TO_PLAYERINDEX(int value)
		{
			return invoke<Player>(0x748B3A65C2604C33, value);
		} // 0x748B3A65C2604C33 0x98DD98F1 b1207
		// Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
		static int INT_TO_PARTICIPANTINDEX(int value)
		{
			return invoke<int>(0x58FF971FC8F2702C, value);
		} // 0x58FF971FC8F2702C 0x98F3B274 b1207
		// This returns YOUR 'identity' as a Player type.
		//
		// Always returns 0 in story mode.
		static Player PLAYER_ID()
		{
			return invoke<Player>(0x217E9DC48139933D);
		} // 0x217E9DC48139933D 0x8AEA886C b1207
		// Returns current player ped
		static Ped PLAYER_PED_ID()
		{
			return invoke<Ped>(0x096275889B8E0EE0);
		} // 0x096275889B8E0EE0 0xFA92E226 b1207
		// Does exactly the same thing as PLAYER_ID()
		static int NETWORK_PLAYER_ID_TO_INT()
		{
			return invoke<int>(0x8A9386F0749A17FA);
		} // 0x8A9386F0749A17FA 0x8DD5B838 b1207
		static BOOL HAS_FORCE_CLEANUP_OCCURRED(int cleanupFlags)
		{
			return invoke<BOOL>(0xC11469DCA6FC3BB5, cleanupFlags);
		} // 0xC11469DCA6FC3BB5 0x4B37333C b1207
		static void FORCE_CLEANUP(int cleanupFlags)
		{
			invoke<int>(0x768C017FB878E4F4, cleanupFlags);
		} // 0x768C017FB878E4F4 0xFDAAEA2B b1207
		static void FORCE_CLEANUP_FOR_ALL_THREADS_WITH_THIS_NAME(const char* name, int cleanupFlags)
		{
			invoke<int>(0xDAACAF8B687F2353, name, cleanupFlags);
		} // 0xDAACAF8B687F2353 0x04256C73 b1207
		static void FORCE_CLEANUP_FOR_THREAD_WITH_THIS_ID(int id, int cleanupFlags)
		{
			invoke<int>(0xF4C9512A2F0A3031, id, cleanupFlags);
		} // 0xF4C9512A2F0A3031 0x882D3EB3 b1207
		static int GET_CAUSE_OF_MOST_RECENT_FORCE_CLEANUP()
		{
			return invoke<int>(0x84E8E29EBD4A46D2);
		} // 0x84E8E29EBD4A46D2 0x39AA9FC8 b1207
		// mood: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/ePedMood
		static void SET_PLAYER_MOOD_(Player player, int mood)
		{
			invoke<int>(0x39BED552DB46FFA9, player, mood);
		} // 0x39BED552DB46FFA9 undefined b1207
		// See _SET_PLAYER_MOOD
		static int GET_PLAYER_MOOD_(Player player)
		{
			return invoke<int>(0x054473164C012699, player);
		} // 0x054473164C012699 undefined b1207
		static void SET_PLAYER_MAY_ONLY_ENTER_THIS_VEHICLE(Player player, Vehicle vehicle)
		{
			invoke<int>(0xDA35A134038557EC, player, vehicle);
		} // 0xDA35A134038557EC 0xA454DD29 b1207
		static void N0xC71D07C96946E263(Any p0, Any p1)
		{
			invoke<int>(0xC71D07C96946E263, p0, p1);
		} // 0xC71D07C96946E263 undefined b1207
		static void SET_PLAYER_MAY_NOT_ENTER_ANY_VEHICLE(Player player)
		{
			invoke<int>(0xBEC463B3A11C909E, player);
		} // 0xBEC463B3A11C909E 0xAF7AFCC4 b1207
		static BOOL IS_SYSTEM_UI_BEING_DISPLAYED()
		{
			return invoke<BOOL>(0x908258B6209E71F7);
		} // 0x908258B6209E71F7 0xE495B6DA b1207
		static void N0xD48227263E3D06AE(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9)
		{
			invoke<int>(0xD48227263E3D06AE, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
		} // 0xD48227263E3D06AE undefined b1232
		static void N0x3946FC742AC305CD(Player player, Ped ped, const char* p2, float x, float y, float z, Entity targetEntity, const char* p7)
		{
			invoke<int>(0x3946FC742AC305CD, player, ped, p2, x, y, z, targetEntity, p7);
		} // 0x3946FC742AC305CD undefined b1207
		static void N0xA28056CD1B04B250(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9, Any p10)
		{
			invoke<int>(0xA28056CD1B04B250, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
		} // 0xA28056CD1B04B250 undefined b1232
		// _DISABLE_*(PLAYER_FORCED_INTERACTION_LOCKON?)
		static void N0xC67A4910425F11F1(Player player, const char* name)
		{
			invoke<int>(0xC67A4910425F11F1, player, name);
		} // 0xC67A4910425F11F1 undefined b1207
		// Simply sets you as invincible (Health will not deplete).
		static void SET_PLAYER_INVINCIBLE(Player player, BOOL toggle)
		{
			invoke<int>(0xFEBEEBC9CBDF4B12, player, toggle);
		} // 0xFEBEEBC9CBDF4B12 0xDFB9A2A2 b1207
		// Returns the player's invincibility status.
		static BOOL GET_PLAYER_INVINCIBLE(Player player)
		{
			return invoke<BOOL>(0x0CBBCB2CCFA7DC4E, player);
		} // 0x0CBBCB2CCFA7DC4E 0x680C90EE b1207
		static void SET_PLAYER_LOCKON(Player player, BOOL toggle)
		{
			invoke<int>(0x462AA1973CBBA75E, player, toggle);
		} // 0x462AA1973CBBA75E 0x0B270E0F b1207
		static void SET_LOCKON_TO_FRIENDLY_PLAYERS(Player player, BOOL toggle)
		{
			invoke<int>(0x4A056257802DD3E5, player, toggle);
		} // 0x4A056257802DD3E5 undefined b1207
		// Sets your targeting mode for when you're on foot.
		// enum eTargetingMode
		// {
		// 	TARGETING_MODE_INVALID = -1,
		// 	TARGETING_MODE_CAUSAL, (Wide)
		// 	TARGETING_MODE_NORMAL,
		// 	TARGETING_MODE_HARD, (Narrow)
		// 	TARGETING_MODE_EXPERT (Free Aim)
		// };
		static void SET_PLAYER_TARGETING_MODE(int targetMode)
		{
			invoke<int>(0xD66A941F401E7302, targetMode);
		} // 0xD66A941F401E7302 0x61CAE253 b1207
		// Sets your targeting mode for when you're in a vehicle (perhaps a mount/horse).
		// see SET_PLAYER_TARGETING_MODE for eTargetingMode
		static void SET_PLAYER_IN_VEHICLE_TARGETING_MODE_(int targetMode)
		{
			invoke<int>(0x19B4F71703902238, targetMode);
		} // 0x19B4F71703902238 undefined b1207
		static Any N0x747257807B8721CE(Any p0, Any p1)
		{
			return invoke<Any>(0x747257807B8721CE, p0, p1);
		} // 0x747257807B8721CE undefined b1207
		static Any N0x8702D9150D9FBB3D(Any p0, Any p1)
		{
			return invoke<Any>(0x8702D9150D9FBB3D, p0, p1);
		} // 0x8702D9150D9FBB3D undefined b1207
		static void N0xCB0B9506BC91E441(Any p0, Any p1)
		{
			invoke<int>(0xCB0B9506BC91E441, p0, p1);
		} // 0xCB0B9506BC91E441 undefined b1207
		static void CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_PED(Player player)
		{
			invoke<int>(0x270B63A641BE32F2, player);
		} // 0x270B63A641BE32F2 0x1D31CBBD b1207
		static BOOL HAS_PLAYER_DAMAGED_AT_LEAST_ONE_PED(Player player)
		{
			return invoke<BOOL>(0xDA4A4B9B96E20092, player);
		} // 0xDA4A4B9B96E20092 0x14F52453 b1207
		static void CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_NON_ANIMAL_PED(Player player)
		{
			invoke<int>(0x0361096D6CE4372C, player);
		} // 0x0361096D6CE4372C 0x7E3BFBC5 b1207
		static BOOL HAS_PLAYER_DAMAGED_AT_LEAST_ONE_NON_ANIMAL_PED(Player player)
		{
			return invoke<BOOL>(0x16C8D205DD5A2E90, player);
		} // 0x16C8D205DD5A2E90 0xA3707DFC b1207
		static void N0xEACEBAAE0A33FB3F(Any p0)
		{
			invoke<int>(0xEACEBAAE0A33FB3F, p0);
		} // 0xEACEBAAE0A33FB3F undefined b1207
		// _HAS_PLAYER_D*
		static BOOL N0x72AD59F7B7FB6E24(Player player, int p1)
		{
			return invoke<BOOL>(0x72AD59F7B7FB6E24, player, p1);
		} // 0x72AD59F7B7FB6E24 undefined b1207
		static BOOL N0x1A6E84F13C952094(Player player, int p1, Any* p2)
		{
			return invoke<BOOL>(0x1A6E84F13C952094, player, p1, p2);
		} // 0x1A6E84F13C952094 undefined b1207
		// damageInfo: STANDARD_PED_DAMAGE, STANDARD_FEMALE_PED_DAMAGE, STANDARD_PLAYER_PED_DAMAGE_MP, STANDARD_FEMALE_PLAYER_PED_DAMAGE_MP
		static void SET_PLAYER_DAMAGE_INFO_OVERRIDE_(Player player, const char* damageInfo)
		{
			invoke<int>(0x78B3D19AF6391A55, player, damageInfo);
		} // 0x78B3D19AF6391A55 undefined b1207
		// _RESET_PLAYER_A* - _RESET_PLAYER_I*
		static void N0x1F488807BC8E0630(Player player)
		{
			invoke<int>(0x1F488807BC8E0630, player);
		} // 0x1F488807BC8E0630 undefined b1207
		// This can be between 1.0f - 50.0f
		static void SET_AIR_DRAG_MULTIPLIER_FOR_PLAYERS_VEHICLE(Player player, float multiplier)
		{
			invoke<int>(0x5DA6500FE849DA16, player, multiplier);
		} // 0x5DA6500FE849DA16 0xF20F72E5 b1207
		// Swim speed multiplier.
		// Multiplier goes up to 1.49f
		static void SET_SWIM_MULTIPLIER_FOR_PLAYER(Player player, float multiplier)
		{
			invoke<int>(0xBFCEABDE34DA5085, player, multiplier);
		} // 0xBFCEABDE34DA5085 0xB986FF47 b1207
		static BOOL N0x73EB2EF2E92D23BF()
		{
			return invoke<BOOL>(0x73EB2EF2E92D23BF);
		} // 0x73EB2EF2E92D23BF undefined b1207
		static void SET_PLAYER_FORCED_AIM(Player player, BOOL toggle, Ped ped, int p3, BOOL p4)
		{
			invoke<int>(0xD5FCC166AEB2FD0F, player, toggle, ped, p3, p4);
		} // 0xD5FCC166AEB2FD0F 0x94E42E2E b1207
		static void N0x310CE349E0C0EC4B(Player player, Ped ped, int p2)
		{
			invoke<int>(0x310CE349E0C0EC4B, player, ped, p2);
		} // 0x310CE349E0C0EC4B undefined b1207
		// Inhibits the player from using any method of combat including melee and firearms.
		//
		// NOTE: Only disables the firing for one frame
		static void DISABLE_PLAYER_FIRING(Player player, BOOL toggle)
		{
			invoke<int>(0x2970929FD5F9FC89, player, toggle);
		} // 0x2970929FD5F9FC89 0x30CB28CB b1207
		static void N0xEBFF94328FF7A18A(Any p0, Any p1)
		{
			invoke<int>(0xEBFF94328FF7A18A, p0, p1);
		} // 0xEBFF94328FF7A18A undefined b1207
		static void N0xF993373285053D77(Any p0, Any p1, Any p2)
		{
			invoke<int>(0xF993373285053D77, p0, p1, p2);
		} // 0xF993373285053D77 undefined b1207
		static Any N0xE956C2340A76272E(Any p0)
		{
			return invoke<Any>(0xE956C2340A76272E, p0);
		} // 0xE956C2340A76272E undefined b1207
		static void ENABLE_CUSTOM_DEADEYE_ABILITY_(Player player, BOOL enable)
		{
			invoke<int>(0x95EE1DEE1DCD9070, player, enable);
		} // 0x95EE1DEE1DCD9070 undefined b1207
		static Any N0xDE6C85975F9D4894(Any p0)
		{
			return invoke<Any>(0xDE6C85975F9D4894, p0);
		} // 0xDE6C85975F9D4894 undefined b1207
		// Used in script function INIT_DEADEYE_SLOWDOWN
		// _SPECIAL_ABILITY*
		static void N0xBBA140062B15A8AC(Player player)
		{
			invoke<int>(0xBBA140062B15A8AC, player);
		} // 0xBBA140062B15A8AC undefined b1207
		static void SPECIAL_ABILITY_SET_DISABLED_(Player player, BOOL disabled)
		{
			invoke<int>(0xAE637BB8EF017875, player, disabled);
		} // 0xAE637BB8EF017875 undefined b1207
		static BOOL IS_SPECIAL_ABILITY_ACTIVE_(Player player)
		{
			return invoke<BOOL>(0xB16223CB7DA965F0, player);
		} // 0xB16223CB7DA965F0 undefined b1207
		// Toggle handles wether Deadeye and Eagleeye are infinite or not.
		static void MODIFY_INFINITE_TRAIL_VISION_(Player player, BOOL toggle)
		{
			invoke<int>(0x28A13BF6B05C3D83, player, toggle);
		} // 0x28A13BF6B05C3D83 undefined b1207
		static void SPECIAL_ABILITY_SET_EAGLE_EYE_DISABLED_(Player player)
		{
			invoke<int>(0xC0B21F235C02139C, player);
		} // 0xC0B21F235C02139C undefined b1207
		// Restores Deadeye by given amount.
		// Params: p2, p3, p4 = 0, 0, 1 in R* Scripts
		static void SPECIAL_ABILITY_RESTORE_BY_AMOUNT_(Player player, float amount, int p2, int p3, int p4)
		{
			invoke<int>(0x51345AE20F22C261, player, amount, p2, p3, p4);
		} // 0x51345AE20F22C261 undefined b1207
		// Params: p1, p2, p3, p4 = 1.f, 0, 0, 0 in R* Scripts
		// _SPECIAL_ABILITY*
		static void N0xFA437FA0738C370C(Player player, float p1, int p2, int p3, int p4)
		{
			invoke<int>(0xFA437FA0738C370C, player, p1, p2, p3, p4);
		} // 0xFA437FA0738C370C undefined b1207
		// Only used in R* SP Script short_update
		// Restores Deadeye Outer Ring
		static void SPECIAL_ABILITY_RESTORE_OUTER_RING_(Player player, float amount)
		{
			invoke<int>(0x2498035289B5688F, player, amount);
		} // 0x2498035289B5688F undefined b1207
		// If player has less Dead Eye than required, Dead Eye cant be triggered.
		static float GET_PLAYER_REQUIRED_DEAD_EYE_AMOUNT_(Player player)
		{
			return invoke<float>(0x811A748B1BE231BA, player);
		} // 0x811A748B1BE231BA undefined b1207
		// Returns Deadeye value from player
		static float SPECIAL_ABILITY_GET_AMOUNT_CACHED_(Player player)
		{
			return invoke<float>(0x029884FB65821B07, player);
		} // 0x029884FB65821B07 undefined b1207
		// Drains Deadeye by given amount.
		static void SPECIAL_ABILITY_DRAIN_BY_AMOUNT_(Player player, float amount, Any p2)
		{
			invoke<int>(0x200114E99552462B, player, amount, p2);
		} // 0x200114E99552462B undefined b1207
		// Params: p1 = -1 in R* Scripts
		static void SPECIAL_ABILITY_START_RESTORE_(Player player, int p1, BOOL p2)
		{
			invoke<int>(0x1D77B47AFA584E90, player, p1, p2);
		} // 0x1D77B47AFA584E90 undefined b1207
		static void SET_SPECIAL_ABILITY_MULTIPLIER_(Player player, float multiplier)
		{
			invoke<int>(0x5A498FCA232F71E1, player, multiplier);
		} // 0x5A498FCA232F71E1 undefined b1207
		static float GET_PLAYER_SPECIAL_ABILITY_MULTIPLIER_(Player player)
		{
			return invoke<float>(0xAB3773E7AA1E9DCC, player);
		} // 0xAB3773E7AA1E9DCC undefined b1207
		// SPECIAL_ABILITY_NONE = -1,
		// SPECIAL_ABILITY_CAR_SLOWDOWN,
		// SPECIAL_ABILITY_RAGE,
		// SPECIAL_ABILITY_BULLET_TIME,
		// SPECIAL_ABILITY_SNAPSHOT,
		// SPECIAL_ABILITY_INSULT,
		// SPECIAL_ABILITY_DEADEYE,
		// SPECIAL_ABILITY_REVIVE
		static void SET_SPECIAL_ABILITY_TYPE_(Player player, int type)
		{
			invoke<int>(0x00BA333DA05ADC23, player, type);
		} // 0x00BA333DA05ADC23 undefined b1207
		static void N0x22B3CABEDDB538B2(Player player, float p1)
		{
			invoke<int>(0x22B3CABEDDB538B2, player, p1);
		} // 0x22B3CABEDDB538B2 undefined b1207
		// durationCost: per second
		static void SET_SPECIAL_ABILITY_DURATION_COST_(Player player, float durationCost)
		{
			invoke<int>(0xB783F75940B23014, player, durationCost);
		} // 0xB783F75940B23014 undefined b1207
		// Only used in R* SP Script short_update
		static void SET_SPECIAL_ABILITY_DISABLE_TIMER_(Player player, float timer)
		{
			invoke<int>(0xC0B1C05B313693D1, player, timer);
		} // 0xC0B1C05B313693D1 undefined b1207
		static Any N0x57D9991DC1334151(Any p0)
		{
			return invoke<Any>(0x57D9991DC1334151, p0);
		} // 0x57D9991DC1334151 undefined b1207
		static Any N0x21091B4BEB6376EE(Any p0)
		{
			return invoke<Any>(0x21091B4BEB6376EE, p0);
		} // 0x21091B4BEB6376EE undefined b1207
		static void SET_SPECIAL_ABILITY_ACTIVATION_COST_(Player player, float activationCost, int p2)
		{
			invoke<int>(0xAE4BCC79C587EBBF, player, activationCost, p2);
		} // 0xAE4BCC79C587EBBF undefined b1207
		// _SET_SPECIAL_ABILITY_*
		static void N0x4D1699543B1C023C(Player player, float p1)
		{
			invoke<int>(0x4D1699543B1C023C, player, p1);
		} // 0x4D1699543B1C023C undefined b1207
		static float GET_PLAYER_DEAD_EYE_METER_LEVEL_(Player player, BOOL p1)
		{
			return invoke<float>(0x3A6AE4EEE30370FE, player, p1);
		} // 0x3A6AE4EEE30370FE undefined b1207
		static float GET_PLAYER_DEAD_EYE_(Player player)
		{
			return invoke<float>(0xA81D24AE0AF99A5E, player);
		} // 0xA81D24AE0AF99A5E undefined b1207
		static float GET_PLAYER_CACHED_DEAD_EYE_AMOUNT_(Player player)
		{
			return invoke<float>(0xDF66A37936D5F3D9, player);
		} // 0xDF66A37936D5F3D9 undefined b1207
		static float GET_PLAYER_MAX_DEAD_EYE_(Player player, Any p1)
		{
			return invoke<float>(0x592F58BC4D2A2CF3, player, p1);
		} // 0x592F58BC4D2A2CF3 undefined b1207
		static float GET_PLAYER_HEALTH_(Player player)
		{
			return invoke<float>(0x0317C947D062854E, player);
		} // 0x0317C947D062854E undefined b1207
		static float GET_PLAYER_STAMINA_(Player player)
		{
			return invoke<float>(0x0FF421E467373FCF, player);
		} // 0x0FF421E467373FCF undefined b1207
		// _N*, _O* or _PE*
		static void SET_PLAYER_STAT_FLAG_HASH_(Player player, Hash p1)
		{
			invoke<int>(0x768E81AE285A4B67, player, p1);
		} // 0x768E81AE285A4B67 undefined b1207
		static void SET_USED_ITEM_EFFECT_(float health, float stamina, float deadeye, int healthCore, int staminaCore, int deadeyeCore)
		{
			invoke<int>(0x0E1DB1F8F5B561DC, health, stamina, deadeye, healthCore, staminaCore, deadeyeCore);
		} // 0x0E1DB1F8F5B561DC undefined b1207
		static void N0x08E22898A6AF4905(Any p0, Any p1)
		{
			invoke<int>(0x08E22898A6AF4905, p0, p1);
		} // 0x08E22898A6AF4905 undefined b1207
		static Any N0xBEFED69CE8317F91(Any p0)
		{
			return invoke<Any>(0xBEFED69CE8317F91, p0);
		} // 0xBEFED69CE8317F91 undefined b1207
		// (Un)lock Eagle Eye functionality
		static void ENABLE_EAGLEEYE_(Player player, BOOL enable)
		{
			invoke<int>(0xA63FCAD3A6FEC6D2, player, enable);
		} // 0xA63FCAD3A6FEC6D2 undefined b1207
		// Returns true if eagle eye is enabled for the player
		static BOOL IS_SECONDARY_SPECIAL_ABILITY_ENABLED_(Player player)
		{
			return invoke<BOOL>(0xE022CC1B545F1D9F, player);
		} // 0xE022CC1B545F1D9F undefined b1207
		// Activates EagleEye, called together with 0x28A13BF6B05C3D83
		static void SECONDARY_SPECIAL_ABILITY_SET_ACTIVE_(Player player)
		{
			invoke<int>(0x1710BC33CFB83634, player);
		} // 0x1710BC33CFB83634 undefined b1207
		// Deactivates EagleEye, called together with 0xC0B21F235C02139C
		static void SECONDARY_SPECIAL_ABILITY_SET_DISABLED_(Player player, BOOL disabled)
		{
			invoke<int>(0x64FF4BF9AF59E139, player, disabled);
		} // 0x64FF4BF9AF59E139 undefined b1207
		static BOOL IS_SECONDARY_SPECIAL_ABILITY_ACTIVE_(Player player)
		{
			return invoke<BOOL>(0x45AB66D02B601FA7, player);
		} // 0x45AB66D02B601FA7 undefined b1207
		static void N0x107F2A66E1C4C83A(Any p0)
		{
			invoke<int>(0x107F2A66E1C4C83A, p0);
		} // 0x107F2A66E1C4C83A undefined b1207
		static void START_PLAYER_TELEPORT(Player player, float x, float y, float z, float heading, BOOL p5, BOOL p6, BOOL p7, BOOL p8)
		{
			invoke<int>(0xDF8822C55EDDA65B, player, x, y, z, heading, p5, p6, p7, p8);
		} // 0xDF8822C55EDDA65B 0xC552E06C b1207
		static void N0x2C2D287748E8E9B7(BOOL p0)
		{
			invoke<int>(0x2C2D287748E8E9B7, p0);
		} // 0x2C2D287748E8E9B7 undefined b1207
		static BOOL UPDATE_PLAYER_TELEPORT(Player player)
		{
			return invoke<BOOL>(0xC39DCE4672CBFBC1, player);
		} // 0xC39DCE4672CBFBC1  b1207
		// Disables the player's teleportation
		static void STOP_PLAYER_TELEPORT()
		{
			invoke<int>(0x0858B86146601BE8);
		} // 0x0858B86146601BE8 0x86AB8DBB b1207
		static BOOL IS_PLAYER_TELEPORT_ACTIVE()
		{
			return invoke<BOOL>(0x085EEAEB8783FEB5);
		} // 0x085EEAEB8783FEB5 0x3A11D118 b1207
		static float GET_PLAYER_CURRENT_STEALTH_NOISE(Player player)
		{
			return invoke<float>(0xD7ECC25E176ECBA5, player);
		} // 0xD7ECC25E176ECBA5 0xC3B02362 b1207
		static void SET_PLAYER_HEALTH_RECHARGE_MULTIPLIER(Player player, float regenRate)
		{
			invoke<int>(0x8899C244EBCF70DE, player, regenRate);
		} // 0x8899C244EBCF70DE 0x45514731 b1207
		static float GET_PLAYER_HEALTH_RECHARGE_MULTIPLIER_(Player player)
		{
			return invoke<float>(0x22CD23BB0C45E0CD, player);
		} // 0x22CD23BB0C45E0CD undefined b1207
		// Setting player's Health recharge time to zero forces immediate health regen
		static void SET_PLAYER_HEALTH_RECHARGE_TIME_MODIFIER_(Player player, float modifier)
		{
			invoke<int>(0x535ED4605F89AB6E, player, modifier);
		} // 0x535ED4605F89AB6E undefined b1207
		static void SET_PLAYER_STAMINA_RECHARGE_MULTIPLIER(Player player, float multiplier)
		{
			invoke<int>(0xFECA17CF3343694B, player, multiplier);
		} // 0xFECA17CF3343694B undefined b1207
		static float GET_PLAYER_STAMINA_RECHARGE_MULTIPLIER_(Player player)
		{
			return invoke<float>(0x617D3494AD58200F, player);
		} // 0x617D3494AD58200F undefined b1207
		static void SET_PLAYER_STAMINA_SPRINT_DEPLETION_MULTIPLIER_(Player player, float multiplier)
		{
			invoke<int>(0xBBADFB5E5E5766FB, player, multiplier);
		} // 0xBBADFB5E5E5766FB undefined b1207
		static float GET_PLAYER_STAMINA_DEPLETION_MULTIPLIER_(Player player)
		{
			return invoke<float>(0x68A0389E0718AC8F, player);
		} // 0x68A0389E0718AC8F undefined b1207
		// Seems to work similar to 0xD2CB0FB0FDCB473D
		static void SET_PED_ACTIVE_PLAYER_HORSE_(Player player, Ped horse)
		{
			invoke<int>(0x8FBF9EDB378CCB8C, player, horse);
		} // 0x8FBF9EDB378CCB8C undefined b1207
		static Ped GET_ACTIVE_HORSE_FOR_PLAYER_(Player player)
		{
			return invoke<Ped>(0x46FA0AE18F4C7FA9, player);
		} // 0x46FA0AE18F4C7FA9 undefined b1207
		static void SET_PED_AS_SADDLE_HORSE_FOR_PLAYER_(Player player, Ped mount)
		{
			invoke<int>(0xD2CB0FB0FDCB473D, player, mount);
		} // 0xD2CB0FB0FDCB473D undefined b1207
		static Ped GET_SADDLE_HORSE_FOR_PLAYER_(Player player)
		{
			return invoke<Ped>(0xB48050D326E9A2F3, player);
		} // 0xB48050D326E9A2F3 undefined b1207
		static BOOL SET_PED_AS_TEMP_PLAYER_HORSE(Player player, Ped horse)
		{
			return invoke<BOOL>(0x227B06324234FB09, player, horse);
		} // 0x227B06324234FB09 undefined b1207
		static Ped GET_TEMP_PLAYER_HORSE_(Player player)
		{
			return invoke<Ped>(0xD3F7445CEA2E5035, player);
		} // 0xD3F7445CEA2E5035 undefined b1207
		// nullsub, doesn't do anything
		static void N0x77B0B6D17A3AC9AA(Any p0, Any p1)
		{
			invoke<int>(0x77B0B6D17A3AC9AA, p0, p1);
		} // 0x77B0B6D17A3AC9AA undefined b1207
		// Name could potentially be inaccurate.
		// Used in Script Function HORSE_SETUP_PLAYER_HORSE_ATTRIBUTES (p1 = true)
		// _SET_PLAYER_L* - _SET_PLAYER_M*
		static void SET_PLAYER_MOUNT_STATE_ACTIVE_(Player player, BOOL active)
		{
			invoke<int>(0xDF93973251FB2CA5, player, active);
		} // 0xDF93973251FB2CA5 undefined b1207
		static void N0x694FFA4308060CD1(Any p0, Any p1)
		{
			invoke<int>(0x694FFA4308060CD1, p0, p1);
		} // 0x694FFA4308060CD1 undefined b1207
		static void BOOST_PLAYER_HORSE_SPEED_FOR_TIME(Player player, float speedBoost, int duration)
		{
			invoke<int>(0x09C28F828EE674FA, player, speedBoost, duration);
		} // 0x09C28F828EE674FA undefined b1207
		// This modifies the damage value of your weapon. Whether it is a multiplier or base damage is unknown.
		static void SET_PLAYER_WEAPON_DAMAGE_MODIFIER(Player player, float modifier)
		{
			invoke<int>(0x94D529F7B73D7A85, player, modifier);
		} // 0x94D529F7B73D7A85 0xB02C2F39 b1207
		static void SET_PLAYER_WEAPON_DEFENSE_MODIFIER(Player player, float modifier)
		{
			invoke<int>(0xD15CC2D493160BE3, player, modifier);
		} // 0xD15CC2D493160BE3 0xAE446344 b1207
		// _SET_PLAYER_DAMAGE_* - _SET_PLAYER_DEFENSE_*
		static void N0x818241B3EDA84191(Player player, BOOL p1)
		{
			invoke<int>(0x818241B3EDA84191, player, p1);
		} // 0x818241B3EDA84191 undefined b1207
		static void SET_PLAYER_MELEE_WEAPON_DAMAGE_MODIFIER(Player player, float modifier)
		{
			invoke<int>(0xE4CB5A3F18170381, player, modifier);
		} // 0xE4CB5A3F18170381 0x362E69AD b1207
		static void SET_PLAYER_EXPLOSIVE_WEAPON_DAMAGE_MODIFIER_(Player player, float modifier)
		{
			invoke<int>(0x2D3ACE3DE0A2B622, player, modifier);
		} // 0x2D3ACE3DE0A2B622 undefined b1207
		static void N0x83C989D5B5B5B466(Any p0, Any p1)
		{
			invoke<int>(0x83C989D5B5B5B466, p0, p1);
		} // 0x83C989D5B5B5B466 undefined b1207
		static Any N0x03B4B759A8990505(Any p0)
		{
			return invoke<Any>(0x03B4B759A8990505, p0);
		} // 0x03B4B759A8990505 undefined b1207
		static void N0x67659A8F248E0141(Any p0, Any p1)
		{
			invoke<int>(0x67659A8F248E0141, p0, p1);
		} // 0x67659A8F248E0141 undefined b1207
		// Decreases the damage the player receives while on horseback
		static void SET_RECEIVED_HORSEBACK_DAMAGE_DECREASE_(Player player, float damageDecrease)
		{
			invoke<int>(0xB427911EA6DFFEF3, player, damageDecrease);
		} // 0xB427911EA6DFFEF3 undefined b1207
		// Sets Player's Defense against AI modifier
		static void SET_AI_PLAYER_DEFENSE_MODIFIER_AGAINST_AI_(Player player, float modifier)
		{
			invoke<int>(0x914071FF93AF2692, player, modifier);
		} // 0x914071FF93AF2692 undefined b1207
		static float GET_AI_PLAYER_DEFENSE_MODIFIER_AGAINST_AI_(Player player)
		{
			return invoke<float>(0x2E78D822208E740A, player);
		} // 0x2E78D822208E740A undefined b1207
		static Any N0x19B2C7A6C34FAD54(Any p0, Any p1)
		{
			return invoke<Any>(0x19B2C7A6C34FAD54, p0, p1);
		} // 0x19B2C7A6C34FAD54 undefined b1207
		static Any N0x9422743A5BA50E10(Any p0)
		{
			return invoke<Any>(0x9422743A5BA50E10, p0);
		} // 0x9422743A5BA50E10 undefined b1207
		// Sets stamina core drains peed using ranged damage scale and melee damage scale
		static void SET_PLAYER_DEFENSE_MODIFIER_(Player player, float weaponDefenseMod, float meleeDefenseMod)
		{
			invoke<int>(0x497A6539BB0E8787, player, weaponDefenseMod, meleeDefenseMod);
		} // 0x497A6539BB0E8787 undefined b1207
		// bullet damage modifier: type = 4
		// explosive damage Defense mod: type = 7
		// fire damage Defense mod: type = 8, 15
		static void SET_PLAYER_DEFENSE_TYPE_MODIFIER_(Player player, int type, float defenseModifier)
		{
			invoke<int>(0x93F499CAE53FCD05, player, type, defenseModifier);
		} // 0x93F499CAE53FCD05 undefined b1207
		static void SET_PLAYER_WEAPON_TYPE_DAMAGE_MODIFIER(Player player, Hash weaponHash, float damageModifier)
		{
			invoke<int>(0xD04AD186CE8BB129, player, weaponHash, damageModifier);
		} // 0xD04AD186CE8BB129 undefined b1207
		static float GET_PLAYER_WEAPON_DAMAGE_(Player player, Hash weaponHash)
		{
			return invoke<float>(0xFE0304050261442C, player, weaponHash);
		} // 0xFE0304050261442C undefined b1207
		static void N0x5C2E5E3CAEEB1F58(Any p0, Any p1, Any p2)
		{
			invoke<int>(0x5C2E5E3CAEEB1F58, p0, p1, p2);
		} // 0x5C2E5E3CAEEB1F58 undefined b1207
		static void SET_PLAYER_WEAPON_GROUP_DAMAGE_MODIFIER_(Player player, Hash weaponGroup, float modifier)
		{
			invoke<int>(0xFC79DCC94D0A5897, player, weaponGroup, modifier);
		} // 0xFC79DCC94D0A5897 undefined b1207
		static void SET_PLAYER_WEAPON_GROUP_AS_INSTANT_KILL_(Player player, Hash weaponGroup, BOOL toggle)
		{
			invoke<int>(0x59F0AFF3E0A1B019, player, weaponGroup, toggle);
		} // 0x59F0AFF3E0A1B019 undefined b1207
		static void SET_PLAYER_TRAMPLE_DAMAGE_MODIFIER_(Player player, float modifier)
		{
			invoke<int>(0xAF341032E97FB061, player, modifier);
		} // 0xAF341032E97FB061 undefined b1207
		// _SET_PLAYER_A* - _SET_PLAYER_C*
		static void SET_PLAYER_LASSO_DAMAGE_PER_SECOND_(Player player, float damage)
		{
			invoke<int>(0x43F50A7CD2482156, player, damage);
		} // 0x43F50A7CD2482156 undefined b1207
		static void SET_PLAYER_TOTAL_ACCURACY_MODIFIER_(Player player, float accuracy)
		{
			invoke<int>(0x967FF5BC0CFE6D26, player, accuracy);
		} // 0x967FF5BC0CFE6D26 undefined b1207
		static void SET_PLAYER_LOCAL_ACCURACY_FLOOR_MODIFIER_(Player player, float accuracy)
		{
			invoke<int>(0x4EA69188FBCE6A7D, player, accuracy);
		} // 0x4EA69188FBCE6A7D undefined b1207
		static void SET_PLAYER_REMOTE_ACCURACY_FLOOR_MODIFIER_(Player player, float accuracy)
		{
			invoke<int>(0xDEE80FEDFDD43C9B, player, accuracy);
		} // 0xDEE80FEDFDD43C9B undefined b1207
		static void N0x3AD212429E095EFB(Any p0, Any p1)
		{
			invoke<int>(0x3AD212429E095EFB, p0, p1);
		} // 0x3AD212429E095EFB undefined b1207
		static void SET_PLAYER_NOISE_MULTIPLIER(Player player, float multiplier)
		{
			invoke<int>(0xB5EC6BDAEBCA454C, player, multiplier);
		} // 0xB5EC6BDAEBCA454C 0x15786DD1 b1207
		static void N0x113EF458AB6CDA67(Any p0, Any p1)
		{
			invoke<int>(0x113EF458AB6CDA67, p0, p1);
		} // 0x113EF458AB6CDA67 undefined b1207
		static void SET_PLAYER_SNEAKING_NOISE_MULTIPLIER(Player player, float multiplier)
		{
			invoke<int>(0x4DE44FA389DCA565, player, multiplier);
		} // 0x4DE44FA389DCA565 0x8D2D89C4 b1207
		static void SIMULATE_PLAYER_INPUT_GAIT(Player player, float speed, int duration, float heading, BOOL p4, BOOL p5)
		{
			invoke<int>(0xFA0C063C422C4355, player, speed, duration, heading, p4, p5);
		} // 0xFA0C063C422C4355 0x0D77CC34 b1207
		static void RESET_PLAYER_INPUT_GAIT(Player player)
		{
			invoke<int>(0x61A2EECAB274829B, player);
		} // 0x61A2EECAB274829B 0x4A701EE1 b1207
		static void SET_PLAYER_SIMULATE_AIMING(Player player, BOOL toggle)
		{
			invoke<int>(0xE0447DEF81CCDFD2, player, toggle);
		} // 0xE0447DEF81CCDFD2 0xF1E0CAFC b1207
		static void SET_PLAYER_CLOTH_PIN_FRAMES(Ped ped, int p1)
		{
			invoke<int>(0xD0D9317DFEEF9A66, ped, p1);
		} // 0xD0D9317DFEEF9A66 0xF7A0F00F b1207
		static BOOL HAS_PLAYER_BEEN_SPOTTED_IN_STOLEN_VEHICLE(Player player)
		{
			return invoke<BOOL>(0xC932F57F31EA9152, player);
		} // 0xC932F57F31EA9152 0x4A01B76A b1207
		static BOOL GET_PLAYER_RECEIVED_BATTLE_EVENT_RECENTLY(Player player, int p1, BOOL p2)
		{
			return invoke<BOOL>(0xFB6EB8785F808551, player, p1, p2);
		} // 0xFB6EB8785F808551 0x9DF75B2A b1207
		static void SET_MOUNT_PROMPT_DISABLED_(BOOL disabled)
		{
			invoke<int>(0x5B9813ECF7633FE8, disabled);
		} // 0x5B9813ECF7633FE8 undefined b1207
		// Returns true if the player is riding a train.
		static BOOL IS_PLAYER_RIDING_TRAIN(Player player)
		{
			return invoke<BOOL>(0x2FB0ACADA6A238DD, player);
		} // 0x2FB0ACADA6A238DD 0x9765E71D b1207
		static void N0x9AFCF9FE1884BF62(Any p0, Any p1)
		{
			invoke<int>(0x9AFCF9FE1884BF62, p0, p1);
		} // 0x9AFCF9FE1884BF62 undefined b1207
		static Any N0x1E8099F449ABB0BA(Any p0)
		{
			return invoke<Any>(0x1E8099F449ABB0BA, p0);
		} // 0x1E8099F449ABB0BA undefined b1207
		static int GET_DEADEYE_ABILITY_LEVEL_(Player player)
		{
			return invoke<int>(0xCCE7C695C164C35F, player);
		} // 0xCCE7C695C164C35F undefined b1207
		// Max level is 5.
		static void SET_DEADEYE_ABILITY_LEVEL_(Player player, int level)
		{
			invoke<int>(0xF0FE8E790BFEB5BB, player, level);
		} // 0xF0FE8E790BFEB5BB undefined b1207
		static BOOL IS_DEADEYE_ABILITY_LOCKED_(Player player, int abilityType)
		{
			return invoke<BOOL>(0x8A0643B0B4CA276B, player, abilityType);
		} // 0x8A0643B0B4CA276B undefined b1207
		static void SET_DEADEYE_ABILITY_LOCKED_(Player player, int abilityType, BOOL toggle)
		{
			invoke<int>(0x2797B8D66DD0EBB8, player, abilityType, toggle);
		} // 0x2797B8D66DD0EBB8 undefined b1207
		static void SET_DEADEYE_TAGGING_ENABLED_(Player player, BOOL toggle)
		{
			invoke<int>(0x6B5DDFB967E5073D, player, toggle);
		} // 0x6B5DDFB967E5073D undefined b1207
		static BOOL GET_IS_DEADEYE_TAGGING_ENABLED_(Player player)
		{
			return invoke<BOOL>(0x32348719DCED2969, player);
		} // 0x32348719DCED2969 undefined b1207
		static void N0x3C4AE8506638C7E2(Any p0, Any p1)
		{
			invoke<int>(0x3C4AE8506638C7E2, p0, p1);
		} // 0x3C4AE8506638C7E2 undefined b1207
		static Any N0x51139D8C17B16FBC(Any p0)
		{
			return invoke<Any>(0x51139D8C17B16FBC, p0);
		} // 0x51139D8C17B16FBC undefined b1207
		static void N0x8F44EBB3BA8F6D44(Any p0, Any p1)
		{
			invoke<int>(0x8F44EBB3BA8F6D44, p0, p1);
		} // 0x8F44EBB3BA8F6D44 undefined b1207
		static void SET_DEADEYE_TAGGING_CONFIG_(Player player, int filter)
		{
			invoke<int>(0x83FCD6921FC8FD05, player, filter);
		} // 0x83FCD6921FC8FD05 undefined b1207
		static Any N0xE92261BD28C0878F(Any p0)
		{
			return invoke<Any>(0xE92261BD28C0878F, p0);
		} // 0xE92261BD28C0878F undefined b1207
		// Only used in R* SP Script short_update
		static void SET_DEADEYE_ABILITY_DEPLETION_DELAY_(Player player, float delay)
		{
			invoke<int>(0x870634493CB4372C, player, delay);
		} // 0x870634493CB4372C undefined b1207
		static Any N0xA54000D4BFD90BDE(Any p0)
		{
			return invoke<Any>(0xA54000D4BFD90BDE, p0);
		} // 0xA54000D4BFD90BDE undefined b1207
		static void N0x6EDB5D08CB03E763(Any p0, Any p1)
		{
			invoke<int>(0x6EDB5D08CB03E763, p0, p1);
		} // 0x6EDB5D08CB03E763 undefined b1207
		static Any N0x27AD7162D3FED01E(Any p0, Any p1)
		{
			return invoke<Any>(0x27AD7162D3FED01E, p0, p1);
		} // 0x27AD7162D3FED01E undefined b1207
		static int GET_NUM_MARKED_DEADEYE_TARGETS_(Player player)
		{
			return invoke<int>(0xCCD9B77F70D31C9D, player);
		} // 0xCCD9B77F70D31C9D undefined b1207
		static Any N0xC93A9A45430D484E(Any p0)
		{
			return invoke<Any>(0xC93A9A45430D484E, p0);
		} // 0xC93A9A45430D484E undefined b1207
		// Used in script function INIT_DEADEYE_SLOWDOWN
		static void N0x570A13A4CA2799BB(Player player, BOOL p1)
		{
			invoke<int>(0x570A13A4CA2799BB, player, p1);
		} // 0x570A13A4CA2799BB undefined b1207
		// Used in script function INIT_DEADEYE_SLOWDOWN
		static void N0x3ACAC8832E77BC93(Player player, BOOL p1)
		{
			invoke<int>(0x3ACAC8832E77BC93, player, p1);
		} // 0x3ACAC8832E77BC93 undefined b1207
		static void N0x2B12B6FC8B8772AB(Player player, int p1)
		{
			invoke<int>(0x2B12B6FC8B8772AB, player, p1);
		} // 0x2B12B6FC8B8772AB undefined b1207
		static void N0xE910932F4B30BE23(Player player)
		{
			invoke<int>(0xE910932F4B30BE23, player);
		} // 0xE910932F4B30BE23 undefined b1207
		static void N0x131E294EF60160DF(Player player, float p1, float p2, float p3, float p4, Any p5)
		{
			invoke<int>(0x131E294EF60160DF, player, p1, p2, p3, p4, p5);
		} // 0x131E294EF60160DF undefined b1207
		static void N0x0E9057A9DA78D0F8(Player player, int bitflag)
		{
			invoke<int>(0x0E9057A9DA78D0F8, player, bitflag);
		} // 0x0E9057A9DA78D0F8 undefined b1207
		static void N0x263D69767F76059C(Player player, int p1)
		{
			invoke<int>(0x263D69767F76059C, player, p1);
		} // 0x263D69767F76059C undefined b1207
		// Used for setting up eagle eye for entity
		// Params: p2 = re-register or not?
		static void REGISTER_EAGLE_EYE_FOR_ENTITY_(Player player, Entity entity, BOOL p2)
		{
			invoke<int>(0x543DFE14BE720027, player, entity, p2);
		} // 0x543DFE14BE720027 undefined b1207
		static void REGISTER_EAGLE_EYE_TRAILS_FOR_ENTITY_(Player player, Entity entity, Any p2)
		{
			invoke<int>(0xAC67098A1E54ABB0, player, entity, p2);
		} // 0xAC67098A1E54ABB0 undefined b1207
		static void UNREGISTER_EAGLE_EYE_FOR_ENTITY_(Player player, Entity entity)
		{
			invoke<int>(0x9DAE1380CC5C6451, player, entity);
		} // 0x9DAE1380CC5C6451 undefined b1207
		static void UNREGISTER_EAGLE_EYE_TRAILS_FOR_ENTITY_(Player player, Entity entity, Any p2)
		{
			invoke<int>(0x9A957912CE2EABD1, player, entity, p2);
		} // 0x9A957912CE2EABD1 undefined b1207
		// _CLEAR_FACIAL_* - _CLEAR_PED_BLOOD*
		static void N0xE5D3EB37ABC1EB03(Player player)
		{
			invoke<int>(0xE5D3EB37ABC1EB03, player);
		} // 0xE5D3EB37ABC1EB03 undefined b1207
		static BOOL IS_EAGLE_EYE_REGISTERED_FOR_ENTITY_(Player player, Entity entity)
		{
			return invoke<BOOL>(0x0E6846476906C9DD, player, entity);
		} // 0x0E6846476906C9DD undefined b1207
		static Any N0x6852288340B43239(Any p0, Any p1)
		{
			return invoke<Any>(0x6852288340B43239, p0, p1);
		} // 0x6852288340B43239 undefined b1207
		static Any N0xE50A67C33514A390(Any p0, Any p1)
		{
			return invoke<Any>(0xE50A67C33514A390, p0, p1);
		} // 0xE50A67C33514A390 undefined b1207
		static void N0xD288E02E364972D2(Any p0, Any p1, Any p2)
		{
			invoke<int>(0xD288E02E364972D2, p0, p1, p2);
		} // 0xD288E02E364972D2 undefined b1311
		static void EAGLE_EYE_DISABLE_TRACKING_TRAIL_(Entity entity, const char* trail, Any p2, Any p3)
		{
			invoke<int>(0x40AB73092C95B5F5, entity, trail, p2, p3);
		} // 0x40AB73092C95B5F5 undefined b1207
		static void N0x6ECFC621A168424C(Entity entity1, Entity entity2, Any p2, float p3)
		{
			invoke<int>(0x6ECFC621A168424C, entity1, entity2, p2, p3);
		} // 0x6ECFC621A168424C undefined b1207
		static void N0xDC5E09D012D759C4(Entity entity1, Entity entity2, Any p2)
		{
			invoke<int>(0xDC5E09D012D759C4, entity1, entity2, p2);
		} // 0xDC5E09D012D759C4 undefined b1207
		static void N0x00B156AFEBCC5AE0(Any p0)
		{
			invoke<int>(0x00B156AFEBCC5AE0, p0);
		} // 0x00B156AFEBCC5AE0 undefined b1207
		static void N0xC58CE6824E604DEC(Any p0)
		{
			invoke<int>(0xC58CE6824E604DEC, p0);
		} // 0xC58CE6824E604DEC undefined b1207
		static void N0x330CA55A3647FA1C(Any p0, Any p1)
		{
			invoke<int>(0x330CA55A3647FA1C, p0, p1);
		} // 0x330CA55A3647FA1C undefined b1207
		static Any N0xA62BBAAE67A05BB0(Any p0)
		{
			return invoke<Any>(0xA62BBAAE67A05BB0, p0);
		} // 0xA62BBAAE67A05BB0 undefined b1207
		// false: default eagleeye color
		// true: green eagleeye color
		static void EAGLE_EYE_SET_COLOR_(Player player, BOOL p1, Any* p2)
		{
			invoke<int>(0x2C41D93F550D5E37, player, p1, p2);
		} // 0x2C41D93F550D5E37 undefined b1207
		static void N0x22C8B10802301381(Any p0, Any p1)
		{
			invoke<int>(0x22C8B10802301381, p0, p1);
		} // 0x22C8B10802301381 undefined b1207
		static void EAGLE_EYE_SET_DRAIN_RATE_MODIFIER_(Player player, float modifier)
		{
			invoke<int>(0xE0D6C2A146A5C993, player, modifier);
		} // 0xE0D6C2A146A5C993 undefined b1207
		static void N0x06E1FB78B1E59CA5(Ped ped, BOOL p1)
		{
			invoke<int>(0x06E1FB78B1E59CA5, ped, p1);
		} // 0x06E1FB78B1E59CA5 undefined b1207
		static void EAGLE_EYE_SET_PLUS_FLAG_DISABLED_(Ped ped, BOOL disabled)
		{
			invoke<int>(0xCE285A4413B00B7F, ped, disabled);
		} // 0xCE285A4413B00B7F undefined b1207
		static Any N0x3813E11A378958A5(Any p0)
		{
			return invoke<Any>(0x3813E11A378958A5, p0);
		} // 0x3813E11A378958A5 undefined b1207
		static void EAGLE_EYE_SET_FOCUS_ON_ASSOCIATED_CLUE_TRAIL_(Player player, Entity linkedWaypointPed)
		{
			invoke<int>(0x2AF423D6ECB2C485, player, linkedWaypointPed);
		} // 0x2AF423D6ECB2C485 undefined b1207
		static void N0x0F9CF06986300875(Any p0)
		{
			invoke<int>(0x0F9CF06986300875, p0);
		} // 0x0F9CF06986300875 undefined b1207
		static void EAGLE_EYE_SET_TRACKING_UPGRADE_(Player player, float p1)
		{
			invoke<int>(0xDFC85C5199045026, player, p1);
		} // 0xDFC85C5199045026 undefined b1207
		static void EAGLE_EYE_SET_TRACKING_UPGRADE_2_(Player player, float p1)
		{
			invoke<int>(0x6FA957D1B55941C1, player, p1);
		} // 0x6FA957D1B55941C1 undefined b1311
		static Any N0x1DA5C5B0923E1B85(Any p0)
		{
			return invoke<Any>(0x1DA5C5B0923E1B85, p0);
		} // 0x1DA5C5B0923E1B85 undefined b1207
		static Any N0xAAED694CE814817F(Any p0)
		{
			return invoke<Any>(0xAAED694CE814817F, p0);
		} // 0xAAED694CE814817F undefined b1207
		static void EAGLE_EYE_SET_CUSTOM_ENTITY_TINT(Entity entity, int red, int green, int blue)
		{
			invoke<int>(0x62ED71E133B6C9F1, entity, red, green, blue);
		} // 0x62ED71E133B6C9F1 undefined b1207
		static void N0xBC02B3D151D3859F(Entity entity, Any p1)
		{
			invoke<int>(0xBC02B3D151D3859F, entity, p1);
		} // 0xBC02B3D151D3859F undefined b1207
		static void EAGLE_EYE_SET_CUSTOM_DISTANCE_(Entity entity, float distance)
		{
			invoke<int>(0x907B16B3834C69E2, entity, distance);
		} // 0x907B16B3834C69E2 undefined b1207
		// _CLEAR_FACIAL_* - _CLEAR_PED_BLOOD*
		static void N0xF21C7A3F3FFBA629(Player player)
		{
			invoke<int>(0xF21C7A3F3FFBA629, player);
		} // 0xF21C7A3F3FFBA629 undefined b1207
		static void SET_PLAYER_MANAGE_BUFF_SUPER_JUMP_(Player player, float p1)
		{
			invoke<int>(0x292F0B6EDC82E3A4, player, p1);
		} // 0x292F0B6EDC82E3A4 undefined b1207
		// see personaabilities.meta
		// enum ePersonaAbilityFlag
		// {
		// 	PERSONA_CAN_AUTOESCAPE_FROM_LASSO,
		// 	PERSONA_HAT_BLOCKS_FIRST_HEADSHOT,
		// 	PERSONA_FULL_AUTO_FOR_ALL_WEAPONS,
		// 	PERSONA_MIGHT_LIVE_AFTER_DEADLY_DAMAGE,
		// 	PERSONA_IGNORE_AIM_BEFORE_FIRING_RESTRICTIONS,
		// 	PERSONA_DEADEYE_INSTANT_RELOAD,
		// 	PERSONA_USE_PHOSPHOROUS_ROUNDS,
		// 	PERSONA_CONT_DEADEYE_ON_TAKING_COVER,
		// 	PERSONA_CONT_DEADEYE_ON_RELOAD,
		// 	PERSONA_CONT_DEADEYE_ON_SHOOTING,
		// 	PERSONA_CONT_DEADEYE_ON_EXITING_AIM,
		// 	PERSONA_DISABLE_PLAYER_CANCELLING_DEADEYE,
		// 	PERSONA_CONT_DEADEYE_ON_RAGDOLL,
		// 	PERSONA_USE_EXPLOSIVE_ROUNDS,
		// 	PERSONA_EXIT_DEADEYE_ON_TAKING_DAMAGE,
		// 	PERSONA_CARRY_TWO_MONEYBAGS,
		// 	PERSONA_ABILITY_LONG_PICK_HERBS,
		// 	PERSONA_ABILITY_UNBREAKABLE_LASSO,
		// 	PERSONA_CONT_DEADEYE_ON_SPRINTING,
		// 	PERSONA_CANT_DEAL_HEADSHOTS,
		// 	PERSONA_HANGMAN,
		// 	PERSONA_ALLOW_DEADEYE_WITH_MELEE_WEAPONS,
		// 	PERSONA_ALLOW_DEADEYE_WHILE_UNARMED,
		// 	PERSONA_DISABLE_DEADEYE_PERFECT_ACCURACY,
		// 	PERSONA_CANT_DEAL_HEADSHOTS_TO_PLAYERS,
		// 	PERSONA_CANT_DEAL_CRITICAL_DAMAGE,
		// 	PERSONA_CANT_DEAL_CRITICAL_DAMAGE_TO_PLAYERS,
		// 	PERSONA_ALLOW_EAGLEEYE_IN_COMBAT,
		// 	PERSONA_CONT_EAGLEEYE_ON_SPRINT,
		// 	PERSONA_SUPPRESS_LENGENDARY_EAGLEEYE_TRAIL_COLOR
		// };
		static void SET_LOCAL_PLAYER_PERSONA_ABILITY_FLAG_(int flagId, BOOL toggle)
		{
			invoke<int>(0x7146CF430965927C, flagId, toggle);
		} // 0x7146CF430965927C undefined b1207
		static void SET_PLAYER_MAX_AMMO_OVERRIDE_FOR_AMMO_TYPE_(Player player, Hash ammoType, int amount)
		{
			invoke<int>(0xE133C1EC5300F740, player, ammoType, amount);
		} // 0xE133C1EC5300F740 undefined b1207
		static void N0xC900A465364A85D6(Player player)
		{
			invoke<int>(0xC900A465364A85D6, player);
		} // 0xC900A465364A85D6 undefined b1207
		static void N0xCFB2EED4FCB7BD77(Any p0, Any p1, Any p2)
		{
			invoke<int>(0xCFB2EED4FCB7BD77, p0, p1, p2);
		} // 0xCFB2EED4FCB7BD77 undefined b1207
		static void N0x2BB8D58E88777499(Any p0)
		{
			invoke<int>(0x2BB8D58E88777499, p0);
		} // 0x2BB8D58E88777499 undefined b1207
		static void N0x00EB5A760638DB55(Any p0, Any p1, Any p2)
		{
			invoke<int>(0x00EB5A760638DB55, p0, p1, p2);
		} // 0x00EB5A760638DB55 undefined b1207
		static void N0x65887EAC535A0B0C(Any p0)
		{
			invoke<int>(0x65887EAC535A0B0C, p0);
		} // 0x65887EAC535A0B0C undefined b1207
		static void SET_WEAPON_DEGRADATION_MODIFIER_(Player player, float modifier)
		{
			invoke<int>(0x11A7FF918EF6BC66, player, modifier);
		} // 0x11A7FF918EF6BC66 undefined b1207
		static void SET_BOW_DRAW_REDUCTION_TIME_IN_DEADEYE_(Player player, float drawReductionTime)
		{
			invoke<int>(0xBE0C524970892D41, player, drawReductionTime);
		} // 0xBE0C524970892D41 undefined b1207
		// Decreases Stamina bar drain speed by % when drawing a bow.
		static void SET_BOW_STAMINA_DRAIN_SPEED_(Player player, float staminaDrain)
		{
			invoke<int>(0xFE7C9CF376D23342, player, staminaDrain);
		} // 0xFE7C9CF376D23342 undefined b1207
		static void SET_DAMAGE_CLOSE_DISTANCE_BONUS_(Player player, float closeRangeLowerBound, float closeRangeUpperBound)
		{
			invoke<int>(0x7761A30432C91297, player, closeRangeLowerBound, closeRangeUpperBound);
		} // 0x7761A30432C91297 undefined b1207
		static void SET_DAMAGE_CLOSE_DISTANCE_BONUS_TOTAL_(Player player, float closeDamageBonus)
		{
			invoke<int>(0x5006C36652D6EC56, player, closeDamageBonus);
		} // 0x5006C36652D6EC56 undefined b1207
		static void SET_DAMAGE_FAR_DISTANCE_BONUS_(Player player, float farRangeLowerBound, float farRangeUpperBound)
		{
			invoke<int>(0xED591CB17C8BA216, player, farRangeLowerBound, farRangeUpperBound);
		} // 0xED591CB17C8BA216 undefined b1207
		static void SET_DAMAGE_FAR_DISTANCE_BONUS_TOTAL_(Player player, float farDamageBonus)
		{
			invoke<int>(0x1F0E3A4434565F8F, player, farDamageBonus);
		} // 0x1F0E3A4434565F8F undefined b1207
		static Any N0x6C54E69516CC56BD(Any p0)
		{
			return invoke<Any>(0x6C54E69516CC56BD, p0);
		} // 0x6C54E69516CC56BD undefined b1207
		static void N0x3A8611BD7BDE84F7(Any p0, Any p1)
		{
			invoke<int>(0x3A8611BD7BDE84F7, p0, p1);
		} // 0x3A8611BD7BDE84F7 undefined b1207
		static void N0xC177C827CEFC0AA4(Any p0, Any p1)
		{
			invoke<int>(0xC177C827CEFC0AA4, p0, p1);
		} // 0xC177C827CEFC0AA4 undefined b1207
		static void N0xBD96185264DDAAEA(Any p0, Any p1)
		{
			invoke<int>(0xBD96185264DDAAEA, p0, p1);
		} // 0xBD96185264DDAAEA undefined b1207
		static void N0x628E742FE1F79C4A(Any p0, Any p1)
		{
			invoke<int>(0x628E742FE1F79C4A, p0, p1);
		} // 0x628E742FE1F79C4A undefined b1207
		static void SET_PLAYER_INTERACTION_POSITIVE_RESPONSE_(Player player, const char* speech)
		{
			invoke<int>(0xC6366A585659D15C, player, speech);
		} // 0xC6366A585659D15C undefined b1207
		static void SET_PLAYER_INTERACTION_NEGATIVE_RESPONSE_(Player player, const char* speech)
		{
			invoke<int>(0x98CD760DE43B612E, player, speech);
		} // 0x98CD760DE43B612E undefined b1207
		static void N0x216BC0D3D2E413D2(Player player, Any p1)
		{
			invoke<int>(0x216BC0D3D2E413D2, player, p1);
		} // 0x216BC0D3D2E413D2 undefined b1207
		static void N0x45EF176B532CA851(Any p0, Any p1)
		{
			invoke<int>(0x45EF176B532CA851, p0, p1);
		} // 0x45EF176B532CA851 undefined b1207
		static void N0xA342495F93B7B838(Any p0, Any p1)
		{
			invoke<int>(0xA342495F93B7B838, p0, p1);
		} // 0xA342495F93B7B838 undefined b1207
		static void N0x3BB84F812E052C90(Any p0)
		{
			invoke<int>(0x3BB84F812E052C90, p0);
		} // 0x3BB84F812E052C90 undefined b1207
		static void N0x9FC5A003FB76EDBD(Any p0, Any p1)
		{
			invoke<int>(0x9FC5A003FB76EDBD, p0, p1);
		} // 0x9FC5A003FB76EDBD undefined b1207
		static void N0x0FAF95D71ED67ADE(Player player, const char* p1)
		{
			invoke<int>(0x0FAF95D71ED67ADE, player, p1);
		} // 0x0FAF95D71ED67ADE undefined b1207
		static void N0x988C9045531B9FCE(Player player, const char* p1)
		{
			invoke<int>(0x988C9045531B9FCE, player, p1);
		} // 0x988C9045531B9FCE undefined b1232
		static void N0x06C3DB00B69D5435(Player player, const char* p1)
		{
			invoke<int>(0x06C3DB00B69D5435, player, p1);
		} // 0x06C3DB00B69D5435 undefined b1232
		// NPEW__ENUM__EMOTE_CATEGORY_INVALID = -1
		// NPEW__ENUM__EMOTE_CATEGORY_ACTIONS
		// NPEW__ENUM__EMOTE_CATEGORY_ANTAGONIZE
		// NPEW__ENUM__EMOTE_CATEGORY_REACTIONS
		// NPEW__ENUM__EMOTE_CATEGORY_GREET
		// NPEW__ENUM__NUM_EMOTE_CATEGORIES
		// NPEW__ENUM__NUM_DISPLAY_TEXTURES
		static void N0xBB6EA5D59E926095(int category, Hash emote)
		{
			invoke<int>(0xBB6EA5D59E926095, category, emote);
		} // 0xBB6EA5D59E926095 undefined b1207
		static BOOL N0xE1D356F5A66D0FFA(Hash emote)
		{
			return invoke<BOOL>(0xE1D356F5A66D0FFA, emote);
		} // 0xE1D356F5A66D0FFA undefined b1232
		static void N0x929DDD5538F3DF1F(Any p0, Any p1)
		{
			invoke<int>(0x929DDD5538F3DF1F, p0, p1);
		} // 0x929DDD5538F3DF1F undefined b1232
		static void N0xFA7DAAE3959E6C7B(Any p0, Any p1)
		{
			invoke<int>(0xFA7DAAE3959E6C7B, p0, p1);
		} // 0xFA7DAAE3959E6C7B undefined b1207
		static void N0x9461A8FAB0378E5B(Any p0, Any p1)
		{
			invoke<int>(0x9461A8FAB0378E5B, p0, p1);
		} // 0x9461A8FAB0378E5B undefined b1207
		static void N0xCB61A63AA53D7D22(Any p0, Any p1)
		{
			invoke<int>(0xCB61A63AA53D7D22, p0, p1);
		} // 0xCB61A63AA53D7D22 undefined b1207
		static void N0xCFFC3ECCD7A5CCEB(Player player, Hash weapon, BOOL p2)
		{
			invoke<int>(0xCFFC3ECCD7A5CCEB, player, weapon, p2);
		} // 0xCFFC3ECCD7A5CCEB undefined b1207
		static void N0x76F7E1BCD623A429(Any p0)
		{
			invoke<int>(0x76F7E1BCD623A429, p0);
		} // 0x76F7E1BCD623A429 undefined b1207
		static void N0x585CE159DB46FADB(Any p0, Any p1)
		{
			invoke<int>(0x585CE159DB46FADB, p0, p1);
		} // 0x585CE159DB46FADB undefined b1207
		// https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/ePlayerResetFlags
		// https://github.com/femga/rdr3_discoveries/tree/master/AI/PLAYER_RESET_FLAGS
		static void SET_PLAYER_RESET_FLAG_(Player player, int playerResetFlag, BOOL p2)
		{
			invoke<int>(0x9F9A829C6751F3C7, player, playerResetFlag, p2);
		} // 0x9F9A829C6751F3C7 undefined b1207
		// playerResetFlag: See 0x9F9A829C6751F3C7
		static BOOL GET_PLAYER_RESET_FLAG_(Player player, int playerResetFlag)
		{
			return invoke<BOOL>(0xFE691E89C08937B6, player, playerResetFlag);
		} // 0xFE691E89C08937B6 undefined b1207
		static Ped GET_MOUNT_OWNED_BY_PLAYER(Player player)
		{
			return invoke<Ped>(0xF49F14462F0AE27C, player);
		} // 0xF49F14462F0AE27C undefined b1207
		static Player GET_PLAYER_OWNER_OF_MOUNT_(Ped mount)
		{
			return invoke<Player>(0xAD03B03737CE6810, mount);
		} // 0xAD03B03737CE6810 undefined b1207
		// Seems to enable active horse equipment prompt when being near it and enables the control that opens the inventory as well
		static void SET_PLAYER_OWNS_MOUNT_(Player player, Ped mount)
		{
			invoke<int>(0xE6D4E435B56D5BD0, player, mount);
		} // 0xE6D4E435B56D5BD0 undefined b1207
		static Vehicle GET_VEHICLE_OWNED_BY_PLAYER_(Player player)
		{
			return invoke<Vehicle>(0xB9050A97594C8832, player);
		} // 0xB9050A97594C8832 undefined b1207
		static Player GET_PLAYER_OWNER_OF_VEHICLE_(Vehicle vehicle)
		{
			return invoke<Player>(0x7C803BDC8343228D, vehicle);
		} // 0x7C803BDC8343228D undefined b1207
		static void SET_PLAYER_OWNS_VEHICLE_(Player player, Vehicle vehicle)
		{
			invoke<int>(0xD0E02AA618020D17, player, vehicle);
		} // 0xD0E02AA618020D17 undefined b1207
		static Vehicle GET_PLAYER_HUNTING_WAGON_(Player player)
		{
			return invoke<Vehicle>(0x5CA6BBD4A7D8145E, player);
		} // 0x5CA6BBD4A7D8145E undefined b1207
		// Only applies to HUNTERCART01
		static void SET_PLAYER_HUNTING_WAGON_(Player player, Vehicle wagon)
		{
			invoke<int>(0x6A4404BDFA62CE2C, player, wagon);
		} // 0x6A4404BDFA62CE2C undefined b1207
		static void N0x9044835BE9D9DBFE(Any p0, Any p1)
		{
			invoke<int>(0x9044835BE9D9DBFE, p0, p1);
		} // 0x9044835BE9D9DBFE undefined b1207
		// Returns name hash (name) and outHash includes the type.
		static Hash GET_DISCOVERABLE_NAME_HASH_AND_TYPE_FOR_ENTITY(Entity entity, Hash* type)
		{
			return invoke<Hash>(0x0139637A3BFF8B6D, entity, type);
		} // 0x0139637A3BFF8B6D undefined b1207
		// p0: mostly Ped Hashes
		static Hash GET_CONSTRUCTED_DISCOVERED_CHARACTER_NAME_(Hash p0, BOOL model, BOOL outfit)
		{
			return invoke<Hash>(0x8E84119A23C16623, p0, model, outfit);
		} // 0x8E84119A23C16623 undefined b1207
		static Hash GET_TARGET_CHARACTER_NAME_SCRIPT_OVERRIDE_HASH(Ped ped)
		{
			return invoke<Hash>(0x0335106F3ACABBED, ped);
		} // 0x0335106F3ACABBED undefined b1207
		static const char* GET_TARGET_CHARACTER_NAME_SCRIPT_OVERRIDE_RAW_STRING(Ped ped)
		{
			return invoke<const char*>(0x755E08680F21EF30, ped);
		} // 0x755E08680F21EF30 undefined b1207
		static Hash GET_TARGET_CHARACTER_NAME_FOR_LOCAL_PLAYER(Ped ped)
		{
			return invoke<Hash>(0x36E3D8B5A6552FE8, ped);
		} // 0x36E3D8B5A6552FE8 undefined b1207
		static Any N0xDA9D7BE231FE865F(Any p0, Any p1, Any p2)
		{
			return invoke<Any>(0xDA9D7BE231FE865F, p0, p1, p2);
		} // 0xDA9D7BE231FE865F undefined b1207
		static void SET_PLAYER_HAS_DISCOVERED_CHARACTER_NAME_SP_(Player player, int p1, Hash discoveryHash)
		{
			invoke<int>(0x946D46CD6DFB9742, player, p1, discoveryHash);
		} // 0x946D46CD6DFB9742 undefined b1207
		static BOOL GET_HAS_PLAYER_DISCOVERED_CHARACTER_NAME_SP_(Player player, int p1, Hash discoveryHash)
		{
			return invoke<BOOL>(0x0772F87D7B07719A, player, p1, discoveryHash);
		} // 0x0772F87D7B07719A undefined b1207
		static void N0xCDDD4B74660E2335(Any p0, Any p1, Any p2)
		{
			invoke<int>(0xCDDD4B74660E2335, p0, p1, p2);
		} // 0xCDDD4B74660E2335 undefined b1207
		static void N0x77E83C315A3B31CA(Any p0)
		{
			invoke<int>(0x77E83C315A3B31CA, p0);
		} // 0x77E83C315A3B31CA undefined b1207
		static void SET_PLAYER_HAS_DISCOVERED_CHARACTER_NAME_MP_(Hash discoveryHash)
		{
			invoke<int>(0x7C32191D9FB2BDEA, discoveryHash);
		} // 0x7C32191D9FB2BDEA undefined b1207
		static BOOL GET_HAS_PLAYER_DISCOVERED_CHARACTER_NAME_MP(Hash discoveryHash)
		{
			return invoke<BOOL>(0x354F689C4FFAAB37, discoveryHash);
		} // 0x354F689C4FFAAB37 undefined b1207
		static void MODIFY_PLAYER_DISCOVERED_CHARACTER_NAME_MP_SET_UNDISCOVERED_(Hash discoveryHash)
		{
			invoke<int>(0xFB0E622B401884D3, discoveryHash);
		} // 0xFB0E622B401884D3 undefined b1207
		static void SET_SHOW_INFO_CARD_(Player player, BOOL showingInfoCard)
		{
			invoke<int>(0xDC68829BB3F37023, player, showingInfoCard);
		} // 0xDC68829BB3F37023 undefined b1207
		static void N0x4DBC4873707E8FD6(Any p0, Any p1, Any p2, Any p3)
		{
			invoke<int>(0x4DBC4873707E8FD6, p0, p1, p2, p3);
		} // 0x4DBC4873707E8FD6 undefined b1207
		static void N0xCEDC16930526F728(Any p0)
		{
			invoke<int>(0xCEDC16930526F728, p0);
		} // 0xCEDC16930526F728 undefined b1207
		static void N0x14E57F88BA0A07FC(Hash location)
		{
			invoke<int>(0x14E57F88BA0A07FC, location);
		} // 0x14E57F88BA0A07FC undefined b1207
		static Any N0x2E1ABE627C95ED9B()
		{
			return invoke<Any>(0x2E1ABE627C95ED9B);
		} // 0x2E1ABE627C95ED9B undefined b1207
		static void N0x497A18F8F88AA9D8()
		{
			invoke<int>(0x497A18F8F88AA9D8);
		} // 0x497A18F8F88AA9D8 undefined b1207
		static void N0x4F0D2256AAE94EDA(int p0)
		{
			invoke<int>(0x4F0D2256AAE94EDA, p0);
		} // 0x4F0D2256AAE94EDA undefined b1207
		// Focus Fire VFX start for player: p1 = focusfire
		static void SET_LOCKON_FOCUS_FIRE_VFX_(Player player, const char* p1)
		{
			invoke<int>(0x5F8E0303C229C84B, player, p1);
		} // 0x5F8E0303C229C84B undefined b1207
		// Hardcoded to return zero/false.
		static Any N0x0B7803F6F7BB43E0()
		{
			return invoke<Any>(0x0B7803F6F7BB43E0);
		} // 0x0B7803F6F7BB43E0 undefined b1207
		// Hardcoded to return zero/false.
		static Any N0xC74EB3F2EC169F6B(Any p0)
		{
			return invoke<Any>(0xC74EB3F2EC169F6B, p0);
		} // 0xC74EB3F2EC169F6B undefined b1232
		// nullsub, doesn't do anything
		static void N0x3B296934DB026873(Any p0, Any p1)
		{
			invoke<int>(0x3B296934DB026873, p0, p1);
		} // 0x3B296934DB026873 undefined b1207
		static void SET_MIN_TIME_BEFORE_HORSE_BUCKING(Ped mount, int iMinBuckTime)
		{
			invoke<int>(0x506CE71FB6E8CF5E, mount, iMinBuckTime);
		} // 0x506CE71FB6E8CF5E undefined b1207
		static Any N0xF4CB347D7B5EB0FD()
		{
			return invoke<Any>(0xF4CB347D7B5EB0FD);
		} // 0xF4CB347D7B5EB0FD undefined b1207
		static void N0xCD7CA3013FD12749(Any p0, Any p1)
		{
			invoke<int>(0xCD7CA3013FD12749, p0, p1);
		} // 0xCD7CA3013FD12749 undefined b1232
		static void FORCE_REST_SCENARIO_(BOOL toggle)
		{
			invoke<int>(0xE5A3DD2FF84E1A4B, toggle);
		} // 0xE5A3DD2FF84E1A4B undefined b1232
		// _IS_PLAYER_D* - _IS_PLAYER_F*
		static BOOL N0x57028FD99886F6F9()
		{
			return invoke<BOOL>(0x57028FD99886F6F9);
		} // 0x57028FD99886F6F9 undefined b1232
		static void N0x35A33783EC3C3448(Any p0)
		{
			invoke<int>(0x35A33783EC3C3448, p0);
		} // 0x35A33783EC3C3448 undefined b1311
		static void N0x39D8D7082BC34B72(Any p0)
		{
			invoke<int>(0x39D8D7082BC34B72, p0);
		} // 0x39D8D7082BC34B72 undefined b1311
		static void N0x1AD8AD999C27F44A(Any p0)
		{
			invoke<int>(0x1AD8AD999C27F44A, p0);
		} // 0x1AD8AD999C27F44A undefined b1311
	}

	namespace POPULATION
	{
		static int GET_NUM_MODELS_IN_POPULATION_SET(Hash popSetHash)
		{
			return invoke<int>(0xA1E3171ED0E47564, popSetHash);
		} // 0xA1E3171ED0E47564 undefined b1207
		static Hash GET_PED_MODEL_NAME_IN_POPULATION_SET(Hash popSetHash, int index)
		{
			return invoke<Hash>(0x3EAFA1C533B7139E, popSetHash, index);
		} // 0x3EAFA1C533B7139E undefined b1207
		static Hash GET_RANDOM_MODEL_FROM_POPULATION_SET(Hash popSetHash, int flags, Hash p2, BOOL p3, BOOL p4, float x, float y, float z)
		{
			return invoke<Hash>(0x6B12ED8C77E8567B, popSetHash, flags, p2, p3, p4, x, y, z);
		} // 0x6B12ED8C77E8567B undefined b1207
		static PopZone CREATE_POPZONE_FROM_VOLUME_(Volume volume)
		{
			return invoke<PopZone>(0x9AC1C64FE46B6D09, volume);
		} // 0x9AC1C64FE46B6D09 undefined b1207
		static void DELETE_SCRIPT_POPZONE_(PopZone popZone)
		{
			invoke<int>(0xA6E6A66FC4CA4224, popZone);
		} // 0xA6E6A66FC4CA4224 undefined b1207
		static BOOL IS_POPZONE_VALID_(PopZone popZone)
		{
			return invoke<BOOL>(0xA5BD585005EFCAD4, popZone);
		} // 0xA5BD585005EFCAD4 undefined b1207
		static void SET_POPZONE_POPULATION_SET(PopZone popZone, Hash populationSetHash)
		{
			invoke<int>(0x3E6A49D9B519E85C, popZone, populationSetHash);
		} // 0x3E6A49D9B519E85C undefined b1207
		static void N0x7E6BC0B94F5928F0(PopZone popZone, int p1, int p2)
		{
			invoke<int>(0x7E6BC0B94F5928F0, popZone, p1, p2);
		} // 0x7E6BC0B94F5928F0 undefined b1207
		static void N0x578E2FA64E847C60(PopZone popZone, int p1)
		{
			invoke<int>(0x578E2FA64E847C60, popZone, p1);
		} // 0x578E2FA64E847C60 undefined b1207
		static void N0x08892122769770D5(PopZone popZone, BOOL p1)
		{
			invoke<int>(0x08892122769770D5, popZone, p1);
		} // 0x08892122769770D5 undefined b1207
		static void N0x0F1861101C9A9944(PopZone popZone, BOOL p1)
		{
			invoke<int>(0x0F1861101C9A9944, popZone, p1);
		} // 0x0F1861101C9A9944 undefined b1207
		static void SET_SPAWNER_INFO_PRIORITY(Hash p0, Hash p1, int priority)
		{
			invoke<int>(0x60CDE717A6D47769, p0, p1, priority);
		} // 0x60CDE717A6D47769 undefined b1207
		static void CLEAR_SPAWNER_INFO_PRIORITY(Hash p0, Hash p1)
		{
			invoke<int>(0x217A54DE2D200305, p0, p1);
		} // 0x217A54DE2D200305 undefined b1207
		static void N0x638FCFC6042A9473(Any p0, Any p1)
		{
			invoke<int>(0x638FCFC6042A9473, p0, p1);
		} // 0x638FCFC6042A9473 undefined b1207
		// flags: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/PedFilterFlags
		static void ADD_AMBIENT_AVOIDANCE_RESTRICTION_(Volume volume, int includeFlags, int excludeFlags, Hash p3, Hash p4, Hash p5, int p6)
		{
			invoke<int>(0xB56D41A694E42E86, volume, includeFlags, excludeFlags, p3, p4, p5, p6);
		} // 0xB56D41A694E42E86 undefined b1207
		// flags: see 0xB56D41A694E42E86
		static void REMOVE_AMBIENT_AVOIDANCE_RESTRICTION_(Volume volume)
		{
			invoke<int>(0x74C2B3DC0B294102, volume);
		} // 0x74C2B3DC0B294102 undefined b1207
		// flags: see 0xB56D41A694E42E86
		static void ADD_AMBIENT_SPAWN_RESTRICTION_(Volume volume, int includeFlags, int excludeFlags, Hash p3, Hash p4, Hash p5, int p6)
		{
			invoke<int>(0x18262CAFEBB5FBE1, volume, includeFlags, excludeFlags, p3, p4, p5, p6);
		} // 0x18262CAFEBB5FBE1 undefined b1207
		static void REMOVE_AMBIENT_SPAWN_RESTRICTION_(Volume volume)
		{
			invoke<int>(0xA1CFB35069D23C23, volume);
		} // 0xA1CFB35069D23C23 undefined b1207
		static void N0x2161278C6322F740(int includeFlags, int excludeFlags, int p2, Hash p3, int p4, Volume volume)
		{
			invoke<int>(0x2161278C6322F740, includeFlags, excludeFlags, p2, p3, p4, volume);
		} // 0x2161278C6322F740 undefined b1207
		static void N0xF45E46DEECF7DF6E(int bitFlag, Any p1, Any p2, Any p3, Any p4)
		{
			invoke<int>(0xF45E46DEECF7DF6E, bitFlag, p1, p2, p3, p4);
		} // 0xF45E46DEECF7DF6E undefined b1207
		static void N0x8EC7CD701F872F87(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5)
		{
			invoke<int>(0x8EC7CD701F872F87, p0, p1, p2, p3, p4, p5);
		} // 0x8EC7CD701F872F87 undefined b1207
		static void N0xC4533E3E87125C9E(Any p0)
		{
			invoke<int>(0xC4533E3E87125C9E, p0);
		} // 0xC4533E3E87125C9E undefined b1207
		// Params: p1 = 1 & 2 in R* Scripts, 0 = Disable avoidance, 1 = Enabled avoidance, 2 = Enabled avoidance (?)
		static void SET_PED_SHOULD_IGNORE_AVOIDANCE_VOLUMES_(Ped ped, int p1)
		{
			invoke<int>(0xF74E134F40192884, ped, p1);
		} // 0xF74E134F40192884 undefined b1207
		static void N0xDBBF12EA7C1029B2(Any p0, Any p1)
		{
			invoke<int>(0xDBBF12EA7C1029B2, p0, p1);
		} // 0xDBBF12EA7C1029B2 undefined b1207
		static void N0x247F86595D396344(Any p0)
		{
			invoke<int>(0x247F86595D396344, p0);
		} // 0x247F86595D396344 undefined b1207
		static void N0x324AB2A68AD8AEE5()
		{
			invoke<int>(0x324AB2A68AD8AEE5);
		} // 0x324AB2A68AD8AEE5 undefined b1207
		static void DISABLE_AMBIENT_ROAD_POPULATION(BOOL unk)
		{
			invoke<int>(0xC6DCC2A3A8825C85, unk);
		} // 0xC6DCC2A3A8825C85 undefined b1207
		static void ENABLE_AMBIENT_ROAD_POPULATION()
		{
			invoke<int>(0xBC90BDF4E5228EA1);
		} // 0xBC90BDF4E5228EA1 undefined b1207
		static void N0x2660E7720EDC4BD0(Any p0, Any p1, Any p2)
		{
			invoke<int>(0x2660E7720EDC4BD0, p0, p1, p2);
		} // 0x2660E7720EDC4BD0 undefined b1311
		// Returns model hash of the closest fish
		static Hash GET_RANDOM_FISH_TYPE_FOR_LOCATION_()
		{
			return invoke<Hash>(0x595478B3BBC3076D);
		} // 0x595478B3BBC3076D undefined b1207
		// Only used for Special Event (XMAS).
		// _SET_P*
		static void N0xEC116EDB683AD479(BOOL p0)
		{
			invoke<int>(0xEC116EDB683AD479, p0);
		} // 0xEC116EDB683AD479 undefined b1207
	}

	namespace POSSE
	{
		static Any N0xC086FF658B2E51DB()
		{
			return invoke<Any>(0xC086FF658B2E51DB);
		} // 0xC086FF658B2E51DB undefined b1207
		static Any N0xC086FF658B2E51DA(Any p0)
		{
			return invoke<Any>(0xC086FF658B2E51DA, p0);
		} // 0xC086FF658B2E51DA undefined b1207
		static Any N0xC087FF658B2E51DA(Any p0, Any p1)
		{
			return invoke<Any>(0xC087FF658B2E51DA, p0, p1);
		} // 0xC087FF658B2E51DA undefined b1207
		static int POSSE_GET_POSSE_MEMBERSHIP_COUNT()
		{
			return invoke<int>(0xC088FF658B2E51DA);
		} // 0xC088FF658B2E51DA undefined b1207
		static Any N0xC089FF658B2E51DA(Any p0, Any p1)
		{
			return invoke<Any>(0xC089FF658B2E51DA, p0, p1);
		} // 0xC089FF658B2E51DA undefined b1207
		static void N0xC08AFF658B2E51DA(Any p0)
		{
			invoke<int>(0xC08AFF658B2E51DA, p0);
		} // 0xC08AFF658B2E51DA undefined b1207
		static Any N0xC08BFF658B2E51DA(Any p0)
		{
			return invoke<Any>(0xC08BFF658B2E51DA, p0);
		} // 0xC08BFF658B2E51DA undefined b1207
		static void N0xC08AFF658B2E51DB(Any p0)
		{
			invoke<int>(0xC08AFF658B2E51DB, p0);
		} // 0xC08AFF658B2E51DB undefined b1207
		static Any N0xC08CFF658B2E51DA(Any p0, Any p1)
		{
			return invoke<Any>(0xC08CFF658B2E51DA, p0, p1);
		} // 0xC08CFF658B2E51DA undefined b1207
		static Any N0xC09CFF658B2E51DA(Any p0, Any p1, Any p2)
		{
			return invoke<Any>(0xC09CFF658B2E51DA, p0, p1, p2);
		} // 0xC09CFF658B2E51DA undefined b1207
		static Any N0xC08DEF658B2E51DA(Any p0)
		{
			return invoke<Any>(0xC08DEF658B2E51DA, p0);
		} // 0xC08DEF658B2E51DA undefined b1207
		static Any N0xC08DFF658B2E51DA()
		{
			return invoke<Any>(0xC08DFF658B2E51DA);
		} // 0xC08DFF658B2E51DA undefined b1207
		static Any N0xC08DFF658B2E51DB(Any p0)
		{
			return invoke<Any>(0xC08DFF658B2E51DB, p0);
		} // 0xC08DFF658B2E51DB undefined b1207
		static Any N0xC08EFF658B2E51DB(Any p0, Any p1)
		{
			return invoke<Any>(0xC08EFF658B2E51DB, p0, p1);
		} // 0xC08EFF658B2E51DB undefined b1207
		static Any N0xC08FFF658B2E51DA()
		{
			return invoke<Any>(0xC08FFF658B2E51DA);
		} // 0xC08FFF658B2E51DA undefined b1207
		static Any N0xC08FFF658B2E51DB(Any p0)
		{
			return invoke<Any>(0xC08FFF658B2E51DB, p0);
		} // 0xC08FFF658B2E51DB undefined b1207
		static Any N0xC084FF658B2E61DA(Any p0)
		{
			return invoke<Any>(0xC084FF658B2E61DA, p0);
		} // 0xC084FF658B2E61DA undefined b1207
		static Any N0xC084FF658B2E71DA(Any p0, Any p1, Any p2)
		{
			return invoke<Any>(0xC084FF658B2E71DA, p0, p1, p2);
		} // 0xC084FF658B2E71DA undefined b1207
		static Any N0xC084FF658B2E81DA(Any p0, Any p1, Any p2)
		{
			return invoke<Any>(0xC084FF658B2E81DA, p0, p1, p2);
		} // 0xC084FF658B2E81DA undefined b1207
		static Any N0xC084FF658B2E52DA(Any p0)
		{
			return invoke<Any>(0xC084FF658B2E52DA, p0);
		} // 0xC084FF658B2E52DA undefined b1207
		static Any N0xC084FF658B2E53DA()
		{
			return invoke<Any>(0xC084FF658B2E53DA);
		} // 0xC084FF658B2E53DA undefined b1207
		static Any N0xC084FF658B2E54DA(Any p0)
		{
			return invoke<Any>(0xC084FF658B2E54DA, p0);
		} // 0xC084FF658B2E54DA undefined b1207
		static Any N0xC084FF658B2E55DA(Any p0, Any p1)
		{
			return invoke<Any>(0xC084FF658B2E55DA, p0, p1);
		} // 0xC084FF658B2E55DA undefined b1207
		static void N0xC484FF658B2E55DA(Any p0)
		{
			invoke<int>(0xC484FF658B2E55DA, p0);
		} // 0xC484FF658B2E55DA undefined b1207
		static void N0xC584FF658B2E55DA(Any p0)
		{
			invoke<int>(0xC584FF658B2E55DA, p0);
		} // 0xC584FF658B2E55DA undefined b1207
		static void N0xC684FF658B2E55DA(Any p0)
		{
			invoke<int>(0xC684FF658B2E55DA, p0);
		} // 0xC684FF658B2E55DA undefined b1207
		static Any N0xC184FF658B2E55DA(Any p0, Any p1)
		{
			return invoke<Any>(0xC184FF658B2E55DA, p0, p1);
		} // 0xC184FF658B2E55DA undefined b1207
		static Any N0xC284FF658B2E55DA(Any p0, Any p1, Any p2)
		{
			return invoke<Any>(0xC284FF658B2E55DA, p0, p1, p2);
		} // 0xC284FF658B2E55DA undefined b1207
		static Any N0xC394FF658B2E55DA(Any p0, Any p1, Any p2, Any p3)
		{
			return invoke<Any>(0xC394FF658B2E55DA, p0, p1, p2, p3);
		} // 0xC394FF658B2E55DA undefined b1207
		static Any N0xC07CFF658B2E51DA(Any p0, Any p1)
		{
			return invoke<Any>(0xC07CFF658B2E51DA, p0, p1);
		} // 0xC07CFF658B2E51DA undefined b1207
		static Any N0xC06CFF658B2E51DA(Any p0, Any p1, Any p2)
		{
			return invoke<Any>(0xC06CFF658B2E51DA, p0, p1, p2);
		} // 0xC06CFF658B2E51DA undefined b1207
	}

	namespace PROPSET
	{
		static BOOL REQUEST_PROP_SET_(Hash hash)
		{
			return invoke<BOOL>(0xF3DE57A46D5585E9, hash);
		} // 0xF3DE57A46D5585E9 undefined b1207
		// Same as _REQUEST_PROP_SET
		static BOOL REQUEST_PROP_SET_2_(Hash hash)
		{
			return invoke<BOOL>(0xE72F591958F3ACAB, hash);
		} // 0xE72F591958F3ACAB undefined b1207
		static BOOL HAS_PROP_SET_LOADED_(Hash hash)
		{
			return invoke<BOOL>(0x48A88FC684C55FDC, hash);
		} // 0x48A88FC684C55FDC undefined b1207
		// Same as _HAS_PROP_SET_LOADED
		static BOOL HAS_PROP_SET_LOADED_2_(Hash hash)
		{
			return invoke<BOOL>(0xD090ABEF4D6A7D96, hash);
		} // 0xD090ABEF4D6A7D96 undefined b1207
		static void SET_PROP_SET_AS_NO_LONGER_NEEDED_(PropSet propSet)
		{
			invoke<int>(0x909E3C7FAE539FB1, propSet);
		} // 0x909E3C7FAE539FB1 undefined b1207
		static void DELETE_PROP_SET_(PropSet propSet, BOOL p1, BOOL p2)
		{
			invoke<int>(0x58AC173A55D9D7B4, propSet, p1, p2);
		} // 0x58AC173A55D9D7B4 undefined b1207
		static BOOL RELEASE_PROP_SET_(Hash hash)
		{
			return invoke<BOOL>(0xB1964A83B345B4AB, hash);
		} // 0xB1964A83B345B4AB undefined b1207
		// propsetType: https://github.com/femga/rdr3_discoveries/blob/master/objects/propsets_list.lua
		// placementType: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/PlacementType
		static PropSet CREATE_PROP_SET_(Hash propsetType, float x, float y, float z, int placementType, float heading, float zProbe, BOOL p7, BOOL useVegMod)
		{
			return invoke<PropSet>(0xE65C5CBA95F0E510, propsetType, x, y, z, placementType, heading, zProbe, p7, useVegMod);
		} // 0xE65C5CBA95F0E510 undefined b1207
		// Same as _CREATE_PROP_SET
		static PropSet CREATE_PROP_SET_2_(Hash propsetType, float x, float y, float z, int placementType, float heading, float zProbe, BOOL p7, BOOL useVegMod)
		{
			return invoke<PropSet>(0x899C97A1CCE7D483, propsetType, x, y, z, placementType, heading, zProbe, p7, useVegMod);
		} // 0x899C97A1CCE7D483 undefined b1207
		static PropSet CREATE_PROP_SET_INSTANCE_ATTACHED_TO_ENTITY(Hash hash, float x, float y, float z, Entity entity, float p5, BOOL p6, int p7, BOOL p8)
		{
			return invoke<PropSet>(0x9609DBDDE18FAD8C, hash, x, y, z, entity, p5, p6, p7, p8);
		} // 0x9609DBDDE18FAD8C undefined b1207
		// Same as CREATE_PROP_SET_INSTANCE_ATTACHED_TO_ENTITY
		static PropSet CREATE_PROP_SET_INSTANCE_ATTACHED_TO_ENTITY_2_(Hash hash, float x, float y, float z, Entity entity, float p5, BOOL p6, int p7, BOOL p8)
		{
			return invoke<PropSet>(0xACA7FB30269096D4, hash, x, y, z, entity, p5, p6, p7, p8);
		} // 0xACA7FB30269096D4 undefined b1207
		static BOOL DOES_PROP_SET_EXIST(PropSet propSet)
		{
			return invoke<BOOL>(0x7DDDCF815E650FF5, propSet);
		} // 0x7DDDCF815E650FF5 undefined b1207
		static BOOL DOES_PROP_SET_OF_TYPE_EXIST_NEAR_COORDS_(Hash propsetHash, float x, float y, float z)
		{
			return invoke<BOOL>(0x72068021F498E6E3, propsetHash, x, y, z);
		} // 0x72068021F498E6E3 undefined b1207
		static BOOL IS_PROP_SET_FULLY_LOADED(PropSet propSet)
		{
			return invoke<BOOL>(0xF42DB680A8B2A4D9, propSet);
		} // 0xF42DB680A8B2A4D9 undefined b1207
		static void SET_PROP_SET_VISIBLE_(PropSet propSet, BOOL toggle)
		{
			invoke<int>(0x9D096A5BD02F953E, propSet, toggle);
		} // 0x9D096A5BD02F953E undefined b1207
		static BOOL IS_PROP_SET_VISIBLE_(PropSet propSet)
		{
			return invoke<BOOL>(0x0CE8AAFE9E433A23, propSet);
		} // 0x0CE8AAFE9E433A23 undefined b1207
		static Hash GET_PROP_SET_MODEL_(PropSet propSet)
		{
			return invoke<Hash>(0xA6A9712955F53D9C, propSet);
		} // 0xA6A9712955F53D9C undefined b1207
		static Hash GET_VEHICLE_PROP_SET_HASH_(Vehicle vehicle)
		{
			return invoke<Hash>(0x36F69E7A22655653, vehicle);
		} // 0x36F69E7A22655653 undefined b1207
		static int GET_ENTITIES_FROM_PROP_SET_(PropSet propSet, ItemSet itemSet, Hash model, BOOL p3, BOOL p4)
		{
			return invoke<int>(0x738271B660FE0695, propSet, itemSet, model, p3, p4);
		} // 0x738271B660FE0695 undefined b1207
		static void N0xC4B67EF3FD65622D(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5)
		{
			invoke<int>(0xC4B67EF3FD65622D, p0, p1, p2, p3, p4, p5);
		} // 0xC4B67EF3FD65622D undefined b1207
		static void N0x58E0B01D45CA7357(Any p0)
		{
			invoke<int>(0x58E0B01D45CA7357, p0);
		} // 0x58E0B01D45CA7357 undefined b1207
		static void SET_PROP_SET_FLAG_(PropSet propSet, int flag)
		{
			invoke<int>(0xC1AB7EEFD3E6EE49, propSet, flag);
		} // 0xC1AB7EEFD3E6EE49 undefined b1207
		static PropSet GET_VEHICLE_PROP_SET_(Vehicle vehicle)
		{
			return invoke<PropSet>(0xCE2ACD6F602803E5, vehicle);
		} // 0xCE2ACD6F602803E5 undefined b1207
		static BOOL DOES_VEHICLE_HAVE_ANY_PROP_SET_(Vehicle vehicle)
		{
			return invoke<BOOL>(0x53784CEA0159439B, vehicle);
		} // 0x53784CEA0159439B undefined b1207
		// List of vehicle propsets (wagons & trains): https://pastebin.com/1CsnvGLu / https://pastebin.com/v7TtqTgE
		static void ADD_PROP_SET_FOR_VEHICLE_(Vehicle vehicle, Hash propset)
		{
			invoke<int>(0xD80FAF919A2E56EA, vehicle, propset);
		} // 0xD80FAF919A2E56EA undefined b1207
		static void REMOVE_VEHICLE_PROP_SETS_(Vehicle vehicle)
		{
			invoke<int>(0x3BCF32FF37EA9F1D, vehicle);
		} // 0x3BCF32FF37EA9F1D undefined b1207
		static BOOL IS_VEHICLE_PROP_SET_LOADED_(Vehicle vehicle)
		{
			return invoke<BOOL>(0x155B2FBE72D7D1D0, vehicle);
		} // 0x155B2FBE72D7D1D0 undefined b1207
		// https://github.com/femga/rdr3_discoveries/blob/master/vehicles/vehicle_modding/vehicle_propsets.lua
		static void ADD_ADDITIONAL_PROP_SET_FOR_VEHICLE_(Vehicle vehicle, Hash propset)
		{
			invoke<int>(0x75F90E4051CC084C, vehicle, propset);
		} // 0x75F90E4051CC084C undefined b1207
		static BOOL IS_VEHICLE_PROP_SET_LOADED_ADDITIONAL_(Vehicle vehicle)
		{
			return invoke<BOOL>(0x7264F9CA87A9830B, vehicle);
		} // 0x7264F9CA87A9830B undefined b1207
		// Returns PropSet handle to be used with _GET_PROP_SET_MODEL
		static PropSet GET_VEHICLE_LIGHT_PROP_SET_(Vehicle vehicle)
		{
			return invoke<PropSet>(0xA079300AF757FB1A, vehicle);
		} // 0xA079300AF757FB1A undefined b1207
		static BOOL DOES_VEHICLE_HAVE_ANY_LIGHT_PROP_SET_(Vehicle vehicle)
		{
			return invoke<BOOL>(0xC9B4B3A36F81FD75, vehicle);
		} // 0xC9B4B3A36F81FD75 undefined b1207
		// To remove propsets either parse a zero as hash or call 0xE31C0CB1C3186D40
		// 0xA6A9712955F53D9C returns lightPropset Hashes
		// https://github.com/femga/rdr3_discoveries/blob/master/vehicles/vehicle_modding/vehicle_lantern_propsets.lua
		static void ADD_LIGHT_PROP_SET_TO_VEHICLE_(Vehicle vehicle, Hash lightPropset)
		{
			invoke<int>(0xC0F0417A90402742, vehicle, lightPropset);
		} // 0xC0F0417A90402742 undefined b1207
		static void REMOVE_VEHICLE_LIGHT_PROP_SETS_(Vehicle vehicle)
		{
			invoke<int>(0xE31C0CB1C3186D40, vehicle);
		} // 0xE31C0CB1C3186D40 undefined b1207
		static BOOL IS_VEHICLE_LIGHT_PROP_SET_LOADED_(Vehicle vehicle)
		{
			return invoke<BOOL>(0x0790473EEE1977D3, vehicle);
		} // 0x0790473EEE1977D3 undefined b1207
		// Example before/after deleting a train carriage's propset: https://imgur.com/a/qRNrIrK
		static PropSet GET_TRAIN_CARRIAGE_PROP_SET_(Entity trainCarriage)
		{
			return invoke<PropSet>(0xCFC0BD09BB1B73FF, trainCarriage);
		} // 0xCFC0BD09BB1B73FF undefined b1207
		static BOOL HAS_VEHICLE_TRAILER_PROP_SET_LOADED_(Vehicle vehicle, int wagonIndex)
		{
			return invoke<BOOL>(0x8F3333F0A6900B3C, vehicle, wagonIndex);
		} // 0x8F3333F0A6900B3C undefined b1207
		static PropSet GET_PROP_SET_AT_COORDS_(Hash propsetHash, float x, float y, float z)
		{
			return invoke<PropSet>(0xC061E50F8D299F95, propsetHash, x, y, z);
		} // 0xC061E50F8D299F95 undefined b1207
	}

	namespace QUEUE
	{
		static BOOL EVENT_QUEUE_IS_EMPTY_(Hash hash)
		{
			return invoke<BOOL>(0x402B5D7D269FF796, hash);
		} // 0x402B5D7D269FF796 undefined b1207
		static void EVENT_QUEUE_POP_(Hash hash)
		{
			invoke<int>(0xD87DF294B049211D, hash);
		} // 0xD87DF294B049211D undefined b1207
	}

	namespace RECORDING
	{
		// nullsub, doesn't do anything
		//
		// Old name: _STOP_RECORDING_THIS_FRAME
		static void REPLAY_PREVENT_RECORDING_THIS_FRAME()
		{
			invoke<int>(0xA8C44C13419634F2);
		} // 0xA8C44C13419634F2  b1207
	}

	namespace REPLAY
	{
		// Hardcoded to return false.
		//
		// Old name: _IS_INTERIOR_RENDERING_DISABLED
		static BOOL REPLAY_SYSTEM_HAS_REQUESTED_A_SCRIPT_CLEANUP()
		{
			return invoke<BOOL>(0x0F838D47DE58EDB2);
		} // 0x0F838D47DE58EDB2  b1207
		// nullsub, doesn't do anything
		static void SET_SCRIPTS_HAVE_CLEANED_UP_FOR_REPLAY_SYSTEM()
		{
			invoke<int>(0x57C6525034E76EB0);
		} // 0x57C6525034E76EB0  b1207
		// Hardcoded to return true.
		static BOOL OPEN_VIDEO_EDITOR()
		{
			return invoke<BOOL>(0xB3F2829907403C13);
		} // 0xB3F2829907403C13 undefined b1207
		// Hardcoded to return true.
		static BOOL CLOSE_VIDEO_EDITOR(Any p0)
		{
			return invoke<BOOL>(0xCEEC64BD27A59312, p0);
		} // 0xCEEC64BD27A59312 undefined b1207
		// Hardcoded to return false.
		static BOOL IS_VIDEO_EDITOR_RUNNING()
		{
			return invoke<BOOL>(0x9EEB007317FA3B9C);
		} // 0x9EEB007317FA3B9C undefined b1207
	}

	namespace SCRIPTS
	{
		static void SET_PLAYER_BIT_AT_INDEX_(Any* value, int bitIndex)
		{
			invoke<int>(0x31010318BA9897AC, value, bitIndex);
		} // 0x31010318BA9897AC undefined b1207
		static void CLEAR_PLAYER_BIT_AT_INDEX_(Any* value, int bitIndex)
		{
			invoke<int>(0xD426E2E3288469D6, value, bitIndex);
		} // 0xD426E2E3288469D6 undefined b1207
		static void N0xE4ABE20DCE7C7CFE(Any p0, Any p1, Any p2)
		{
			invoke<int>(0xE4ABE20DCE7C7CFE, p0, p1, p2);
		} // 0xE4ABE20DCE7C7CFE undefined b1207
		static void N0xFFDDF802279BE128(Any p0, Any p1, Any p2)
		{
			invoke<int>(0xFFDDF802279BE128, p0, p1, p2);
		} // 0xFFDDF802279BE128 undefined b1207
		static void N0x64F765D9A1F8F02C(Any* p0, Any* p1, Any* p2)
		{
			invoke<int>(0x64F765D9A1F8F02C, p0, p1, p2);
		} // 0x64F765D9A1F8F02C undefined b1207
		static void SET_ALL_PLAYER_BITS_(Any* value)
		{
			invoke<int>(0x20F4CB76689ACDBC, value);
		} // 0x20F4CB76689ACDBC undefined b1207
		static void CLEAR_ALL_PLAYER_BITS_(Any* value)
		{
			invoke<int>(0xDE544B7EC0C187CC, value);
		} // 0xDE544B7EC0C187CC undefined b1207
		static BOOL IS_PLAYER_BIT_SET_AT_INDEX_(Any* value, int bitIndex)
		{
			return invoke<BOOL>(0x72B2E00C9BAC6789, value, bitIndex);
		} // 0x72B2E00C9BAC6789 undefined b1207
		static BOOL IS_ANY_PLAYER_BIT_SET_(int* playerBits)
		{
			return invoke<BOOL>(0x179A6F0EE2E79026, playerBits);
		} // 0x179A6F0EE2E79026 undefined b1207
		static int GET_BLOCK_OF_PLAYER_BITS(Any* value, int p1)
		{
			return invoke<int>(0xFA3B530A5CC693D5, value, p1);
		} // 0xFA3B530A5CC693D5 undefined b1207
		static void SET_BLOCK_OF_PLAYER_BITS(Any* value, int p1, int p2)
		{
			invoke<int>(0xC6DFB8C04C86D5A5, value, p1, p2);
		} // 0xC6DFB8C04C86D5A5 undefined b1207
		static int COUNT_PLAYER_BITS(Any* value)
		{
			return invoke<int>(0x462C687BEA254BD9, value);
		} // 0x462C687BEA254BD9 undefined b1207
		static void N0x1BDB5A07307F6929(Any p0, Any p1)
		{
			invoke<int>(0x1BDB5A07307F6929, p0, p1);
		} // 0x1BDB5A07307F6929 undefined b1207
		static void N0x1C5EB3C27F7508CB(Any p0, Any p1)
		{
			invoke<int>(0x1C5EB3C27F7508CB, p0, p1);
		} // 0x1C5EB3C27F7508CB undefined b1207
		static void N0x42A429CDFED6D99D(Any p0, Any p1, Any p2)
		{
			invoke<int>(0x42A429CDFED6D99D, p0, p1, p2);
		} // 0x42A429CDFED6D99D undefined b1207
		static void N0x5827BE85A87B073D(Any p0)
		{
			invoke<int>(0x5827BE85A87B073D, p0);
		} // 0x5827BE85A87B073D undefined b1207
		static Any N0x0A79C81C418F5D38(Any p0, Any p1)
		{
			return invoke<Any>(0x0A79C81C418F5D38, p0, p1);
		} // 0x0A79C81C418F5D38 undefined b1207
		static Any N0xA88E1D7FA1E20080(Any p0)
		{
			return invoke<Any>(0xA88E1D7FA1E20080, p0);
		} // 0xA88E1D7FA1E20080 undefined b1207
		static int COUNT_PARTICIPANT_BITS(Any* value)
		{
			return invoke<int>(0x2F050A3FF8738245, value);
		} // 0x2F050A3FF8738245 undefined b1207
		static void REQUEST_SCRIPT(const char* scriptName)
		{
			invoke<int>(0x46ED607DDD40D7FE, scriptName);
		} // 0x46ED607DDD40D7FE 0xE26B2666 b1207
		static void SET_SCRIPT_AS_NO_LONGER_NEEDED(const char* scriptName)
		{
			invoke<int>(0x0086D3067E1CFD1C, scriptName);
		} // 0x0086D3067E1CFD1C 0x6FCB7795 b1207
		// Returns if a script has been loaded into the game. Used to see if a script was loaded after requesting.
		static BOOL HAS_SCRIPT_LOADED(const char* scriptName)
		{
			return invoke<BOOL>(0xE97BD36574F8B0A6, scriptName);
		} // 0xE97BD36574F8B0A6 0x5D67F751 b1207
		static BOOL DOES_SCRIPT_EXIST(const char* scriptName)
		{
			return invoke<BOOL>(0x552B171E3F69E5AE, scriptName);
		} // 0x552B171E3F69E5AE 0xDEAB87AB b1207
		static void REQUEST_SCRIPT_WITH_NAME_HASH(Hash scriptHash)
		{
			invoke<int>(0xF6B9CE3F8D5B9B74, scriptHash);
		} // 0xF6B9CE3F8D5B9B74 0x1C68D9DC b1207
		static void SET_SCRIPT_WITH_NAME_HASH_AS_NO_LONGER_NEEDED(Hash scriptHash)
		{
			invoke<int>(0x50723A1567C8361E, scriptHash);
		} // 0x50723A1567C8361E 0x96C26F66 b1207
		static BOOL HAS_SCRIPT_WITH_NAME_HASH_LOADED(Hash scriptHash)
		{
			return invoke<BOOL>(0xA5D8E0C2F3C7EEBC, scriptHash);
		} // 0xA5D8E0C2F3C7EEBC 0x06674818 b1207
		static BOOL DOES_SCRIPT_WITH_NAME_HASH_EXIST(Hash scriptHash)
		{
			return invoke<BOOL>(0xA34E89749F628284, scriptHash);
		} // 0xA34E89749F628284 0x19EAE282 b1207
		static void TERMINATE_THREAD(int threadId)
		{
			invoke<int>(0x87ED52AE40EA1A52, threadId);
		} // 0x87ED52AE40EA1A52 0x253FD520 b1207
		static BOOL IS_THREAD_ACTIVE(int threadId, BOOL ignoreKilledState)
		{
			return invoke<BOOL>(0x46E9AE36D8FA6417, threadId, ignoreKilledState);
		} // 0x46E9AE36D8FA6417 0x78D7A5A0 b1207
		static BOOL DOES_THREAD_EXIST(int threadId)
		{
			return invoke<BOOL>(0xFF975BC4435A0FA3, threadId);
		} // 0xFF975BC4435A0FA3 undefined b1207
		static void GET_THREAD_EXISTENCE_DETAILS(int threadId, BOOL* threadExists, BOOL* hasScriptHandler)
		{
			invoke<int>(0xD92FA81B64920E85, threadId, threadExists, hasScriptHandler);
		} // 0xD92FA81B64920E85 undefined b1207
		static Hash GET_HASH_OF_THREAD_(int threadId)
		{
			return invoke<Hash>(0x724CB89D35B283D0, threadId);
		} // 0x724CB89D35B283D0 undefined b1207
		// Starts a new iteration of the current threads.
		// Call this first, then SCRIPT_THREAD_ITERATOR_GET_NEXT_THREAD_ID (0x30B4FA1C82DD4B9F)
		static void SCRIPT_THREAD_ITERATOR_RESET()
		{
			invoke<int>(0x39382EB8DCD8684D);
		} // 0x39382EB8DCD8684D 0xBB4E2F66 b1207
		// If the function returns 0, the end of the iteration has been reached.
		static int SCRIPT_THREAD_ITERATOR_GET_NEXT_THREAD_ID()
		{
			return invoke<int>(0x3CE3FB167E837D7C);
		} // 0x3CE3FB167E837D7C 0x1E28B28F b1207
		static BOOL IS_BACKGROUND_SCRIPT_(int threadId)
		{
			return invoke<BOOL>(0x20B7F69B40C6B755, threadId);
		} // 0x20B7F69B40C6B755 undefined b1207
		static int GET_ID_OF_THIS_THREAD()
		{
			return invoke<int>(0x55525C346BEF6960);
		} // 0x55525C346BEF6960 0xDE524830 b1207
		static void TERMINATE_THIS_THREAD()
		{
			invoke<int>(0x5E8B6D17FF91CD59);
		} // 0x5E8B6D17FF91CD59 0x3CD9CBB7 b1207
		// Gets the number of instances of the specified script is currently running.
		//
		// Actually returns numRefs - 1.
		// if (program)
		// 	v3 = rage::scrProgram::GetNumRefs(program) - 1;
		// return v3;
		//
		// Old name: _GET_NUMBER_OF_REFERENCES_OF_SCRIPT_WITH_NAME_HASH
		static int GET_NUMBER_OF_THREADS_RUNNING_THE_SCRIPT_WITH_THIS_HASH(Hash scriptHash)
		{
			return invoke<int>(0x8E34C953364A76DD, scriptHash);
		} // 0x8E34C953364A76DD 0x029D3841 b1207
		static void REQUEST_THREAD_EXIT_(int threadId)
		{
			invoke<int>(0x7DE4643157AD646C, threadId);
		} // 0x7DE4643157AD646C undefined b1207
		static void REQUEST_THREAD_EXIT_FOR_ALL_THREADS_WITH_THIS_NAME_(Hash nameHash)
		{
			invoke<int>(0x7423F7835770F619, nameHash);
		} // 0x7423F7835770F619 undefined b1207
		static BOOL IS_THREAD_EXIT_REQUESTED()
		{
			return invoke<BOOL>(0x9E4EF615E307FBBE);
		} // 0x9E4EF615E307FBBE undefined b1207
		static BOOL IS_THREAD_EXIT_REQUESTED_FOR_THREAD_WITH_THIS_ID_(int threadId)
		{
			return invoke<BOOL>(0x30BED53646C86D11, threadId);
		} // 0x30BED53646C86D11 undefined b1207
		// enum eThreadExitReason
		// {
		// 	THREAD_EXIT_REASON_NONE,
		// 	THREAD_EXIT_REASON_BACKGROUND_THREAD_STOPPED,
		// 	THREAD_EXIT_REASON_SESSION_MERGE,
		// 	THREAD_EXIT_REASON_SCENARIO_OUT_OF_SCOPE,
		// 	THREAD_EXIT_REASON_REQUESTED_BY_SCRIPT
		// };
		static int GET_THREAD_EXIT_REASON_()
		{
			return invoke<int>(0x54AE4FDEEFEAB77E);
		} // 0x54AE4FDEEFEAB77E undefined b1207
		static Hash GET_HASH_OF_THIS_SCRIPT_NAME()
		{
			return invoke<Hash>(0xBC2C927F5C264960);
		} // 0xBC2C927F5C264960 0x2BEE1F45 b1207
		// eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork), 2 = unk, 3 = unk, 4 = SCRIPT_EVENT_QUEUE_ERRORS (CEventGroupScriptErrors)
		static int GET_NUMBER_OF_EVENTS(int eventGroup)
		{
			return invoke<int>(0x5CE8DE5909565748, eventGroup);
		} // 0x5CE8DE5909565748 0xA3525D60 b1207
		// eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork), 2 = unk, 3 = unk, 4 = SCRIPT_EVENT_QUEUE_SCRIPT_ERRORS (CEventGroupScriptErrors)
		static BOOL GET_EVENT_EXISTS(int eventGroup, Hash eventType)
		{
			return invoke<BOOL>(0xC9F59C0A710ECD34, eventGroup, eventType);
		} // 0xC9F59C0A710ECD34 0xA1B447B5 b1207
		// eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork), 2 = unk, 3 = unk, 4 = SCRIPT_EVENT_QUEUE_SCRIPT_ERRORS (CEventGroupScriptErrors)
		//
		// Returns event name hash: https://alloc8or.re/rdr3/doc/enums/eEventType.txt
		static Hash GET_EVENT_AT_INDEX(int eventGroup, int eventIndex)
		{
			return invoke<Hash>(0xA85E614430EFF816, eventGroup, eventIndex);
		} // 0xA85E614430EFF816 0xB49C1442 b1207
		// eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork), 2 = unk, 3 = unk, 4 = SCRIPT_EVENT_QUEUE_SCRIPT_ERRORS (CEventGroupScriptErrors)
		//
		// Note: eventDataSize is NOT the size in bytes, it is the size determined by the SIZE_OF operator (RAGE Script operator, not C/C++ sizeof). That is, the size in bytes divided by 8 (script variables are always 8-byte aligned!).
		//
		// https://github.com/femga/rdr3_discoveries/tree/master/AI/EVENTS
		static BOOL GET_EVENT_DATA(int eventGroup, int eventIndex, Any* eventData, int eventDataSize)
		{
			return invoke<BOOL>(0x57EC5FA4D4D6AFCA, eventGroup, eventIndex, eventData, eventDataSize);
		} // 0x57EC5FA4D4D6AFCA 0x4280F92F b1207
		static void SET_EVENT_FLAG_FOR_DELETION(int eventGroup, int eventIndex, BOOL p2)
		{
			invoke<int>(0x4768D5252EAEB76F, eventGroup, eventIndex, p2);
		} // 0x4768D5252EAEB76F undefined b1207
		// eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork), 2 = unk, 3 = unk, 4 = SCRIPT_EVENT_QUEUE_SCRIPT_ERRORS (CEventGroupScriptErrors)
		//
		// Note: eventDataSize is NOT the size in bytes, it is the size determined by the SIZE_OF operator (RAGE Script operator, not C/C++ sizeof). That is, the size in bytes divided by 8 (script variables are always 8-byte aligned!).
		//
		// playerBits (also known as playersToBroadcastTo) is a bitset that indicates which players this event should be sent to. In order to send the event to specific players only, use (1 << playerIndex). Set all bits if it should be broadcast to all players.
		static void TRIGGER_SCRIPT_EVENT(int eventGroup, Any* eventData, int eventDataSize, int scriptMetadataIndex, int* playerBits)
		{
			invoke<int>(0x5AE99C571D5BBE5D, eventGroup, eventData, eventDataSize, scriptMetadataIndex, playerBits);
		} // 0x5AE99C571D5BBE5D 0x54763B35 b1207
		static void TRIGGER_SCRIPT_EVENT_2_(Any* eventData, int eventDataSize, int scriptMetadataIndex, int threadId)
		{
			invoke<int>(0x8B61C950A148FFA2, eventData, eventDataSize, scriptMetadataIndex, threadId);
		} // 0x8B61C950A148FFA2 undefined b1207
		static Any N0xE7282390542F570D(Any p0)
		{
			return invoke<Any>(0xE7282390542F570D, p0);
		} // 0xE7282390542F570D undefined b1207
		// Used in Script Function DISABLE_REGISTERED_WORLD_BRAINS
		static void N0x11B0A0B282FA9B10(BOOL p0)
		{
			invoke<int>(0x11B0A0B282FA9B10, p0);
		} // 0x11B0A0B282FA9B10 undefined b1207
		static void N0x6F700A4BF7C3331B(BOOL p0)
		{
			invoke<int>(0x6F700A4BF7C3331B, p0);
		} // 0x6F700A4BF7C3331B undefined b1207
		static void N0xF9E951A1E5517C06()
		{
			invoke<int>(0xF9E951A1E5517C06);
		} // 0xF9E951A1E5517C06 undefined b1207
		static void N0x76CBCD9EADC00955()
		{
			invoke<int>(0x76CBCD9EADC00955);
		} // 0x76CBCD9EADC00955 undefined b1207
		static void SHUTDOWN_LOADING_SCREEN()
		{
			invoke<int>(0xFC179D7E8886DADF);
		} // 0xFC179D7E8886DADF 0xA2826D17 b1207
		static void SET_NO_LOADING_SCREEN(BOOL toggle)
		{
			invoke<int>(0x5CB83156AA038F95, toggle);
		} // 0x5CB83156AA038F95 0xC8055034 b1207
		static BOOL GET_NO_LOADING_SCREEN()
		{
			return invoke<BOOL>(0x323DAF00687E0F28);
		} // 0x323DAF00687E0F28 0x27512BA0 b1207
		static void DISPLAY_LOADING_SCREENS_(Hash p0, Hash p1, Hash p2, const char* gamemodeName, const char* title, const char* subtitle)
		{
			invoke<int>(0x1E5B70E53DB661E5, p0, p1, p2, gamemodeName, title, subtitle);
		} // 0x1E5B70E53DB661E5 undefined b1207
		static void N0x29FB4CE89472C3CB(Any p0, Any p1, float p2, float p3, const char* p4, const char* p5, const char* p6, int p7)
		{
			invoke<int>(0x29FB4CE89472C3CB, p0, p1, p2, p3, p4, p5, p6, p7);
		} // 0x29FB4CE89472C3CB undefined b1207
		static void STOP_DISPLAYING_MP_TRANSITION_LOADING_SCREENS(Any p0)
		{
			invoke<int>(0x778D4733E0F2F265, p0);
		} // 0x778D4733E0F2F265 undefined b1207
		// Same as GET_IS_LOADING_SCREEN_ACTIVE
		static BOOL IS_LOADING_SCREEN_VISIBLE()
		{
			return invoke<BOOL>(0xB54ADBE65D528FCB);
		} // 0xB54ADBE65D528FCB undefined b1207
		static void BAIL_TO_LANDING_PAGE(int bailCode)
		{
			invoke<int>(0xBC2C927F5C264243, bailCode);
		} // 0xBC2C927F5C264243 undefined b1207
		static void BAIL_WITH_PASS_THROUGH_PARAMS(const char* params)
		{
			invoke<int>(0xE98204D3C25AE14C, params);
		} // 0xE98204D3C25AE14C undefined b1207
		// Returns true if GtaThread+0x77C is equal to 1.
		//
		// Old name: _BG_EXITED_BECAUSE_BACKGROUND_THREAD_STOPPED
		static BOOL BG_IS_EXITFLAG_SET()
		{
			return invoke<BOOL>(0x2238EC3EC631AB1F);
		} // 0x2238EC3EC631AB1F 0x22B9F132 b1207
		// Sets bit 0 in GtaThread+0x784
		static void BG_SET_EXITFLAG_RESPONSE()
		{
			invoke<int>(0x4858148E3B8A75D0);
		} // 0x4858148E3B8A75D0 0x5C95B670 b1207
		// Hashed version of BG_START_CONTEXT
		static void BG_START_CONTEXT_HASH(Hash contextHash)
		{
			invoke<int>(0x2EB67D564DCC09D5, contextHash);
		} // 0x2EB67D564DCC09D5 0x67B23E17 b1207
		// Hashed version of BG_END_CONTEXT
		static void BG_END_CONTEXT_HASH(Hash contextHash)
		{
			invoke<int>(0x6D1431744182CDE8, contextHash);
		} // 0x6D1431744182CDE8 0x3D981EBF b1207
		// Inserts the given context into the background scripts context map.
		static void BG_START_CONTEXT(const char* contextName)
		{
			invoke<int>(0x49BA5678BA040CA7, contextName);
		} // 0x49BA5678BA040CA7 0xF3F1D953 b1207
		// Deletes the given context from the background scripts context map.
		static void BG_END_CONTEXT(const char* contextName)
		{
			invoke<int>(0x3ABF7BA1C3E2C8CF, contextName);
		} // 0x3ABF7BA1C3E2C8CF 0x11F38FB3 b1207
		static BOOL BG_DOES_LAUNCH_PARAM_EXIST(int scriptIndex, const char* p1)
		{
			return invoke<BOOL>(0x4AE1DFF337A86FDE, scriptIndex, p1);
		} // 0x4AE1DFF337A86FDE 0xF8E5F73A b1207
		static int BG_GET_LAUNCH_PARAM_VALUE(int scriptIndex, const char* p1)
		{
			return invoke<int>(0x55C40B7592BAD213, scriptIndex, p1);
		} // 0x55C40B7592BAD213 0x682CB7E1 b1207
		static int BG_GET_SCRIPT_ID_FROM_NAME_HASH(Hash p0)
		{
			return invoke<int>(0x829CD22E043A2577, p0);
		} // 0x829CD22E043A2577 0xC515E735 b1207
		static void BG_RELOAD_ALL_BACKGROUND_SCRIPTS_()
		{
			invoke<int>(0xBE7D814CFA181B56);
		} // 0xBE7D814CFA181B56 undefined b1207
		// goalContext: see <availableContexts> in common/data/stats_and_challenges/goals_*.meta
		static void ACTIVATE_GOAL_CONTEXT_(Hash goalContext)
		{
			invoke<int>(0x7D654266025E921B, goalContext);
		} // 0x7D654266025E921B undefined b1207
		// goalContext: see _ACTIVATE_GOAL_CONTEXT
		static void DEACTIVATE_GOAL_CONTEXT_(Hash goalContext)
		{
			invoke<int>(0x50B72A754EE64A71, goalContext);
		} // 0x50B72A754EE64A71 undefined b1207
		// goalContext: see _ACTIVATE_GOAL_CONTEXT
		static BOOL IS_GOAL_CONTEXT_ACTIVE_(Hash goalContext)
		{
			return invoke<BOOL>(0x7409669C5ED50144, goalContext);
		} // 0x7409669C5ED50144 undefined b1207
		// Returns "INVALID_NET_RPC_GUID" if netRpcGuid is invalid.
		static const char* NET_RPC_GUID_TO_STRING_(Any* netRpcGuid)
		{
			return invoke<const char*>(0xAC9FF854BD4BA9B5, netRpcGuid);
		} // 0xAC9FF854BD4BA9B5 undefined b1311
		static BOOL AWARDS_GET_RESULT_ITEM(Any* rpcGuid, Hash awardHash, int itemIndex, Any* outResultItem)
		{
			return invoke<BOOL>(0xAC8FAB22A914AE34, rpcGuid, awardHash, itemIndex, outResultItem);
		} // 0xAC8FAB22A914AE34 undefined b1207
		static BOOL AWARDS_GET_UNLOCK_CLAIM_DATA_(Any* rpcGuid, Hash awardHash, int dataIndex, Any* outUnlockData)
		{
			return invoke<BOOL>(0xB9467E41DAB1CF2C, rpcGuid, awardHash, dataIndex, outUnlockData);
		} // 0xB9467E41DAB1CF2C undefined b1207
		static BOOL LOOT_GET_RESULT_ITEM_(Any* rpcGuid, int itemIndex, Any* outResultItem)
		{
			return invoke<BOOL>(0x4293B44A855F82CC, rpcGuid, itemIndex, outResultItem);
		} // 0x4293B44A855F82CC undefined b1207
		static BOOL LOOT_GET_LOOT_CLAIM_DATA_(Any* rpcGuid, int dataIndex, Any* outLootData)
		{
			return invoke<BOOL>(0xF1E9045F5AA9E428, rpcGuid, dataIndex, outLootData);
		} // 0xF1E9045F5AA9E428 undefined b1311
		static BOOL STORE_GLOBAL_BLOCK_(int index)
		{
			return invoke<BOOL>(0xB952A3AC41D58F2F, index);
		} // 0xB952A3AC41D58F2F undefined b1207
		static BOOL RESTORE_GLOBAL_BLOCK_(int index)
		{
			return invoke<BOOL>(0xDC3914A99B4A5FDF, index);
		} // 0xDC3914A99B4A5FDF undefined b1207
		static BOOL DOES_COMPRESSED_GLOBAL_BLOCK_BUFFER_EXIST_(int index)
		{
			return invoke<BOOL>(0x66EE5B93C308F734, index);
		} // 0x66EE5B93C308F734 undefined b1207
		static void SET_GLOBAL_BLOCK_CAN_BE_ACCESSED_(int index, BOOL toggle)
		{
			invoke<int>(0xE66F392BFCE734AF, index, toggle);
		} // 0xE66F392BFCE734AF undefined b1207
		static BOOL GET_GLOBAL_BLOCK_CAN_BE_ACCESSED_(int index)
		{
			return invoke<BOOL>(0x42A7EB5C814C2DE0, index);
		} // 0x42A7EB5C814C2DE0 undefined b1207
		static void SET_ALL_GLOBAL_BLOCKS_HAVE_BEEN_LOADED_(BOOL toggle)
		{
			invoke<int>(0x11986B05885564D2, toggle);
		} // 0x11986B05885564D2 undefined b1207
		// Waiting for child scripts to terminate / waiting for collapse of child scripts
		static BOOL HAVE_ALL_CHILD_SCRIPTS_TERMINATED(int p0)
		{
			return invoke<BOOL>(0x380FFA15B72408FB, p0);
		} // 0x380FFA15B72408FB undefined b1207
		static int START_NEW_SCRIPT(const char* scriptName, int stackSize)
		{
			return invoke<int>(0xE81651AD79516E48, scriptName, stackSize);
		} // 0xE81651AD79516E48 0x3F166D0E b1207
		// return : script thread id, 0 if failed
		// Pass pointer to struct of args in p1, size of struct goes into p2
		static int START_NEW_SCRIPT_WITH_ARGS(const char* scriptName, Any* args, int argCount, int stackSize)
		{
			return invoke<int>(0xB8BA7F44DF1575E1, scriptName, args, argCount, stackSize);
		} // 0xB8BA7F44DF1575E1 0x4A2100E4 b1207
		static int START_NEW_SCRIPT_WITH_NAME_HASH(Hash scriptHash, int stackSize)
		{
			return invoke<int>(0xEB1C67C3A5333A92, scriptHash, stackSize);
		} // 0xEB1C67C3A5333A92 0x8D15BE5D b1207
		static int START_NEW_SCRIPT_WITH_NAME_HASH_AND_ARGS(Hash scriptHash, Any* args, int argCount, int stackSize)
		{
			return invoke<int>(0xC4BB298BD441BE78, scriptHash, args, argCount, stackSize);
		} // 0xC4BB298BD441BE78 0xE38A3AD4 b1207
	}

	namespace SAVE
	{
		static void N0x4FB5869E2B37FC00()
		{
			invoke<int>(0x4FB5869E2B37FC00);
		} // 0x4FB5869E2B37FC00 undefined b1207
		// enum eSavegameType : Hash
		// {
		// 	SAVEGAMETYPE_AMBIENT = 0x3CA4E1F8,
		// 	SAVEGAMETYPE_DEFAULT = 0xCB6ED080,
		// 	SAVEGAMETYPE_DELETE_CHAR = 0xCD35F947,
		// 	SAVEGAMETYPE_END_CREATE_NEWCHAR = 0x4C50A3CE,
		// 	SAVEGAMETYPE_END_MATCH = 0xE470ED50,
		// 	SAVEGAMETYPE_END_MISSION = 0x9A444E54,
		// 	SAVEGAMETYPE_END_SESSION = 0x6D23956C,
		// 	SAVEGAMETYPE_END_SHOPPING = 0xA311A6C4,
		// 	SAVEGAMETYPE_RANKUP = 0xE25F8017,
		// 	SAVEGAMETYPE_SCRIPT_MP_GLOBALS = 0xAFF30AD4,
		// 	SAVEGAMETYPE_SP_AUTOSAVE = 0xF4AE69EC,
		// 	SAVEGAMETYPE_SP_DEBUG = 0x6A8122FD,
		// 	SAVEGAMETYPE_SP_PROPERTY = 0xAE0AB38E
		// };
		static BOOL SAVEGAME_SAVE_SP(Hash savegameType)
		{
			return invoke<BOOL>(0x62C9EB51656D68CE, savegameType);
		} // 0x62C9EB51656D68CE undefined b1207
		// See SAVEGAME_SAVE_SP
		static BOOL SAVEGAME_SAVE_MP(Hash savegameType)
		{
			return invoke<BOOL>(0x1840F3B30ED0105F, savegameType);
		} // 0x1840F3B30ED0105F undefined b1207
		static BOOL SAVEGAME_IS_SAVE_PENDING()
		{
			return invoke<BOOL>(0x3CF46F55C6585590);
		} // 0x3CF46F55C6585590 undefined b1207
		static Any N0x1431540BCA1A1BD2()
		{
			return invoke<Any>(0x1431540BCA1A1BD2);
		} // 0x1431540BCA1A1BD2 undefined b1207
		static Any N0xA7ECEBAFBAF997A5(Hash savegameType)
		{
			return invoke<Any>(0xA7ECEBAFBAF997A5, savegameType);
		} // 0xA7ECEBAFBAF997A5 undefined b1436
		static void N0xED4B0C1057892B2E(Any p0, Any p1, Any p2, Any p3)
		{
			invoke<int>(0xED4B0C1057892B2E, p0, p1, p2, p3);
		} // 0xED4B0C1057892B2E undefined b1207
		static void N0x9BB83C4DD7BE0802(Any p0, Any p1, Any p2, Any p3, Any p4)
		{
			invoke<int>(0x9BB83C4DD7BE0802, p0, p1, p2, p3, p4);
		} // 0x9BB83C4DD7BE0802 undefined b1207
		static void N0xE8346E62FD7FB962()
		{
			invoke<int>(0xE8346E62FD7FB962);
		} // 0xE8346E62FD7FB962 undefined b1207
		static void N0xC0ABF784590798A9(Any p0)
		{
			invoke<int>(0xC0ABF784590798A9, p0);
		} // 0xC0ABF784590798A9 undefined b1207
		static Any N0xB00CE33465B5406D(Any p0, Any p1)
		{
			return invoke<Any>(0xB00CE33465B5406D, p0, p1);
		} // 0xB00CE33465B5406D undefined b1207
		// Does the exact same as 0x529B9CCD0972AF4E
		// Commonly used with time/timestamps
		static void SAVEGAME_GET_INT_2_(Any* p0, const char* variableName)
		{
			invoke<int>(0x529B9CCD0972AF4D, p0, variableName);
		} // 0x529B9CCD0972AF4D undefined b1207
		static void SAVEGAME_GET_INT_(Any* p0, const char* variableName)
		{
			invoke<int>(0x529B9CCD0972AF4E, p0, variableName);
		} // 0x529B9CCD0972AF4E undefined b1207
		// Does the exact same as 0x529B9CCD0972AF4E
		// Commonly used with enums and flags
		static void SAVEGAME_GET_INT_3_(Any* p0, const char* variableName)
		{
			invoke<int>(0xB25B5A375BE5BE26, p0, variableName);
		} // 0xB25B5A375BE5BE26 undefined b1207
		static void SAVEGAME_GET_FLOAT_(Any* p0, const char* variableName)
		{
			invoke<int>(0x35DEFECAE36D4FAE, p0, variableName);
		} // 0x35DEFECAE36D4FAE undefined b1207
		// Does the exact same as 0x529B9CCD0972AF4E
		static void SAVEGAME_GET_BOOL_(Any* p0, const char* variableName)
		{
			invoke<int>(0xBB7F4273C186BC4B, p0, variableName);
		} // 0xBB7F4273C186BC4B undefined b1207
		static void SAVEGAME_GET_TEXT_LABEL_23_(Any* p0, const char* variableName)
		{
			invoke<int>(0x5A10D6506B2F2C63, p0, variableName);
		} // 0x5A10D6506B2F2C63 undefined b1207
		static void SAVEGAME_GET_TEXT_LABEL_31_(Any* p0, const char* variableName)
		{
			invoke<int>(0x4845E7E7643A908C, p0, variableName);
		} // 0x4845E7E7643A908C undefined b1207
		static void SAVEGAME_GET_TEXT_LABEL_63_(Any* p0, const char* variableName)
		{
			invoke<int>(0x186608A2AC6F9E88, p0, variableName);
		} // 0x186608A2AC6F9E88 undefined b1207
		static void N0x443174C20B8B9E7F(Any p0, Any p1, Any p2)
		{
			invoke<int>(0x443174C20B8B9E7F, p0, p1, p2);
		} // 0x443174C20B8B9E7F undefined b1207
		static void N0x8E8FFB9E4AD051D2(Any p0, Any p1, Any p2, Any p3)
		{
			invoke<int>(0x8E8FFB9E4AD051D2, p0, p1, p2, p3);
		} // 0x8E8FFB9E4AD051D2 undefined b1207
		static void N0xE0B45E983BFC0768()
		{
			invoke<int>(0xE0B45E983BFC0768);
		} // 0xE0B45E983BFC0768 undefined b1207
		static void N0x81F4E92BE3958364(Any p0, Any p1, Any p2)
		{
			invoke<int>(0x81F4E92BE3958364, p0, p1, p2);
		} // 0x81F4E92BE3958364 undefined b1207
		static void N0xA844FEB5C22C2C74()
		{
			invoke<int>(0xA844FEB5C22C2C74);
		} // 0xA844FEB5C22C2C74 undefined b1207
	}

	namespace SHAPETEST
	{
		// Asynchronously starts a line-of-sight (raycast) world probe shape test.
		//
		// Use the handle with 0x3D87450E15D98694 or 0x65287525D951F6BE until it returns 0 or 2.
		//
		// p8 is a bit mask with bits 1, 2 and/or 4, relating to collider types; 4 should usually be used.
		static ScrHandle START_SHAPE_TEST_LOS_PROBE(float x1, float y1, float z1, float x2, float y2, float z2, int flags, Entity entity, int p8)
		{
			return invoke<ScrHandle>(0x7EE9F5D83DD4F90E, x1, y1, z1, x2, y2, z2, flags, entity, p8);
		} // 0x7EE9F5D83DD4F90E 0xEFAF4BA6 b1207
		static Any N0x04AA59CA40571C2E(Any p0, Any p1)
		{
			return invoke<Any>(0x04AA59CA40571C2E, p0, p1);
		} // 0x04AA59CA40571C2E undefined b1207
		// Does the same as 0x7EE9F5D83DD4F90E, except blocking until the shape test completes.
		static ScrHandle START_EXPENSIVE_SYNCHRONOUS_SHAPE_TEST_LOS_PROBE(float x1, float y1, float z1, float x2, float y2, float z2, int flags, Entity entityToIgnore, int p8)
		{
			return invoke<ScrHandle>(0x377906D8A31E5586, x1, y1, z1, x2, y2, z2, flags, entityToIgnore, p8);
		} // 0x377906D8A31E5586 0x8251485D b1207
		static ScrHandle START_SHAPE_TEST_BOX(float posX, float posY, float posZ, float dimensionsX, float dimensionsY, float dimensionsZ, float rotX, float rotY, float rotZ, int rotationOrder, int flags, Entity entityToIgnore, int options)
		{
			return invoke<ScrHandle>(0xFE466162C4401D18, posX, posY, posZ, dimensionsX, dimensionsY, dimensionsZ, rotX, rotY, rotZ, rotationOrder, flags, entityToIgnore, options);
		} // 0xFE466162C4401D18 0x249BC876 b1207
		static ScrHandle START_SHAPE_TEST_CAPSULE(float x1, float y1, float z1, float x2, float y2, float z2, float radius, int flags, Entity entityToIgnore, int p9)
		{
			return invoke<ScrHandle>(0x28579D1B8F8AAC80, x1, y1, z1, x2, y2, z2, radius, flags, entityToIgnore, p9);
		} // 0x28579D1B8F8AAC80 0x591EA833 b1207
		static ScrHandle START_SHAPE_TEST_SWEPT_SPHERE(float x1, float y1, float z1, float x2, float y2, float z2, float radius, int flags, Entity entity, Any p9)
		{
			return invoke<ScrHandle>(0xAA5B7C8309F73230, x1, y1, z1, x2, y2, z2, radius, flags, entity, p9);
		} // 0xAA5B7C8309F73230 0x4559460A b1207
		// Old name: _START_SHAPE_TEST_SURROUNDING_COORDS
		static ScrHandle START_SHAPE_TEST_MOUSE_CURSOR_LOS_PROBE(Vector3* pVec1, Vector3* pVec2, int flag, Entity entity, int flag2)
		{
			return invoke<ScrHandle>(0x9839013D8B6014F1, pVec1, pVec2, flag, entity, flag2);
		} // 0x9839013D8B6014F1  b1207
		// Returns the result of a shape test: 0 if the handle is invalid, 1 if the shape test is still pending, or 2 if the shape test has completed, and the handle should be invalidated.
		//
		// When used with an asynchronous shape test, this native should be looped until returning 0 or 2, after which the handle is invalidated.
		//
		// enum eShapeTestStatus
		// {
		// 	SHAPETEST_STATUS_NONEXISTENT,
		// 	SHAPETEST_STATUS_RESULTS_NOTREADY,
		// 	SHAPETEST_STATUS_RESULTS_READY
		// };
		static int GET_SHAPE_TEST_RESULT(ScrHandle shapeTestHandle, BOOL* hit, Vector3* endCoords, Vector3* surfaceNormal, Entity* entityHit)
		{
			return invoke<int>(0xEDE8AC7C5108FB1D, shapeTestHandle, hit, endCoords, surfaceNormal, entityHit);
		} // 0xEDE8AC7C5108FB1D 0xF3C2875A b1207
	}

	namespace SOCIALCLUB
	{
		static int SC_INBOX_GET_TOTAL_NUM_MESSAGES()
		{
			return invoke<int>(0x8EF0F633280C0663);
		} // 0x8EF0F633280C0663 0x6BE5DF29 b1207
		static Hash SC_INBOX_GET_MESSAGE_TYPE_AT_INDEX(int msgIndex)
		{
			return invoke<Hash>(0xFF92537C4DDC1241, msgIndex);
		} // 0xFF92537C4DDC1241 0x5ECF955D b1207
		static BOOL SC_INBOX_GET_MESSAGE_IS_READ_AT_INDEX(int msgIndex)
		{
			return invoke<BOOL>(0x74CF39E030A382C4, msgIndex);
		} // 0x74CF39E030A382C4 0xD1ED1D48 b1207
		static BOOL SC_INBOX_SET_MESSAGE_AS_READ_AT_INDEX(int msgIndex)
		{
			return invoke<BOOL>(0x63CAC501FFF66DC4, msgIndex);
		} // 0x63CAC501FFF66DC4 0x19EE0CCB b1207
		static BOOL SC_INBOX_MESSAGE_GET_DATA_INT(int p0, const char* context, int* out)
		{
			return invoke<BOOL>(0x95BB39C4DA99F348, p0, context, out);
		} // 0x95BB39C4DA99F348 0x88068C7C b1207
		static BOOL SC_INBOX_MESSAGE_GET_DATA_STRING(int p0, const char* context, char* out)
		{
			return invoke<BOOL>(0x66F77FD58506FF6B, p0, context, out);
		} // 0x66F77FD58506FF6B 0x15607620 b1207
		static const char* SC_INBOX_MESSAGE_GET_RAW_TYPE_AT_INDEX(int p0)
		{
			return invoke<const char*>(0x176D077685CD83E4, p0);
		} // 0x176D077685CD83E4 0x2C959AF9 b1207
		static BOOL SC_PRESENCE_ATTR_SET_FLOAT(Hash attrHash, float value)
		{
			return invoke<BOOL>(0xA31DAFCDC33775E9, attrHash, value);
		} // 0xA31DAFCDC33775E9 0x94BF0D35 b1207
		static BOOL SC_PRESENCE_ATTR_SET_INT_EX(const char* attrName, int value, BOOL p2)
		{
			return invoke<BOOL>(0x0000000085488C49, attrName, value, p2);
		} // 0x0000000085488C49 undefined b1207
		static BOOL SC_PRESENCE_ATTR_SET_FLOAT_EX(const char* attrName, float value, BOOL p2)
		{
			return invoke<BOOL>(0x00000000467F4CAA, attrName, value, p2);
		} // 0x00000000467F4CAA undefined b1207
		static BOOL SC_PRESENCE_ATTR_SET_STRING_EX(const char* attrName, const char* value, BOOL p2)
		{
			return invoke<BOOL>(0x00000000EB2D93B3, attrName, value, p2);
		} // 0x00000000EB2D93B3 undefined b1207
		// Starts a task to check an entered string for profanity on the ROS/Social Club services.
		static BOOL SC_PROFANITY_CHECK_STRING(const char* string, int* token)
		{
			return invoke<BOOL>(0x9C74AC9D87B3FFF4, string, token);
		} // 0x9C74AC9D87B3FFF4 0xDF084A6B b1207
		static BOOL SC_PROFANITY_GET_CHECK_IS_VALID(int token)
		{
			return invoke<BOOL>(0x08C8052AF40C4247, token);
		} // 0x08C8052AF40C4247 0xFFED3676 b1207
		static BOOL SC_PROFANITY_GET_CHECK_IS_PENDING(int token)
		{
			return invoke<BOOL>(0x3A10BCD0C8AA0B82, token);
		} // 0x3A10BCD0C8AA0B82 0xA796D7A7 b1207
		static BOOL SC_PROFANITY_GET_STRING_PASSED(int token)
		{
			return invoke<BOOL>(0xF302973BB8BE70E6, token);
		} // 0xF302973BB8BE70E6 0x09497F31 b1207
		static int SC_PROFANITY_GET_STRING_STATUS(int token)
		{
			return invoke<int>(0x0CF3BFB99EBBE5B1, token);
		} // 0x0CF3BFB99EBBE5B1 0x4D8A6521 b1207
		static BOOL SC_COMMUNITY_EVENT_IS_ACTIVE()
		{
			return invoke<BOOL>(0xCBF743C984695CF3);
		} // 0xCBF743C984695CF3 0xC96456BA b1207
		static int SC_COMMUNITY_EVENT_GET_EVENT_ID()
		{
			return invoke<int>(0xD635DF6BAA5A6017);
		} // 0xD635DF6BAA5A6017 0xC5E08B66 b1207
		static BOOL SC_COMMUNITY_EVENT_GET_EXTRA_DATA_INT(const char* p0, int* p1)
		{
			return invoke<BOOL>(0xB4411D4D6B81438E, p0, p1);
		} // 0xB4411D4D6B81438E 0x04EE74A3 b1207
		static BOOL SC_COMMUNITY_EVENT_GET_EXTRA_DATA_FLOAT(const char* p0, float* p1)
		{
			return invoke<BOOL>(0x060BBAD634C2B44B, p0, p1);
		} // 0x060BBAD634C2B44B 0x8DA93C3D b1207
		static BOOL SC_COMMUNITY_EVENT_GET_EXTRA_DATA_STRING(const char* p0, char* p1)
		{
			return invoke<BOOL>(0x9F6DCD0C939C71E9, p0, p1);
		} // 0x9F6DCD0C939C71E9 0x37DD48B5 b1207
		static BOOL SC_COMMUNITY_EVENT_GET_DISPLAY_NAME(char* p0)
		{
			return invoke<BOOL>(0x89D9BDE7334B110F, p0);
		} // 0x89D9BDE7334B110F 0xF929F61D b1207
		static BOOL SC_COMMUNITY_EVENT_IS_ACTIVE_FOR_TYPE(const char* p0)
		{
			return invoke<BOOL>(0x09937EB0CEBC2F9F, p0);
		} // 0x09937EB0CEBC2F9F 0x0572EB5E b1207
		static int SC_COMMUNITY_EVENT_GET_EVENT_ID_FOR_TYPE(const char* p0)
		{
			return invoke<int>(0x03C03ABBABBEF752, p0);
		} // 0x03C03ABBABBEF752 0x8E7AEEB7 b1207
		static BOOL SC_COMMUNITY_EVENT_GET_EXTRA_DATA_INT_FOR_TYPE(const char* p0, int* p1, const char* p2)
		{
			return invoke<BOOL>(0x3519CC3525319A96, p0, p1, p2);
		} // 0x3519CC3525319A96 0x28C57FA0 b1207
		static BOOL SC_COMMUNITY_EVENT_GET_EXTRA_DATA_FLOAT_FOR_TYPE(const char* p0, float* p1, const char* p2)
		{
			return invoke<BOOL>(0x1BDB56DB258F052D, p0, p1, p2);
		} // 0x1BDB56DB258F052D 0x59394583 b1207
		static BOOL SC_COMMUNITY_EVENT_GET_EXTRA_DATA_STRING_FOR_TYPE(const char* p0, char* p1, const char* p2)
		{
			return invoke<BOOL>(0xC8FC3B2432E8229D, p0, p1, p2);
		} // 0xC8FC3B2432E8229D 0x92452C0E b1207
		static BOOL SC_COMMUNITY_EVENT_GET_DISPLAY_NAME_FOR_TYPE(char* p0, const char* p1)
		{
			return invoke<BOOL>(0x85EA0BEC7B1F7622, p0, p1);
		} // 0x85EA0BEC7B1F7622 0xBBA8D34D b1207
		static BOOL SC_COMMUNITY_EVENT_IS_ACTIVE_BY_ID(int p0)
		{
			return invoke<BOOL>(0x62B384FEFDE06817, p0);
		} // 0x62B384FEFDE06817 0xB21288FA b1207
		static BOOL SC_COMMUNITY_EVENT_GET_EXTRA_DATA_INT_BY_ID(int p0, const char* p1, int* p2)
		{
			return invoke<BOOL>(0x7C981DE05A7403A0, p0, p1, p2);
		} // 0x7C981DE05A7403A0 0xE778B2A7 b1207
		static BOOL SC_COMMUNITY_EVENT_GET_EXTRA_DATA_FLOAT_BY_ID(int p0, const char* p1, float* p2)
		{
			return invoke<BOOL>(0x91C9E2A0F9DD6DD4, p0, p1, p2);
		} // 0x91C9E2A0F9DD6DD4 0x7E24BD6E b1207
		static BOOL SC_COMMUNITY_EVENT_GET_EXTRA_DATA_STRING_BY_ID(int p0, const char* p1, char* p2)
		{
			return invoke<BOOL>(0x049D2196D9D11184, p0, p1, p2);
		} // 0x049D2196D9D11184 0xCE7D50A8 b1207
		static BOOL SC_COMMUNITY_EVENT_GET_DISPLAY_NAME_BY_ID(int p0, char* p1)
		{
			return invoke<BOOL>(0x11EA52CAD1B55910, p0, p1);
		} // 0x11EA52CAD1B55910 0xD26CCA46 b1207
	}

	namespace SOCIALCLUBFEED
	{
		static int SC_FEED_SUBMIT_PRESET_MESSAGE_(int type, int subType)
		{
			return invoke<int>(0xEFB64240F6B17817, type, subType);
		} // 0xEFB64240F6B17817 undefined b1207
		static BOOL SC_FEED_HUB_HAS_NEW_DATA()
		{
			return invoke<BOOL>(0x068332D20CB6F897);
		} // 0x068332D20CB6F897 undefined b1232
	}

	namespace SPACTIONPROXY
	{
		static BOOL SPACTIONPROXY_START_MANAGER_()
		{
			return invoke<BOOL>(0x1F471B79ACC91BEE);
		} // 0x1F471B79ACC91BEE undefined b1207
		static BOOL SPACTIONPROXY_MANAGER_IS_READY_()
		{
			return invoke<BOOL>(0x1F471B79ACC91BED);
		} // 0x1F471B79ACC91BED undefined b1207
		static BOOL SPACTIONPROXY_MANAGER_IS_FAILED_()
		{
			return invoke<BOOL>(0x1F471B79ACC91BEC);
		} // 0x1F471B79ACC91BEC undefined b1207
		static BOOL SPACTIONPROXY_GET_NEXT_PENDING_CRAFTING_ACTION_(Any* data)
		{
			return invoke<BOOL>(0x1F471B79ACC97BEF, data);
		} // 0x1F471B79ACC97BEF undefined b1207
		static BOOL SPACTIONPROXY_GET_NEXT_PENDING_BUY_ACTION_(Any* data)
		{
			return invoke<BOOL>(0x1F471B79ACC98BEF, data);
		} // 0x1F471B79ACC98BEF undefined b1207
		static BOOL SPACTIONPROXY_PROCESS_ACTION_(Any p0, BOOL p1)
		{
			return invoke<BOOL>(0x1F471B79ACC94BEF, p0, p1);
		} // 0x1F471B79ACC94BEF undefined b1207
	}

	namespace STATS
	{
		// struct StatId
		// {
		// 	alignas(8) Hash BaseId;
		// 	alignas(8) Hash PermutationId;
		// }
		static BOOL STAT_ID_IS_VALID(Any* statId)
		{
			return invoke<BOOL>(0xC48FE1971C9743FF, statId);
		} // 0xC48FE1971C9743FF undefined b1207
		// statId: see STAT_ID_IS_VALID
		static BOOL STAT_ID_SET_INT(Any* statId, int value, BOOL p2)
		{
			return invoke<BOOL>(0xA4DDF5DF95E65EEE, statId, value, p2);
		} // 0xA4DDF5DF95E65EEE undefined b1207
		// statId: see STAT_ID_IS_VALID
		static BOOL STAT_ID_SET_FLOAT(Any* statId, float value, BOOL p2)
		{
			return invoke<BOOL>(0x481BDF6A10C5EF68, statId, value, p2);
		} // 0x481BDF6A10C5EF68 undefined b1207
		// statId: see STAT_ID_IS_VALID
		static BOOL STAT_ID_SET_BOOL(Any* statId, BOOL value, BOOL p2)
		{
			return invoke<BOOL>(0x3B5107353267D7A1, statId, value, p2);
		} // 0x3B5107353267D7A1 undefined b1207
		// statId: see STAT_ID_IS_VALID
		static BOOL STAT_ID_SET_GXT_LABEL(Any* statId, const char* label, BOOL p2)
		{
			return invoke<BOOL>(0x05060A54834F2382, statId, label, p2);
		} // 0x05060A54834F2382 undefined b1207
		// statId: see STAT_ID_IS_VALID
		static BOOL STAT_ID_SET_DATE(Any* statId, Any* date, BOOL p2)
		{
			return invoke<BOOL>(0x1FAE9B2FAA2DFE06, statId, date, p2);
		} // 0x1FAE9B2FAA2DFE06 undefined b1207
		// statId: see STAT_ID_IS_VALID
		static BOOL STAT_ID_GET_INT(Any* statId, int* p1)
		{
			return invoke<BOOL>(0x767FBC2AC802EF3E, statId, p1);
		} // 0x767FBC2AC802EF3E undefined b1207
		// statId: see STAT_ID_IS_VALID
		static BOOL STAT_ID_GET_FLOAT(Any* statId, float* value)
		{
			return invoke<BOOL>(0xD7AE6C9C9C6AC54D, statId, value);
		} // 0xD7AE6C9C9C6AC54D undefined b1207
		// statId: see STAT_ID_IS_VALID
		static BOOL STAT_ID_GET_BOOL(Any* statId, BOOL* value)
		{
			return invoke<BOOL>(0x11B5E6D2AE73F48F, statId, value);
		} // 0x11B5E6D2AE73F48F undefined b1207
		// statId: see STAT_ID_IS_VALID
		static BOOL STAT_ID_GET_DATE(Any* statId, Any* date)
		{
			return invoke<BOOL>(0x8B0FACEFC36C824C, statId, date);
		} // 0x8B0FACEFC36C824C undefined b1207
		// statId: see STAT_ID_IS_VALID
		static void N0x0FEE2561120F3333(Any* statId)
		{
			invoke<int>(0x0FEE2561120F3333, statId);
		} // 0x0FEE2561120F3333 undefined b1207
		// statId: see STAT_ID_IS_VALID
		static void STAT_ID_INCREMENT_INT_(Any* statId, int value)
		{
			invoke<int>(0x6A0184E904CDF25E, statId, value);
		} // 0x6A0184E904CDF25E undefined b1207
		// statId: see STAT_ID_IS_VALID
		static void STAT_ID_INCREMENT_FLOAT_(Any* statId, float value)
		{
			invoke<int>(0x4A47E38EA3D60939, statId, value);
		} // 0x4A47E38EA3D60939 undefined b1207
		// statId: see STAT_ID_IS_VALID
		static void STAT_ID_DECREMENT_INT_(Any* statId, int value)
		{
			invoke<int>(0xBD861AE8A5181ED7, statId, value);
		} // 0xBD861AE8A5181ED7 undefined b1207
		// statId: see STAT_ID_IS_VALID
		static void N0x91A4F58E01ED5E4C(Any* statId, int value)
		{
			invoke<int>(0x91A4F58E01ED5E4C, statId, value);
		} // 0x91A4F58E01ED5E4C undefined b1207
		// statId: see STAT_ID_IS_VALID
		// Only used in R* SP Scripts
		// _STAT_ID_SET_*
		static void N0xE141F6B40B1E3683(Any* statId, float value)
		{
			invoke<int>(0xE141F6B40B1E3683, statId, value);
		} // 0xE141F6B40B1E3683 undefined b1207
		// statId: see STAT_ID_IS_VALID
		static void STAT_ID_SET_TO_POSSE_ID(Any* statId)
		{
			invoke<int>(0x34B22DE38477EDB4, statId);
		} // 0x34B22DE38477EDB4 undefined b1207
		// Calculation: (value / 1000) / 60 % 60
		static int STAT_CALCULATE_COOLDOWN_(int value)
		{
			return invoke<int>(0x1E7384AB5D4F4581, value);
		} // 0x1E7384AB5D4F4581 undefined b1207
		// statId: see STAT_ID_IS_VALID
		static BOOL STAT_PHEROMONE_COOLDOWN_LEGENDARY_ANIMAL_(Entity entity, Any* statId)
		{
			return invoke<BOOL>(0x5420D398A42917FC, entity, statId);
		} // 0x5420D398A42917FC undefined b1311
		static void STAT_ITEM_FISH_CAUGHT_(Ped fish, float weight, Hash category, Hash subcategory)
		{
			invoke<int>(0xDA26263C87CCE9C1, fish, weight, category, subcategory);
		} // 0xDA26263C87CCE9C1 undefined b1207
		static void STAT_CARRIED_SATCHEL_ITEM_FROM_PED_(Ped ped)
		{
			invoke<int>(0x831BF01C56149A8A, ped);
		} // 0x831BF01C56149A8A undefined b1207
		static void STAT_DONATE_INCREMENT_ITEM_(int item, int slot, Any p2, Any p3)
		{
			invoke<int>(0x7C2ABF6E556B21FC, item, slot, p2, p3);
		} // 0x7C2ABF6E556B21FC undefined b1207
		// Only used in R* SP Scripts
		static void N0x8312F09C56149A8A(Hash animalType)
		{
			invoke<int>(0x8312F09C56149A8A, animalType);
		} // 0x8312F09C56149A8A undefined b1207
		static void N0x378D3B1B11D9385B(int p0)
		{
			invoke<int>(0x378D3B1B11D9385B, p0);
		} // 0x378D3B1B11D9385B undefined b1207
		static void N0xDA26263C07CCE9C2(int p0)
		{
			invoke<int>(0xDA26263C07CCE9C2, p0);
		} // 0xDA26263C07CCE9C2 undefined b1207
		static void N0xD64DBC8B0424135F(Ped ped, Hash animalType)
		{
			invoke<int>(0xD64DBC8B0424135F, ped, animalType);
		} // 0xD64DBC8B0424135F undefined b1207
		// Only used in R* SP Scripts
		static void N0xA59590050F80FF2E(Any p0, BOOL p1, BOOL p2, BOOL p3)
		{
			invoke<int>(0xA59590050F80FF2E, p0, p1, p2, p3);
		} // 0xA59590050F80FF2E undefined b1207
		// Related to animal tagging
		static void STAT_ADD_ANIMAL_SAMPLE_TARGET_(Hash animalType)
		{
			invoke<int>(0x90E9A5DADBABC918, animalType);
		} // 0x90E9A5DADBABC918 undefined b1355
		static void N0xF8181B5EF156862C(Ped ped)
		{
			invoke<int>(0xF8181B5EF156862C, ped);
		} // 0xF8181B5EF156862C undefined b1207
		static void STAT_ADD_BOUNTY_TARGET(Hash unlockHash, Ped ped)
		{
			invoke<int>(0x6B1044FDC2B09101, unlockHash, ped);
		} // 0x6B1044FDC2B09101 undefined b1207
		static void N0x8C889E4CBB4B2356(Any p0, Ped ped)
		{
			invoke<int>(0x8C889E4CBB4B2356, p0, ped);
		} // 0x8C889E4CBB4B2356 undefined b1207
		static void STAT_BOUNTY_CAPTURED(Entity entity)
		{
			invoke<int>(0x262EF7CF49CF1EB9, entity);
		} // 0x262EF7CF49CF1EB9 undefined b1207
		static void N0xA596890CF55B5095(Ped ped, BOOL p1)
		{
			invoke<int>(0xA596890CF55B5095, ped, p1);
		} // 0xA596890CF55B5095 undefined b1436
		static void STAT_BOUNTY_ESCAPED(Ped ped)
		{
			invoke<int>(0xB22F05732F72F70C, ped);
		} // 0xB22F05732F72F70C undefined b1207
		static void N0xF21A5D66874FCEDD(Any p0, Hash p1, Hash p2)
		{
			invoke<int>(0xF21A5D66874FCEDD, p0, p1, p2);
		} // 0xF21A5D66874FCEDD undefined b1207
		static void N0x3EB2791A1FBC8A42(Hash statItem, int p1)
		{
			invoke<int>(0x3EB2791A1FBC8A42, statItem, p1);
		} // 0x3EB2791A1FBC8A42 undefined b1207
		static void N0xDF95DF488A645CE7()
		{
			invoke<int>(0xDF95DF488A645CE7);
		} // 0xDF95DF488A645CE7 undefined b1207
		static void STAT_PHOTOGRAPH_TAKEN(ItemSet itemset)
		{
			invoke<int>(0x4D31051A4CA83787, itemset);
		} // 0x4D31051A4CA83787 undefined b1311
		static void N0xBE66B26B6529E943(Hash unlockHash, Ped ped, Hash animalType)
		{
			invoke<int>(0xBE66B26B6529E943, unlockHash, ped, animalType);
		} // 0xBE66B26B6529E943 undefined b1311
		static void N0xF2B5ABDE09958689(Hash unlockHash, Ped ped1, Ped ped2)
		{
			invoke<int>(0xF2B5ABDE09958689, unlockHash, ped1, ped2);
		} // 0xF2B5ABDE09958689 undefined b1311
		static void STAT_REGISTER_LEGENDARY_ANIMAL_DEED(Hash deedHash)
		{
			invoke<int>(0xCD0D69C65BB0E8B9, deedHash);
		} // 0xCD0D69C65BB0E8B9 undefined b1311
		// statId: see STAT_ID_IS_VALID
		static BOOL N0x302E71C1D9EE75B9(Any* statId, Hash p1, int* p2)
		{
			return invoke<BOOL>(0x302E71C1D9EE75B9, statId, p1, p2);
		} // 0x302E71C1D9EE75B9 undefined b1207
		static BOOL STATSTRACKER_IS_INITIALIZED(Hash p0)
		{
			return invoke<BOOL>(0x01F4D242765C6B24, p0);
		} // 0x01F4D242765C6B24 undefined b1207
		static void N0x6123E2832C34243D(Any p0, Any p1, Any p2, Any p3, Any p4)
		{
			invoke<int>(0x6123E2832C34243D, p0, p1, p2, p3, p4);
		} // 0x6123E2832C34243D undefined b1207
		static void N0xCA41E86545413B5B(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6)
		{
			invoke<int>(0xCA41E86545413B5B, p0, p1, p2, p3, p4, p5, p6);
		} // 0xCA41E86545413B5B undefined b1207
		static void STATSTRACKER_DEED_STARTED(Hash p0, Any p1)
		{
			invoke<int>(0xB2A38826E5886E83, p0, p1);
		} // 0xB2A38826E5886E83 undefined b1207
		static void STATSTRACKER_DEED_STATUS_(int deedType, Hash deedHash, int missionStatus, Any* data)
		{
			invoke<int>(0xD5910ECF81A2278C, deedType, deedHash, missionStatus, data);
		} // 0xD5910ECF81A2278C undefined b1207
		static void N0x99230691875FC218(Any p0, Hash p1, float x, float y, float z)
		{
			invoke<int>(0x99230691875FC218, p0, p1, x, y, z);
		} // 0x99230691875FC218 undefined b1207
		static void N0x025E98E317652CDD(int p0)
		{
			invoke<int>(0x025E98E317652CDD, p0);
		} // 0x025E98E317652CDD undefined b1207
		static void N0xE5A680A5D8B1F687(int p0)
		{
			invoke<int>(0xE5A680A5D8B1F687, p0);
		} // 0xE5A680A5D8B1F687 undefined b1207
		// Only used in R* SP Scripts
		static BOOL N0x4DAC398297981B87(int p0)
		{
			return invoke<BOOL>(0x4DAC398297981B87, p0);
		} // 0x4DAC398297981B87 undefined b1207
		// https://github.com/femga/rdr3_discoveries/blob/master/AI/EVENTS/challenge_goals.lua
		static BOOL CHAL_IS_GOAL_ACTIVE(Hash chalHash, Hash goalHash)
		{
			return invoke<BOOL>(0x04DAC3929796EB87, chalHash, goalHash);
		} // 0x04DAC3929796EB87 undefined b1207
		static void CHAL_SET_GOAL_DISABLED(Hash chalHash, Hash goalHash, BOOL disabled)
		{
			invoke<int>(0xF63DF9EE16393343, chalHash, goalHash, disabled);
		} // 0xF63DF9EE16393343 undefined b1436
		static int CHAL_GET_NUM_RANKS_COMPLETED(Hash chalHash)
		{
			return invoke<int>(0x58CB53DB63F84DE9, chalHash);
		} // 0x58CB53DB63F84DE9 undefined b1207
		static int CHAL_GET_MAX_RANKS(Hash chalHash)
		{
			return invoke<int>(0x58CB53DB63F84DEA, chalHash);
		} // 0x58CB53DB63F84DEA undefined b1207
		static void CHAL_ADD_GOAL_PROGRESS_INT(Hash chalHash, Hash goalHash, int value)
		{
			invoke<int>(0xDDBD560745B1EE9A, chalHash, goalHash, value);
		} // 0xDDBD560745B1EE9A undefined b1207
		static void CHAL_ADD_GOAL_PROGRESS_FLOAT(Hash chalHash, Hash goalHash, float value)
		{
			invoke<int>(0x86922D8C02FB7703, chalHash, goalHash, value);
		} // 0x86922D8C02FB7703 undefined b1207
		static void CHAL_SET_GOAL_PROGRESS_INT(Hash chalHash, Hash goalHash, int value)
		{
			invoke<int>(0xDDBD560745B1EE9B, chalHash, goalHash, value);
		} // 0xDDBD560745B1EE9B undefined b1207
		static void CHAL_ADD_GOAL_PROGRESS_INT_BY_SCORE_ID(Hash p0, int value)
		{
			invoke<int>(0xDDBD560745B1EE9C, p0, value);
		} // 0xDDBD560745B1EE9C undefined b1207
		static void CHAL_ADD_GOAL_PROGRESS_FLOAT_BY_SCORE_ID(Hash p0, float value)
		{
			invoke<int>(0x86922D8C02FB7705, p0, value);
		} // 0x86922D8C02FB7705 undefined b1232
		static BOOL CHAL_ACHIEVEMENT_IS_COMPLETE(Hash p0, Hash p1)
		{
			return invoke<BOOL>(0x77B97A827739D434, p0, p1);
		} // 0x77B97A827739D434 undefined b1232
		static int CHAL_ACHIEVEMENT_GET_PROGRESS_INT(Hash p0, Hash p1)
		{
			return invoke<int>(0x808712E428F697B8, p0, p1);
		} // 0x808712E428F697B8 undefined b1232
		static void CHAL_NET_START_CHAL(Hash chalHash)
		{
			invoke<int>(0x4ABF7E4DB6279E8F, chalHash);
		} // 0x4ABF7E4DB6279E8F undefined b1207
		static void CHAL_NET_STOP_CHAL(Hash chalHash)
		{
			invoke<int>(0x43B0163154A50C86, chalHash);
		} // 0x43B0163154A50C86 undefined b1207
		static void CHAL_NET_START_GOAL(Hash chalHash, Hash goalHash)
		{
			invoke<int>(0xC3FCB47344DCB638, chalHash, goalHash);
		} // 0xC3FCB47344DCB638 undefined b1207
		static void CHAL_NET_STOP_GOAL(Hash chalHash, Hash goalHash)
		{
			invoke<int>(0x00CE6A93324A590B, chalHash, goalHash);
		} // 0x00CE6A93324A590B undefined b1207
		static int N0xDDBD560745B1EE98(Hash chalHash, Hash goalHash, Player player)
		{
			return invoke<int>(0xDDBD560745B1EE98, chalHash, goalHash, player);
		} // 0xDDBD560745B1EE98 undefined b1207
		static const char* N0xB112B9262EC29C20(Hash p0, int p1)
		{
			return invoke<const char*>(0xB112B9262EC29C20, p0, p1);
		} // 0xB112B9262EC29C20 undefined b1207
		static void N0x4FCBCC0584CD08E9(Hash p0)
		{
			invoke<int>(0x4FCBCC0584CD08E9, p0);
		} // 0x4FCBCC0584CD08E9 undefined b1207
		static BOOL N0xCA1F0B5103936891(Hash p0)
		{
			return invoke<BOOL>(0xCA1F0B5103936891, p0);
		} // 0xCA1F0B5103936891 undefined b1207
		static Hash N0x8BA3D7B1E83EF803(Hash p0)
		{
			return invoke<Hash>(0x8BA3D7B1E83EF803, p0);
		} // 0x8BA3D7B1E83EF803 undefined b1207
		static int CHAL_MISSION_GET_NUM_GOALS(Hash missionHash)
		{
			return invoke<int>(0x0B0576DD3A75E58D, missionHash);
		} // 0x0B0576DD3A75E58D undefined b1207
		static int CHAL_MISSION_GET_NUM_GOALS_COMPLETE(Hash missionHash)
		{
			return invoke<int>(0xA785A52B59B7E7B2, missionHash);
		} // 0xA785A52B59B7E7B2 undefined b1207
		static BOOL CHAL_MISSION_IS_GOAL_COMPLETE(Hash missionHash, Hash goalHash)
		{
			return invoke<BOOL>(0xC0BB774787BBF301, missionHash, goalHash);
		} // 0xC0BB774787BBF301 undefined b1207
		static void CHAL_MISSION_ADD_GOAL_PROGRESS_INT(Hash missionHash, Hash goalHash, int value)
		{
			invoke<int>(0x97E18E7C098626DE, missionHash, goalHash, value);
		} // 0x97E18E7C098626DE undefined b1207
		static float N0x9D0F5D2E1951CD84()
		{
			return invoke<float>(0x9D0F5D2E1951CD84);
		} // 0x9D0F5D2E1951CD84 undefined b1207
		static void N0x218F7710A139D012()
		{
			invoke<int>(0x218F7710A139D012);
		} // 0x218F7710A139D012 undefined b1207
		static BOOL N0x3AEABAE3F3C7600C()
		{
			return invoke<BOOL>(0x3AEABAE3F3C7600C);
		} // 0x3AEABAE3F3C7600C undefined b1207
		static const char* N0x3F6FD87D2030ADC6()
		{
			return invoke<const char*>(0x3F6FD87D2030ADC6);
		} // 0x3F6FD87D2030ADC6 undefined b1207
		static Any N0xA2E2BEA4E83F6270(Hash p0)
		{
			return invoke<Any>(0xA2E2BEA4E83F6270, p0);
		} // 0xA2E2BEA4E83F6270 undefined b1207
		static BOOL N0xB5E2EDA2135E0FA1(Hash p0, int p1, Hash* scheduleLocation)
		{
			return invoke<BOOL>(0xB5E2EDA2135E0FA1, p0, p1, scheduleLocation);
		} // 0xB5E2EDA2135E0FA1 undefined b1207
		static int WEEKLY_COLLECTIBLE_GET_NUM_SETS(Hash chalHash)
		{
			return invoke<int>(0x8F5317729F791D10, chalHash);
		} // 0x8F5317729F791D10 undefined b1207
		static Hash WEEKLY_COLLECTIBLE_GET_ITEM_SET_BUY_AWARD(Hash chalHash, int index)
		{
			return invoke<Hash>(0x610783F646894D25, chalHash, index);
		} // 0x610783F646894D25 undefined b1207
		static Hash WEEKLY_COLLECTIBLE_GET_ITEM_SET_LABEL(Hash chalHash, int index)
		{
			return invoke<Hash>(0xBFFA88522FF0F730, chalHash, index);
		} // 0xBFFA88522FF0F730 undefined b1207
		static int WEEKLY_COLLECTIBLE_GET_NUM_ITEMS_IN_SET(Hash chalHash, int index)
		{
			return invoke<int>(0x7D675C9DDDB365BE, chalHash, index);
		} // 0x7D675C9DDDB365BE undefined b1207
		static BOOL WEEKLY_COLLECTIBLE_GET_ITEM_IN_SET(Hash chalHash, int setIndex, int itemIndex, Hash* p3, int* p4)
		{
			return invoke<BOOL>(0xBA61BA6205A3F5A8, chalHash, setIndex, itemIndex, p3, p4);
		} // 0xBA61BA6205A3F5A8 undefined b1207
		// Only used in R* Script net_char_creator
		static void N0x4F2D5FA23DB992DE()
		{
			invoke<int>(0x4F2D5FA23DB992DE);
		} // 0x4F2D5FA23DB992DE undefined b1207
		// Only used in R* Script net_char_creator
		static void N0x4E463A3CDEFFFE96()
		{
			invoke<int>(0x4E463A3CDEFFFE96);
		} // 0x4E463A3CDEFFFE96 undefined b1207
	}

	namespace STREAMING
	{
		// Request a model to be loaded into memory.
		static void REQUEST_MODEL(Hash model, BOOL p1)
		{
			invoke<int>(0xFA28FE3A6246FC30, model, p1);
		} // 0xFA28FE3A6246FC30 0xFFF1B500 b1207
		// Checks if the specified model has loaded into memory.
		static BOOL HAS_MODEL_LOADED(Hash model)
		{
			return invoke<BOOL>(0x1283B8B89DD5D1B6, model);
		} // 0x1283B8B89DD5D1B6 0x62BFDB37 b1207
		// Marks the model as no longer needed.
		static void SET_MODEL_AS_NO_LONGER_NEEDED(Hash model)
		{
			invoke<int>(0x4AD96EF928BD4F9A, model);
		} // 0x4AD96EF928BD4F9A 0xAE0F069E b1207
		// Returns whether the specified model exists in the game.
		static BOOL IS_MODEL_IN_CDIMAGE(Hash model)
		{
			return invoke<BOOL>(0xD6F3B6D7716CFF8E, model);
		} // 0xD6F3B6D7716CFF8E 0x1094782F b1207
		// Returns whether the specified model is valid
		static BOOL IS_MODEL_VALID(Hash model)
		{
			return invoke<BOOL>(0x392C8D8E07B70EFC, model);
		} // 0x392C8D8E07B70EFC 0xAF8F8E9D b1207
		static BOOL IS_MODEL_A_PED(Hash model)
		{
			return invoke<BOOL>(0xC3F09DE9D6D17DDA, model);
		} // 0xC3F09DE9D6D17DDA undefined b1207
		// Returns whether the specified model represents a vehicle.
		static BOOL IS_MODEL_A_VEHICLE(Hash model)
		{
			return invoke<BOOL>(0x354F62672DE7DB0A, model);
		} // 0x354F62672DE7DB0A 0xFFFC85D4 b1207
		static BOOL IS_MODEL_AN_OBJECT_(Hash model)
		{
			return invoke<BOOL>(0x274EE1B90CFA669E, model);
		} // 0x274EE1B90CFA669E undefined b1207
		static BOOL HAS_COLLISION_LOADED_AT_COORD_(float x, float y, float z)
		{
			return invoke<BOOL>(0xDA8B2EAF29E872E2, x, y, z);
		} // 0xDA8B2EAF29E872E2 undefined b1207
		static void N0x80B3E0597366ADF1()
		{
			invoke<int>(0x80B3E0597366ADF1);
		} // 0x80B3E0597366ADF1 undefined b1207
		static void REQUEST_COLLISION_AT_COORD(float x, float y, float z)
		{
			invoke<int>(0x0A3720F162A033C9, x, y, z);
		} // 0x0A3720F162A033C9 0xCD9805E7 b1207
		static void REQUEST_METADATA_AT_COORD_(float x, float y, float z)
		{
			invoke<int>(0xA8432A14D4DC2101, x, y, z);
		} // 0xA8432A14D4DC2101 undefined b1207
		static void REQUEST_COLLISION_FOR_MODEL(Hash model)
		{
			invoke<int>(0xF1767BE37F661551, model);
		} // 0xF1767BE37F661551 0x3930C042 b1207
		static BOOL HAS_COLLISION_FOR_MODEL_LOADED(Hash model)
		{
			return invoke<BOOL>(0x210A79C9EC89778F, model);
		} // 0x210A79C9EC89778F 0x41A094F8 b1207
		static void REQUEST_ADDITIONAL_COLLISION_AT_COORD(float x, float y, float z)
		{
			invoke<int>(0x83A8D71650D1894F, x, y, z);
		} // 0x83A8D71650D1894F 0xC2CC1DF2 b1311
		static BOOL DOES_ANIM_DICT_EXIST(const char* animDict)
		{
			return invoke<BOOL>(0x537F44CB0D7F150D, animDict);
		} // 0x537F44CB0D7F150D 0xCD31C872 b1207
		static void REQUEST_ANIM_DICT(const char* animDict)
		{
			invoke<int>(0xA862A2AD321F94B4, animDict);
		} // 0xA862A2AD321F94B4 0xDCA96950 b1207
		static BOOL HAS_ANIM_DICT_LOADED(const char* animDict)
		{
			return invoke<BOOL>(0x27FF6FE8009B40CA, animDict);
		} // 0x27FF6FE8009B40CA 0x05E6763C b1207
		static void REMOVE_ANIM_DICT(const char* animDict)
		{
			invoke<int>(0x4763145053A33D46, animDict);
		} // 0x4763145053A33D46 0x0AE050B5 b1207
		static void REQUEST_MOVE_NETWORK_DEF(const char* name)
		{
			invoke<int>(0x2B6529C54D29037A, name);
		} // 0x2B6529C54D29037A undefined b1207
		static BOOL HAS_MOVE_NETWORK_DEF_LOADED(const char* name)
		{
			return invoke<BOOL>(0x2C04D89A0FB4E244, name);
		} // 0x2C04D89A0FB4E244 undefined b1207
		static void REMOVE_MOVE_NETWORK_DEF(const char* name)
		{
			invoke<int>(0x57A197AD83F66BBF, name);
		} // 0x57A197AD83F66BBF undefined b1207
		static void REQUEST_CLIP_SET(const char* clipSet)
		{
			invoke<int>(0xEF7611B57A820126, clipSet);
		} // 0xEF7611B57A820126 0x546C627A b1207
		// Alias for HAS_ANIM_SET_LOADED.
		static BOOL HAS_CLIP_SET_LOADED(const char* clipSet)
		{
			return invoke<BOOL>(0x1F23D6B6DA1CC3B2, clipSet);
		} // 0x1F23D6B6DA1CC3B2 0x230D5455 b1207
		// Alias for REMOVE_ANIM_SET.
		static void REMOVE_CLIP_SET(const char* clipSet)
		{
			invoke<int>(0x817FA1B1EE7CD6F0, clipSet);
		} // 0x817FA1B1EE7CD6F0 0x1E21F7AA b1207
		static void REQUEST_CLIP_SET_BY_HASH_(Hash clipSetHash)
		{
			invoke<int>(0xAC37644A538F7524, clipSetHash);
		} // 0xAC37644A538F7524 undefined b1207
		static void N0x03DDBF2D73799F9E(Any p0)
		{
			invoke<int>(0x03DDBF2D73799F9E, p0);
		} // 0x03DDBF2D73799F9E undefined b1207
		static Any N0x85B8F04555AB49B8(Any p0)
		{
			return invoke<Any>(0x85B8F04555AB49B8, p0);
		} // 0x85B8F04555AB49B8 undefined b1207
		static void N0x9F348DE670423460(Any p0)
		{
			invoke<int>(0x9F348DE670423460, p0);
		} // 0x9F348DE670423460 undefined b1207
		static Any N0x5288B7F0690F7C1F(Any p0)
		{
			return invoke<Any>(0x5288B7F0690F7C1F, p0);
		} // 0x5288B7F0690F7C1F undefined b1207
		static int REQUEST_SCENARIO_TYPE_(Hash scenarioType, int p1, Any p2, Any p3)
		{
			return invoke<int>(0x19A6BE7D9C6884D3, scenarioType, p1, p2, p3);
		} // 0x19A6BE7D9C6884D3 undefined b1207
		static BOOL HAS_SCENARIO_TYPE_LOADED_(Hash scenarioType, BOOL p1)
		{
			return invoke<BOOL>(0x9427C94D2E4094A4, scenarioType, p1);
		} // 0x9427C94D2E4094A4 undefined b1207
		static Any REMOVE_SCENARIO_ASSET_(Hash scenarioType)
		{
			return invoke<Any>(0x4EDDD9E9CA5AF985, scenarioType);
		} // 0x4EDDD9E9CA5AF985 undefined b1207
		static Any N0xB223249B7798EEED(Any p0, Any p1, Any p2, Any p3)
		{
			return invoke<Any>(0xB223249B7798EEED, p0, p1, p2, p3);
		} // 0xB223249B7798EEED undefined b1207
		static Any N0xA0AE7653E8181725(Any p0)
		{
			return invoke<Any>(0xA0AE7653E8181725, p0);
		} // 0xA0AE7653E8181725 undefined b1207
		static Any N0x66BC28E50E85270E(Any p0)
		{
			return invoke<Any>(0x66BC28E50E85270E, p0);
		} // 0x66BC28E50E85270E undefined b1207
		// Outputs IPL position and radius (previously wrongly named heading)
		// https://github.com/femga/rdr3_discoveries/blob/master/imaps/imaps_with_coords_and_heading.lua
		static BOOL GET_IPL_BOUNDING_SPHERE_(Hash iplHash, Vector3* position, float* radius)
		{
			return invoke<BOOL>(0x9C77964B0E07B633, iplHash, position, radius);
		} // 0x9C77964B0E07B633 undefined b1207
		// Old name: _REQUEST_IMAP
		static void REQUEST_IPL_HASH(Hash iplHash)
		{
			invoke<int>(0x59767C5A7A9AE6DA, iplHash);
		} // 0x59767C5A7A9AE6DA undefined b1207
		// Old name: _REQUEST_IMAP_2
		static void REQUEST_IPL_BY_HASH(Hash iplHash)
		{
			invoke<int>(0x9E211A378F95C97C, iplHash);
		} // 0x9E211A378F95C97C undefined b1207
		// Old name: _REMOVE_IMAP
		static void REMOVE_IPL_HASH(Hash iplHash)
		{
			invoke<int>(0x5A3E5CF7B4014B96, iplHash);
		} // 0x5A3E5CF7B4014B96 undefined b1207
		// Old name: _REMOVE_IMAP_2
		static void REMOVE_IPL_BY_HASH(Hash iplHash)
		{
			invoke<int>(0x431E3AB760629B34, iplHash);
		} // 0x431E3AB760629B34 undefined b1207
		// Old name: _IS_IMAP_ACTIVE
		static BOOL IS_IPL_ACTIVE_HASH(Hash iplHash)
		{
			return invoke<BOOL>(0xD779B9B910BD3B7C, iplHash);
		} // 0xD779B9B910BD3B7C undefined b1207
		// Old name: _IS_IMAP_ACTIVE_2
		static BOOL IS_IPL_ACTIVE_BY_HASH(Hash iplHash)
		{
			return invoke<BOOL>(0x93AC1B91CB6D9913, iplHash);
		} // 0x93AC1B91CB6D9913 undefined b1207
		// Returns true if IPL is streamed in (?)
		static BOOL IS_POSITION_INSIDE_IPL_STREAMING_EXTENTS_(Hash iplHash, float x, float y, float z)
		{
			return invoke<BOOL>(0x73B40D97D7BAAD77, iplHash, x, y, z);
		} // 0x73B40D97D7BAAD77 undefined b1207
		static void N0xDEEE1F265B7ECEF5()
		{
			invoke<int>(0xDEEE1F265B7ECEF5);
		} // 0xDEEE1F265B7ECEF5 undefined b1311
		static void SET_GAME_PAUSES_FOR_STREAMING(BOOL toggle)
		{
			invoke<int>(0xB3BC8250F4FE8B63, toggle);
		} // 0xB3BC8250F4FE8B63 0x9211A28A b1207
		static int GET_NUMBER_OF_STREAMING_REQUESTS()
		{
			return invoke<int>(0x30CCCC4D88E654CA);
		} // 0x30CCCC4D88E654CA 0xC2EE9A02 b1207
		static void REQUEST_PTFX_ASSET()
		{
			invoke<int>(0x001FF43843028E0C);
		} // 0x001FF43843028E0C 0x2C649263 b1207
		static BOOL HAS_PTFX_ASSET_LOADED()
		{
			return invoke<BOOL>(0x13A3F30A9ED0BC31);
		} // 0x13A3F30A9ED0BC31 0x3EFF96BE b1207
		static void REMOVE_PTFX_ASSET()
		{
			invoke<int>(0x042F9049EA419E86);
		} // 0x042F9049EA419E86 0xC10F178C b1207
		static void REQUEST_NAMED_PTFX_ASSET(Hash fxNameHash)
		{
			invoke<int>(0xF2B2353BBC0D4E8F, fxNameHash);
		} // 0xF2B2353BBC0D4E8F 0xCFEA19A9 b1207
		static BOOL HAS_NAMED_PTFX_ASSET_LOADED(Hash fxNameHash)
		{
			return invoke<BOOL>(0x65BB72F29138F5D6, fxNameHash);
		} // 0x65BB72F29138F5D6 0x9ACC6446 b1207
		static void REMOVE_NAMED_PTFX_ASSET(Hash fxNameHash)
		{
			invoke<int>(0xF20866829E1C81A2, fxNameHash);
		} // 0xF20866829E1C81A2 0xC44762A1 b1207
		static void SET_POPULATION_BUDGET_MULTIPLIER(float fBudgetMultiplier)
		{
			invoke<int>(0x2F9AC754FE179D58, fBudgetMultiplier);
		} // 0x2F9AC754FE179D58 undefined b1207
		static float GET_POPULATION_BUDGET_MULTIPLIER()
		{
			return invoke<float>(0x8A3945405B31048F);
		} // 0x8A3945405B31048F undefined b1207
		static Any N0x071769BCB24379E5()
		{
			return invoke<Any>(0x071769BCB24379E5);
		} // 0x071769BCB24379E5 undefined b1207
		static void CLEAR_FOCUS()
		{
			invoke<int>(0x86CCAF7CE493EFBE);
		} // 0x86CCAF7CE493EFBE 0x34D91E7A b1207
		static void SET_FOCUS_POS_AND_VEL(float x, float y, float z, float offsetX, float offsetY, float offsetZ)
		{
			invoke<int>(0x25F6EF88664540E2, x, y, z, offsetX, offsetY, offsetZ);
		} // 0x25F6EF88664540E2 0x14680A60 b1207
		// It seems to make the entity's coords mark the point from which LOD-distances are measured. In my testing, setting a vehicle as the focus entity and moving that vehicle more than 300 distance units away from the player will make the level of detail around the player go down drastically (shadows disappear, textures go extremely low res, etc). The player seems to be the default focus entity.
		static void SET_FOCUS_ENTITY(Entity entity)
		{
			invoke<int>(0x955AEDD58F4BD309, entity);
		} // 0x955AEDD58F4BD309 0x18DB04AC b1207
		static BOOL IS_ENTITY_FOCUS(Entity entity)
		{
			return invoke<BOOL>(0xF87DE697E9A06EC6, entity);
		} // 0xF87DE697E9A06EC6 0xB456D707 b1207
		static void SET_MAPDATACULLBOX_ENABLED(const char* name, BOOL toggle)
		{
			invoke<int>(0x3CACC83F6FED837C, name, toggle);
		} // 0x3CACC83F6FED837C 0x403CD434 b1207
		// nullsub, doesn't do anything
		static void SET_ALL_MAPDATA_CULLED(Any p0)
		{
			invoke<int>(0x19ABCC581D28E6F9, p0);
		} // 0x19ABCC581D28E6F9 0xA07BAEB9 b1207
		static void N0xF01D21DF39554115(Any p0)
		{
			invoke<int>(0xF01D21DF39554115, p0);
		} // 0xF01D21DF39554115 undefined b1207
		static BOOL LOAD_SCENE_START(float posX, float posY, float posZ, float offsetX, float offsetY, float offsetZ, float radius, int p7)
		{
			return invoke<BOOL>(0x387AD749E3B69B70, posX, posY, posZ, offsetX, offsetY, offsetZ, radius, p7);
		} // 0x387AD749E3B69B70 undefined b1207
		static BOOL LOAD_SCENE_START_SPHERE(float x, float y, float z, float radius, Any p4)
		{
			return invoke<BOOL>(0x513F8AA5BF2F17CF, x, y, z, radius, p4);
		} // 0x513F8AA5BF2F17CF undefined b1207
		static void LOAD_SCENE_STOP()
		{
			invoke<int>(0x5A8B01199C3E79C3);
		} // 0x5A8B01199C3E79C3 undefined b1207
		static BOOL IS_LOAD_SCENE_ACTIVE()
		{
			return invoke<BOOL>(0xCF45DF50C7775F2A);
		} // 0xCF45DF50C7775F2A undefined b1207
		static BOOL IS_LOAD_SCENE_LOADED()
		{
			return invoke<BOOL>(0x0909F71B5C070797);
		} // 0x0909F71B5C070797 undefined b1207
		static BOOL IS_RENDERED_SCENE_LOADED()
		{
			return invoke<BOOL>(0x45BF3A6239A576B7);
		} // 0x45BF3A6239A576B7 undefined b1207
		static BOOL IS_PLAYER_SWITCH_IN_PROGRESS()
		{
			return invoke<BOOL>(0xED20CB1F5297791D);
		} // 0xED20CB1F5297791D 0x56135ACC b1207
		static void SET_SCENE_STREAMING_TRACKS_CAM_POS_THIS_FRAME()
		{
			invoke<int>(0xA03A6812529AD9C8);
		} // 0xA03A6812529AD9C8  b1207
		static void IPL_GROUP_SWAP_START(const char* iplName1, const char* iplName2)
		{
			invoke<int>(0x20D504994FDC4412, iplName1, iplName2);
		} // 0x20D504994FDC4412 0x9EF0A9CF b1207
		static void IPL_GROUP_SWAP_CANCEL()
		{
			invoke<int>(0x31108BB5715D035F);
		} // 0x31108BB5715D035F 0xF2CDD6A8 b1207
		static BOOL IPL_GROUP_SWAP_IS_READY()
		{
			return invoke<BOOL>(0xC2C05DEFE85A0B64);
		} // 0xC2C05DEFE85A0B64 0x17B0A1CD b1207
		static void IPL_GROUP_SWAP_FINISH()
		{
			invoke<int>(0x040EE319EFD1D3B5);
		} // 0x040EE319EFD1D3B5 0x3DA7AA5D b1207
		static BOOL IPL_GROUP_SWAP_IS_ACTIVE()
		{
			return invoke<BOOL>(0xFC464598F6EE97B0);
		} // 0xFC464598F6EE97B0 0xDAB4BAC0 b1207
		static void PREFETCH_SRL(const char* srl)
		{
			invoke<int>(0x354837E5A5BAA5AF, srl);
		} // 0x354837E5A5BAA5AF 0x37BE2FBB b1207
		static void N0xAE00387E53B1E9FC()
		{
			invoke<int>(0xAE00387E53B1E9FC);
		} // 0xAE00387E53B1E9FC undefined b1207
		static void N0xEF1A8A484118735E()
		{
			invoke<int>(0xEF1A8A484118735E);
		} // 0xEF1A8A484118735E undefined b1207
		static void N0xD9F2FF4AF394D926()
		{
			invoke<int>(0xD9F2FF4AF394D926);
		} // 0xD9F2FF4AF394D926 undefined b1207
		static BOOL IS_SRL_LOADED()
		{
			return invoke<BOOL>(0x5C2C88512CF6DAFB);
		} // 0x5C2C88512CF6DAFB 0x670FA2A6 b1207
		static void BEGIN_SRL()
		{
			invoke<int>(0x0360710033BE60D9);
		} // 0x0360710033BE60D9 0x24F49427 b1207
		static void END_SRL()
		{
			invoke<int>(0x1CE71FB33CA079FE);
		} // 0x1CE71FB33CA079FE 0x1977C56A b1207
		static void SET_SRL_TIME(float p0)
		{
			invoke<int>(0x18231AEF458BCFF2, p0);
		} // 0x18231AEF458BCFF2 0x30F8A487 b1207
		static void SET_SRL_READAHEAD_TIMES(int p0, int p1, int p2, int p3)
		{
			invoke<int>(0xD346248C1DCE0D76, p0, p1, p2, p3);
		} // 0xD346248C1DCE0D76 0x62F02485 b1207
		static void SET_SRL_LONG_JUMP_MODE(BOOL p0)
		{
			invoke<int>(0x7C907E8A725E5FD2, p0);
		} // 0x7C907E8A725E5FD2 0xA6459CAA b1207
		static void SET_HD_AREA(float x, float y, float z, float radius)
		{
			invoke<int>(0xB88B905AFA35CB4D, x, y, z, radius);
		} // 0xB88B905AFA35CB4D 0x80BAA035 b1207
		static void CLEAR_HD_AREA()
		{
			invoke<int>(0xD83B22434E52728D);
		} // 0xD83B22434E52728D 0x7CAC6FA0 b1207
		static void N0x09FBF15D73EFC900()
		{
			invoke<int>(0x09FBF15D73EFC900);
		} // 0x09FBF15D73EFC900 undefined b1207
		static void N0xF11D7CB962FCD747(Any p0)
		{
			invoke<int>(0xF11D7CB962FCD747, p0);
		} // 0xF11D7CB962FCD747 undefined b1207
		// Sorts some unknown data.
		//
		// Likely SORT_*
		static void N0xB9B9E47EDB9D63DB()
		{
			invoke<int>(0xB9B9E47EDB9D63DB);
		} // 0xB9B9E47EDB9D63DB undefined b1207
		static void N0xBE8DAA9D8D01DA6A(Any p0, Any p1, Any p2)
		{
			invoke<int>(0xBE8DAA9D8D01DA6A, p0, p1, p2);
		} // 0xBE8DAA9D8D01DA6A undefined b1207
		static Any N0x53764309C4618087(Any p0)
		{
			return invoke<Any>(0x53764309C4618087, p0);
		} // 0x53764309C4618087 undefined b1207
		// _SET_E* or _SET_F*
		static void N0x032A14D082A9B269(Hash p0)
		{
			invoke<int>(0x032A14D082A9B269, p0);
		} // 0x032A14D082A9B269 undefined b1207
		static void N0xAFA87A7D41EE346A(Any p0)
		{
			invoke<int>(0xAFA87A7D41EE346A, p0);
		} // 0xAFA87A7D41EE346A undefined b1207
		static void N0x6A6E79FBE8678C98()
		{
			invoke<int>(0x6A6E79FBE8678C98);
		} // 0x6A6E79FBE8678C98 undefined b1207
		static void N0xCC61D8D6C19D9F14(Any p0)
		{
			invoke<int>(0xCC61D8D6C19D9F14, p0);
		} // 0xCC61D8D6C19D9F14 undefined b1207
		static Any N0xDA7FDEFF4DE86839()
		{
			return invoke<Any>(0xDA7FDEFF4DE86839);
		} // 0xDA7FDEFF4DE86839 undefined b1207
		static Any N0x5D5E2102B174B8D2()
		{
			return invoke<Any>(0x5D5E2102B174B8D2);
		} // 0x5D5E2102B174B8D2 undefined b1207
		static Any N0x7B8C2B846C05E5AD()
		{
			return invoke<Any>(0x7B8C2B846C05E5AD);
		} // 0x7B8C2B846C05E5AD undefined b1207
		static void N0x62D5F0588915B277()
		{
			invoke<int>(0x62D5F0588915B277);
		} // 0x62D5F0588915B277 undefined b1207
		static Any N0x2F4D53023F826FF0()
		{
			return invoke<Any>(0x2F4D53023F826FF0);
		} // 0x2F4D53023F826FF0 undefined b1207
		static Any N0xDABFE48BA0D457AA()
		{
			return invoke<Any>(0xDABFE48BA0D457AA);
		} // 0xDABFE48BA0D457AA undefined b1207
		static Any N0xE5B76E5B56CD77DD()
		{
			return invoke<Any>(0xE5B76E5B56CD77DD);
		} // 0xE5B76E5B56CD77DD undefined b1207
		static Any N0x27AF48C62B281341()
		{
			return invoke<Any>(0x27AF48C62B281341);
		} // 0x27AF48C62B281341 undefined b1207
		static Any N0x99F92061EFE908BA()
		{
			return invoke<Any>(0x99F92061EFE908BA);
		} // 0x99F92061EFE908BA undefined b1207
		static Any N0x05DD384F39DE1C8C(Any p0, Any p1)
		{
			return invoke<Any>(0x05DD384F39DE1C8C, p0, p1);
		} // 0x05DD384F39DE1C8C undefined b1207
		static Any N0x198B85CC3C7A4593(Any p0, Any p1)
		{
			return invoke<Any>(0x198B85CC3C7A4593, p0, p1);
		} // 0x198B85CC3C7A4593 undefined b1207
		static Any N0x2A6D1DAAB9EBB262(Any p0)
		{
			return invoke<Any>(0x2A6D1DAAB9EBB262, p0);
		} // 0x2A6D1DAAB9EBB262 undefined b1207
		static void N0x07559B29950301FF(Any p0, Any p1)
		{
			invoke<int>(0x07559B29950301FF, p0, p1);
		} // 0x07559B29950301FF undefined b1207
		static Any N0xD6E39DC5D46DF4AB(Any p0)
		{
			return invoke<Any>(0xD6E39DC5D46DF4AB, p0);
		} // 0xD6E39DC5D46DF4AB undefined b1207
		static Any N0x8D56BDA343D9519F(Any p0)
		{
			return invoke<Any>(0x8D56BDA343D9519F, p0);
		} // 0x8D56BDA343D9519F undefined b1207
		static void N0xD840C130D7AACFA5(Any p0, Any p1, Any p2)
		{
			invoke<int>(0xD840C130D7AACFA5, p0, p1, p2);
		} // 0xD840C130D7AACFA5 undefined b1207
		static void N0x2E24C27B112B5B12(Any p0)
		{
			invoke<int>(0x2E24C27B112B5B12, p0);
		} // 0x2E24C27B112B5B12 undefined b1311
		static void SET_GUARMA_WORLDHORIZON_ACTIVE_(BOOL toggle)
		{
			invoke<int>(0x74E2261D2A66849A, toggle);
		} // 0x74E2261D2A66849A undefined b1207
	}

	namespace TASK
	{
		// This tasks the ped to do nothing for the specified amount of milliseconds.
		// This is useful if you want to add a delay between tasks when using a sequence task.
		static void TASK_PAUSE(Ped ped, int ms)
		{
			invoke<int>(0xE73A266DB0CA9042, ped, ms);
		} // 0xE73A266DB0CA9042 0x17A64668 b1207
		// Makes the specified ped stand still for (time) milliseconds.
		static void TASK_STAND_STILL(Ped ped, int time)
		{
			invoke<int>(0x919BE13EED931959, ped, time);
		} // 0x919BE13EED931959 0x6F80965D b1207
		static void TASK_JUMP(Ped ped, BOOL unused)
		{
			invoke<int>(0x0AE4086104E067B1, ped, unused);
		} // 0x0AE4086104E067B1 0x0356E3CE b1207
		static void TASK_JUMP_2_(Ped ped, float x, float y, float z, Entity entity)
		{
			invoke<int>(0x91083103137D7254, ped, x, y, z, entity);
		} // 0x91083103137D7254 undefined b1207
		static void TASK_COWER(Ped ped, int duration, Ped pedToCowerFrom, const char* p3)
		{
			invoke<int>(0x3EB1FE9E8E908E15, ped, duration, pedToCowerFrom, p3);
		} // 0x3EB1FE9E8E908E15 0x9CF1C19B b1207
		// flags: 0 = HANDS_UP_NOTHING; 1 = HANDS_UP_STRAIGHT_TO_LOOP
		static void TASK_HANDS_UP(Ped ped, int duration, Ped facingPed, int timeToFacePed, int flags)
		{
			invoke<int>(0xF2EAB31979A7F910, ped, duration, facingPed, timeToFacePed, flags);
		} // 0xF2EAB31979A7F910 0x8DCC19C5 b1207
		static void TASK_KNOCKED_OUT(Ped ped, float p1, BOOL permanently)
		{
			invoke<int>(0xF90427F00A495A28, ped, p1, permanently);
		} // 0xF90427F00A495A28 undefined b1207
		static void TASK_KNOCKED_OUT_AND_HOGTIED(Ped ped, float p1, int p2)
		{
			invoke<int>(0x42AC6401ABB8C7E5, ped, p1, p2);
		} // 0x42AC6401ABB8C7E5 undefined b1207
		static void N0xFFB520A3E16F7B7B(Ped ped, float p1)
		{
			invoke<int>(0xFFB520A3E16F7B7B, ped, p1);
		} // 0xFFB520A3E16F7B7B undefined b1207
		static void N0x8B1FDF63C3193EDA(Ped ped, float p1)
		{
			invoke<int>(0x8B1FDF63C3193EDA, ped, p1);
		} // 0x8B1FDF63C3193EDA undefined b1207
		static void UPDATE_TASK_HANDS_UP_DURATION(Ped ped, int duration)
		{
			invoke<int>(0xA98FCAFD7893C834, ped, duration);
		} // 0xA98FCAFD7893C834 0x3AA39BE9 b1207
		static void N0x28EF780BDEA8A639(Ped ped, int p1)
		{
			invoke<int>(0x28EF780BDEA8A639, ped, p1);
		} // 0x28EF780BDEA8A639 undefined b1207
		static void TASK_DUCK(Ped ped, int p1)
		{
			invoke<int>(0xA14B5FBF986BAC23, ped, p1);
		} // 0xA14B5FBF986BAC23 undefined b1207
		static void TASK_BOARD_VEHICLE_(Ped ped, Vehicle vehicle, Any p2, Any p3, Any p4, Any p5)
		{
			invoke<int>(0xE53D17AD837CBF7C, ped, vehicle, p2, p3, p4, p5);
		} // 0xE53D17AD837CBF7C undefined b1207
		static void TASK_DISEMBARK_VEHICLE_(Any p0, Vehicle vehicle, int p2, Any p3, float p4, Any p5)
		{
			invoke<int>(0xA7C6854BB5A4192A, p0, vehicle, p2, p3, p4, p5);
		} // 0xA7C6854BB5A4192A undefined b1207
		static void TASK_BOARD_VEHICLE_2_(Ped ped, Any p1, Any p2, float p3, int flags)
		{
			invoke<int>(0xE41A09C8DDFF7AA4, ped, p1, p2, p3, flags);
		} // 0xE41A09C8DDFF7AA4 undefined b1207
		// flags: See TASK_ENTER_VEHICLE
		static void TASK_DISEMBARK_NEAREST_TRAIN_CARRIAGE(Ped ped, float p1, int flags)
		{
			invoke<int>(0x0A11F3BDEC03ED5F, ped, p1, flags);
		} // 0x0A11F3BDEC03ED5F undefined b1207
		// flags: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eEnterExitVehicleFlags
		static void TASK_ENTER_VEHICLE(Ped ped, Vehicle vehicle, int timeout, int seat, float speed, int flag, Any p6)
		{
			invoke<int>(0xC20E50AA46D09CA8, ped, vehicle, timeout, seat, speed, flag, p6);
		} // 0xC20E50AA46D09CA8 0xB8689B4E b1207
		// flags: See TASK_ENTER_VEHICLE
		static void TASK_LEAVE_VEHICLE(Ped ped, Vehicle vehicle, int flags, Ped unkPed)
		{
			invoke<int>(0xD3DBCE61A490BE02, ped, vehicle, flags, unkPed);
		} // 0xD3DBCE61A490BE02 0x7B1141C6 b1207
		// timer: in ms, if it reaches 0 it will auto warp the ped on the horse
		// mountStyle: See TASK_ENTER_VEHICLE
		// Flags will still apply to mountStyle
		static void TASK_MOUNT_ANIMAL(Ped ped, Ped mount, int timer, int seatIndex, float pedSpeed, int mountStyle, Any p6, Any p7)
		{
			invoke<int>(0x92DB0739813C5186, ped, mount, timer, seatIndex, pedSpeed, mountStyle, p6, p7);
		} // 0x92DB0739813C5186 undefined b1207
		// Dismounts the ped from the animal it's mounted on. taskFlag affects what side the rider gets off. p2-p5 are almost always 0.
		// flags: See TASK_ENTER_VEHICLE
		static void TASK_DISMOUNT_ANIMAL(Ped rider, int taskFlag, Any p2, Any p3, Any p4, Ped targetPed)
		{
			invoke<int>(0x48E92D3DDE23C23A, rider, taskFlag, p2, p3, p4, targetPed);
		} // 0x48E92D3DDE23C23A undefined b1207
		static void TASK_HITCH_ANIMAL(Ped ped, int scenarioPoint, int flag)
		{
			invoke<int>(0x9030AD4B6207BFE8, ped, scenarioPoint, flag);
		} // 0x9030AD4B6207BFE8 undefined b1207
		static void N0xE05A5D39BE6E93AF(Any p0)
		{
			invoke<int>(0xE05A5D39BE6E93AF, p0);
		} // 0xE05A5D39BE6E93AF undefined b1207
		// stopRange: how close vehicle will get to destination before stopping, default 4.0
		// straightLineDist: distance at which AI switches to heading for target directly instead of following nodes, default -1
		static void TASK_VEHICLE_DRIVE_TO_COORD(Ped ped, Vehicle vehicle, float x, float y, float z, float speed, Any style, Hash vehicleModel, int drivingMode, float stopRange, float straightLineDist)
		{
			invoke<int>(0xE2A2AA2F659D77A7, ped, vehicle, x, y, z, speed, style, vehicleModel, drivingMode, stopRange, straightLineDist);
		} // 0xE2A2AA2F659D77A7 0xE4AC0387 b1207
		static void TASK_VEHICLE_DRIVE_TO_COORD_2_(Ped ped, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8)
		{
			invoke<int>(0xF0108F01FB105DA2, ped, p1, p2, p3, p4, p5, p6, p7, p8);
		} // 0xF0108F01FB105DA2 undefined b1207
		static void TASK_VEHICLE_DRIVE_WANDER(Ped ped, Vehicle vehicle, float speed, int drivingStyle)
		{
			invoke<int>(0x480142959D337D00, ped, vehicle, speed, drivingStyle);
		} // 0x480142959D337D00 0x36EC0EB0 b1207
		static void TASK_FOLLOW_TO_OFFSET_OF_ENTITY(Ped ped, Entity entity, float offsetX, float offsetY, float offsetZ, float movementSpeed, int timeout, float stoppingRange, BOOL persistFollowing, BOOL p9, BOOL walkOnly, BOOL p11, BOOL p12, BOOL p13)
		{
			invoke<int>(0x304AE42E357B8C7E, ped, entity, offsetX, offsetY, offsetZ, movementSpeed, timeout, stoppingRange, persistFollowing, p9, walkOnly, p11, p12, p13);
		} // 0x304AE42E357B8C7E 0x2DF5A6AC b1207
		static void TASK_FOLLOW_TO_OFFSET_OF_COORD(Ped ped, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9, Any p10, Any p11, Any p12, Any p13, Any p14)
		{
			invoke<int>(0x2E3676282C18A692, ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14);
		} // 0x2E3676282C18A692 undefined b1207
		static void N0x3FFCD7BBA074CC80(Ped ped, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8)
		{
			invoke<int>(0x3FFCD7BBA074CC80, ped, p1, p2, p3, p4, p5, p6, p7, p8);
		} // 0x3FFCD7BBA074CC80 undefined b1207
		static void TASK_GO_STRAIGHT_TO_COORD(Ped ped, float x, float y, float z, float moveBlendSpeedY, int p5, float p6, float p7, int p8)
		{
			invoke<int>(0xD76B57B44F1E6F8B, ped, x, y, z, moveBlendSpeedY, p5, p6, p7, p8);
		} // 0xD76B57B44F1E6F8B 0x80A9E7A7 b1207
		static void TASK_GO_STRAIGHT_TO_COORD_RELATIVE_TO_ENTITY(Ped ped, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7)
		{
			invoke<int>(0x61E360B7E040D12E, ped, p1, p2, p3, p4, p5, p6, p7);
		} // 0x61E360B7E040D12E 0xD26CAC68 b1207
		static void TASK_MOVE_IN_TRAFFIC(Ped ped, Any p1, Any p2, Any p3)
		{
			invoke<int>(0x8AA1593AEC087A29, ped, p1, p2, p3);
		} // 0x8AA1593AEC087A29 undefined b1207
		static void TASK_MOVE_IN_TRAFFIC_TO_DESTINATION(Ped ped, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7)
		{
			invoke<int>(0xDCA3A13F7A45338B, ped, p1, p2, p3, p4, p5, p6, p7);
		} // 0xDCA3A13F7A45338B undefined b1207
		static void TASK_MOVE_IN_TRAFFIC_AWAY_FROM_ENTITY(Ped ped, Any p1, Any p2, Any p3, Any p4)
		{
			invoke<int>(0x13DED0BC45600FE1, ped, p1, p2, p3, p4);
		} // 0x13DED0BC45600FE1 undefined b1207
		static void N0xBAAB791AA72C2821(Any p0, Any p1)
		{
			invoke<int>(0xBAAB791AA72C2821, p0, p1);
		} // 0xBAAB791AA72C2821 undefined b1207
		// Params: moveBlendRatio commonly 1.25f, p5 is always 0 in R* Scripts
		static void TASK_MOVE_FOLLOW_ROAD_USING_NAVMESH(Ped ped, float moveBlendRatio, float x, float y, float z, Any p5)
		{
			invoke<int>(0x79482C12482A860D, ped, moveBlendRatio, x, y, z, p5);
		} // 0x79482C12482A860D undefined b1207
		// Makes the specified ped achieve the specified heading.
		//
		// pedHandle: The handle of the ped to assign the task to.
		// heading: The desired heading.
		// timeout: The time, in milliseconds, to allow the task to complete. If the task times out, it is canceled, and the ped will stay at the heading it managed to reach in the time.
		static void TASK_ACHIEVE_HEADING(Ped ped, float heading, int timeout)
		{
			invoke<int>(0x93B93A37987F1F3D, ped, heading, timeout);
		} // 0x93B93A37987F1F3D 0x0A0E9B42 b1207
		// Clears the current point route. Call this before TASK_EXTEND_ROUTE and TASK_FOLLOW_POINT_ROUTE.
		static void TASK_FLUSH_ROUTE()
		{
			invoke<int>(0x841142A1376E9006);
		} // 0x841142A1376E9006 0x34219154 b1207
		// Adds a new point to the current point route. Call TASK_FLUSH_ROUTE before the first call to this. Call TASK_FOLLOW_POINT_ROUTE to make the Ped go the route.
		//
		// A maximum of 8 points can be added.
		static void TASK_EXTEND_ROUTE(float x, float y, float z)
		{
			invoke<int>(0x1E7889778264843A, x, y, z);
		} // 0x1E7889778264843A 0x43271F69 b1207
		static void TASK_FOLLOW_POINT_ROUTE(Ped ped, Any p1, Any p2, Any p3, Any p4, Any p5)
		{
			invoke<int>(0x0E14C5550DC3CD1D, ped, p1, p2, p3, p4, p5);
		} // 0x0E14C5550DC3CD1D undefined b1207
		// flags:
		// MOVE_WHILST_WAITING_FOR_PATH = (1 << 0),
		// DO_NOT_STAND_STILL_AT_END_OF_PATH = (1 << 1),
		// SKIP_NAVIGATION = (1 << 2),
		// TEASF_AUTO_START_ANIM_SCENE = (1 << 3),
		// FORCE_STAND_STILL_AT_END_OF_PATH = (1 << 6),
		// ENTER_ANIM_SCENE_DONT_FOLLOW_NAVMESH = (1 << 7)
		static void TASK_ENTER_ANIM_SCENE(Ped ped, AnimScene animScene, const char* entityName, const char* playbackListName, float enterSpeed, BOOL bAutoStart, int flag, int p7, float p8)
		{
			invoke<int>(0xC2329B0206426644, ped, animScene, entityName, playbackListName, enterSpeed, bAutoStart, flag, p7, p8);
		} // 0xC2329B0206426644 undefined b1207
		static void TASK_MOVE_BE_IN_FORMATION(Ped ped, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6)
		{
			invoke<int>(0x4AA5AA97C65E4A2F, ped, p1, p2, p3, p4, p5, p6);
		} // 0x4AA5AA97C65E4A2F undefined b1207
		static void TASK_GO_TO_ENTITY(Ped ped, Entity target, int duration, float distance, float speed, float p5, int p6)
		{
			invoke<int>(0x6A071245EB0D1882, ped, target, duration, distance, speed, p5, p6);
		} // 0x6A071245EB0D1882 0x374827C2 b1207
		static void TASK_FOLLOW_AND_CONVERSE_WITH_PED(Ped ped, Ped targetPed, Any p2, Any p3, float p4, float p5, int p6, Any p7, Any p8, float p9, float p10)
		{
			invoke<int>(0x489FFCCCE7392B55, ped, targetPed, p2, p3, p4, p5, p6, p7, p8, p9, p10);
		} // 0x489FFCCCE7392B55 undefined b1207
		static void N0xA052608A12559BBB(Any p0, Any p1)
		{
			invoke<int>(0xA052608A12559BBB, p0, p1);
		} // 0xA052608A12559BBB undefined b1207
		static void TASK_WANDER_AND_CONVERSE_WITH_PED(Ped ped, Any p1, Any p2, Any p3)
		{
			invoke<int>(0x8AC76D1408731732, ped, p1, p2, p3);
		} // 0x8AC76D1408731732 undefined b1207
		static void TASK_LEAD_AND_CONVERSE(Ped ped, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8)
		{
			invoke<int>(0xAA19711D33C6708C, ped, p1, p2, p3, p4, p5, p6, p7, p8);
		} // 0xAA19711D33C6708C undefined b1207
		static void N0xDE0C8B145EA466FF(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5)
		{
			invoke<int>(0xDE0C8B145EA466FF, p0, p1, p2, p3, p4, p5);
		} // 0xDE0C8B145EA466FF undefined b1207
		static void TASK_SEEK_CLEAR_LOS_TO_ENTITY(Ped ped, Entity entity, float p2, float p3, float p4)
		{
			invoke<int>(0x8D7F2A63688C20A4, ped, entity, p2, p3, p4);
		} // 0x8D7F2A63688C20A4 undefined b1207
		// enum eWhistleType
		// {
		// 	WHISTLE_MAIN,
		// 	WHISTLE_SECONDARY,
		// 	WHISTLE_DOUBLE,
		// 	WHISTLE_URGENT,
		// 	WHISTLE_LONG
		// };
		static void TASK_GO_TO_WHISTLE(Ped ped, Ped p1, int whistleType)
		{
			invoke<int>(0xBAD6545608CECA6E, ped, p1, whistleType);
		} // 0xBAD6545608CECA6E undefined b1207
		static Any N0xEB67D4E056C85A81(Any p0)
		{
			return invoke<Any>(0xEB67D4E056C85A81, p0);
		} // 0xEB67D4E056C85A81 undefined b1207
		static Any N0x78D8C1D4EB80C588(Any p0)
		{
			return invoke<Any>(0x78D8C1D4EB80C588, p0);
		} // 0x78D8C1D4EB80C588 undefined b1207
		static void TASK_LEAD_HORSE(Ped ped, Ped horse)
		{
			invoke<int>(0x9A7A4A54596FE09D, ped, horse);
		} // 0x9A7A4A54596FE09D undefined b1207
		static void TASK_STOP_LEADING_HORSE(Ped ped)
		{
			invoke<int>(0xED27560703F37258, ped);
		} // 0xED27560703F37258 undefined b1207
		// fleeType: see TASK_FLEE_COORD
		static void TASK_FLEE_FROM_COORD_(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9, Any p10, Any p11)
		{
			invoke<int>(0x6879FF208ED87F2A, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11);
		} // 0x6879FF208ED87F2A undefined b1207
		// fleeType: see TASK_FLEE_COORD
		static void TASK_FLEE_FROM_PED_(Ped ped, Ped fleeFromTarget, float x, float y, float z, float distance, int p6, int p7, float p8, Ped targetPed)
		{
			invoke<int>(0x7B74D8EEDE9B5727, ped, fleeFromTarget, x, y, z, distance, p6, p7, p8, targetPed);
		} // 0x7B74D8EEDE9B5727 undefined b1207
		// Makes the specified ped flee the specified distance from the specified position.
		// fleeType: see TASK_FLEE_COORD
		static void TASK_SMART_FLEE_COORD(Ped ped, float x, float y, float z, float distance, int time, int fleeType, float fleeSpeed)
		{
			invoke<int>(0x94587F17E9C365D5, ped, x, y, z, distance, time, fleeType, fleeSpeed);
		} // 0x94587F17E9C365D5 0xB2E686FC b1207
		// Makes a ped run away from another ped (fleeFromTarget)
		//
		// fleeDistance = ped will flee this distance
		// fleeTime = ped will flee for this amount of time, set to "-1" to flee forever
		// fleeType = see TASK_FLEE_COORD, can be 0, R* Scripts: fm_mission/race_controller: 66048; fme_escaped_convicts: 2260992, 2523136, 2359296; la_alligator/fox: 2097152; net_fetch: 17301536; net_stable_mount: 540928
		// fleeSpeed = mostly 3f, rarely 1f in R* Scripts
		static void TASK_SMART_FLEE_PED(Ped ped, Ped fleeFromTarget, float fleeDistance, int fleeTime, int fleeType, float fleeSpeed, Ped targetPed)
		{
			invoke<int>(0x22B0D0E37CCB840D, ped, fleeFromTarget, fleeDistance, fleeTime, fleeType, fleeSpeed, targetPed);
		} // 0x22B0D0E37CCB840D 0xE52EB560 b1207
		static void N0x673A8779D229BA5A(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5)
		{
			invoke<int>(0x673A8779D229BA5A, p0, p1, p2, p3, p4, p5);
		} // 0x673A8779D229BA5A undefined b1207
		static void N0x2E1D6D87346BB7D2(Any p0, Any p1, Any p2, Any p3)
		{
			invoke<int>(0x2E1D6D87346BB7D2, p0, p1, p2, p3);
		} // 0x2E1D6D87346BB7D2 undefined b1207
		// Params: p5 = some flag?, p6 = -1.0f, p8 = 0 in R* Scripts
		// fleeStyle: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eFleeStyle
		static void TASK_FLEE_COORD(Ped ped, float x, float y, float z, int fleeStyle, int p5, float p6, int duration, int p8)
		{
			invoke<int>(0x58428248BF4B64E4, ped, x, y, z, fleeStyle, p5, p6, duration, p8);
		} // 0x58428248BF4B64E4 undefined b1207
		// Params: p4 = -1.0f, p5 = -1, p6 = 0 in R* Scripts
		// fleeStyle: see TASK_FLEE_COORD
		static void TASK_FLEE_PED(Ped ped, Ped fleeFromTarget, int fleeStyle, int flag, float p4, int p5, int p6)
		{
			invoke<int>(0xFD45175A6DFD7CE9, ped, fleeFromTarget, fleeStyle, flag, p4, p5, p6);
		} // 0xFD45175A6DFD7CE9 undefined b1207
		static void TASK_FLEE_COORD_VIA(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9, Any p10, Any p11)
		{
			invoke<int>(0x390E0B697D25EAF5, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11);
		} // 0x390E0B697D25EAF5 undefined b1207
		static void TASK_FLEE_PED_VIA(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9)
		{
			invoke<int>(0x5802E0F910E4CF1D, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
		} // 0x5802E0F910E4CF1D undefined b1207
		static void ADD_FLEE_TARGET_COORDS_(Ped ped, float x, float y, float z, float p4)
		{
			invoke<int>(0xE8F1A5B4CED3725A, ped, x, y, z, p4);
		} // 0xE8F1A5B4CED3725A undefined b1207
		// Params: p2 is always -1.f in R* Scripts
		static void ADD_FLEE_TARGET_PED(Ped ped, Ped targetPed, float p2)
		{
			invoke<int>(0x3923EC958249657D, ped, targetPed, p2);
		} // 0x3923EC958249657D undefined b1207
		static void N0xA42DC7919159CCCF(Any p0)
		{
			invoke<int>(0xA42DC7919159CCCF, p0);
		} // 0xA42DC7919159CCCF undefined b1207
		static void TASK_FLY_AWAY(Ped ped, Ped fleeFromTarget)
		{
			invoke<int>(0xE86A537B5A3C297C, ped, fleeFromTarget);
		} // 0xE86A537B5A3C297C undefined b1207
		static void TASK_FLY_TO_COORD(Ped ped, float travelMbr, float x, float y, float z, BOOL p5, BOOL p6)
		{
			invoke<int>(0xD6CFC2D59DA72042, ped, travelMbr, x, y, z, p5, p6);
		} // 0xD6CFC2D59DA72042 undefined b1207
		static void TASK_FLYING_CIRCLE(Ped ped, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6)
		{
			invoke<int>(0x72997893BFB8ECCC, ped, p1, p2, p3, p4, p5, p6);
		} // 0x72997893BFB8ECCC undefined b1207
		static void TASK_WALK_AWAY(Ped ped, Entity entity)
		{
			invoke<int>(0x04ACFAC71E6858F9, ped, entity);
		} // 0x04ACFAC71E6858F9 undefined b1207
		static void TASK_SHOCKING_EVENT_REACT(Ped ped, Any p1, Any p2)
		{
			invoke<int>(0x452419CBD838065B, ped, p1, p2);
		} // 0x452419CBD838065B 0x9BD00ACF b1207
		// Makes a ped react to an entity.
		// Params: reactingTo Entity can be 0, p8 is always 4
		static void TASK_REACT(Ped ped, Entity reactingTo, float x, float y, float z, const char* reactionName, float p6, float p7, int p8)
		{
			invoke<int>(0xC4C32C31920E1B70, ped, reactingTo, x, y, z, reactionName, p6, p7, p8);
		} // 0xC4C32C31920E1B70 undefined b1207
		static void TASK_WANDER_IN_AREA(Ped ped, float x, float y, float z, float radius, float p5, float p6, int p7)
		{
			invoke<int>(0xE054346CA3A0F315, ped, x, y, z, radius, p5, p6, p7);
		} // 0xE054346CA3A0F315 0xC6981FB9 b1207
		static void TASK_WANDER_IN_VOLUME(Ped ped, Volume volume, float p2, float p3, int p4)
		{
			invoke<int>(0x9FDA168777B28424, ped, volume, p2, p3, p4);
		} // 0x9FDA168777B28424 undefined b1207
		// Makes ped walk around the area.
		//
		// set p1 to 10.0f and p2 to 10 if you want the ped to walk anywhere without a duration.
		static void TASK_WANDER_STANDARD(Ped ped, float p1, int p2)
		{
			invoke<int>(0xBB9CE077274F6A1B, ped, p1, p2);
		} // 0xBB9CE077274F6A1B 0xAF59151A b1207
		static void TASK_WANDER_SWIM(Ped ped, Any p1)
		{
			invoke<int>(0x527EA3DB8BC7F03B, ped, p1);
		} // 0x527EA3DB8BC7F03B undefined b1207
		static void TASK_PLANT_BOMB(Ped ped, float x, float y, float z, float heading)
		{
			invoke<int>(0x965FEC691D55E9BF, ped, x, y, z, heading);
		} // 0x965FEC691D55E9BF 0x33457535 b1207
		// https://github.com/femga/rdr3_discoveries/tree/master/tasks/TASK_HORSE_ACTION
		// Params: p2, p3 are set to 0 in R* Scripts
		static void TASK_HORSE_ACTION(Ped ped, int action, Ped targetPed, Any p3)
		{
			invoke<int>(0xA09CFD29100F06C3, ped, action, targetPed, p3);
		} // 0xA09CFD29100F06C3 undefined b1207
		// https://github.com/femga/rdr3_discoveries/tree/master/tasks/TASK_ANIMAL_INTERACTION
		static void TASK_ANIMAL_INTERACTION(Ped ped, Ped targetPed, Hash interactionType, Hash interactionModel, BOOL skipIdleAnimationClip)
		{
			invoke<int>(0xCD181A959CFDD7F4, ped, targetPed, interactionType, interactionModel, skipIdleAnimationClip);
		} // 0xCD181A959CFDD7F4 undefined b1207
		static void TASK_COMBAT_ANIMAL_WARN(Ped ped, Any p1, Any p2)
		{
			invoke<int>(0xF960F3D57B660E96, ped, p1, p2);
		} // 0xF960F3D57B660E96 undefined b1207
		static void TASK_COMBAT_ANIMAL_CHARGE_PED(Ped ped, Ped targetPed, BOOL p2, Any p3, Any p4, Any p5, Any p6)
		{
			invoke<int>(0xEE3AA414CF99F368, ped, targetPed, p2, p3, p4, p5, p6);
		} // 0xEE3AA414CF99F368 undefined b1207
		static Any N0x76610D12A838EBDE(Any p0)
		{
			return invoke<Any>(0x76610D12A838EBDE, p0);
		} // 0x76610D12A838EBDE undefined b1311
		static void TASK_AMBIENT_ANIMAL_STALK(Ped ped, Any p1, Any p2)
		{
			invoke<int>(0x37C13863ABA1B4A3, ped, p1, p2);
		} // 0x37C13863ABA1B4A3 undefined b1207
		static void TASK_AMBIENT_ANIMAL_HUNT(Ped ped, Any p1, Any p2)
		{
			invoke<int>(0x4B39D8F9D0FE7749, ped, p1, p2);
		} // 0x4B39D8F9D0FE7749 undefined b1207
		static void TASK_ANIMAL_UNALERTED(Ped ped, Any p1, Any p2, Any p3, Any p4)
		{
			invoke<int>(0x21FDF9A25CFE1CE5, ped, p1, p2, p3, p4);
		} // 0x21FDF9A25CFE1CE5 undefined b1207
		static void TASK_ANIMAL_ALERTED(Ped ped, Any p1, Any p2)
		{
			invoke<int>(0x979D93372FC8C565, ped, p1, p2);
		} // 0x979D93372FC8C565 undefined b1207
		static void TASK_ANIMAL_FLEE(Ped ped, Ped targetPed, Any p2)
		{
			invoke<int>(0xA899B61C66F09134, ped, targetPed, p2);
		} // 0xA899B61C66F09134 undefined b1207
		static Any N0x244430C13BA5258E(Any p0, Any p1, Any p2, Any p3)
		{
			return invoke<Any>(0x244430C13BA5258E, p0, p1, p2, p3);
		} // 0x244430C13BA5258E undefined b1207
		static void TASK_EAT(Ped ped, Any p1, Any p2)
		{
			invoke<int>(0xBD7949BD07299672, ped, p1, p2);
		} // 0xBD7949BD07299672 undefined b1207
		static void TASK_BARK(Ped ped, Ped barkAtTarget, Hash mood)
		{
			invoke<int>(0x83BFC1F836B2F3F2, ped, barkAtTarget, mood);
		} // 0x83BFC1F836B2F3F2 undefined b1207
		static void TASK_FOLLOW_PAVEMENT_TO_COORD(Ped ped, Any* args)
		{
			invoke<int>(0x1B1475414E70DD8E, ped, args);
		} // 0x1B1475414E70DD8E undefined b1207
		// If no timeout, set timeout to -1.
		static void TASK_FOLLOW_NAV_MESH_TO_COORD(Ped ped, float x, float y, float z, float speedMultiplier, int timeout, float stoppingRange, int flags, float heading)
		{
			invoke<int>(0x15D3A79D4E44B913, ped, x, y, z, speedMultiplier, timeout, stoppingRange, flags, heading);
		} // 0x15D3A79D4E44B913 0xFE4A10D9 b1207
		static void TASK_FOLLOW_NAV_MESH_TO_COORD_ADVANCED(Ped ped, float x, float y, float z, float speedMultiplier, int timeout, float stoppingRange, int flags, float p8, float p9, float p10, Entity entity, float unk)
		{
			invoke<int>(0x17F58B88D085DBAC, ped, x, y, z, speedMultiplier, timeout, stoppingRange, flags, p8, p9, p10, entity, unk);
		} // 0x17F58B88D085DBAC 0x6BF6E296 b1207
		static void SET_PED_PATH_CAN_USE_CLIMBOVERS(Ped ped, BOOL toggle)
		{
			invoke<int>(0x8E06A6FE76C9EFF4, ped, toggle);
		} // 0x8E06A6FE76C9EFF4 0xB7B7D442 b1207
		static void SET_PED_PATH_CAN_USE_LADDERS(Ped ped, BOOL toggle)
		{
			invoke<int>(0x77A5B103C87F476E, ped, toggle);
		} // 0x77A5B103C87F476E 0x53A879EE b1207
		static void SET_PED_PATH_CAN_DROP_FROM_HEIGHT(Ped ped, BOOL toggle)
		{
			invoke<int>(0xE361C5C71C431A4F, ped, toggle);
		} // 0xE361C5C71C431A4F 0x394B7AC9 b1207
		static Any N0xE6A151364C600B24(Any p0)
		{
			return invoke<Any>(0xE6A151364C600B24, p0);
		} // 0xE6A151364C600B24 undefined b1207
		static void N0x1632EB9386CDBE64(Any p0, Any p1)
		{
			invoke<int>(0x1632EB9386CDBE64, p0, p1);
		} // 0x1632EB9386CDBE64 undefined b1207
		static void SET_PED_PATH_CLIMB_COST_MODIFIER(Ped ped, float modifier)
		{
			invoke<int>(0x88E32DB8C1A4AA4B, ped, modifier);
		} // 0x88E32DB8C1A4AA4B 0x55E06443 b1207
		static void SET_PED_PATH_DEEP_SNOW_COST_MODIFIER(Ped ped, float modifier)
		{
			invoke<int>(0xE8C296B75EACC357, ped, modifier);
		} // 0xE8C296B75EACC357 undefined b1207
		static void SET_PED_PATH_FOLIAGE_COST_MODIFIER(Ped ped, float modifier)
		{
			invoke<int>(0x3AD8EFF9703BE657, ped, modifier);
		} // 0x3AD8EFF9703BE657 undefined b1207
		static void N0x8798CF6815B8FE0F(Any p0, Any p1)
		{
			invoke<int>(0x8798CF6815B8FE0F, p0, p1);
		} // 0x8798CF6815B8FE0F undefined b1207
		static void N0x5B68D0007D9C92EB(Any p0, Any p1)
		{
			invoke<int>(0x5B68D0007D9C92EB, p0, p1);
		} // 0x5B68D0007D9C92EB undefined b1207
		static void N0x82ED59F095056550(Any p0, Any p1)
		{
			invoke<int>(0x82ED59F095056550, p0, p1);
		} // 0x82ED59F095056550 undefined b1207
		static void N0xE01C8DC8EDD28D31(Any p0, Any p1)
		{
			invoke<int>(0xE01C8DC8EDD28D31, p0, p1);
		} // 0xE01C8DC8EDD28D31 undefined b1207
		static void N0x098CAA6DBE7D8D82(Any p0, Any p1)
		{
			invoke<int>(0x098CAA6DBE7D8D82, p0, p1);
		} // 0x098CAA6DBE7D8D82 undefined b1207
		static BOOL GET_PED_IS_IGNORING_DEAD_BODIES_(Ped ped)
		{
			return invoke<BOOL>(0x1948BBE561A2375A, ped);
		} // 0x1948BBE561A2375A undefined b1207
		static void SET_PED_IGNORE_DEAD_BODIES_(Ped ped, BOOL toggle)
		{
			invoke<int>(0x013A7BA5015C1372, ped, toggle);
		} // 0x013A7BA5015C1372 undefined b1207
		// _SET_PED_PATH_P*
		static void SET_PED_PATH_LADDER_COST_MODIFIER_(Ped ped, float modifier)
		{
			invoke<int>(0x70F7A1EAB1AE3AA8, ped, modifier);
		} // 0x70F7A1EAB1AE3AA8 undefined b1232
		static void SET_PED_PATH_MAY_ENTER_WATER(Ped ped, BOOL mayEnterWater)
		{
			invoke<int>(0xF35425A4204367EC, ped, mayEnterWater);
		} // 0xF35425A4204367EC 0x9C606EE3 b1207
		static void SET_PED_PATH_MAY_ENTER_DEEP_WATER_(Ped ped, BOOL mayEnterDeepWater)
		{
			invoke<int>(0x9DE63896B176EA94, ped, mayEnterDeepWater);
		} // 0x9DE63896B176EA94 undefined b1207
		static void N0xC6170856E54557B2(Any p0, Any p1, Any p2)
		{
			invoke<int>(0xC6170856E54557B2, p0, p1, p2);
		} // 0xC6170856E54557B2 undefined b1207
		static void N0xF948F4356F010F11(Any p0, Any p1, Any p2)
		{
			invoke<int>(0xF948F4356F010F11, p0, p1, p2);
		} // 0xF948F4356F010F11 undefined b1207
		static void SET_PED_PATH_PREFER_TO_AVOID_WATER(Ped ped, BOOL avoidWater, float p2)
		{
			invoke<int>(0x38FE1EC73743793C, ped, avoidWater, p2);
		} // 0x38FE1EC73743793C 0x0EA39A29 b1207
		static void N0x8BB283A7888AD1AD(Any p0, Any p1, Any p2)
		{
			invoke<int>(0x8BB283A7888AD1AD, p0, p1, p2);
		} // 0x8BB283A7888AD1AD undefined b1207
		static void N0x12990818C1D35886(Any p0, Any p1, Any p2)
		{
			invoke<int>(0x12990818C1D35886, p0, p1, p2);
		} // 0x12990818C1D35886 undefined b1207
		static void N0x7C015D8BCEC72CF4(Any p0, Any p1)
		{
			invoke<int>(0x7C015D8BCEC72CF4, p0, p1);
		} // 0x7C015D8BCEC72CF4 undefined b1207
		static void SET_PED_PATH_AVOID_FIRE(Ped ped, BOOL avoidFire)
		{
			invoke<int>(0x4455517B28441E60, ped, avoidFire);
		} // 0x4455517B28441E60 0xDCC5B934 b1207
		static void N0x42CFD8FD8CC8DC69(Any p0, Any p1)
		{
			invoke<int>(0x42CFD8FD8CC8DC69, p0, p1);
		} // 0x42CFD8FD8CC8DC69 undefined b1207
		static void N0x216343750545A486(Any p0, Any p1, Any p2)
		{
			invoke<int>(0x216343750545A486, p0, p1, p2);
		} // 0x216343750545A486 undefined b1207
		static void N0x06ECF3925BC2ABAE(Any p0, Any p1)
		{
			invoke<int>(0x06ECF3925BC2ABAE, p0, p1);
		} // 0x06ECF3925BC2ABAE undefined b1311
		static void N0xFA30E2254461ADEB(Any p0, Any p1)
		{
			invoke<int>(0xFA30E2254461ADEB, p0, p1);
		} // 0xFA30E2254461ADEB undefined b1207
		static void TASK_GO_TO_COORD_ANY_MEANS(Ped ped, float x, float y, float z, float speed, Entity entity, BOOL p6, int walkingStyle, float p8)
		{
			invoke<int>(0x5BC448CB78FA3E88, ped, x, y, z, speed, entity, p6, walkingStyle, p8);
		} // 0x5BC448CB78FA3E88 0xF91DF93B b1207
		static void TASK_GO_TO_COORD_ANY_MEANS_EXTRA_PARAMS(Ped ped, float x, float y, float z, float speed, Any p5, BOOL p6, int walkingStyle, float p8, Any p9, Any p10, Any p11, Any p12)
		{
			invoke<int>(0x1DD45F9ECFDB1BC9, ped, x, y, z, speed, p5, p6, walkingStyle, p8, p9, p10, p11, p12);
		} // 0x1DD45F9ECFDB1BC9 0x094B75EF b1207
		static void TASK_GO_TO_COORD_ANY_MEANS_EXTRA_PARAMS_WITH_CRUISE_SPEED(Ped ped, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9, Any p10, Any p11, Any p12, Any p13, Any p14)
		{
			invoke<int>(0xB8ECD61F531A7B02, ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14);
		} // 0xB8ECD61F531A7B02 0x86DC03F9 b1207
		// https://github.com/femga/rdr3_discoveries/tree/master/animations
		// flags: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eScriptedAnimFlags
		// ikFlags: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eIkControlFlags
		static void TASK_PLAY_ANIM(Ped ped, const char* animDict, const char* animName, float speed, float speedMultiplier, int duration, int flags, float playbackRate, BOOL p8, int ikFlags, BOOL p10, const char* taskFilter, BOOL p12)
		{
			invoke<int>(0xEA47FE3719165B94, ped, animDict, animName, speed, speedMultiplier, duration, flags, playbackRate, p8, ikFlags, p10, taskFilter, p12);
		} // 0xEA47FE3719165B94 0x5AB552C6 b1207
		// flags: see TASK_PLAY_ANIM
		// ikFlags: see TASK_PLAY_ANIM
		static void TASK_PLAY_ANIM_ADVANCED(Ped ped, const char* animDict, const char* animName, float posX, float posY, float posZ, float rotX, float rotY, float rotZ, float speed, float speedMultiplier, int duration, int flags, float p13, int p14, int p15, int p16)
		{
			invoke<int>(0x83CDB10EA29B370B, ped, animDict, animName, posX, posY, posZ, rotX, rotY, rotZ, speed, speedMultiplier, duration, flags, p13, p14, p15, p16);
		} // 0x83CDB10EA29B370B 0x3DDEB0E6 b1207
		static void TASK_PLAY_UPPER_ANIM_FACING_ENTITY(Ped ped, const char* animDict, const char* animName, Entity entity, int p4, float p5, float p6, int p7, float p8, BOOL p9, BOOL p10, float p11, const char* p12, int p13, float p14)
		{
			invoke<int>(0xAD67214236AB1CFE, ped, animDict, animName, entity, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14);
		} // 0xAD67214236AB1CFE undefined b1207
		static void STOP_ANIM_TASK(Ped ped, const char* animDictionary, const char* animationName, float p3)
		{
			invoke<int>(0x97FF36A1D40EA00A, ped, animDictionary, animationName, p3);
		} // 0x97FF36A1D40EA00A 0x2B520A57 b1207
		static void TASK_SCRIPTED_ANIMATION(Ped ped, Any* args)
		{
			invoke<int>(0x126EF75F1E17ABE5, ped, args);
		} // 0x126EF75F1E17ABE5 0xFC2DCF47 b1207
		static void PLAY_ENTITY_SCRIPTED_ANIM(Entity entity, Any* args)
		{
			invoke<int>(0x77A1EEC547E7FCF1, entity, args);
		} // 0x77A1EEC547E7FCF1 0x02F72AE5 b1207
		static void STOP_ANIM_PLAYBACK(Ped ped, int p1, BOOL p2)
		{
			invoke<int>(0xEE08C992D238C5D1, ped, p1, p2);
		} // 0xEE08C992D238C5D1 0xE5F16398 b1207
		static void SET_ANIM_FILTER(Any p0, Any p1, Any p2, Any p3)
		{
			invoke<int>(0x87B66D77D545DB66, p0, p1, p2, p3);
		} // 0x87B66D77D545DB66 undefined b1207
		static void SET_ANIM_RATE(Any p0, float p1, Any p2, BOOL p3)
		{
			invoke<int>(0x032D49C5E359C847, p0, p1, p2, p3);
		} // 0x032D49C5E359C847 0x6DB46584 b1207
		static BOOL CAN_START_ITEM_INTERACTION(Ped ped, Hash itemHash, Hash interactionAnimHash, int p3)
		{
			return invoke<BOOL>(0x2D19BC4DF626CBE7, ped, itemHash, interactionAnimHash, p3);
		} // 0x2D19BC4DF626CBE7 undefined b1207
		// Params: p3 = 0, 1; p5 = 0.0f, -1.0f
		// https://github.com/femga/rdr3_discoveries/tree/master/tasks/TASK_ITEM_INTERACTION
		static void START_TASK_ITEM_INTERACTION(Ped ped, Hash itemHash, Hash interactionAnimHash, int p3, int flag, float p5)
		{
			invoke<int>(0xAE72E7DF013AAA61, ped, itemHash, interactionAnimHash, p3, flag, p5);
		} // 0xAE72E7DF013AAA61 undefined b1207
		static void TASK_ITEM_INTERACTION_2_(Ped ped, Hash propNameGxt, Object prop, Hash propId, Hash itemInteractionState, int p5, Any p6, float p7)
		{
			invoke<int>(0x72F52AA2D2B172CC, ped, propNameGxt, prop, propId, itemInteractionState, p5, p6, p7);
		} // 0x72F52AA2D2B172CC undefined b1207
		// Params: p3, p4, p5, p6: 0, 0, 0, -1.0f in R* Scripts
		static void TASK_ITEM_INTERACTION_3_(Ped ped, Hash item, Any* guid, Any p3, Any p4, Any p5, float p6)
		{
			invoke<int>(0xD61D5E1AD9876DEB, ped, item, guid, p3, p4, p5, p6);
		} // 0xD61D5E1AD9876DEB undefined b1207
		static void N0xB35370D5353995CB(Ped ped, Hash item, float p2)
		{
			invoke<int>(0xB35370D5353995CB, ped, item, p2);
		} // 0xB35370D5353995CB undefined b1207
		static Hash GET_ITEM_INTERACTION_STATE(Ped ped)
		{
			return invoke<Hash>(0x6AA3DCA2C6F5EB6D, ped);
		} // 0x6AA3DCA2C6F5EB6D undefined b1207
		static Hash GET_ITEM_INTERACTION_ITEM_ID(Ped ped)
		{
			return invoke<Hash>(0x804425C4BBD00883, ped);
		} // 0x804425C4BBD00883 undefined b1207
		static BOOL IS_PED_RUNNING_INSPECTION_TASK(Ped ped)
		{
			return invoke<BOOL>(0x038B1F1674F0E242, ped);
		} // 0x038B1F1674F0E242 undefined b1207
		static BOOL IS_PED_RUNNING_TASK_ITEM_INTERACTION(Ped ped)
		{
			return invoke<BOOL>(0xEC7E480FF8BD0BED, ped);
		} // 0xEC7E480FF8BD0BED undefined b1207
		// item hashes: PRIMARYITEM, P_MUGCOFFEE01X_PH_R_HAND, P_BOTTLEBEER01X_PH_R_HAND
		// http://prntscr.com/1qtp3bz
		// https://github.com/femga/rdr3_discoveries/tree/master/tasks/TASK_ITEM_INTERACTION
		static Entity GET_ITEM_INTERACTION_ENTITY_FROM_PED_(Ped ped, Hash item)
		{
			return invoke<Entity>(0x05A0100EA714DB68, ped, item);
		} // 0x05A0100EA714DB68 undefined b1207
		static float GET_ITEM_INTERACTION_PROMPT_PROGRESS(Ped ped, Hash inputContext)
		{
			return invoke<float>(0xBC864A70AD55E0C1, ped, inputContext);
		} // 0xBC864A70AD55E0C1 undefined b1207
		// Only used in R* SP Script beat_washed_ashore
		// Returns Object prop for TASK::_TASK_ITEM_INTERACTION_2
		static Object N0x678D3226CF70B9C8(Ped ped, BOOL p1)
		{
			return invoke<Object>(0x678D3226CF70B9C8, ped, p1);
		} // 0x678D3226CF70B9C8 undefined b1207
		// Params: p2 is returned by BUILTIN::SHIFT_LEFT
		static void TASK_EVASIVE_ANIM(Ped ped1, Ped ped2, int p2)
		{
			invoke<int>(0x5F22926E1BCE9B08, ped1, ped2, p2);
		} // 0x5F22926E1BCE9B08 undefined b1207
		static void TASK_LOOK_AT_COORD(Ped ped, float x, float y, float z, int duration, int flags, int p6, BOOL p7)
		{
			invoke<int>(0x6FA46612594F7973, ped, x, y, z, duration, flags, p6, p7);
		} // 0x6FA46612594F7973 0x7B784DD8 b1207
		// param3: duration in ms, use -1 to look forever
		// param4: using 2048 is fine
		// param5: using 3 is fine
		static void TASK_LOOK_AT_ENTITY(Ped ped, Entity lookAtTarget, int duration, int p3, int p4, int p5)
		{
			invoke<int>(0x69F4BE8C8CC4796C, ped, lookAtTarget, duration, p3, p4, p5);
		} // 0x69F4BE8C8CC4796C 0x991D6619 b1207
		static void TASK_CLEAR_LOOK_AT(Ped ped)
		{
			invoke<int>(0x0F804F1DB19B9689, ped);
		} // 0x0F804F1DB19B9689 0x60EB4054 b1207
		// Only used in R* SP Scripts
		// Params: p4 = 1.0f - 30.0f
		static BOOL N0x508F5053E3F6F0C4(Ped ped, float x, float y, float z, float p4)
		{
			return invoke<BOOL>(0x508F5053E3F6F0C4, ped, x, y, z, p4);
		} // 0x508F5053E3F6F0C4 undefined b1207
		static void N0x23767D80C7EED7C6(Any p0, Any p1)
		{
			invoke<int>(0x23767D80C7EED7C6, p0, p1);
		} // 0x23767D80C7EED7C6 undefined b1311
		static void OPEN_SEQUENCE_TASK(int* taskSequenceId)
		{
			invoke<int>(0xE8854A4326B9E12B, taskSequenceId);
		} // 0xE8854A4326B9E12B 0xABA6923E b1207
		static void CLOSE_SEQUENCE_TASK(int taskSequenceId)
		{
			invoke<int>(0x39E72BC99E6360CB, taskSequenceId);
		} // 0x39E72BC99E6360CB 0x1A7CEBD0 b1207
		static void TASK_PERFORM_SEQUENCE(Ped ped, int taskSequenceId)
		{
			invoke<int>(0x5ABA3986D90D8A3B, ped, taskSequenceId);
		} // 0x5ABA3986D90D8A3B 0x4D9FBD11 b1207
		static void TASK_PERFORM_SEQUENCE_2_(Any p0, Any p1, Any p2, Any p3)
		{
			invoke<int>(0x4FC0AF869D6E309D, p0, p1, p2, p3);
		} // 0x4FC0AF869D6E309D undefined b1207
		static void CLEAR_SEQUENCE_TASK(int* taskSequenceId)
		{
			invoke<int>(0x3841422E9C488D8C, taskSequenceId);
		} // 0x3841422E9C488D8C 0x47ED03CE b1207
		// repeatMode: 0 = REPEAT_NOT; 1 = REPEAT_FOREVER
		static void SET_SEQUENCE_TO_REPEAT(int taskSequenceId, int repeatMode)
		{
			invoke<int>(0x58C70CF3A41E4AE7, taskSequenceId, repeatMode);
		} // 0x58C70CF3A41E4AE7 0xCDDF1508 b1207
		// returned values:
		// 0 to 7 = task that's currently in progress, 0 meaning the first one.
		// -1 no task sequence in progress.
		static int GET_SEQUENCE_PROGRESS(Ped ped)
		{
			return invoke<int>(0x00A9010CFE1E3533, ped);
		} // 0x00A9010CFE1E3533 0xA3419909 b1207
		static BOOL GET_IS_TASK_ACTIVE(Ped ped, int taskIndex)
		{
			return invoke<BOOL>(0xB0760331C7AA4155, ped, taskIndex);
		} // 0xB0760331C7AA4155 0x86FDDF55 b1207
		// Gets the status of a script-assigned task, and returns an int between 0-8
		// taskHash: https://alloc8or.re/rdr3/doc/enums/eScriptTaskHash.txt
		//
		// WAITING_TO_START_TASK = 0,
		// PERFORMING_TASK
		// DORMANT_TASK
		// VACANT_STAGE
		// GROUP_TASK_STAGE
		// ATTRACTOR_SCRIPT_TASK_STAGE
		// SECONDARY_TASK_STAGE
		// TASK_NOT_FOUND
		// FINISHED_TASK
		static int GET_SCRIPT_TASK_STATUS(Ped ped, Hash taskHash, BOOL p2)
		{
			return invoke<int>(0x77F1BEB8863288D5, ped, taskHash, p2);
		} // 0x77F1BEB8863288D5 0xB2477B23 b1207
		static Any N0x9FF5F9B24E870748(Any p0)
		{
			return invoke<Any>(0x9FF5F9B24E870748, p0);
		} // 0x9FF5F9B24E870748 undefined b1207
		static float GET_SCRIPT_TASK_ACTION_TIME_(Ped ped, Hash task)
		{
			return invoke<float>(0xA710DC5D25F8B942, ped, task);
		} // 0xA710DC5D25F8B942 undefined b1207
		// lookIntensity: see SET_PED_SHOULD_PLAY_FLEE_SCENARIO_EXIT
		//
		// exitAnimation: LOOK_RETURN_GENERIC = 1,
		// LOOK_RETURN_DISMISSIVE = 2,
		// LOOK_RETURN_RELIEVED = 3
		static void REACT_LOOK_AT(Ped ped, Ped targetPed, int lookIntensity, int exitAnimation, float duration, int p5, Ped targetPed2, Any p7, Any p8)
		{
			invoke<int>(0xE7FA07624574B79A, ped, targetPed, lookIntensity, exitAnimation, duration, p5, targetPed2, p7, p8);
		} // 0xE7FA07624574B79A undefined b1207
		static void REACT_LOOK_AT_END(Ped ped, int exitAnimation, BOOL p2)
		{
			invoke<int>(0x541E5B41DCA45828, ped, exitAnimation, p2);
		} // 0x541E5B41DCA45828 undefined b1207
		static BOOL IS_PED_SCENARIO_REACT_LOOKING(Ped ped, BOOL p1)
		{
			return invoke<BOOL>(0x916B8E075ABC8B4E, ped, p1);
		} // 0x916B8E075ABC8B4E undefined b1207
		static int GET_ACTIVE_VEHICLE_MISSION_TYPE(Vehicle vehicle)
		{
			return invoke<int>(0x534AEBA6E5ED4CAB, vehicle);
		} // 0x534AEBA6E5ED4CAB 0xAFA914EF b1207
		// flags: See TASK_ENTER_VEHICLE
		static void TASK_LEAVE_ANY_VEHICLE(Ped ped, int p1, int taskFlag)
		{
			invoke<int>(0x504D54DF3F6F2247, ped, p1, taskFlag);
		} // 0x504D54DF3F6F2247 0xDBDD79FA b1207
		static Any N0xBD70108D01875299(Any p0)
		{
			return invoke<Any>(0xBD70108D01875299, p0);
		} // 0xBD70108D01875299 undefined b1207
		static void TASK_USE_RANDOM_SCENARIO_IN_GROUP(Ped ped, Any p1, Any p2, Any p3, Any p4)
		{
			invoke<int>(0x14747F4A5971DE4E, ped, p1, p2, p3, p4);
		} // 0x14747F4A5971DE4E undefined b1207
		// duration: the amount of time in milliseconds to do the task.  -1 will keep the task going until either another task is applied, or CLEAR_ALL_TASKS() is called with the ped
		static void TASK_AIM_GUN_AT_ENTITY(Ped ped, Entity targetEntity, int duration, BOOL p3, int p4)
		{
			invoke<int>(0x9B53BB6E8943AF53, ped, targetEntity, duration, p3, p4);
		} // 0x9B53BB6E8943AF53 0xBE32B3B6 b1207
		// duration: the amount of time in milliseconds to do the task. -1 will keep the task going until either another task is applied, or CLEAR_ALL_TASKS() is called with the ped
		static void TASK_TURN_PED_TO_FACE_ENTITY(Ped ped, Entity targetEntity, int duration, float p3, float p4, float p5)
		{
			invoke<int>(0x5AD23D40115353AC, ped, targetEntity, duration, p3, p4, p5);
		} // 0x5AD23D40115353AC 0x3C37C767 b1207
		static void TASK_AIM_GUN_AT_COORD(Ped ped, float x, float y, float z, int time, BOOL p5, BOOL p6)
		{
			invoke<int>(0x6671F3EEC681BDA1, ped, x, y, z, time, p5, p6);
		} // 0x6671F3EEC681BDA1 0xFBF44AD3 b1207
		static void TASK_AIM_AT_COORD(Ped ped, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6)
		{
			invoke<int>(0x4AF1D73861212F52, ped, p1, p2, p3, p4, p5, p6);
		} // 0x4AF1D73861212F52 undefined b1207
		static void TASK_AIM_AT_ENTITY(Ped ped, Any p1, Any p2, Any p3, Any p4)
		{
			invoke<int>(0xCF7569BD0FB480A0, ped, p1, p2, p3, p4);
		} // 0xCF7569BD0FB480A0 undefined b1207
		static void TASK_SHOOT_AT_COORD(Ped ped, float x, float y, float z, int duration, Hash firingPattern, Any p6)
		{
			invoke<int>(0x46A6CC01E0826106, ped, x, y, z, duration, firingPattern, p6);
		} // 0x46A6CC01E0826106 0x601C22E3 b1207
		// Makes the specified ped shuffle to the next vehicle seat.
		// The ped MUST be in a vehicle and the vehicle parameter MUST be the ped's current vehicle.
		static void TASK_SHUFFLE_TO_NEXT_VEHICLE_SEAT(Ped ped, Vehicle vehicle)
		{
			invoke<int>(0x7AA80209BDA643EB, ped, vehicle);
		} // 0x7AA80209BDA643EB 0xBEAF8F67 b1207
		static void CLEAR_PED_TASKS(Ped ped, BOOL p1, BOOL p2)
		{
			invoke<int>(0xE1EF3C1216AFF2CD, ped, p1, p2);
		} // 0xE1EF3C1216AFF2CD 0xDE3316AB b1207
		static void N0x1A7D63CB1B0BB223(Any p0)
		{
			invoke<int>(0x1A7D63CB1B0BB223, p0);
		} // 0x1A7D63CB1B0BB223 undefined b1207
		static void N0xB2D15D3551FE4FAE(Any p0)
		{
			invoke<int>(0xB2D15D3551FE4FAE, p0);
		} // 0xB2D15D3551FE4FAE undefined b1311
		static void N0xDF94844D474F31E5(Ped ped)
		{
			invoke<int>(0xDF94844D474F31E5, ped);
		} // 0xDF94844D474F31E5 undefined b1207
		static void N0xEBA2081E0A5F4D17(Any p0)
		{
			invoke<int>(0xEBA2081E0A5F4D17, p0);
		} // 0xEBA2081E0A5F4D17 undefined b1207
		static void N0x141BC64C8D7C5529(Vehicle vehicle)
		{
			invoke<int>(0x141BC64C8D7C5529, vehicle);
		} // 0x141BC64C8D7C5529 undefined b1207
		static void CLEAR_PED_SECONDARY_TASK(Ped ped)
		{
			invoke<int>(0x176CECF6F920D707, ped);
		} // 0x176CECF6F920D707 0xA635F451 b1207
		static void TASK_EVERYONE_LEAVE_VEHICLE_IN_ORDER(Vehicle vehicle, BOOL p1)
		{
			invoke<int>(0x6F1C49F275BD25B3, vehicle, p1);
		} // 0x6F1C49F275BD25B3 undefined b1207
		static void TASK_INVESTIGATE(Ped ped, Any p1, Any p2, Any p3, Any p4, Any p5)
		{
			invoke<int>(0x5C8514540D27FBFB, ped, p1, p2, p3, p4, p5);
		} // 0x5C8514540D27FBFB undefined b1207
		static void TASK_GOTO_ENTITY_OFFSET(Ped ped, Entity entity, Any p2, float x, float y, float z, int duration)
		{
			invoke<int>(0xE39B4FF4FDEBDE27, ped, entity, p2, x, y, z, duration);
		} // 0xE39B4FF4FDEBDE27 0x1A17A85E b1207
		static void TASK_GOTO_ENTITY_OFFSET_XY(Ped ped, Entity entity, int duration, float targetRadius, float xOffset, float yOffset, float moveBlendRatio, int offsetFlags)
		{
			invoke<int>(0x338E7EF52B6095A9, ped, entity, duration, targetRadius, xOffset, yOffset, moveBlendRatio, offsetFlags);
		} // 0x338E7EF52B6095A9 0xBC1E3D0A b1207
		static void TASK_GOTO_ENTITY_OFFSET_XYZ(Ped ped, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8)
		{
			invoke<int>(0xFA6DA9D151769392, ped, p1, p2, p3, p4, p5, p6, p7, p8);
		} // 0xFA6DA9D151769392 undefined b1311
		static void TASK_GOTO_ENTITY_OFFSET_XY_AIMING(Ped ped, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8)
		{
			invoke<int>(0x901BD69984400F62, ped, p1, p2, p3, p4, p5, p6, p7, p8);
		} // 0x901BD69984400F62 undefined b1207
		static void TASK_GOTO_ENTITY_OFFSET_XYZ_AIMING(Ped ped, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9)
		{
			invoke<int>(0x41B0832CA96B5351, ped, p1, p2, p3, p4, p5, p6, p7, p8, p9);
		} // 0x41B0832CA96B5351 undefined b1207
		static void TASK_FOLLOW_ENTITY_WHILE_AIMING_AT_ENTITY(Ped ped, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7)
		{
			invoke<int>(0x2D532EAA142CF83F, ped, p1, p2, p3, p4, p5, p6, p7);
		} // 0x2D532EAA142CF83F undefined b1207
		// duration in milliseconds
		static void TASK_TURN_PED_TO_FACE_COORD(Ped ped, float x, float y, float z, int duration)
		{
			invoke<int>(0x1DDA930A0AC38571, ped, x, y, z, duration);
		} // 0x1DDA930A0AC38571 0x30463D73 b1207
		// Documentation from GTA V, might be the same in RDR:
		//
		// '1 - brake
		// '3 - brake + reverse
		// '4 - turn left 90 + braking
		// '5 - turn right 90 + braking
		// '6 - brake strong (handbrake?) until time ends
		// '7 - turn left + accelerate
		// '7 - turn right + accelerate
		// '9 - weak acceleration
		// '10 - turn left + restore wheel pos to center in the end
		// '11 - turn right + restore wheel pos to center in the end
		// '13 - turn left + go reverse
		// '14 - turn left + go reverse
		// '16 - crash the game after like 2 seconds :)
		// '17 - keep actual state, game crashed after few tries
		// '18 - game crash
		// '19 - strong brake + turn left/right
		// '20 - weak brake + turn left then turn right
		// '21 - weak brake + turn right then turn left
		// '22 - brake + reverse
		// '23 - accelerate fast
		// '24 - brake
		// '25 - brake turning left then when almost stopping it turns left more
		// '26 - brake turning right then when almost stopping it turns right more
		// '27 - brake until car stop or until time ends
		// '28 - brake + strong reverse acceleration
		// '30 - performs a burnout (brake until stop + brake and accelerate)
		// '31 - accelerate + handbrake
		// '32 - accelerate very strong
		//
		// Seems to be this:
		// Works on NPCs, but overrides their current task. If inside a task sequence (and not being the last task), "time" will work, otherwise the task will be performed forever until tasked with something else
		static void TASK_VEHICLE_TEMP_ACTION(Ped driver, Vehicle vehicle, int action, int time)
		{
			invoke<int>(0xC429DCEEB339E129, driver, vehicle, action, time);
		} // 0xC429DCEEB339E129 0x0679DFB8 b1207
		static void TASK_VEHICLE_MISSION(Ped driver, Vehicle vehicle, Vehicle vehicleTarget, int missionType, float p4, Any p5, float p6, float p7, BOOL DriveAgainstTraffic)
		{
			invoke<int>(0x659427E0EF36BCDE, driver, vehicle, vehicleTarget, missionType, p4, p5, p6, p7, DriveAgainstTraffic);
		} // 0x659427E0EF36BCDE 0x20609E56 b1207
		// flags: 67108864, 2097152, 524564, 524675 (eDrivingFlags)
		// p7 = 6 or 3
		// p8 = x coordinate
		// p9 - 8.f
		// p10 = false
		static void TASK_VEHICLE_DRIVE_TO_DESTINATION(Ped driver, Vehicle vehicle, float x, float y, float z, float speed, int drivingFlags, int p7, float stoppingRange1, float stoppingRange2, BOOL p10)
		{
			invoke<int>(0x7F241A0D14354583, driver, vehicle, x, y, z, speed, drivingFlags, p7, stoppingRange1, stoppingRange2, p10);
		} // 0x7F241A0D14354583 undefined b1207
		// Tasks vehicle towards owner
		static void TASK_VEHICLE_DRIVE_TO_DESTINATION_2_(Vehicle vehicle, float x, float y, float z, float speed, int p5, int p6, float p7, float p8)
		{
			invoke<int>(0x391073B9D3CCE2BA, vehicle, x, y, z, speed, p5, p6, p7, p8);
		} // 0x391073B9D3CCE2BA undefined b1207
		// Vehicle Auto Drive (?)
		// p1/p2/p3: usually 1f, 1f, 0f or 0f, 0f, 0f
		// Speed: usually 8f
		// Types: 1148979456 (task with flee), 1148979587 (dismissing the vehicle)
		static void TASK_VEHICLE_FLEE_ON_CLEANUP_(Vehicle vehicle, float p1, float p2, float p3, float speed, Hash type)
		{
			invoke<int>(0x55CD5FDDD4335C1E, vehicle, p1, p2, p3, speed, type);
		} // 0x55CD5FDDD4335C1E undefined b1207
		// Old name: _TASK_VEHICLE_DRIVE_TO_POINT
		// flag: 524419 and 0 in shop_horse_shop R* Script
		static void TASK_VEHICLE_DRIVE_STRAIGHT_TO_POINT(Ped driver, Vehicle vehicle, float x, float y, float z, float p5, float p6, int flag)
		{
			invoke<int>(0x089FF2FB965F0A29, driver, vehicle, x, y, z, p5, p6, flag);
		} // 0x089FF2FB965F0A29 undefined b1207
		// Params: p4 = 3.f or 8.f, p5 = 0.25f, p6 = 0 in R* Scripts
		static void TASK_VEHICLE_DRIVE_TO_POINT_2_(Vehicle vehicle, float x, float y, float z, float p4, float p5, Any p6)
		{
			invoke<int>(0x6524A8981E8BE7C9, vehicle, x, y, z, p4, p5, p6);
		} // 0x6524A8981E8BE7C9 undefined b1207
		static void N0x1D125814EBC517EB(Any p0, Any p1, Any p2, Any p3)
		{
			invoke<int>(0x1D125814EBC517EB, p0, p1, p2, p3);
		} // 0x1D125814EBC517EB undefined b1207
		static BOOL N0x583AE9AF9CEE0958(Vehicle vehicle, float x, float y, float z)
		{
			return invoke<BOOL>(0x583AE9AF9CEE0958, vehicle, x, y, z);
		} // 0x583AE9AF9CEE0958 undefined b1207
		// See TASK_VEHICLE_MISSION
		static void TASK_VEHICLE_MISSION_PED_TARGET(Ped ped, Vehicle vehicle, Ped pedTarget, int mode, float maxSpeed, int drivingStyle, float minDistance, float p7, BOOL DriveAgainstTraffic)
		{
			invoke<int>(0x9454528DF15D657A, ped, vehicle, pedTarget, mode, maxSpeed, drivingStyle, minDistance, p7, DriveAgainstTraffic);
		} // 0x9454528DF15D657A 0xC81C4677 b1207
		static void N0xA263ADBBC8056214(Any p0, Any p1)
		{
			invoke<int>(0xA263ADBBC8056214, p0, p1);
		} // 0xA263ADBBC8056214 undefined b1207
		static void TASK_VEHICLE_ESCORT(Ped ped, Vehicle vehicle, Vehicle targetVehicle, int mode, float speed, int drivingStyle, float minDistance, int p7, float noRoadsDistance)
		{
			invoke<int>(0x0FA6E4B75F302400, ped, vehicle, targetVehicle, mode, speed, drivingStyle, minDistance, p7, noRoadsDistance);
		} // 0x0FA6E4B75F302400 0x9FDCB250 b1207
		static void TASK_BOAT_MISSION(Ped pedDriver, Vehicle boat, Any p2, Any p3, float x, float y, float z, Any p7, float maxSpeed, int drivingStyle, float p10, Any p11)
		{
			invoke<int>(0x15C86013127CE63F, pedDriver, boat, p2, p3, x, y, z, p7, maxSpeed, drivingStyle, p10, p11);
		} // 0x15C86013127CE63F 0x5865B031 b1207
		static void TASK_WEAPON(Ped ped)
		{
			invoke<int>(0x7157B82D60E4BC46, ped);
		} // 0x7157B82D60E4BC46 undefined b1207
		static void TASK_DRIVE_BY(Ped driverPed, Ped targetPed, Vehicle targetVehicle, float targetX, float targetY, float targetZ, float distanceToShoot, int pedAccuracy, BOOL p8, Hash firingPattern)
		{
			invoke<int>(0x2F8AF0E82773A171, driverPed, targetPed, targetVehicle, targetX, targetY, targetZ, distanceToShoot, pedAccuracy, p8, firingPattern);
		} // 0x2F8AF0E82773A171 0x2B84D1C4 b1207
		static void SET_DRIVEBY_TASK_TARGET(Ped shootingPed, Ped targetPed, Vehicle targetVehicle, float x, float y, float z)
		{
			invoke<int>(0xE5B302114D8162EE, shootingPed, targetPed, targetVehicle, x, y, z);
		} // 0xE5B302114D8162EE 0xDA6A6FC1 b1207
		static void CLEAR_DRIVEBY_TASK_UNDERNEATH_DRIVING_TASK(Ped ped)
		{
			invoke<int>(0xC35B5CDB2824CF69, ped);
		} // 0xC35B5CDB2824CF69 0x9B76F7E6 b1207
		static BOOL IS_DRIVEBY_TASK_UNDERNEATH_DRIVING_TASK(Ped ped)
		{
			return invoke<BOOL>(0x8785E6E40C7A8818, ped);
		} // 0x8785E6E40C7A8818 0xB23F46E6 b1207
		static BOOL GET_IS_PED_AIMING_IN_THE_AIR(Ped ped)
		{
			return invoke<BOOL>(0x8785E6E40C7A8819, ped);
		} // 0x8785E6E40C7A8819 undefined b1207
		static void SET_PED_CLEAR_AIMING_IN_THE_AIR_(Ped ped, Any p1)
		{
			invoke<int>(0x34C0010188D7C54A, ped, p1);
		} // 0x34C0010188D7C54A undefined b1207
		static BOOL IS_MOUNTED_WEAPON_TASK_UNDERNEATH_DRIVING_TASK(Ped ped)
		{
			return invoke<BOOL>(0xA320EF046186FA3B, ped);
		} // 0xA320EF046186FA3B 0x291E938C b1207
		static void TASK_WARP_PED_INTO_VEHICLE(Ped ped, Vehicle vehicle, int seat)
		{
			invoke<int>(0x9A7D091411C5F684, ped, vehicle, seat);
		} // 0x9A7D091411C5F684 0x65D4A35D b1207
		static void TASK_SHOOT_AT_ENTITY(Entity entity, Entity targetEntity, int duration, Hash firingPattern, BOOL affectCockedState)
		{
			invoke<int>(0x08DA95E8298AE772, entity, targetEntity, duration, firingPattern, affectCockedState);
		} // 0x08DA95E8298AE772 0xAC0631C9 b1207
		static void TASK_SHOOT_WITH_WEAPON(Ped ped, Any* args)
		{
			invoke<int>(0x08AA95E8298AE772, ped, args);
		} // 0x08AA95E8298AE772 undefined b1207
		static void N0x2416EC2F31F75266(Entity entity, Entity targetEntity, int duration, Any p3, Any p4)
		{
			invoke<int>(0x2416EC2F31F75266, entity, targetEntity, duration, p3, p4);
		} // 0x2416EC2F31F75266 undefined b1207
		static void N0x41323F4E0C4AE94B(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6)
		{
			invoke<int>(0x41323F4E0C4AE94B, p0, p1, p2, p3, p4, p5, p6);
		} // 0x41323F4E0C4AE94B undefined b1207
		static Any N0x5EA655F01D93667A(Any p0)
		{
			return invoke<Any>(0x5EA655F01D93667A, p0);
		} // 0x5EA655F01D93667A undefined b1207
		// Climbs or vaults the nearest thing.
		static void TASK_CLIMB(Ped ped, BOOL unused)
		{
			invoke<int>(0x89D9FCC2435112F1, ped, unused);
		} // 0x89D9FCC2435112F1 0x90847790 b1207
		static void TASK_CLIMB_2_(Ped ped, float heading)
		{
			invoke<int>(0xDF1D85BCAF60D537, ped, heading);
		} // 0xDF1D85BCAF60D537 undefined b1207
		static void TASK_CLIMB_LADDER(Ped ped, float p1, BOOL p2, BOOL p3)
		{
			invoke<int>(0xB6C987F9285A3814, ped, p1, p2, p3);
		} // 0xB6C987F9285A3814 0x35BB4EE0 b1207
		// Immediately stops the pedestrian from whatever it's doing. They stop fighting, animations, etc. they forget what they were doing.
		//
		// resetCrouch TRUE = ped will stand up if crouching, FALSE = ped will remain crouching if crouched
		static void CLEAR_PED_TASKS_IMMEDIATELY(Ped ped, BOOL p1, BOOL resetCrouch)
		{
			invoke<int>(0xAAA34F8A7CB32098, ped, p1, resetCrouch);
		} // 0xAAA34F8A7CB32098 0xBC045625 b1207
		static void TASK_PERFORM_SEQUENCE_FROM_PROGRESS(Ped ped, Any p1, Any p2, Any p3)
		{
			invoke<int>(0x89221B16730234F0, ped, p1, p2, p3);
		} // 0x89221B16730234F0 0xFA60601B b1207
		static void SET_PED_DESIRED_MOVE_BLEND_RATIO(Ped ped, float p1)
		{
			invoke<int>(0x1E982AC8716912C5, ped, p1);
		} // 0x1E982AC8716912C5 0xC65FC712 b1207
		static float GET_PED_DESIRED_MOVE_BLEND_RATIO(Ped ped)
		{
			return invoke<float>(0x8517D4A6CA8513ED, ped);
		} // 0x8517D4A6CA8513ED 0x5FEFAB72 b1207
		// ped = Ped you want to perform this task.
		// target = the Entity they should aim at.
		// distanceToStopAt = distance from the target, where the ped should stop to aim.
		// StartAimingDist = distance where the ped should start to aim.
		static void TASK_GOTO_ENTITY_AIMING(Ped ped, Entity target, float distanceToStopAt, float StartAimingDist)
		{
			invoke<int>(0xA9DA48FAB8A76C12, ped, target, distanceToStopAt, StartAimingDist);
		} // 0xA9DA48FAB8A76C12 0xF1C493CF b1207
		static void TASK_SET_SPHERE_DEFENSIVE_AREA(Ped ped, float p1, float p2, float p3, float p4)
		{
			invoke<int>(0x933C06518B52A9A4, ped, p1, p2, p3, p4);
		} // 0x933C06518B52A9A4 0x9F3C5D6A b1207
		static void TASK_CLEAR_DEFENSIVE_AREA(Ped ped)
		{
			invoke<int>(0x95A6C46A31D1917D, ped);
		} // 0x95A6C46A31D1917D 0x7A05BF0D b1207
		static void TASK_PED_SLIDE_TO_COORD(Ped ped, float x, float y, float z, float heading, float p5)
		{
			invoke<int>(0xD04FE6765D990A06, ped, x, y, z, heading, p5);
		} // 0xD04FE6765D990A06 0x225380EF b1207
		static Any N0x9420FB11B8D77948(Any p0)
		{
			return invoke<Any>(0x9420FB11B8D77948, p0);
		} // 0x9420FB11B8D77948 undefined b1207
		static Any N0x6BA606AB3A83BC4D(Any p0)
		{
			return invoke<Any>(0x6BA606AB3A83BC4D, p0);
		} // 0x6BA606AB3A83BC4D undefined b1207
		static ScrHandle ADD_COVER_POINT(float p0, float p1, float p2, float p3, Any p4, Any p5, Any p6, BOOL p7)
		{
			return invoke<ScrHandle>(0xD5C12A75C7B9497F, p0, p1, p2, p3, p4, p5, p6, p7);
		} // 0xD5C12A75C7B9497F 0xA0AF0B98 b1207
		static Any N0x59872EA4CBD11C56(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8)
		{
			return invoke<Any>(0x59872EA4CBD11C56, p0, p1, p2, p3, p4, p5, p6, p7, p8);
		} // 0x59872EA4CBD11C56 undefined b1207
		static void REMOVE_COVER_POINT(ScrHandle coverpoint)
		{
			invoke<int>(0xAE287C923D891715, coverpoint);
		} // 0xAE287C923D891715 0x0776888B b1207
		// Checks if there is a cover point at position
		static BOOL DOES_SCRIPTED_COVER_POINT_EXIST_AT_COORDS(Any p0, Any p1, Any p2, Any p3)
		{
			return invoke<BOOL>(0xA98B8E3C088E5A31, p0, p1, p2, p3);
		} // 0xA98B8E3C088E5A31 0x29F97A71 b1207
		static Vector3 GET_SCRIPTED_COVER_POINT_COORDS(ScrHandle coverpoint)
		{
			return invoke<Vector3>(0x594A1028FC2A3E85, coverpoint);
		} // 0x594A1028FC2A3E85 0xC6B6CCC1 b1207
		static Vector3 N0xE116F6F2DA2D777E(Any p0)
		{
			return invoke<Vector3>(0xE116F6F2DA2D777E, p0);
		} // 0xE116F6F2DA2D777E undefined b1207
		static void N0x50AA09A0DA64E73C(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6)
		{
			invoke<int>(0x50AA09A0DA64E73C, p0, p1, p2, p3, p4, p5, p6);
		} // 0x50AA09A0DA64E73C undefined b1207
		static void N0xE5831AA1E2FD147C(Any p0)
		{
			invoke<int>(0xE5831AA1E2FD147C, p0);
		} // 0xE5831AA1E2FD147C undefined b1207
		static void TASK_COMBAT_PED(Ped ped, Ped targetPed, int p2, int p3)
		{
			invoke<int>(0xF166E48407BAC484, ped, targetPed, p2, p3);
		} // 0xF166E48407BAC484 0xCB0D8932 b1207
		static void TASK_COMBAT_PED_TIMED(Ped ped, Ped targetPed, int p2, Any p3)
		{
			invoke<int>(0x944F30DCB7096BDE, ped, targetPed, p2, p3);
		} // 0x944F30DCB7096BDE 0xF5CA2A45 b1207
		static void TASK_COMBAT_PED_3_(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5)
		{
			invoke<int>(0xC624414FA748B9BA, p0, p1, p2, p3, p4, p5);
		} // 0xC624414FA748B9BA undefined b1207
		static void TASK_SEEK_COVER_FROM_POS(Ped ped, float x, float y, float z, int duration, Any p5, Any p6, Any p7)
		{
			invoke<int>(0x75AC2B60386D89F2, ped, x, y, z, duration, p5, p6, p7);
		} // 0x75AC2B60386D89F2 0x83F18EE9 b1207
		static void TASK_SEEK_COVER_FROM_PED(Ped ped, Ped fromPed, int duration, Any p3, Any p4, Any p5)
		{
			invoke<int>(0x84D32B3BEC531324, ped, fromPed, duration, p3, p4, p5);
		} // 0x84D32B3BEC531324 0xC1EC907E b1207
		static void TASK_SEEK_COVER_TO_COVER_POINT(Ped ped, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8)
		{
			invoke<int>(0xD43D95C7A869447F, ped, p1, p2, p3, p4, p5, p6, p7, p8);
		} // 0xD43D95C7A869447F 0x3D026B29 b1207
		static void TASK_SEEK_COVER_TO_COORDS(Ped ped, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9, Any p10)
		{
			invoke<int>(0x39246A6958EF072C, ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
		} // 0x39246A6958EF072C 0xFFFE754E b1207
		static void TASK_PUT_PED_DIRECTLY_INTO_COVER(Ped ped, float x, float y, float z, int timeout, BOOL p5, float p6, Any p7, Any p8, ScrHandle coverpoint, BOOL p10, BOOL p11, Any p12)
		{
			invoke<int>(0x4172393E6BE1FECE, ped, x, y, z, timeout, p5, p6, p7, p8, coverpoint, p10, p11, p12);
		} // 0x4172393E6BE1FECE 0xC9F00E68 b1207
		static void TASK_PUT_PED_DIRECTLY_INTO_COVER_FROM_COORDS_(Ped ped, float x, float y, float z, float fromX, float fromY, float fromZ, int timeout, Any p8, Any p9, Any p10, Any p11, Any p12, Any p13, Any p14, Any p15, Any p16, Any p17)
		{
			invoke<int>(0xDF8A5855B9F9A97B, ped, x, y, z, fromX, fromY, fromZ, timeout, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17);
		} // 0xDF8A5855B9F9A97B undefined b1207
		// meleeStyles: AR_GRAPPLE_BACK_FROM_BACK, AR_GRAPPLE_MOUNT_FACEDOWN_FROM_FRONT, AR_ALLIGATOR_LEAPKILL, AR_ALLIGATOR_WAIST_AUTOKILL_FRONT
		static void TASK_PUT_PED_DIRECTLY_INTO_MELEE(Ped ped, Ped meleeTarget, Hash meleeStyle, float p3, float animBlendRatio, BOOL p5, int p6)
		{
			invoke<int>(0x1C6CD14A876FFE39, ped, meleeTarget, meleeStyle, p3, animBlendRatio, p5, p6);
		} // 0x1C6CD14A876FFE39 0x79E1D27D b1207
		// grappleStyle: AR_GRAPPLE_STRUGGLE, AR_ALLIGATOR_LEG_GRAB_CHALLENGE_FAIL, AR_GRAPPLE_BACK_FROM_BACK, AR_GRAPPLE_BACK_DEFEND, AR_GRAPPLE_FRONT_FROM_FRONT
		static void TASK_PUT_PED_DIRECTLY_INTO_GRAPPLE(Ped ped, Ped grappleTarget, Hash grappleStyle, float p3, float p4, BOOL p5, int p6)
		{
			invoke<int>(0xA05F3F20889D7A5B, ped, grappleTarget, grappleStyle, p3, p4, p5, p6);
		} // 0xA05F3F20889D7A5B undefined b1207
		static void TASK_COMPANION_AMBIENT(Ped ped, Any p1)
		{
			invoke<int>(0xE017CF6E2527FE4F, ped, p1);
		} // 0xE017CF6E2527FE4F undefined b1207
		static void N0x098036CAB8373D36(Any p0)
		{
			invoke<int>(0x098036CAB8373D36, p0);
		} // 0x098036CAB8373D36 undefined b1207
		static void N0x10C44F633E2D6D9E(Any p0)
		{
			invoke<int>(0x10C44F633E2D6D9E, p0);
		} // 0x10C44F633E2D6D9E undefined b1207
		static void N0x7FB78B2199C10E92(Any p0)
		{
			invoke<int>(0x7FB78B2199C10E92, p0);
		} // 0x7FB78B2199C10E92 undefined b1207
		static void TASK_GUARD(Ped ped, Any p1, Any p2)
		{
			invoke<int>(0xB9FB242EACCAF30F, ped, p1, p2);
		} // 0xB9FB242EACCAF30F undefined b1207
		static void TASK_GUARD_CURRENT_POSITION(Ped ped, float p1, float p2, BOOL p3)
		{
			invoke<int>(0x4A58A47A72E3FCB4, ped, p1, p2, p3);
		} // 0x4A58A47A72E3FCB4 0x2FB099E9 b1207
		static void TASK_GUARD_ASSIGNED_DEFENSIVE_AREA_2_(Ped ped, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7)
		{
			invoke<int>(0x1FC9B33976BACD6C, ped, p1, p2, p3, p4, p5, p6, p7);
		} // 0x1FC9B33976BACD6C undefined b1207
		static void TASK_GUARD_ASSIGNED_DEFENSIVE_AREA(Ped ped, float p1, float p2, float p3, float p4, float p5, Any p6)
		{
			invoke<int>(0xD2A207EEBDF9889B, ped, p1, p2, p3, p4, p5, p6);
		} // 0xD2A207EEBDF9889B 0x7AF0133D b1207
		static void TASK_STAND_GUARD(Ped ped, float x, float y, float z, float heading, const char* scenarioName)
		{
			invoke<int>(0xAE032F8BBA959E90, ped, x, y, z, heading, scenarioName);
		} // 0xAE032F8BBA959E90 0xD130F636 b1207
		static void SET_DRIVE_TASK_CRUISE_SPEED(Ped driver, float cruiseSpeed)
		{
			invoke<int>(0x5C9B84BD7D31D908, driver, cruiseSpeed);
		} // 0x5C9B84BD7D31D908 0x3CEC07B1 b1207
		// Not implemented.
		static void SET_DRIVE_TASK_MAX_CRUISE_SPEED(Ped ped, float maxCruiseSpeed)
		{
			invoke<int>(0x404A5AA9B9F0B746, ped, maxCruiseSpeed);
		} // 0x404A5AA9B9F0B746 0x7FDF6131 b1207
		static void ADD_COVER_BLOCKING_AREA(float playerX, float playerY, float playerZ, float radiusX, float radiusY, float radiusZ, BOOL p6, BOOL p7, BOOL p8, BOOL p9)
		{
			invoke<int>(0x45C597097DD7CB81, playerX, playerY, playerZ, radiusX, radiusY, radiusZ, p6, p7, p8, p9);
		} // 0x45C597097DD7CB81 0x3536946F b1207
		static void ADD_COVER_BLOCKING_VOLUME_(Volume volume, BOOL p1, BOOL p2, BOOL p3, BOOL p4)
		{
			invoke<int>(0xEB2ED1DC3AEC0654, volume, p1, p2, p3, p4);
		} // 0xEB2ED1DC3AEC0654 undefined b1207
		static void REMOVE_ALL_COVER_BLOCKING_AREAS()
		{
			invoke<int>(0xDB6708C0B46F56D8);
		} // 0xDB6708C0B46F56D8 0xCF9221A7 b1207
		static void N0x2A10538D0A005E81(Any p0, Any p1)
		{
			invoke<int>(0x2A10538D0A005E81, p0, p1);
		} // 0x2A10538D0A005E81 undefined b1207
		static void N0x4F57397388E1DFF8()
		{
			invoke<int>(0x4F57397388E1DFF8);
		} // 0x4F57397388E1DFF8 undefined b1207
		static void TASK_ROB_PED(Ped ped, Any p1, Any p2, Any p3, Any p4)
		{
			invoke<int>(0x7BB967F85D8CCBDB, ped, p1, p2, p3, p4);
		} // 0x7BB967F85D8CCBDB undefined b1207
		static BOOL N0xBEDBE39B5FD98FD6(Ped ped)
		{
			return invoke<BOOL>(0xBEDBE39B5FD98FD6, ped);
		} // 0xBEDBE39B5FD98FD6 undefined b1207
		// Returns scenario
		static int CREATE_SCENARIO_POINT_HASH(Hash scenarioHash, float x, float y, float z, float heading, Any p5, Any p6, BOOL p7)
		{
			return invoke<int>(0x94B745CE41DB58A1, scenarioHash, x, y, z, heading, p5, p6, p7);
		} // 0x94B745CE41DB58A1 undefined b1207
		// Returns scenario
		static int CREATE_SCENARIO_POINT_HASH_ATTACHED_TO_ENTITY(Entity entity, Hash scenarioHash, float x, float y, float z, float heading, Any p6, Any p7, BOOL p8)
		{
			return invoke<int>(0x794AB1379A74064D, entity, scenarioHash, x, y, z, heading, p6, p7, p8);
		} // 0x794AB1379A74064D undefined b1207
		static BOOL DOES_SCENARIO_POINT_HAVE_PROPS_(int scenario)
		{
			return invoke<BOOL>(0xEA31F199A73801D3, scenario);
		} // 0xEA31F199A73801D3 undefined b1207
		// Old name: _GET_SCENARIO_POINT_ENTITY
		static Entity GET_PROP_FOR_SCENARIO_POINT(int scenarioPoint, const char* name)
		{
			return invoke<Entity>(0x295514F198EFD0CA, scenarioPoint, name);
		} // 0x295514F198EFD0CA undefined b1207
		static BOOL ASSOCIATE_PROP_WITH_SCENARIO_(int scenario, Entity entity, const char* propName, BOOL p3)
		{
			return invoke<BOOL>(0x8360C47380B6F351, scenario, entity, propName, p3);
		} // 0x8360C47380B6F351 undefined b1207
		// flag: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/CScenarioPointFlags__Flags
		static void SET_SCENARIO_POINT_FLAG_(int scenario, int flag, BOOL value)
		{
			invoke<int>(0x5AF19B6CC2115D34, scenario, flag, value);
		} // 0x5AF19B6CC2115D34 undefined b1207
		static BOOL IS_SCENARIO_POINT_FLAG_SET_(int scenario, int flag)
		{
			return invoke<BOOL>(0x8569C38D2FB80650, scenario, flag);
		} // 0x8569C38D2FB80650 undefined b1207
		// _SET_SCENARIO_POINT_*
		static void N0xADC45010BC17AF0E(Any p0, Any p1)
		{
			invoke<int>(0xADC45010BC17AF0E, p0, p1);
		} // 0xADC45010BC17AF0E undefined b1207
		static Any N0x974DA3408DEC4E79(Any p0)
		{
			return invoke<Any>(0x974DA3408DEC4E79, p0);
		} // 0x974DA3408DEC4E79 undefined b1207
		static BOOL DISASSOCIATE_PROP_FROM_SCENARIO_(int scenario, const char* propName)
		{
			return invoke<BOOL>(0x6EF4E31B4D5D2DA0, scenario, propName);
		} // 0x6EF4E31B4D5D2DA0 undefined b1207
		static BOOL DOES_SCENARIO_POINT_EXIST(int scenario)
		{
			return invoke<BOOL>(0x841475AC96E794D1, scenario);
		} // 0x841475AC96E794D1 undefined b1207
		static Any N0x22CD2C33ED4467A1(Any p0)
		{
			return invoke<Any>(0x22CD2C33ED4467A1, p0);
		} // 0x22CD2C33ED4467A1 undefined b1207
		// Note: The current name for this native is the old name of 0x295514F198EFD0CA
		// Old name for this native: _GET_ENTITY_SCENARIO_POINT_IS_ATTACHED_TO
		static Entity GET_SCENARIO_POINT_ENTITY_(int scenario)
		{
			return invoke<Entity>(0x7467165EE97D3C68, scenario);
		} // 0x7467165EE97D3C68 undefined b1207
		static Ped GET_PED_USING_SCENARIO_POINT_(int scenario)
		{
			return invoke<Ped>(0x5BA659955369B0E2, scenario);
		} // 0x5BA659955369B0E2 undefined b1207
		// Params: p1 is always true in R* Scripts
		static Vector3 GET_SCENARIO_POINT_COORDS_(int scenario, BOOL p1)
		{
			return invoke<Vector3>(0xA8452DD321607029, scenario, p1);
		} // 0xA8452DD321607029 undefined b1207
		static Vector3 N0x91CB5E431F579BA1(Any p0)
		{
			return invoke<Vector3>(0x91CB5E431F579BA1, p0);
		} // 0x91CB5E431F579BA1 undefined b1207
		static Any N0x370F57C47F68EBCA(Any p0)
		{
			return invoke<Any>(0x370F57C47F68EBCA, p0);
		} // 0x370F57C47F68EBCA undefined b1207
		// Params: p1 is always true in R* Scripts
		static float GET_SCENARIO_POINT_HEADING_(int scenario, BOOL p1)
		{
			return invoke<float>(0xB93EA7184BAA85C3, scenario, p1);
		} // 0xB93EA7184BAA85C3 undefined b1207
		static float GET_SCENARIO_POINT_RADIUS_(int scenario)
		{
			return invoke<float>(0x6718F40313A2B5A6, scenario);
		} // 0x6718F40313A2B5A6 undefined b1207
		static void SET_SCENARIO_POINT_COORDS_(int scenario, float xPos, float yPos, float zPos, BOOL p4)
		{
			invoke<int>(0x2056AB38DF06825C, scenario, xPos, yPos, zPos, p4);
		} // 0x2056AB38DF06825C undefined b1207
		static void SET_SCENARIO_POINT_HEADING_(int scenario, float heading, BOOL p2)
		{
			invoke<int>(0xD3A0DA8F91612C6E, scenario, heading, p2);
		} // 0xD3A0DA8F91612C6E undefined b1207
		static void SET_SCENARIO_POINT_RADIUS_(int scenario, float radius)
		{
			invoke<int>(0xC47D9080A9A8856A, scenario, radius);
		} // 0xC47D9080A9A8856A undefined b1207
		// _SET_SCENARIO_*
		static void N0xA7479FB665361EDB(Any p0, Any p1)
		{
			invoke<int>(0xA7479FB665361EDB, p0, p1);
		} // 0xA7479FB665361EDB undefined b1207
		static void N0xE69FDA40AAC3EFC0(Any p0, Any p1)
		{
			invoke<int>(0xE69FDA40AAC3EFC0, p0, p1);
		} // 0xE69FDA40AAC3EFC0 undefined b1207
		// Note: scenariosInRadius is an array, and its size and values should be aligned to 8 bytes.
		static int GET_SCENARIO_POINTS_IN_AREA(float posX, float posY, float posZ, float radius, Any* scenariosInRadius, int size)
		{
			return invoke<int>(0x345EC3B7EBDE1CB5, posX, posY, posZ, radius, scenariosInRadius, size);
		} // 0x345EC3B7EBDE1CB5 undefined b1207
		static Any N0xEFD875C2791EBEFD(Any p0, Any p1, Any p2, Any p3)
		{
			return invoke<Any>(0xEFD875C2791EBEFD, p0, p1, p2, p3);
		} // 0xEFD875C2791EBEFD undefined b1207
		static Any N0x152664AA3188B193(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5)
		{
			return invoke<Any>(0x152664AA3188B193, p0, p1, p2, p3, p4, p5);
		} // 0x152664AA3188B193 undefined b1207
		static Any N0xE7BBC4E56B989449(Any p0, Any p1, Any p2)
		{
			return invoke<Any>(0xE7BBC4E56B989449, p0, p1, p2);
		} // 0xE7BBC4E56B989449 undefined b1207
		static int GET_SCENARIO_POINT_PED_IS_USING_(Ped ped, BOOL p1)
		{
			return invoke<int>(0xDF7993356F52359A, ped, p1);
		} // 0xDF7993356F52359A undefined b1207
		static Any GET_RANSACK_SCENARIO_POINT_PED_IS_USING(Ped ped)
		{
			return invoke<Any>(0xD04241BBF6D03A5E, ped);
		} // 0xD04241BBF6D03A5E undefined b1207
		// Opens/closes containers: ChestDugUp
		static void SET_SCENARIO_CONTAINER_OPENING_STATE_(Entity entity, BOOL open)
		{
			invoke<int>(0x188F8071F244B9B8, entity, open);
		} // 0x188F8071F244B9B8 undefined b1207
		static Any N0xA9E7672F8C6C6F74(Any p0)
		{
			return invoke<Any>(0xA9E7672F8C6C6F74, p0);
		} // 0xA9E7672F8C6C6F74 undefined b1207
		static Any N0x0A98A362C5A19A43(Any p0)
		{
			return invoke<Any>(0x0A98A362C5A19A43, p0);
		} // 0x0A98A362C5A19A43 undefined b1207
		static Any N0x849791EBBDBA0362(Any p0)
		{
			return invoke<Any>(0x849791EBBDBA0362, p0);
		} // 0x849791EBBDBA0362 undefined b1207
		static Any N0x640A602946A8C972(Any p0)
		{
			return invoke<Any>(0x640A602946A8C972, p0);
		} // 0x640A602946A8C972 undefined b1207
		static Any N0x01AF8A3729231A43(Any p0)
		{
			return invoke<Any>(0x01AF8A3729231A43, p0);
		} // 0x01AF8A3729231A43 undefined b1207
		// Returns m_eContainerState
		static BOOL GET_SCENARIO_CONTAINER_OPENING_STATE_(Entity entity)
		{
			return invoke<BOOL>(0xB219612B5568E9EC, entity);
		} // 0xB219612B5568E9EC undefined b1207
		static void RESET_SCENARIO_FOR_ENTITY_(int scenario, Entity entity)
		{
			invoke<int>(0x2E20878FD208A68E, scenario, entity);
		} // 0x2E20878FD208A68E undefined b1207
		static void N0x4161648394262FDF(Any p0, Any p1, Any p2, Any p3)
		{
			invoke<int>(0x4161648394262FDF, p0, p1, p2, p3);
		} // 0x4161648394262FDF undefined b1207
		static void N0x9C8F42A5D1859DC1(Any p0)
		{
			invoke<int>(0x9C8F42A5D1859DC1, p0);
		} // 0x9C8F42A5D1859DC1 undefined b1207
		static void DELETE_SCENARIO_POINT_(int scenario)
		{
			invoke<int>(0x81948DFE4F5A0283, scenario);
		} // 0x81948DFE4F5A0283 undefined b1207
		static void TASK_USE_SCENARIO_POINT(Ped ped, int scenario, const char* conditionalAnim, int p3, BOOL p4, BOOL p5, Hash p6, BOOL p7, float p8, BOOL p9)
		{
			invoke<int>(0xCCDAE6324B6A821C, ped, scenario, conditionalAnim, p3, p4, p5, p6, p7, p8, p9);
		} // 0xCCDAE6324B6A821C undefined b1207
		static void TASK_USE_SCENARIO_POINT_2_(Ped ped, Ped ped2, Any p2, const char* p3, int p4, Hash p5, float p6, BOOL p7)
		{
			invoke<int>(0x0F6641449DD86FBE, ped, ped2, p2, p3, p4, p5, p6, p7);
		} // 0x0F6641449DD86FBE undefined b1207
		// https://github.com/femga/rdr3_discoveries/blob/master/animations/scenarios
		// Params: duration in milliseconds
		//
		// conditionalHash (optionally):
		// 0 = play random conditional anim.
		// Every conditional anim has requirements to play it.
		// If requirements are not met, ped plays random allowed conditional anim or can be stuck.
		// For example, this scenario type has possible conditional anim WORLD_HUMAN_LEAN_BACK_WALL_SMOKING_MALE_D, but it can not be played by player, because condition is set to NOT be CAIConditionIsPlayer (check file amb_rest.meta and amb_rest_CA.meta with OPENIV to clarify requirements).
		static void TASK_START_SCENARIO_IN_PLACE_HASH(Ped ped, Hash scenarioHash, int duration, BOOL playEnterAnim, Hash conditionalHash, float heading, BOOL p6)
		{
			invoke<int>(0x524B54361229154F, ped, scenarioHash, duration, playEnterAnim, conditionalHash, heading, p6);
		} // 0x524B54361229154F undefined b1207
		// Takes scenario point handle instead of hash
		static void TASK_START_SCENARIO_IN_PLACE_2_(Ped ped, Any p1, const char* p2, int p3, BOOL p4, float p5, BOOL p6)
		{
			invoke<int>(0xA917E39F2CEFD215, ped, p1, p2, p3, p4, p5, p6);
		} // 0xA917E39F2CEFD215 undefined b1207
		static void TASK_START_SCENARIO_AT_POSITION(Ped ped, Hash scenarioHash, float x, float y, float z, float heading, int duration, BOOL sittingScenario, BOOL teleport, const char* p9, float p10, BOOL p11)
		{
			invoke<int>(0x4D1F61FC34AF3CD1, ped, scenarioHash, x, y, z, heading, duration, sittingScenario, teleport, p9, p10, p11);
		} // 0x4D1F61FC34AF3CD1 undefined b1207
		static Any N0xF97F462779B31786(Any p0)
		{
			return invoke<Any>(0xF97F462779B31786, p0);
		} // 0xF97F462779B31786 undefined b1207
		static Any N0x6C269F673C47031E(Any p0)
		{
			return invoke<Any>(0x6C269F673C47031E, p0);
		} // 0x6C269F673C47031E undefined b1207
		static void N0x9667CCE29BFA0780(Any p0)
		{
			invoke<int>(0x9667CCE29BFA0780, p0);
		} // 0x9667CCE29BFA0780 undefined b1207
		static Any N0x00FFE0F85253C572(Any p0)
		{
			return invoke<Any>(0x00FFE0F85253C572, p0);
		} // 0x00FFE0F85253C572 undefined b1207
		static void TASK_USE_NEAREST_SCENARIO_TO_COORD_(Ped ped, float x, float y, float z, float distance, int duration, BOOL p6, BOOL p7, BOOL p8, BOOL p9)
		{
			invoke<int>(0x322BFDEA666E2B0E, ped, x, y, z, distance, duration, p6, p7, p8, p9);
		} // 0x322BFDEA666E2B0E undefined b1207
		static void TASK_USE_NEAREST_SCENARIO_TO_COORD_WARP(Ped ped, float x, float y, float z, float distance, int duration, BOOL p6, BOOL p7, BOOL p8, BOOL p9)
		{
			invoke<int>(0x58E2E0F23F6B76C3, ped, x, y, z, distance, duration, p6, p7, p8, p9);
		} // 0x58E2E0F23F6B76C3 0x1BE9D65C b1207
		static void TASK_USE_NEAREST_TRAIN_SCENARIO_TO_COORD_WARP(Ped ped, float x, float y, float z, float distance)
		{
			invoke<int>(0x3774B03456DD6106, ped, x, y, z, distance);
		} // 0x3774B03456DD6106 undefined b1207
		static void TASK_USE_NEAREST_SCENARIO_CHAIN_TO_COORD(Ped ped, float x, float y, float z, float distance, BOOL p5, BOOL p6, BOOL p7, BOOL p8)
		{
			invoke<int>(0x9FDA1B3D7E7028B3, ped, x, y, z, distance, p5, p6, p7, p8);
		} // 0x9FDA1B3D7E7028B3 0xE32FFB22 b1207
		static void TASK_USE_NEAREST_SCENARIO_CHAIN_TO_COORD_WARP(Ped ped, float x, float y, float z, float distance, BOOL p5, BOOL p6, BOOL p7, BOOL p8)
		{
			invoke<int>(0x97A28E63F0BA5631, ped, x, y, z, distance, p5, p6, p7, p8);
		} // 0x97A28E63F0BA5631 0xBAB4C0AE b1207
		static Any N0xFDECCA06E8B81346(Ped ped)
		{
			return invoke<Any>(0xFDECCA06E8B81346, ped);
		} // 0xFDECCA06E8B81346 undefined b1207
		static Any N0x2D657B10F211C572(Ped ped, float p1)
		{
			return invoke<Any>(0x2D657B10F211C572, ped, p1);
		} // 0x2D657B10F211C572 undefined b1207
		static void TASK_RIDE_TRAIN(Ped ped, Vehicle train, int scenarioPoint, Hash scenarioHash)
		{
			invoke<int>(0x37FB1C870E2EC2C6, ped, train, scenarioPoint, scenarioHash);
		} // 0x37FB1C870E2EC2C6 undefined b1207
		static Any N0x79197F7D2BB5E73A(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5)
		{
			return invoke<Any>(0x79197F7D2BB5E73A, p0, p1, p2, p3, p4, p5);
		} // 0x79197F7D2BB5E73A undefined b1207
		static BOOL DOES_SCENARIO_EXIST_IN_AREA(float x, float y, float z, float radius, BOOL p4, Any p5, BOOL p6)
		{
			return invoke<BOOL>(0x5A59271FFADD33C1, x, y, z, radius, p4, p5, p6);
		} // 0x5A59271FFADD33C1 0xFA7F5047 b1207
		static BOOL DOES_SCENARIO_OF_TYPE_EXIST_IN_AREA_HASH(float x, float y, float z, Hash typeHash, float radius, BOOL p5)
		{
			return invoke<BOOL>(0x6EEAD6AF637DA752, x, y, z, typeHash, radius, p5);
		} // 0x6EEAD6AF637DA752 undefined b1207
		static int FIND_SCENARIO_OF_TYPE_HASH(float xPos, float yPos, float zPos, Hash scenarioType, float distance, Any p5, BOOL p6)
		{
			return invoke<int>(0xF533D68FF970D190, xPos, yPos, zPos, scenarioType, distance, p5, p6);
		} // 0xF533D68FF970D190 undefined b1207
		static void N0x0D322AEF8878B8FE(Any p0, Any p1)
		{
			invoke<int>(0x0D322AEF8878B8FE, p0, p1);
		} // 0x0D322AEF8878B8FE undefined b1207
		static Any N0xD508FA229F1C4900(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5)
		{
			return invoke<Any>(0xD508FA229F1C4900, p0, p1, p2, p3, p4, p5);
		} // 0xD508FA229F1C4900 undefined b1207
		static void N0xB8E213D02F37947D(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6)
		{
			invoke<int>(0xB8E213D02F37947D, p0, p1, p2, p3, p4, p5, p6);
		} // 0xB8E213D02F37947D undefined b1207
		static BOOL IS_SCENARIO_OCCUPIED(float p0, float p1, float p2, float p3, BOOL p4)
		{
			return invoke<BOOL>(0x788756D73AC2E07C, p0, p1, p2, p3, p4);
		} // 0x788756D73AC2E07C 0x697FC008 b1207
		static Any N0x1ACBC313966C21F3(int scenario)
		{
			return invoke<Any>(0x1ACBC313966C21F3, scenario);
		} // 0x1ACBC313966C21F3 undefined b1436
		static BOOL PED_HAS_USE_SCENARIO_TASK(Ped ped)
		{
			return invoke<BOOL>(0x295E3CCEC879CCD7, ped);
		} // 0x295E3CCEC879CCD7 0x9BE9C691 b1207
		static BOOL PED_IS_IN_SCENARIO_BASE_(Ped ped)
		{
			return invoke<BOOL>(0x02EBBB3989B7E695, ped);
		} // 0x02EBBB3989B7E695 undefined b1207
		static Any N0x90703A8F75EE4ABD(Any p0, Any p1)
		{
			return invoke<Any>(0x90703A8F75EE4ABD, p0, p1);
		} // 0x90703A8F75EE4ABD undefined b1207
		static void N0xD999E379265A4501(Any p0, Any p1, Any p2)
		{
			invoke<int>(0xD999E379265A4501, p0, p1, p2);
		} // 0xD999E379265A4501 undefined b1207
		static void PLAY_ANIM_ON_RUNNING_SCENARIO(Ped ped, const char* animDict, const char* animName)
		{
			invoke<int>(0x748040460F8DF5DC, ped, animDict, animName);
		} // 0x748040460F8DF5DC 0x1984A5D1 b1207
		static Any N0x74F0209674864CBD()
		{
			return invoke<Any>(0x74F0209674864CBD);
		} // 0x74F0209674864CBD undefined b1207
		static Any N0xE1C105E6BBA48270()
		{
			return invoke<Any>(0xE1C105E6BBA48270);
		} // 0xE1C105E6BBA48270 undefined b1207
		static Any N0x1AC5A8AB50CFAA33(Any p0)
		{
			return invoke<Any>(0x1AC5A8AB50CFAA33, p0);
		} // 0x1AC5A8AB50CFAA33 undefined b1207
		static void N0xBEEFBB608D2AA68A(Any p0)
		{
			invoke<int>(0xBEEFBB608D2AA68A, p0);
		} // 0xBEEFBB608D2AA68A undefined b1207
		static void N0x19BC99C678FBA139(Any p0, Any p1, Any p2)
		{
			invoke<int>(0x19BC99C678FBA139, p0, p1, p2);
		} // 0x19BC99C678FBA139 undefined b1207
		static void N0x5D9B0BAAF04CF65B(Any p0, Any p1, Any p2, Any p3)
		{
			invoke<int>(0x5D9B0BAAF04CF65B, p0, p1, p2, p3);
		} // 0x5D9B0BAAF04CF65B undefined b1207
		static void N0x9B6A58FDB0024F12(Any p0, Any p1)
		{
			invoke<int>(0x9B6A58FDB0024F12, p0, p1);
		} // 0x9B6A58FDB0024F12 undefined b1207
		static void N0xBC3F847AE2C3DC65(Any p0, Any p1)
		{
			invoke<int>(0xBC3F847AE2C3DC65, p0, p1);
		} // 0xBC3F847AE2C3DC65 undefined b1207
		static void N0x450080DDEDB91258(Any p0, Any p1)
		{
			invoke<int>(0x450080DDEDB91258, p0, p1);
		} // 0x450080DDEDB91258 undefined b1207
		static void N0x954451EA2D2120FB(Any p0, Any p1)
		{
			invoke<int>(0x954451EA2D2120FB, p0, p1);
		} // 0x954451EA2D2120FB undefined b1207
		static void N0x0F4F6C4CE471259D(Any p0, Any p1)
		{
			invoke<int>(0x0F4F6C4CE471259D, p0, p1);
		} // 0x0F4F6C4CE471259D undefined b1207
		static void N0xB8E3486D107F4194(Any p0, Any p1)
		{
			invoke<int>(0xB8E3486D107F4194, p0, p1);
		} // 0xB8E3486D107F4194 undefined b1207
		static void N0x827A58CED9D4D5B4(Any p0, Any p1)
		{
			invoke<int>(0x827A58CED9D4D5B4, p0, p1);
		} // 0x827A58CED9D4D5B4 undefined b1207
		static void N0x4A7D73989F52EB37(Any p0, Any p1)
		{
			invoke<int>(0x4A7D73989F52EB37, p0, p1);
		} // 0x4A7D73989F52EB37 undefined b1207
		static void N0xB79817DB31FF72B9(Any p0, Any p1)
		{
			invoke<int>(0xB79817DB31FF72B9, p0, p1);
		} // 0xB79817DB31FF72B9 undefined b1207
		static void N0x65D281985F2BDFC2(Any p0, Any p1)
		{
			invoke<int>(0x65D281985F2BDFC2, p0, p1);
		} // 0x65D281985F2BDFC2 undefined b1207
		static void N0x885D19AC2B6FBFF4(Any p0, Any p1)
		{
			invoke<int>(0x885D19AC2B6FBFF4, p0, p1);
		} // 0x885D19AC2B6FBFF4 undefined b1207
		static void N0x2064B33F6E6B92D4(Any p0, Any p1, Any p2, Any p3)
		{
			invoke<int>(0x2064B33F6E6B92D4, p0, p1, p2, p3);
		} // 0x2064B33F6E6B92D4 undefined b1207
		static void N0xCE4E669400E5F8AA(Any p0, Any p1, Any p2, Any p3)
		{
			invoke<int>(0xCE4E669400E5F8AA, p0, p1, p2, p3);
		} // 0xCE4E669400E5F8AA undefined b1207
		static void N0x2EB977293923C723(Any p0, Any p1)
		{
			invoke<int>(0x2EB977293923C723, p0, p1);
		} // 0x2EB977293923C723 undefined b1207
		static void N0xE9225354FB7437A7(Any p0, Any p1)
		{
			invoke<int>(0xE9225354FB7437A7, p0, p1);
		} // 0xE9225354FB7437A7 undefined b1207
		static void N0x764DB5A48390FBAD(Any p0, Any p1)
		{
			invoke<int>(0x764DB5A48390FBAD, p0, p1);
		} // 0x764DB5A48390FBAD undefined b1207
		static void N0x8F8C84363810691A(Any p0, Any p1)
		{
			invoke<int>(0x8F8C84363810691A, p0, p1);
		} // 0x8F8C84363810691A undefined b1207
		static void N0xFF8AFCA532B500D4(Any p0, Any p1)
		{
			invoke<int>(0xFF8AFCA532B500D4, p0, p1);
		} // 0xFF8AFCA532B500D4 undefined b1207
		static Any N0xFE5D28B9B7837CC1(Any p0, Any p1, Any p2, Any p3)
		{
			return invoke<Any>(0xFE5D28B9B7837CC1, p0, p1, p2, p3);
		} // 0xFE5D28B9B7837CC1 undefined b1207
		static void N0x2B8AF29A78024BD3(Any p0)
		{
			invoke<int>(0x2B8AF29A78024BD3, p0);
		} // 0x2B8AF29A78024BD3 undefined b1207
		static Any N0x0365000D8BF86531(Any p0)
		{
			return invoke<Any>(0x0365000D8BF86531, p0);
		} // 0x0365000D8BF86531 undefined b1207
		static Vector3 N0x865732725536EE39(Any p0)
		{
			return invoke<Vector3>(0x865732725536EE39, p0);
		} // 0x865732725536EE39 undefined b1207
		static void N0x0E184495B27BB57D()
		{
			invoke<int>(0x0E184495B27BB57D);
		} // 0x0E184495B27BB57D undefined b1207
		static BOOL DOES_SCENARIO_GROUP_EXIST(const char* scenarioGroup)
		{
			return invoke<BOOL>(0xF9034C136C9E00D3, scenarioGroup);
		} // 0xF9034C136C9E00D3 0x5F072EB9 b1207
		static BOOL DOES_SCENARIO_GROUP_EXIST_HASH_(Hash scenarioGroup)
		{
			return invoke<BOOL>(0x76E98B52369A289C, scenarioGroup);
		} // 0x76E98B52369A289C undefined b1207
		static BOOL IS_SCENARIO_GROUP_ENABLED(const char* scenarioGroup)
		{
			return invoke<BOOL>(0x367A09DED4E05B99, scenarioGroup);
		} // 0x367A09DED4E05B99 0x90991122 b1207
		static BOOL IS_SCENARIO_GROUP_ENABLED_HASH_(Hash scenarioGroup)
		{
			return invoke<BOOL>(0xDCC374913DE6AAA6, scenarioGroup);
		} // 0xDCC374913DE6AAA6 undefined b1207
		static void SET_SCENARIO_GROUP_ENABLED(const char* scenarioGroup, BOOL toggle)
		{
			invoke<int>(0x02C8E5B49848664E, scenarioGroup, toggle);
		} // 0x02C8E5B49848664E 0x116997B1 b1207
		static void SET_SCENARIO_GROUP_ENABLED_HASH_(Hash scenarioGroup, BOOL toggle)
		{
			invoke<int>(0x9925EDDB6EAB88CD, scenarioGroup, toggle);
		} // 0x9925EDDB6EAB88CD undefined b1207
		static void RESET_SCENARIO_GROUPS_ENABLED()
		{
			invoke<int>(0xDD902D0349AFAD3A);
		} // 0xDD902D0349AFAD3A 0xBF55025D b1207
		static void N0x358A1A751B335A11(Any p0)
		{
			invoke<int>(0x358A1A751B335A11, p0);
		} // 0x358A1A751B335A11 undefined b1207
		static void FORCE_SCENARIO_GROUP_PRIORITY(Any p0, Any p1)
		{
			invoke<int>(0x444C910A5058E568, p0, p1);
		} // 0x444C910A5058E568 undefined b1207
		static Any N0xE55478C5EDF70AC2(Any p0)
		{
			return invoke<Any>(0xE55478C5EDF70AC2, p0);
		} // 0xE55478C5EDF70AC2 undefined b1207
		static BOOL IS_SCENARIO_POINT_ACTIVE_(int scenario)
		{
			return invoke<BOOL>(0x0CC36D4156006509, scenario);
		} // 0x0CC36D4156006509 undefined b1207
		static void SET_SCENARIO_POINT_ACTIVE_(int scenario, BOOL active)
		{
			invoke<int>(0xEEE4829304F93EEE, scenario, active);
		} // 0xEEE4829304F93EEE undefined b1207
		static void RESET_SCENARIO_SCRIPT_(int scenario)
		{
			invoke<int>(0x5A40040BB5AE3EA2, scenario);
		} // 0x5A40040BB5AE3EA2 undefined b1207
		static BOOL IS_SCENARIO_TYPE_ENABLED(const char* scenarioType)
		{
			return invoke<BOOL>(0x3A815DB3EA088722, scenarioType);
		} // 0x3A815DB3EA088722 0xAE37E969 b1207
		static void SET_SCENARIO_TYPE_ENABLED(const char* scenarioType, BOOL toggle)
		{
			invoke<int>(0xEB47EC4E34FB7EE1, scenarioType, toggle);
		} // 0xEB47EC4E34FB7EE1 0xDB18E5DE b1207
		static void SET_SCENARIO_TYPE_ENABLED_HASH_(Hash scenarioType, BOOL toggle)
		{
			invoke<int>(0xD00E50E673802D71, scenarioType, toggle);
		} // 0xD00E50E673802D71 undefined b1207
		static void RESET_SCENARIO_TYPES_ENABLED()
		{
			invoke<int>(0x0D40EE2A7F2B2D6D);
		} // 0x0D40EE2A7F2B2D6D 0xF58FDEB4 b1207
		static int GET_SCENARIO_POINT_TYPE_PED_IS_USING_(Ped ped)
		{
			return invoke<int>(0x2D0571BB55879DA2, ped);
		} // 0x2D0571BB55879DA2 undefined b1207
		static Hash GET_SCENARIO_POINT_TYPE_(int scenario)
		{
			return invoke<Hash>(0xA92450B5AE687AAF, scenario);
		} // 0xA92450B5AE687AAF undefined b1207
		static BOOL IS_PED_ACTIVE_IN_SCENARIO(Ped ped, int scenario)
		{
			return invoke<BOOL>(0xAA135F9482C82CC3, ped, scenario);
		} // 0xAA135F9482C82CC3 0x05038F1A b1207
		static BOOL IS_PED_EXITING_SCENARIO(Ped ped, BOOL p1)
		{
			return invoke<BOOL>(0x0C3CB2E600C8977D, ped, p1);
		} // 0x0C3CB2E600C8977D undefined b1207
		static Any N0x2C497BDEF897C6DF(Any p0)
		{
			return invoke<Any>(0x2C497BDEF897C6DF, p0);
		} // 0x2C497BDEF897C6DF undefined b1207
		// Despite its name, it only attacks ONE hated target. The one closest to the specified position.
		static void TASK_COMBAT_HATED_TARGETS_IN_AREA(Ped ped, float x, float y, float z, float radius, int flags, Any p6)
		{
			invoke<int>(0x4CF5F55DAC3280A0, ped, x, y, z, radius, flags, p6);
		} // 0x4CF5F55DAC3280A0 0xDF099E18 b1207
		static void TASK_COMBAT_HATED_TARGETS_NO_LOS_TEST(Ped ped, float radius)
		{
			invoke<int>(0xB5BC69D9C4060BC3, ped, radius);
		} // 0xB5BC69D9C4060BC3 undefined b1207
		// Despite its name, it only attacks ONE hated target. The one closest hated target.
		static void TASK_COMBAT_HATED_TARGETS_AROUND_PED(Ped ped, float radius, int flags, Any p3)
		{
			invoke<int>(0x7BF835BB9E2698C8, ped, radius, flags, p3);
		} // 0x7BF835BB9E2698C8 0x2E7064E4 b1207
		static void TASK_COMBAT_HATED_TARGETS_AROUND_PED_TIMED(Ped ped, float radius, int time, int flags)
		{
			invoke<int>(0x2BBA30B854534A0C, ped, radius, time, flags);
		} // 0x2BBA30B854534A0C 0xF127AD6A b1207
		static void TASK_COMBAT_HATED_TARGETS(Ped ped, float radius)
		{
			invoke<int>(0x8182B561A29BD597, ped, radius);
		} // 0x8182B561A29BD597 undefined b1207
		static void N0x30B391915538EBE2(Any p0)
		{
			invoke<int>(0x30B391915538EBE2, p0);
		} // 0x30B391915538EBE2 undefined b1207
		static void TASK_THROW_PROJECTILE(Ped ped, Any p1, Any p2, Any p3)
		{
			invoke<int>(0x7285951DBF6B5A51, ped, p1, p2, p3);
		} // 0x7285951DBF6B5A51 0xF65C20A7 b1207
		static void TASK_THROW_PROJECTILE_2_(Any p0, Any p1, Any p2, Any p3)
		{
			invoke<int>(0x7282356DFF6B5A51, p0, p1, p2, p3);
		} // 0x7282356DFF6B5A51 undefined b1207
		// https://github.com/femga/rdr3_discoveries/blob/master/AI/EVENTS/aud_ped_whistle_types.lua
		// p2: UNSPECIFIED
		static void TASK_WHISTLE_ANIM(Ped ped, Hash audPedWhistleType, Hash p2)
		{
			invoke<int>(0xD6401A1B2F63BED6, ped, audPedWhistleType, p2);
		} // 0xD6401A1B2F63BED6 undefined b1207
		static void TASK_SWAP_WEAPON(Ped ped, Any p1, Any p2, Any p3, Any p4)
		{
			invoke<int>(0xA21C51255B205245, ped, p1, p2, p3, p4);
		} // 0xA21C51255B205245 0xDAF4F8FC b1207
		static void N0x0000A8ACDC2E1B6A(Any p0, Any p1)
		{
			invoke<int>(0x0000A8ACDC2E1B6A, p0, p1);
		} // 0x0000A8ACDC2E1B6A undefined b1207
		static void TASK_RELOAD_WEAPON(Ped ped, BOOL unused)
		{
			invoke<int>(0x62D2916F56B9CD2D, ped, unused);
		} // 0x62D2916F56B9CD2D 0xCA6E91FD b1207
		static void TASK_PICK_UP_WEAPON(Ped ped, Any p1)
		{
			invoke<int>(0x55B0ECFD98596624, ped, p1);
		} // 0x55B0ECFD98596624 undefined b1207
		static BOOL IS_PED_GETTING_UP(Ped ped)
		{
			return invoke<BOOL>(0x2A74E1D5F2F00EEC, ped);
		} // 0x2A74E1D5F2F00EEC 0x320813E6 b1207
		static void TASK_ANIMAL_WRITHE(Ped ped, Any p1, Any p2)
		{
			invoke<int>(0x8C038A39C4A4B6D6, ped, p1, p2);
		} // 0x8C038A39C4A4B6D6 undefined b1207
		static void TASK_ANIMAL_BLEED_OUT_(Ped ped, Ped killer, BOOL p2, Hash weaponHash, int p4, int p5)
		{
			invoke<int>(0x30A768C30D385EC5, ped, killer, p2, weaponHash, p4, p5);
		} // 0x30A768C30D385EC5 undefined b1207
		// This native checks if a ped is on the ground, in pain from a (gunshot) wound.
		static BOOL IS_PED_IN_WRITHE(Ped ped)
		{
			return invoke<BOOL>(0xDEB6D52126E7D640, ped);
		} // 0xDEB6D52126E7D640 0x09E61921 b1207
		static Any N0x3F8387DB1B9F31B7(Any p0, Any p1)
		{
			return invoke<Any>(0x3F8387DB1B9F31B7, p0, p1);
		} // 0x3F8387DB1B9F31B7 undefined b1207
		static Any N0x756C7B4C43DF0422(Any p0)
		{
			return invoke<Any>(0x756C7B4C43DF0422, p0);
		} // 0x756C7B4C43DF0422 undefined b1207
		static Any N0x351F74ED6177EBE7()
		{
			return invoke<Any>(0x351F74ED6177EBE7);
		} // 0x351F74ED6177EBE7 undefined b1207
		static Any N0x6C50B9DCCCA70023(Any p0)
		{
			return invoke<Any>(0x6C50B9DCCCA70023, p0);
		} // 0x6C50B9DCCCA70023 undefined b1207
		static void TASK_REVIVE_TARGET(Ped ped, Ped reviver, Hash tool)
		{
			invoke<int>(0x356088527D9EBAAD, ped, reviver, tool);
		} // 0x356088527D9EBAAD undefined b1207
		// Note: patrolRoute must be prefixed with 'miss_' for it to be valid
		static void OPEN_PATROL_ROUTE(const char* patrolRoute)
		{
			invoke<int>(0xA36BFB5EE89F3D82, patrolRoute);
		} // 0xA36BFB5EE89F3D82 0xF33F83CA b1207
		static void CLOSE_PATROL_ROUTE()
		{
			invoke<int>(0xB043ECA801B8CBC1);
		} // 0xB043ECA801B8CBC1 0x67305E59 b1207
		static void ADD_PATROL_ROUTE_NODE(int nodeId, const char* scenarioName, float x, float y, float z, float lookPosX, float lookPosY, float lookPosZ, int duration, BOOL p9)
		{
			invoke<int>(0x8EDF950167586B7C, nodeId, scenarioName, x, y, z, lookPosX, lookPosY, lookPosZ, duration, p9);
		} // 0x8EDF950167586B7C 0x21B48F10 b1207
		static void ADD_PATROL_ROUTE_LINK(int node1, int node2)
		{
			invoke<int>(0x23083260DEC3A551, node1, node2);
		} // 0x23083260DEC3A551 0xD8761BB3 b1207
		static void CREATE_PATROL_ROUTE()
		{
			invoke<int>(0xAF8A443CCC8018DC);
		} // 0xAF8A443CCC8018DC 0x0A6C7864 b1207
		static void DELETE_PATROL_ROUTE(const char* patrolRoute)
		{
			invoke<int>(0x7767DD9D65E91319, patrolRoute);
		} // 0x7767DD9D65E91319 0x2A4E6706 b1207
		static Any N0x643FD1556F621772(Any p0, Any p1, Any p2)
		{
			return invoke<Any>(0x643FD1556F621772, p0, p1, p2);
		} // 0x643FD1556F621772 undefined b1207
		static void TASK_PATROL(Ped ped, const char* patrolRoute, Any p2, BOOL p3, BOOL p4)
		{
			invoke<int>(0xBDA5DF49D080FE4E, ped, patrolRoute, p2, p3, p4);
		} // 0xBDA5DF49D080FE4E 0xB92E5AF6 b1207
		static void TASK_PATROL_2_(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7)
		{
			invoke<int>(0x964B06C88E4C86DB, p0, p1, p2, p3, p4, p5, p6, p7);
		} // 0x964B06C88E4C86DB undefined b1207
		// Makes the ped run to take cover
		static void TASK_STAY_IN_COVER(Ped ped)
		{
			invoke<int>(0xE5DA8615A6180789, ped);
		} // 0xE5DA8615A6180789 0xA27A9413 b1207
		static void TASK_VEHICLE_SHOOT_AT_PED(Ped ped, Ped target, float p2)
		{
			invoke<int>(0x10AB107B887214D8, ped, target, p2);
		} // 0x10AB107B887214D8 0x59677BA0 b1207
		static void TASK_VEHICLE_AIM_AT_PED(Ped ped, Ped target)
		{
			invoke<int>(0xE41885592B08B097, ped, target);
		} // 0xE41885592B08B097 0x920AE6DB b1207
		static void TASK_VEHICLE_SHOOT_AT_COORD(Ped ped, float x, float y, float z, float p4)
		{
			invoke<int>(0x5190796ED39C9B6D, ped, x, y, z, p4);
		} // 0x5190796ED39C9B6D 0xA7AAA4D6 b1207
		static void N0xAF2EF28CE3084505(Any p0, Any p1, Any p2, Any p3)
		{
			invoke<int>(0xAF2EF28CE3084505, p0, p1, p2, p3);
		} // 0xAF2EF28CE3084505 undefined b1207
		static void TASK_VEHICLE_AIM_AT_COORD(Ped ped, float x, float y, float z)
		{
			invoke<int>(0x447C1E9EF844BC0F, ped, x, y, z);
		} // 0x447C1E9EF844BC0F 0x010F47CE b1207
		static void TASK_VEHICLE_GOTO_NAVMESH(Ped ped, Vehicle vehicle, float x, float y, float z, float speed, int behaviorFlag, float stoppingRange)
		{
			invoke<int>(0x195AEEB13CEFE2EE, ped, vehicle, x, y, z, speed, behaviorFlag, stoppingRange);
		} // 0x195AEEB13CEFE2EE 0x55CF3BCD b1207
		static void TASK_GO_TO_COORD_WHILE_AIMING_AT_COORD(Ped ped, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9, Any p10, Any p11, Any p12, Any p13, Any p14, Any p15)
		{
			invoke<int>(0x11315AB3385B8AC0, ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15);
		} // 0x11315AB3385B8AC0 0x1552DC91 b1207
		static void TASK_GO_TO_COORD_WHILE_AIMING_AT_COORD_USING_COMBAT_STYLE(Ped ped, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9, Any p10, Any p11, Any p12, Any p13, Any p14, Any p15)
		{
			invoke<int>(0x639C0425A0B4E77E, ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15);
		} // 0x639C0425A0B4E77E undefined b1207
		static void TASK_GO_TO_COORD_WHILE_AIMING_AT_ENTITY(Ped ped1, float x, float y, float z, Ped ped2, float p5, Any p6, float p7, float p8, Any p9, Any p10, Any p11, Hash firingPattern, int p13, Any p14)
		{
			invoke<int>(0xB2A16444EAD9AE47, ped1, x, y, z, ped2, p5, p6, p7, p8, p9, p10, p11, firingPattern, p13, p14);
		} // 0xB2A16444EAD9AE47 0x9BD52ABD b1207
		static void TASK_GO_TO_COORD_WHILE_AIMING_AT_ENTITY_USING_COMBAT_STYLE(Ped ped, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9, Any p10, Any p11, Any p12, Any p13, Any p14)
		{
			invoke<int>(0x78426D0982D083C9, ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14);
		} // 0x78426D0982D083C9 undefined b1207
		// shootatEntity:
		// If true, peds will shoot at Entity till it is dead.
		// If false, peds will just walk till they reach the entity and will cease shooting.
		static void TASK_GO_TO_ENTITY_WHILE_AIMING_AT_ENTITY(Ped ped, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9, Any p10)
		{
			invoke<int>(0x97465886D35210E9, ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
		} // 0x97465886D35210E9 0x68E36B7A b1207
		static void TASK_GO_TO_ENTITY_WHILE_AIMING_AT_ENTITY_USING_COMBAT_STYLE(Ped ped, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9, Any p10)
		{
			invoke<int>(0xCEF0117C233026AD, ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
		} // 0xCEF0117C233026AD undefined b1207
		static void TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD(Ped ped, float goToLocationX, float goToLocationY, float goToLocationZ, float focusLocationX, float focusLocationY, float focusLocationZ, float speed, BOOL shootAtEnemies, float distanceToStopAt, float noRoadsDistance, BOOL unkTrue, int unkFlag, int aimingFlag, Hash firingPattern)
		{
			invoke<int>(0xA55547801EB331FC, ped, goToLocationX, goToLocationY, goToLocationZ, focusLocationX, focusLocationY, focusLocationZ, speed, shootAtEnemies, distanceToStopAt, noRoadsDistance, unkTrue, unkFlag, aimingFlag, firingPattern);
		} // 0xA55547801EB331FC 0x3F91358E b1207
		static void TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD_USING_COMBAT_STYLE(Ped ped, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9, Any p10, Any p11, Any p12, Any p13, Any p14)
		{
			invoke<int>(0x87BD711FC31EA273, ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14);
		} // 0x87BD711FC31EA273 undefined b1207
		// Makes the ped ragdoll like when falling from a great height
		static void SET_HIGH_FALL_TASK(Ped ped, int p1, int p2, int p3)
		{
			invoke<int>(0x8C825BDC7741D37C, ped, p1, p2, p3);
		} // 0x8C825BDC7741D37C 0xBBB26172 b1207
		static void N0x5217B7B6DB78E1F3(Any p0, Any p1, Any p2, Any p3, Any p4)
		{
			invoke<int>(0x5217B7B6DB78E1F3, p0, p1, p2, p3, p4);
		} // 0x5217B7B6DB78E1F3 undefined b1207
		static void REQUEST_WAYPOINT_RECORDING(const char* waypointRecording)
		{
			invoke<int>(0x9EEFB62EB27B5792, waypointRecording);
		} // 0x9EEFB62EB27B5792 0xAFABFB5D b1207
		static BOOL GET_IS_WAYPOINT_RECORDING_LOADED(const char* waypointRecording)
		{
			return invoke<BOOL>(0xCB4E8BE8A0063C5D, waypointRecording);
		} // 0xCB4E8BE8A0063C5D 0x87125F5D b1207
		static void REMOVE_WAYPOINT_RECORDING(const char* waypointRecording)
		{
			invoke<int>(0xFF1B8B4AA1C25DC8, waypointRecording);
		} // 0xFF1B8B4AA1C25DC8 0x624530B0 b1207
		static void N0xF718931A82EEB898()
		{
			invoke<int>(0xF718931A82EEB898);
		} // 0xF718931A82EEB898 undefined b1207
		static BOOL WAYPOINT_RECORDING_GET_NUM_POINTS(const char* waypointRecording, int* points)
		{
			return invoke<BOOL>(0x5343532C01A07234, waypointRecording, points);
		} // 0x5343532C01A07234 0xF5F9B71E b1207
		static BOOL WAYPOINT_RECORDING_GET_COORD(const char* waypointRecording, int point, Vector3* coord)
		{
			return invoke<BOOL>(0x2FB897405C90B361, waypointRecording, point, coord);
		} // 0x2FB897405C90B361 0x19266913 b1207
		static float WAYPOINT_RECORDING_GET_SPEED_AT_POINT(const char* waypointRecording, int point)
		{
			return invoke<float>(0x005622AEBC33ACA9, waypointRecording, point);
		} // 0x005622AEBC33ACA9 0xC765633A b1207
		static BOOL WAYPOINT_RECORDING_GET_CLOSEST_WAYPOINT(const char* waypointRecording, float x, float y, float z, int* point)
		{
			return invoke<BOOL>(0xB629A298081F876F, waypointRecording, x, y, z, point);
		} // 0xB629A298081F876F 0xC4CD35AF b1207
		static void TASK_FOLLOW_WAYPOINT_RECORDING_ADVANCED(Ped ped, Any p1)
		{
			invoke<int>(0x0CFC13EBC19BCA52, ped, p1);
		} // 0x0CFC13EBC19BCA52 undefined b1207
		static void TASK_FOLLOW_WAYPOINT_RECORDING(Ped ped, const char* waypointRecording, int p2, int flag, int p4, BOOL p5, Any p6, int p7)
		{
			invoke<int>(0x0759591819534F7B, ped, waypointRecording, p2, flag, p4, p5, p6, p7);
		} // 0x0759591819534F7B 0xADF9904D b1207
		static void TASK_FOLLOW_WAYPOINT_RECORDING_AT_OFFSET(Ped ped, const char* waypointRecording, float p2, int p3, int p4, int p5, BOOL p6)
		{
			invoke<int>(0xBE9B0520BD7C445B, ped, waypointRecording, p2, p3, p4, p5, p6);
		} // 0xBE9B0520BD7C445B undefined b1207
		static void TASK_FOLLOW_ENTITY_ALONG_WAYPOINT_RECORDING_AT_OFFSET(Ped ped0, Ped ped1, const char* waypointRecording, float p3, float p4, int p5, int p6, int p7, BOOL p8)
		{
			invoke<int>(0x4D2B787BAE9AB760, ped0, ped1, waypointRecording, p3, p4, p5, p6, p7, p8);
		} // 0x4D2B787BAE9AB760 undefined b1207
		static BOOL IS_WAYPOINT_PLAYBACK_GOING_ON_FOR_PED(Ped ped, const char* waypointRecording)
		{
			return invoke<BOOL>(0xE03B3F2D3DC59B64, ped, waypointRecording);
		} // 0xE03B3F2D3DC59B64 0x85B7725F b1207
		static int GET_PED_WAYPOINT_PROGRESS(Ped ped)
		{
			return invoke<int>(0x2720AAA75001E094, ped);
		} // 0x2720AAA75001E094 0x3595B104 b1207
		static float GET_PED_WAYPOINT_DISTANCE(Ped ped)
		{
			return invoke<float>(0xE6A877C64CAF1BC5, ped);
		} // 0xE6A877C64CAF1BC5 0x084B35B0 b1207
		static Any SET_PED_WAYPOINT_ROUTE_OFFSET(Ped ped, float p1, float p2, float p3)
		{
			return invoke<Any>(0xED98E10B0AFCE4B4, ped, p1, p2, p3);
		} // 0xED98E10B0AFCE4B4 0xF867F747 b1207
		static float GET_WAYPOINT_DISTANCE_ALONG_ROUTE(const char* waypointRecording, int p1)
		{
			return invoke<float>(0xA5B769058763E497, waypointRecording, p1);
		} // 0xA5B769058763E497 0xE8422AC4 b1207
		static float N0x3ACC128510142B9D(const char* waypointRecording, float x, float y, float z)
		{
			return invoke<float>(0x3ACC128510142B9D, waypointRecording, x, y, z);
		} // 0x3ACC128510142B9D undefined b1207
		static BOOL WAYPOINT_PLAYBACK_GET_IS_PAUSED(Ped ped)
		{
			return invoke<BOOL>(0x701375A7D43F01CB, ped);
		} // 0x701375A7D43F01CB 0xA6BB5717 b1207
		static BOOL WAYPOINT_PLAYBACK_GET_IS_AIMING(Ped ped)
		{
			return invoke<BOOL>(0xD73A5D1F0325C71C, ped);
		} // 0xD73A5D1F0325C71C undefined b1207
		static BOOL WAYPOINT_PLAYBACK_GET_IS_SHOOTING(Ped ped)
		{
			return invoke<BOOL>(0xA5B94DF8AF058F46, ped);
		} // 0xA5B94DF8AF058F46 undefined b1207
		static void WAYPOINT_PLAYBACK_PAUSE(Ped ped, Any p1, Any p2, Any p3)
		{
			invoke<int>(0x0F342546AA06FED5, ped, p1, p2, p3);
		} // 0x0F342546AA06FED5 0xFE39ECF8 b1207
		static void WAYPOINT_PLAYBACK_RESUME(Ped ped, BOOL p1, int p2, int p3)
		{
			invoke<int>(0x244F70C84C547D2D, ped, p1, p2, p3);
		} // 0x244F70C84C547D2D 0x50F392EF b1207
		static void WAYPOINT_PLAYBACK_OVERRIDE_SPEED(Ped ped, float speed, Any p2, Any p3, Any p4)
		{
			invoke<int>(0x7D7D2B47FA788E85, ped, speed, p2, p3, p4);
		} // 0x7D7D2B47FA788E85 0x23E6BA96 b1207
		static void WAYPOINT_PLAYBACK_USE_DEFAULT_SPEED(Ped ped)
		{
			invoke<int>(0x6599D834B12D0800, ped);
		} // 0x6599D834B12D0800 0x1BBB2CAC b1207
		static float GET_PED_WAYPOINT_OVERRIDE_SPEED(Ped ped)
		{
			return invoke<float>(0xD39A2F3E7FCAFF08, ped);
		} // 0xD39A2F3E7FCAFF08 undefined b1207
		static void USE_WAYPOINT_RECORDING_AS_ASSISTED_MOVEMENT_ROUTE(const char* waypointRecording, BOOL p1, float p2, float p3, BOOL p4)
		{
			invoke<int>(0x5A353B8E6B1095B5, waypointRecording, p1, p2, p3, p4);
		} // 0x5A353B8E6B1095B5 0x4DFD5FEC b1207
		static void WAYPOINT_PLAYBACK_START_AIMING_AT_PED(Any p0, Any p1, Any p2, Any p3)
		{
			invoke<int>(0x20E330937C399D29, p0, p1, p2, p3);
		} // 0x20E330937C399D29 0x75E60CF6 b1207
		static void WAYPOINT_PLAYBACK_START_AIMING_AT_ENTITY(Any p0, Any p1, Any p2, Any p3)
		{
			invoke<int>(0x4F158205E0C74385, p0, p1, p2, p3);
		} // 0x4F158205E0C74385 undefined b1207
		static void WAYPOINT_PLAYBACK_START_AIMING_AT_COORD(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5)
		{
			invoke<int>(0x8968400D900ED8B3, p0, p1, p2, p3, p4, p5);
		} // 0x8968400D900ED8B3 0xF120A34E b1207
		static void WAYPOINT_PLAYBACK_START_SHOOTING_AT_PED(Any p0, Any p1, Any p2, Any p3, Any p4)
		{
			invoke<int>(0xE70BA7B90F8390DC, p0, p1, p2, p3, p4);
		} // 0xE70BA7B90F8390DC 0xBD5F0EB8 b1207
		static void WAYPOINT_PLAYBACK_START_SHOOTING_AT_ENTITY(Any p0, Any p1, Any p2, Any p3, Any p4)
		{
			invoke<int>(0x4AF458F71C1196D2, p0, p1, p2, p3, p4);
		} // 0x4AF458F71C1196D2 undefined b1207
		static void WAYPOINT_PLAYBACK_START_SHOOTING_AT_COORD(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6)
		{
			invoke<int>(0x057A25CFCC9DB671, p0, p1, p2, p3, p4, p5, p6);
		} // 0x057A25CFCC9DB671 0xCDDB44D5 b1207
		static void WAYPOINT_PLAYBACK_STOP_AIMING_OR_SHOOTING(Any p0)
		{
			invoke<int>(0x47EFA040EBB8E2EA, p0);
		} // 0x47EFA040EBB8E2EA 0x6D7CF40C b1207
		static void ASSISTED_MOVEMENT_REMOVE_ROUTE(const char* route)
		{
			invoke<int>(0x3548536485DD792B, route);
		} // 0x3548536485DD792B 0xB3CEC06F b1207
		static BOOL CREATE_WAYPOINT_PATH_(const char* pathName, Any* p1, int nodes, int p3)
		{
			return invoke<BOOL>(0x5C885E0978B6AD60, pathName, p1, nodes, p3);
		} // 0x5C885E0978B6AD60 undefined b1207
		static BOOL ASSISTED_MOVEMENT_IS_ROUTE_LOADED(const char* route)
		{
			return invoke<BOOL>(0x60F9A4393A21F741, route);
		} // 0x60F9A4393A21F741 0x79B067AF b1207
		static void ASSISTED_MOVEMENT_SET_ROUTE_PROPERTIES(const char* route, int props)
		{
			invoke<int>(0xD5002D78B7162E1B, route, props);
		} // 0xD5002D78B7162E1B 0x01CAAFCC b1207
		static void SET_ENABLE_SPEED_RESTRAIN_FOR_WAYPOINT_RECORDING_LEADER(Any p0, Any p1)
		{
			invoke<int>(0x295F03DC97BEEBC1, p0, p1);
		} // 0x295F03DC97BEEBC1 undefined b1207
		static void SET_UP_SPEED_RESTRAIN_INFORMATION_FOR_PLAYER_FOLLOWER(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8)
		{
			invoke<int>(0xB5C51DD544F14F58, p0, p1, p2, p3, p4, p5, p6, p7, p8);
		} // 0xB5C51DD544F14F58 undefined b1207
		static void TASK_VEHICLE_FOLLOW_WAYPOINT_RECORDING(Ped ped, Vehicle vehicle, const char* waypointRecording, int drivingMode, Any p4, int eWaypoint, int flag, float p7, BOOL p8, float stoppingDist, Any p10)
		{
			invoke<int>(0x3123FAA6DB1CF7ED, ped, vehicle, waypointRecording, drivingMode, p4, eWaypoint, flag, p7, p8, stoppingDist, p10);
		} // 0x3123FAA6DB1CF7ED 0x959818B6 b1207
		static void TASK_VEHICLE_FOLLOW_WAYPOINT_RECORDING_2_(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9)
		{
			invoke<int>(0x041D17A9E221AE30, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
		} // 0x041D17A9E221AE30 undefined b1207
		static BOOL IS_WAYPOINT_PLAYBACK_GOING_ON_FOR_VEHICLE(Any p0, Any p1)
		{
			return invoke<BOOL>(0xF5134943EA29868C, p0, p1);
		} // 0xF5134943EA29868C 0x80DD15DB b1207
		static int GET_VEHICLE_WAYPOINT_PROGRESS(Vehicle vehicle)
		{
			return invoke<int>(0x9824CFF8FC66E159, vehicle);
		} // 0x9824CFF8FC66E159 0xD3CCF64E b1207
		static int GET_VEHICLE_WAYPOINT_TARGET_POINT(Vehicle vehicle)
		{
			return invoke<int>(0x416B62AC8B9E5BBD, vehicle);
		} // 0x416B62AC8B9E5BBD 0x81049608 b1207
		static void VEHICLE_WAYPOINT_PLAYBACK_PAUSE(Vehicle vehicle)
		{
			invoke<int>(0x8A4E6AC373666BC5, vehicle);
		} // 0x8A4E6AC373666BC5 0x7C00B415 b1207
		static Any VEHICLE_WAYPOINT_PLAYBACK_GET_IS_PAUSED(Any p0)
		{
			return invoke<Any>(0x4D6D30AB18B0B089, p0);
		} // 0x4D6D30AB18B0B089 undefined b1207
		static void VEHICLE_WAYPOINT_PLAYBACK_RESUME(Vehicle vehicle)
		{
			invoke<int>(0xDC04FCAA7839D492, vehicle);
		} // 0xDC04FCAA7839D492 0xBEB14C82 b1207
		static void VEHICLE_WAYPOINT_PLAYBACK_USE_DEFAULT_SPEED(Vehicle vehicle)
		{
			invoke<int>(0x5CEB25A7D2848963, vehicle);
		} // 0x5CEB25A7D2848963 0x923C3AA4 b1207
		static void VEHICLE_WAYPOINT_PLAYBACK_OVERRIDE_SPEED(Vehicle vehicle, float speed)
		{
			invoke<int>(0x121F0593E0A431D7, vehicle, speed);
		} // 0x121F0593E0A431D7 0xBE1E7BB4 b1207
		static Any GET_VEHICLE_WAYPOINT_PLAYBACK_OVERRIDE_SPEED(Any p0)
		{
			return invoke<Any>(0x3DC971EB22F73447, p0);
		} // 0x3DC971EB22F73447 undefined b1207
		static void TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(Ped ped, BOOL toggle)
		{
			invoke<int>(0x90D2156198831D69, ped, toggle);
		} // 0x90D2156198831D69 0x1B54FB6B b1207
		static void TASK_SET_STEALTH_MOVEMENT(Ped ped, BOOL p1, Any p2, BOOL p3)
		{
			invoke<int>(0x4C3FA937B44A90FA, ped, p1, p2, p3);
		} // 0x4C3FA937B44A90FA undefined b1207
		static void TASK_SET_CROUCH_MOVEMENT(Ped ped, BOOL p1, Any p2, BOOL p3)
		{
			invoke<int>(0x17293C633C8AC019, ped, p1, p2, p3);
		} // 0x17293C633C8AC019 undefined b1207
		// motionStateHash: see FORCE_PED_MOTION_STATE
		static void TASK_FORCE_MOTION_STATE(Ped ped, Hash motionStateHash, BOOL p2)
		{
			invoke<int>(0x4F056E1AFFEF17AB, ped, motionStateHash, p2);
		} // 0x4F056E1AFFEF17AB 0xCAD2EF77 b1207
		static void TASK_MOVE_NETWORK_BY_NAME(Ped ped, const char* task, float multiplier, BOOL p3, const char* animDict, int flags)
		{
			invoke<int>(0x2D537BA194896636, ped, task, multiplier, p3, animDict, flags);
		} // 0x2D537BA194896636 0x6F5D215F b1207
		static void TASK_MOVE_NETWORK_BY_NAME_WITH_INIT_PARAMS(Ped ped, const char* moveNetworkDefName, Any* taskData, float p3, BOOL p4, const char* animDict, int flags)
		{
			invoke<int>(0x139805C2A67C4795, ped, moveNetworkDefName, taskData, p3, p4, animDict, flags);
		} // 0x139805C2A67C4795 undefined b1207
		static void TASK_MOVE_NETWORK_ADVANCED_BY_NAME_WITH_INIT_PARAMS(Ped ped, const char* moveNetworkDefName, Any* taskData, float xPos, float yPos, float zPos, float xRot, float yRot, float zRot, int p9, float p10, int p11, int p12, int flag, int p14)
		{
			invoke<int>(0x7B6A04F98BBAFB2C, ped, moveNetworkDefName, taskData, xPos, yPos, zPos, xRot, yRot, zRot, p9, p10, p11, p12, flag, p14);
		} // 0x7B6A04F98BBAFB2C undefined b1207
		static void TASK_MOVE_NETWORK_ADVANCED_BY_NAME_WITH_INIT_PARAMS_ATTACHED(Ped ped, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9, Any p10, Any p11, Any p12, Any p13, Any p14, Any p15, Any p16, Any p17)
		{
			invoke<int>(0xF92171093BCABED4, ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17);
		} // 0xF92171093BCABED4 undefined b1207
		static BOOL IS_TASK_MOVE_NETWORK_ACTIVE(Ped ped)
		{
			return invoke<BOOL>(0x921CE12C489C4C41, ped);
		} // 0x921CE12C489C4C41 0x902656EB b1207
		// Returns hash of the underlying move network def, see move_networks.xml
		// https://alloc8or.re/rdr3/doc/misc/move_networks.txt
		static Hash GET_TASK_MOVE_NETWORK_ID_(Ped ped)
		{
			return invoke<Hash>(0xCACC2F9D994504B7, ped);
		} // 0xCACC2F9D994504B7 undefined b1207
		static BOOL IS_TASK_MOVE_NETWORK_READY_FOR_TRANSITION(Ped ped)
		{
			return invoke<BOOL>(0x30ED88D5E0C56A37, ped);
		} // 0x30ED88D5E0C56A37 0x92FDBAE6 b1207
		static void REQUEST_TASK_MOVE_NETWORK_STATE_TRANSITION(Ped ped, const char* name)
		{
			invoke<int>(0xD01015C7316AE176, ped, name);
		} // 0xD01015C7316AE176 0x885724DE b1207
		static const char* GET_TASK_MOVE_NETWORK_STATE(Ped ped)
		{
			return invoke<const char*>(0x717E4D1F2048376D, ped);
		} // 0x717E4D1F2048376D 0x96C0277B b1207
		static Any N0xE9A6400D1A0E7A55(Any p0)
		{
			return invoke<Any>(0xE9A6400D1A0E7A55, p0);
		} // 0xE9A6400D1A0E7A55 undefined b1207
		static void N0x615DC4A82E90BB48(Any p0, Any p1, Any p2)
		{
			invoke<int>(0x615DC4A82E90BB48, p0, p1, p2);
		} // 0x615DC4A82E90BB48 undefined b1207
		static void SET_TASK_MOVE_NETWORK_SIGNAL_FLOAT(Ped ped, const char* signalName, float value)
		{
			invoke<int>(0xD5BB4025AE449A4E, ped, signalName, value);
		} // 0xD5BB4025AE449A4E 0xA79BE783 b1207
		static void SET_TASK_MOVE_NETWORK_SIGNAL_FLOAT_2_(Ped ped, const char* signalName, float value)
		{
			invoke<int>(0x099D4A855D53B03B, ped, signalName, value);
		} // 0x099D4A855D53B03B undefined b1207
		static void SET_TASK_MOVE_NETWORK_SIGNAL_BOOL(Ped ped, const char* signalName, BOOL value)
		{
			invoke<int>(0xB0A6CFD2C69C1088, ped, signalName, value);
		} // 0xB0A6CFD2C69C1088 0xF3538041 b1207
		static void SET_TASK_MOVE_NETWORK_SIGNAL_VECTOR_(Ped ped, const char* signalName, float x, float y, float z)
		{
			invoke<int>(0x4662BFE01938D98D, ped, signalName, x, y, z);
		} // 0x4662BFE01938D98D undefined b1207
		static float GET_TASK_MOVE_NETWORK_PHASE_FLOAT_(Ped ped, const char* phaseName)
		{
			return invoke<float>(0x844CEEE428EA35B0, ped, phaseName);
		} // 0x844CEEE428EA35B0 undefined b1207
		static BOOL GET_TASK_MOVE_NETWORK_EVENT(Ped ped, const char* eventName)
		{
			return invoke<BOOL>(0xB4F47213DF45A64C, ped, eventName);
		} // 0xB4F47213DF45A64C 0x72FA5EF2 b1207
		static void N0x9585FF23C4B8EDE0(Any p0, Any p1)
		{
			invoke<int>(0x9585FF23C4B8EDE0, p0, p1);
		} // 0x9585FF23C4B8EDE0 undefined b1207
		static void N0xEAF87DA2BE78A15B(Any p0, Any p1)
		{
			invoke<int>(0xEAF87DA2BE78A15B, p0, p1);
		} // 0xEAF87DA2BE78A15B undefined b1207
		static void N0x3BBEECC5B8F35318(Any p0, Any p1)
		{
			invoke<int>(0x3BBEECC5B8F35318, p0, p1);
		} // 0x3BBEECC5B8F35318 undefined b1207
		static BOOL IS_MOVE_BLEND_RATIO_STILL(float moveBlendRatio)
		{
			return invoke<BOOL>(0x349CE7B56DAFD95C, moveBlendRatio);
		} // 0x349CE7B56DAFD95C 0xE9DAF877 b1207
		static BOOL IS_MOVE_BLEND_RATIO_WALKING(float moveBlendRatio)
		{
			return invoke<BOOL>(0xF133BBBE91E1691F, moveBlendRatio);
		} // 0xF133BBBE91E1691F 0xD21639A8 b1207
		static BOOL IS_MOVE_BLEND_RATIO_RUNNING(float moveBlendRatio)
		{
			return invoke<BOOL>(0xD4D8636C0199A939, moveBlendRatio);
		} // 0xD4D8636C0199A939 0xE76A2353 b1207
		static BOOL IS_MOVE_BLEND_RATIO_SPRINTING(float moveBlendRatio)
		{
			return invoke<BOOL>(0x24A2AD74FA9814E2, moveBlendRatio);
		} // 0x24A2AD74FA9814E2 0xDD616893 b1207
		static BOOL IS_PED_STILL(Ped ped)
		{
			return invoke<BOOL>(0xAC29253EEF8F0180, ped);
		} // 0xAC29253EEF8F0180 0x09E3418D b1207
		static BOOL IS_PED_WALKING(Ped ped)
		{
			return invoke<BOOL>(0xDE4C184B2B9B071A, ped);
		} // 0xDE4C184B2B9B071A 0x4B865C4A b1207
		static BOOL IS_PED_RUNNING(Ped ped)
		{
			return invoke<BOOL>(0xC5286FFC176F28A2, ped);
		} // 0xC5286FFC176F28A2 0xE9A5578F b1207
		static BOOL IS_PED_SPRINTING(Ped ped)
		{
			return invoke<BOOL>(0x57E457CD2C0FC168, ped);
		} // 0x57E457CD2C0FC168 0x4F3E0633 b1207
		static BOOL IS_PED_IN_HIT_REACT(Ped ped)
		{
			return invoke<BOOL>(0xF330A5C062B29BED, ped);
		} // 0xF330A5C062B29BED undefined b1207
		static void TASK_ARREST_PED(Ped ped, Ped target)
		{
			invoke<int>(0xF3B9A78A178572B1, ped, target);
		} // 0xF3B9A78A178572B1 0xBC0F153D b1207
		// This function is hard-coded to always return false.
		static BOOL IS_PED_BEING_ARRESTED(Ped ped)
		{
			return invoke<BOOL>(0x90A09F3A45FED688, ped);
		} // 0x90A09F3A45FED688 0x5FF6C2ED b1207
		static BOOL IS_PED_ARRESTING_ANY_PED_(Ped ped)
		{
			return invoke<BOOL>(0xA9CC7856D52DBD25, ped);
		} // 0xA9CC7856D52DBD25 undefined b1207
		static void CUFF_PED_(Ped ped)
		{
			invoke<int>(0x7981037A96E7D174, ped);
		} // 0x7981037A96E7D174 undefined b1207
		static void UNCUFF_PED(Ped ped)
		{
			invoke<int>(0x67406F2C8F87FC4F, ped);
		} // 0x67406F2C8F87FC4F 0xA23A1D61 b1207
		static BOOL IS_PED_CUFFED(Ped ped)
		{
			return invoke<BOOL>(0x74E559B3BC910685, ped);
		} // 0x74E559B3BC910685 0x511CE741 b1207
		static BOOL IS_PED_DUELLING_(Ped ped)
		{
			return invoke<BOOL>(0xC8B29D18022EA2B7, ped);
		} // 0xC8B29D18022EA2B7 undefined b1207
		// Params: p4 either 0.2f, 0.25f, 0.31f, 0.4f
		static void TASK_DUEL(Ped ped, Any p1, float p2, Entity entity, float p4, int p5, float vPosOpponentX, float vPosOpponentY, float vPosOpponentZ, float fOpponentHead, int p10)
		{
			invoke<int>(0x5D5B0D5BC3626E5A, ped, p1, p2, entity, p4, p5, vPosOpponentX, vPosOpponentY, vPosOpponentZ, fOpponentHead, p10);
		} // 0x5D5B0D5BC3626E5A undefined b1207
		static Any N0x908BB14BCE85C80E(Any p0)
		{
			return invoke<Any>(0x908BB14BCE85C80E, p0);
		} // 0x908BB14BCE85C80E undefined b1207
		static Any N0x1F7A9A9C38C13A56(Any p0)
		{
			return invoke<Any>(0x1F7A9A9C38C13A56, p0);
		} // 0x1F7A9A9C38C13A56 undefined b1207
		static Any N0x3FEB770D8ED9047A(Any p0)
		{
			return invoke<Any>(0x3FEB770D8ED9047A, p0);
		} // 0x3FEB770D8ED9047A undefined b1207
		static Any N0x30146C25686B7836(Any p0, Any p1)
		{
			return invoke<Any>(0x30146C25686B7836, p0, p1);
		} // 0x30146C25686B7836 undefined b1207
		static Any N0x59AE5CA4FFB4E378(Any p0, Any p1)
		{
			return invoke<Any>(0x59AE5CA4FFB4E378, p0, p1);
		} // 0x59AE5CA4FFB4E378 undefined b1207
		static void N0x748D5E0D2A1A4C61(Any p0, Any p1, Any p2)
		{
			invoke<int>(0x748D5E0D2A1A4C61, p0, p1, p2);
		} // 0x748D5E0D2A1A4C61 undefined b1207
		static void END_DUEL(Ped ped, BOOL p1, float p2)
		{
			invoke<int>(0xEED08A3A98B847E2, ped, p1, p2);
		} // 0xEED08A3A98B847E2 undefined b1207
		static void N0x651F0530083C0E5A(Any p0, Any p1)
		{
			invoke<int>(0x651F0530083C0E5A, p0, p1);
		} // 0x651F0530083C0E5A undefined b1207
		// carriableSlot:
		//  7 > Back of a horse
		//  6 > Right side of a horse
		//  5 > Left side of a horse
		// flags:
		//  512: enables the prompt being the name of the item when using a generic item
		static void TASK_CARRIABLE(Entity entity, Hash carryConfig, Ped carrier, int carriableSlot, int flags)
		{
			invoke<int>(0xF0B4F759F35CC7F5, entity, carryConfig, carrier, carriableSlot, flags);
		} // 0xF0B4F759F35CC7F5 undefined b1207
		static void N0x9EBD34958AB6F824(Any p0)
		{
			invoke<int>(0x9EBD34958AB6F824, p0);
		} // 0x9EBD34958AB6F824 undefined b1207
		static BOOL GET_IS_CARRIABLE_ENTITY(Entity entity)
		{
			return invoke<BOOL>(0x0CCFE72B43C9CF96, entity);
		} // 0x0CCFE72B43C9CF96 undefined b1207
		static Any N0x10ADFDF07B7DFFBA(Any p0, Any p1, Any p2)
		{
			return invoke<Any>(0x10ADFDF07B7DFFBA, p0, p1, p2);
		} // 0x10ADFDF07B7DFFBA undefined b1207
		static void TASK_PLACE_CARRIED_ENTITY_AT_COORD(Ped ped, Entity entity, float x, float y, float z, float p5, int flags)
		{
			invoke<int>(0xC7F0B43DCDC57E3D, ped, entity, x, y, z, p5, flags);
		} // 0xC7F0B43DCDC57E3D undefined b1207
		static void TASK_PLACE_CARRIED_ENTITY_ON_MOUNT(Ped ped, Entity entity, Ped mount, float p3)
		{
			invoke<int>(0x6D3D87C57B3D52C7, ped, entity, mount, p3);
		} // 0x6D3D87C57B3D52C7 undefined b1207
		static void TASK_DUMP_CARRIABLE_FROM_PARENT(Ped ped, Ped ped2, Entity entity)
		{
			invoke<int>(0x17CA98707B15926A, ped, ped2, entity);
		} // 0x17CA98707B15926A undefined b1207
		static void DETACH_CARRIABLE_PED_(Ped ped)
		{
			invoke<int>(0x36D188AECB26094B, ped);
		} // 0x36D188AECB26094B undefined b1207
		static void N0xE2CF104ADD49D4BF(Any p0)
		{
			invoke<int>(0xE2CF104ADD49D4BF, p0);
		} // 0xE2CF104ADD49D4BF undefined b1207
		static void TASK_PICKUP_CARRIABLE_ENTITY(Ped ped, Entity entity)
		{
			invoke<int>(0x502EC17B1BED4BFA, ped, entity);
		} // 0x502EC17B1BED4BFA undefined b1207
		static void TASK_HOGTIE_TARGET_PED(Ped ped, Ped targetPed)
		{
			invoke<int>(0x27829AFD3E03AC1A, ped, targetPed);
		} // 0x27829AFD3E03AC1A undefined b1207
		static void TASK_CUT_FREE_HOGTIED_TARGET_PED_(Ped ped, Ped targetPed)
		{
			invoke<int>(0x81D16C4FF3A77ADF, ped, targetPed);
		} // 0x81D16C4FF3A77ADF undefined b1207
		static void TASK_CUT_FREE_HOGTIED_TARGET_PED_2_(Ped ped, Ped targetPed, float p2)
		{
			invoke<int>(0x525421A507216084, ped, targetPed, p2);
		} // 0x525421A507216084 undefined b1207
		// Sets the time it takes for a hogtied ped to escape
		// -1.0f for ped to never escape
		static void SET_HOGTIE_ESCAPE_TIMER_(Ped ped, float time)
		{
			invoke<int>(0xAB591AE6B48B913E, ped, time);
		} // 0xAB591AE6B48B913E undefined b1207
		static float GET_HOGTIE_ESCAPE_TIMER_(Ped ped)
		{
			return invoke<float>(0x4687E69D258BBE41, ped);
		} // 0x4687E69D258BBE41 undefined b1207
		static Any N0x03D741CB4052E26C(Any p0)
		{
			return invoke<Any>(0x03D741CB4052E26C, p0);
		} // 0x03D741CB4052E26C undefined b1232
		// https://github.com/femga/rdr3_discoveries/tree/master/objects/composites
		static BOOL REQUEST_HERB_COMPOSITE_ASSET_(Hash asset)
		{
			return invoke<BOOL>(0x73F0D0327BFA0812, asset);
		} // 0x73F0D0327BFA0812 undefined b1207
		// Returns true when requested asset is loaded
		static BOOL ARE_COMPOSITE_LOOTABLE_ENTITY_DEF_ASSETS_LOADED(Hash asset)
		{
			return invoke<BOOL>(0x5E5D96BE25E9DF68, asset);
		} // 0x5E5D96BE25E9DF68 undefined b1207
		// groundSetting: 0: spawn on ground, 2 (1?): do not spawn on ground
		// p7: -1 in R* Scripts
		// Returns compositeId
		static int CREATE_HERB_COMPOSITES_(Hash asset, float x, float y, float z, float heading, int groundSetting, Any* p6, int p7)
		{
			return invoke<int>(0x5B4BBE80AD5972DC, asset, x, y, z, heading, groundSetting, p6, p7);
		} // 0x5B4BBE80AD5972DC undefined b1207
		// Params: p1 is always false except in script nb_egg_protector
		static void DELETE_PATCH_OBJECTS_FROM_HERB_COMPOSITES_(int compositeId, BOOL p1)
		{
			invoke<int>(0x5758B1EE0C3FD4AC, compositeId, p1);
		} // 0x5758B1EE0C3FD4AC undefined b1207
		// Flowers, Stalks or whatever the composite has
		static int GET_HERB_COMPOSITE_NUM_ENTITIES_(int compositeId, Any* outEntities)
		{
			return invoke<int>(0x96C6ED22FB742C3E, compositeId, outEntities);
		} // 0x96C6ED22FB742C3E undefined b1207
		static Any N0xDF56A2B50C04DEA4(Any p0, Any p1)
		{
			return invoke<Any>(0xDF56A2B50C04DEA4, p0, p1);
		} // 0xDF56A2B50C04DEA4 undefined b1207
		static void TASK_LOOT_ENTITY(Ped ped, Entity entity)
		{
			invoke<int>(0x48FAE038401A2888, ped, entity);
		} // 0x48FAE038401A2888 undefined b1207
		static void TASK_BREAK_VEHICLE_DOOR_LOCK(Ped ped, Vehicle vehicle)
		{
			invoke<int>(0xBB28D1BC9EA8A6A5, ped, vehicle);
		} // 0xBB28D1BC9EA8A6A5 undefined b1207
		static void TASK_LOOT_NEAREST_ENTITY(Ped ped, float x, float y, float z, int p4, float p5)
		{
			invoke<int>(0xCF1501CBC4059412, ped, x, y, z, p4, p5);
		} // 0xCF1501CBC4059412 undefined b1207
		static void TASK_LASSO_PED(Ped ped, Ped targetPed)
		{
			invoke<int>(0xC716EB2BD16370A3, ped, targetPed);
		} // 0xC716EB2BD16370A3 undefined b1207
		static void TASK_HOGTIEABLE(Ped ped)
		{
			invoke<int>(0x6AFD8FE0D723328F, ped);
		} // 0x6AFD8FE0D723328F undefined b1207
		// getupSetHash: see nm_blend_out_sets.meta
		static void UNHOGTIE_PED(Ped ped, int flags, Hash getupSetHash, const char* p3, const char* p4, float p5)
		{
			invoke<int>(0x79559BAD83CCD038, ped, flags, getupSetHash, p3, p4, p5);
		} // 0x79559BAD83CCD038 undefined b1207
		static void N0x722D6A49200174FE(Any p0, Any p1, Any p2, Any p3, Any p4)
		{
			invoke<int>(0x722D6A49200174FE, p0, p1, p2, p3, p4);
		} // 0x722D6A49200174FE undefined b1207
		static void MAKE_OBJECT_CARRIABLE_(Object object)
		{
			invoke<int>(0x78B4567E18B54480, object);
		} // 0x78B4567E18B54480 undefined b1207
		static void MAKE_OBJECT_NOT_CARRIABLE(Object object)
		{
			invoke<int>(0x67BFCED22909834D, object);
		} // 0x67BFCED22909834D undefined b1207
		static void N0x8E1DDE26D270CC5E(Any p0, Any p1)
		{
			invoke<int>(0x8E1DDE26D270CC5E, p0, p1);
		} // 0x8E1DDE26D270CC5E undefined b1207
		static void N0xA6A76D666A281F2D(Any p0, Hash item)
		{
			invoke<int>(0xA6A76D666A281F2D, p0, item);
		} // 0xA6A76D666A281F2D undefined b1207
		static void N0xA21AA2F0C2180125(Any p0, Any p1)
		{
			invoke<int>(0xA21AA2F0C2180125, p0, p1);
		} // 0xA21AA2F0C2180125 undefined b1207
		static Hash FIND_MODEL_FOR_ITEM_(Hash item)
		{
			return invoke<Hash>(0xE47DD64B9F02677D, item);
		} // 0xE47DD64B9F02677D undefined b1207
		static void N0xFF745B0346E19E2C(Any p0)
		{
			invoke<int>(0xFF745B0346E19E2C, p0);
		} // 0xFF745B0346E19E2C undefined b1207
		static Any N0xB8F52A3F84A7CC59(Any p0)
		{
			return invoke<Any>(0xB8F52A3F84A7CC59, p0);
		} // 0xB8F52A3F84A7CC59 undefined b1207
		static void N0x6AFDA2264925BD11(Any p0)
		{
			invoke<int>(0x6AFDA2264925BD11, p0);
		} // 0x6AFDA2264925BD11 undefined b1207
		static void N0x816A3ACD265E2297(Any p0, Any p1)
		{
			invoke<int>(0x816A3ACD265E2297, p0, p1);
		} // 0x816A3ACD265E2297 undefined b1207
		static void N0x4E806A395D43A458(Any p0)
		{
			invoke<int>(0x4E806A395D43A458, p0);
		} // 0x4E806A395D43A458 undefined b1207
		static void SET_TEAM_CARRIABLE_ENTITY(Any p0, Any p1, Any p2)
		{
			invoke<int>(0x545BF19F86E80F11, p0, p1, p2);
		} // 0x545BF19F86E80F11 undefined b1207
		static BOOL IS_TEAM_CARRIABLE_ENTITY(Any p0, Any p1)
		{
			return invoke<BOOL>(0x559A6F8C5133B4EE, p0, p1);
		} // 0x559A6F8C5133B4EE undefined b1207
		// Returns true while a hat is being picked up
		// _IS_A* - _IS_D*
		static BOOL IS_HAT_BEING_PICKED_UP_(Object hatObject)
		{
			return invoke<BOOL>(0x11CD066F54DA0133, hatObject);
		} // 0x11CD066F54DA0133 undefined b1207
		static void N0x9ADDBB9242179D56(Object object, Ped ped)
		{
			invoke<int>(0x9ADDBB9242179D56, object, ped);
		} // 0x9ADDBB9242179D56 undefined b1207
		// Returns true while a hat is being picked up. Similar to 0x11CD066F54DA0133
		// _IS_A* - _IS_D*
		static BOOL IS_HAT_BEING_PICKED_UP_2_(Object hatObject)
		{
			return invoke<BOOL>(0x4ECCC2815CA79AE2, hatObject);
		} // 0x4ECCC2815CA79AE2 undefined b1207
		// _A*
		static void TASK_EQUIP_HAT_(Object hatObject, Ped ped)
		{
			invoke<int>(0xAA0AF6025160243A, hatObject, ped);
		} // 0xAA0AF6025160243A undefined b1207
		static Any N0x7CB99FADDE73CD1B(Any p0)
		{
			return invoke<Any>(0x7CB99FADDE73CD1B, p0);
		} // 0x7CB99FADDE73CD1B undefined b1311
		static void N0xF3C3503276F4A034(Entity entity, Any p1)
		{
			invoke<int>(0xF3C3503276F4A034, entity, p1);
		} // 0xF3C3503276F4A034 undefined b1436
		static Any N0x6DAC799857EF3F11(Any p0, Any p1)
		{
			return invoke<Any>(0x6DAC799857EF3F11, p0, p1);
		} // 0x6DAC799857EF3F11 undefined b1311
		static Any N0x920684BE432875B1(Any p0)
		{
			return invoke<Any>(0x920684BE432875B1, p0);
		} // 0x920684BE432875B1 undefined b1311
		// clipset: CLIPSET@MECH_HOGTIE@HUMAN@BREAKOUT_MG@GROUND, CLIPSET@MECH_HOGTIE@HUMAN@BREAKOUT_MG@SHOULDER, CLIPSET@MECH_HOGTIE@HUMAN@BREAKOUT_MG@MOUNT
		// clipset can also be 0
		static BOOL SET_ENHANCED_BREAK_FREE(Ped ped, BOOL p1, const char* clipset)
		{
			return invoke<BOOL>(0x1BF9D36A5EAFFBAE, ped, p1, clipset);
		} // 0x1BF9D36A5EAFFBAE undefined b1207
		static Any N0x6AFD84AEAA3EA538(Any p0)
		{
			return invoke<Any>(0x6AFD84AEAA3EA538, p0);
		} // 0x6AFD84AEAA3EA538 undefined b1207
		static void N0xBD1C3C0F271C39D3(Any p0, Any p1)
		{
			invoke<int>(0xBD1C3C0F271C39D3, p0, p1);
		} // 0xBD1C3C0F271C39D3 undefined b1207
		static void N0x1ECF56C040FD839C(Any p0, Any p1)
		{
			invoke<int>(0x1ECF56C040FD839C, p0, p1);
		} // 0x1ECF56C040FD839C undefined b1207
		static void N0xF40A109B4B79A848(Any p0, Any p1, Any p2)
		{
			invoke<int>(0xF40A109B4B79A848, p0, p1, p2);
		} // 0xF40A109B4B79A848 undefined b1207
		static BOOL IS_PED_LEADING_HORSE_(Ped ped)
		{
			return invoke<BOOL>(0xEFC4303DDC6E60D3, ped);
		} // 0xEFC4303DDC6E60D3 undefined b1207
		static Any N0xAC5045AB7F1A34FD(Any p0)
		{
			return invoke<Any>(0xAC5045AB7F1A34FD, p0);
		} // 0xAC5045AB7F1A34FD undefined b1207
		static Ped GET_LED_HORSE_FROM_PED_(Ped ped)
		{
			return invoke<Ped>(0xED1F514AF4732258, ped);
		} // 0xED1F514AF4732258 undefined b1207
		static void TASK_TURN_TO_FACE_CLOSEST_PED(Ped ped, float p1, float p2, int p3)
		{
			invoke<int>(0x84179419DBDD36F2, ped, p1, p2, p3);
		} // 0x84179419DBDD36F2 undefined b1207
		static BOOL TASK_CONFRONT(Ped ped, Ped targetPed, int p2)
		{
			return invoke<BOOL>(0x3A2A2071DF5CC569, ped, targetPed, p2);
		} // 0x3A2A2071DF5CC569 undefined b1207
		static BOOL TASK_POLICE(Ped ped, BOOL p1)
		{
			return invoke<BOOL>(0x87BE56724650408E, ped, p1);
		} // 0x87BE56724650408E undefined b1207
		// Params: p2: AR_TAKEDOWN_FRONT, AR_EXECUTION_FRONT, 0 in R* Scripts
		static BOOL TASK_MELEE(Ped ped, Ped targetPed, Hash p2, Any p3, Any p4, float p5, Any p6, float p7)
		{
			return invoke<BOOL>(0x482C99D0B38D1B0A, ped, targetPed, p2, p3, p4, p5, p6, p7);
		} // 0x482C99D0B38D1B0A undefined b1207
		// grappleStyle: AR_GRAPPLE_MOUNT_STANDING_FROM_FRONT, AR_GRAPPLE_MOUNT_STANDING_FROM_RIGHT, AR_GRAPPLE_MOUNT_STANDING_FROM_BACK, AR_GRAPPLE_MOUNT_STANDING_FROM_LEFT, AR_GRAPPLE_MOUNT_FROM_FRONT, AR_WOLF_EXECUTION_ENTER_FROM_BACK, AR_GRAPPLE_DRAG_FRONT_ON_ASS, AR_GRAPPLE_FRONT_FROM_LEFT_FAR, AR_BEAR_CHALLENGE_FRONT, AR_GRAPPLE_FRONT_FROM_FRONT, AR_GRAPPLE_MOUNT_FACEUP_FROM_FRONT
		static BOOL TASK_GRAPPLE(Ped ped, Ped targetPed, Hash grappleStyle, int p3, float p4, int p5, int p6)
		{
			return invoke<BOOL>(0x779A2FFACEFAEA7B, ped, targetPed, grappleStyle, p3, p4, p5, p6);
		} // 0x779A2FFACEFAEA7B undefined b1207
		static BOOL TASK_INTIMIDATED_(Any p0, Any p1, Any p2, Any p3, Any p4)
		{
			return invoke<BOOL>(0x648B75D44930D6BD, p0, p1, p2, p3, p4);
		} // 0x648B75D44930D6BD undefined b1207
		static BOOL TASK_INTIMIDATED_2_(Ped victim, Ped attacker, int p2, BOOL p3, BOOL p4, BOOL everyFrame, BOOL p6, BOOL p7, int flag)
		{
			return invoke<BOOL>(0x933ACC1A1771A288, victim, attacker, p2, p3, p4, everyFrame, p6, p7, flag);
		} // 0x933ACC1A1771A288 undefined b1207
		static void N0x2948235DB2058E99(Any p0, Any p1)
		{
			invoke<int>(0x2948235DB2058E99, p0, p1);
		} // 0x2948235DB2058E99 undefined b1207
		static void N0xB2F47A1AFDFCC595(Any p0, Any p1)
		{
			invoke<int>(0xB2F47A1AFDFCC595, p0, p1);
		} // 0xB2F47A1AFDFCC595 undefined b1207
		// _SET_PED_*
		static void N0x41D1331AFAD5A091(Ped ped, int p1, Any p2)
		{
			invoke<int>(0x41D1331AFAD5A091, ped, p1, p2);
		} // 0x41D1331AFAD5A091 undefined b1207
		static void N0x801BD27403F3CBA0(Any p0, Any p1, Any p2, Any p3)
		{
			invoke<int>(0x801BD27403F3CBA0, p0, p1, p2, p3);
		} // 0x801BD27403F3CBA0 undefined b1207
		static void N0x0FE797DD9F70DFA6(Any p0, Any p1, Any p2, Any p3)
		{
			invoke<int>(0x0FE797DD9F70DFA6, p0, p1, p2, p3);
		} // 0x0FE797DD9F70DFA6 undefined b1207
		static void TASK_PERSISTENT_CHARACTER(Ped ped)
		{
			invoke<int>(0x4391700CBD89C3D8, ped);
		} // 0x4391700CBD89C3D8 undefined b1207
		static void N0xFC7F71CF49F70B6B(Any p0)
		{
			invoke<int>(0xFC7F71CF49F70B6B, p0);
		} // 0xFC7F71CF49F70B6B undefined b1207
		static void N0xE01F55B2896F6B37(Any p0, Any p1)
		{
			invoke<int>(0xE01F55B2896F6B37, p0, p1);
		} // 0xE01F55B2896F6B37 undefined b1207
		static Any N0xE62754D09354F6CF(Any p0)
		{
			return invoke<Any>(0xE62754D09354F6CF, p0);
		} // 0xE62754D09354F6CF undefined b1207
		static void N0x4BA972D0E5AD8122(Any p0, Any p1)
		{
			invoke<int>(0x4BA972D0E5AD8122, p0, p1);
		} // 0x4BA972D0E5AD8122 undefined b1207
		// Fishing Research: https://pastebin.com/NmK5ZLVs
		// Only used in R* Scripts fishing_core and av_fishing_river
		static BOOL GET_TASK_FISHING_(Ped ped, Any* p1)
		{
			return invoke<BOOL>(0xF3735ACD11ACD500, ped, p1);
		} // 0xF3735ACD11ACD500 undefined b1207
		// Only used in R* Scripts fishing_core and av_fishing_river
		static BOOL SET_TASK_FISHING_(Ped ped, Any* p1)
		{
			return invoke<BOOL>(0xF3735ACD11ACD501, ped, p1);
		} // 0xF3735ACD11ACD501 undefined b1207
		// Baits: see 0x9B0C7FA063E67629
		static void TASK_SWAP_FISHING_BAIT(Ped ped, const char* bait, BOOL withoutBuoy)
		{
			invoke<int>(0x2C28AC30A72722DA, ped, bait, withoutBuoy);
		} // 0x2C28AC30A72722DA undefined b1207
		// Baits: p_fishHook02x, p_baitBread01x, p_baitCorn01x, p_baitCheese01x, p_baitWorm01x, p_baitCricket01x, p_crawdad01x, p_finisheDragonfly01x, p_finisdFishlure01x, p_finishdCrawd01x, p_finisheDragonflyLegendary01x, p_finisdFishlureLegendary01x, p_finishdCrawdLegendary01x, p_lgoc_spinner_v4
		static void SET_FISHING_BAIT_(Ped ped, const char* bait, BOOL withoutBuoy, BOOL instantly)
		{
			invoke<int>(0x9B0C7FA063E67629, ped, bait, withoutBuoy, instantly);
		} // 0x9B0C7FA063E67629 undefined b1207
		static void N0x1F298C7BD30D1240(Ped ped)
		{
			invoke<int>(0x1F298C7BD30D1240, ped);
		} // 0x1F298C7BD30D1240 undefined b1207
		static void PED_FISHINGROD_HOOK_ENTITY_(Ped ped, Entity entity)
		{
			invoke<int>(0x1A52076D26E09004, ped, entity);
		} // 0x1A52076D26E09004 undefined b1207
		// Used with 'P_BODYPARTARMFLOAT02X' model in fishing_core.c
		static void PED_FISHINGROD_HOOK_OBJECT_(Ped ped, Object object)
		{
			invoke<int>(0xCE71C2F9BAA3F975, ped, object);
		} // 0xCE71C2F9BAA3F975 undefined b1207
		static BOOL N0xB520DBDA7FCF573F(Ped ped)
		{
			return invoke<BOOL>(0xB520DBDA7FCF573F, ped);
		} // 0xB520DBDA7FCF573F undefined b1207
		static void N0x31BB338F64D5C861(Ped ped, BOOL p1)
		{
			invoke<int>(0x31BB338F64D5C861, ped, p1);
		} // 0x31BB338F64D5C861 undefined b1207
		static void N0x517D01BF27B682D1(Ped ped, Entity entity, float p2, float p3, float p4, float p5, int p6)
		{
			invoke<int>(0x517D01BF27B682D1, ped, entity, p2, p3, p4, p5, p6);
		} // 0x517D01BF27B682D1 undefined b1207
		static void N0x88FD60D846D9CD63(Ped ped)
		{
			invoke<int>(0x88FD60D846D9CD63, ped);
		} // 0x88FD60D846D9CD63 undefined b1207
		static void N0x9050DF2C53801208(Ped ped, float p1)
		{
			invoke<int>(0x9050DF2C53801208, ped, p1);
		} // 0x9050DF2C53801208 undefined b1207
		static void N0x22CDBF317C40A122(Ped ped)
		{
			invoke<int>(0x22CDBF317C40A122, ped);
		} // 0x22CDBF317C40A122 undefined b1207
		static Any N0x5952DFA38FA529FE()
		{
			return invoke<Any>(0x5952DFA38FA529FE);
		} // 0x5952DFA38FA529FE undefined b1232
		// https://github.com/femga/rdr3_discoveries/blob/master/animations/kit_emotes_list.lua
		// emote: https://alloc8or.re/rdr3/doc/enums/eEmote.txt
		//
		// enum eEmoteType
		// {
		// 	EMOTE_TYPE_INVALID = -1,
		// 	EMOTE_TYPE_REACT,
		// 	EMOTE_TYPE_ACTION,
		// 	EMOTE_TYPE_TAUNT,
		// 	EMOTE_TYPE_GREET,
		// 	EMOTE_TYPE_TWIRL_GUN,
		// 	EMOTE_TYPE_DANCE_FLOOR
		// };
		//
		// enum eEmotePlaybackMode
		// {
		// 	EMOTE_PM_INVALID = -1,
		// 	EMOTE_PM_UPPERBODY,
		// 	EMOTE_PM_UPPERBODY_LOOP,
		// 	EMOTE_PM_FULLBODY,
		// };
		static void TASK_PLAY_EMOTE_WITH_HASH(Ped ped, int emoteType, int playbackMode, Hash emote, BOOL isSecondaryTask, BOOL canBreakOut, BOOL disableEarlyOutAnimTag, BOOL ignoreInvalidMainTask, BOOL destroyProps)
		{
			invoke<int>(0xB31A277C1AC7B7FF, ped, emoteType, playbackMode, emote, isSecondaryTask, canBreakOut, disableEarlyOutAnimTag, ignoreInvalidMainTask, destroyProps);
		} // 0xB31A277C1AC7B7FF undefined b1207
		// Similar to 0xB31A277C1AC7B7FF but checks if the ped's inventory contains the specified emote kit.
		static void TASK_PLAY_EMOTE_(Ped ped, int emoteType, int playbackMode, Hash emote, BOOL isSecondaryTask, BOOL canBreakOut, BOOL disableEarlyOutAnimTag, BOOL ignoreInvalidMainTask, BOOL destroyProps)
		{
			invoke<int>(0x884E3436CC1F41DD, ped, emoteType, playbackMode, emote, isSecondaryTask, canBreakOut, disableEarlyOutAnimTag, ignoreInvalidMainTask, destroyProps);
		} // 0x884E3436CC1F41DD undefined b1207
		static void N0x6A1AF481407BF6E9(Any p0)
		{
			invoke<int>(0x6A1AF481407BF6E9, p0);
		} // 0x6A1AF481407BF6E9 undefined b1207
		static void TASK_EMOTE_OUTRO_(Ped ped)
		{
			invoke<int>(0xBDFEEB7600BCD938, ped);
		} // 0xBDFEEB7600BCD938 undefined b1207
		static void N0xEC516FE805D2CB2D(Any p0)
		{
			invoke<int>(0xEC516FE805D2CB2D, p0);
		} // 0xEC516FE805D2CB2D undefined b1207
		static void N0x59AEA4DC640814B9(Any p0, Any p1)
		{
			invoke<int>(0x59AEA4DC640814B9, p0, p1);
		} // 0x59AEA4DC640814B9 undefined b1207
		static Any N0x11C7CE1AE38911B5(Any p0)
		{
			return invoke<Any>(0x11C7CE1AE38911B5, p0);
		} // 0x11C7CE1AE38911B5 undefined b1207
		static Any N0xD0ABC4EA3B5E21A0(Any p0, Any p1)
		{
			return invoke<Any>(0xD0ABC4EA3B5E21A0, p0, p1);
		} // 0xD0ABC4EA3B5E21A0 undefined b1311
		static BOOL IS_EMOTE_TASK_RUNNING(Ped ped, Any p1)
		{
			return invoke<BOOL>(0xCF9B71C0AF824036, ped, p1);
		} // 0xCF9B71C0AF824036 undefined b1355
	}

	namespace TELEMETRY
	{
		static void TELEMETRY_SET_IS_FLOW_(BOOL toggle)
		{
			invoke<int>(0x9BEE018A63FFFAD9, toggle);
		} // 0x9BEE018A63FFFAD9 undefined b1207
		static void N0xEC0BD8736DCAF841(BOOL toggle)
		{
			invoke<int>(0xEC0BD8736DCAF841, toggle);
		} // 0xEC0BD8736DCAF841 undefined b1207
		static void TELEMETRY_MISSION_STARTED_(Any p0, Any p1, Any p2, Any p3)
		{
			invoke<int>(0x15B0CC1B36F1DE29, p0, p1, p2, p3);
		} // 0x15B0CC1B36F1DE29 undefined b1207
		static void TELEMETRY_MISSION_OVER_(Any p0, Any p1)
		{
			invoke<int>(0xD894437E12C17AEC, p0, p1);
		} // 0xD894437E12C17AEC undefined b1207
		static void TELEMETRY_MISSION_CHECKPOINT_(Any p0, Any p1, Any p2)
		{
			invoke<int>(0x8EC7890D446BD9C1, p0, p1, p2);
		} // 0x8EC7890D446BD9C1 undefined b1207
		static void TELEMETRY_PLAYER_SPAWNED_(Ped ped)
		{
			invoke<int>(0x5DA4718DF897EB25, ped);
		} // 0x5DA4718DF897EB25 undefined b1207
		// Works in MP only.
		static BOOL TELEMETRY_CREATE_UUID_(Any* uuid)
		{
			return invoke<BOOL>(0xE692D336F8A2A97F, uuid);
		} // 0xE692D336F8A2A97F undefined b1207
		static void TELEMETRY_MATCH_QUEUE_(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6)
		{
			invoke<int>(0x4C08D2B6D8BE17E4, p0, p1, p2, p3, p4, p5, p6);
		} // 0x4C08D2B6D8BE17E4 undefined b1311
		static void TELEMETRY_MATCH_STARTED_(Any* p0, Any* p1)
		{
			invoke<int>(0xF620F47B4F4A78C4, p0, p1);
		} // 0xF620F47B4F4A78C4 undefined b1207
		static void TELEMETRY_MATCH_OVER_(Any p0, Any p1, Any p2, Any p3, Any p4)
		{
			invoke<int>(0xA2058154357726BB, p0, p1, p2, p3, p4);
		} // 0xA2058154357726BB undefined b1207
		static void TELEMETRY_MATCH_VOTE_(Any* p0, Any* p1)
		{
			invoke<int>(0xEF3C68F56BAD7B69, p0, p1);
		} // 0xEF3C68F56BAD7B69 undefined b1207
		static void TELEMETRY_LOBBY_PROGRESSION_(Any p0, Any p1, Any p2, Any p3)
		{
			invoke<int>(0xECD67E9FA677CCCF, p0, p1, p2, p3);
		} // 0xECD67E9FA677CCCF undefined b1207
		static void TELEMETRY_GAME_PROGRESS_(Any p0, Any p1)
		{
			invoke<int>(0x51EC204A6E5B5A1A, p0, p1);
		} // 0x51EC204A6E5B5A1A undefined b1207
		static void TELEMETRY_HERB_PICKED_(Hash herbType)
		{
			invoke<int>(0xAE693EC3A178F6C2, herbType);
		} // 0xAE693EC3A178F6C2 undefined b1207
		static void TELEMETRY_ANIMAL_SKINNED_(Hash type, Any* items)
		{
			invoke<int>(0x7581972ADF5D699A, type, items);
		} // 0x7581972ADF5D699A undefined b1207
		static void TELEMETRY_CAMP_CREATED_(Any p0)
		{
			invoke<int>(0x565EAA726B2CE3B7, p0);
		} // 0x565EAA726B2CE3B7 undefined b1207
		static void TELEMETRY_CAMP_SUPPLIES_(Any p0, Any p1, Any p2, Any p3, Any p4)
		{
			invoke<int>(0x217F47761376E16E, p0, p1, p2, p3, p4);
		} // 0x217F47761376E16E undefined b1207
		static void TELEMETRY_REGION_(Hash regionHash)
		{
			invoke<int>(0xCD6F8A0335D821F9, regionHash);
		} // 0xCD6F8A0335D821F9 undefined b1207
		static void TELEMETRY_SHOP_ENTRY_(Any shopType, Any shopRegion, Any region, Any p3, Any p4, Any p5)
		{
			invoke<int>(0x775B2ED944E44973, shopType, shopRegion, region, p3, p4, p5);
		} // 0x775B2ED944E44973 undefined b1207
		static void TELEMETRY_SHOP_EXIT_(Any p0, Any p1)
		{
			invoke<int>(0xF78E669FDC202E73, p0, p1);
		} // 0xF78E669FDC202E73 undefined b1207
		static void TELEMETRY_SET_SHOP_FOR_TRANSACTION_(int transactionId, Hash p1, Hash p2)
		{
			invoke<int>(0xCA9E42F437625A85, transactionId, p1, p2);
		} // 0xCA9E42F437625A85 undefined b1232
		static void TELEMETRY_SHOP_PURCHASE_(Any p0, Any p1, Any p2, Any p3, Any p4)
		{
			invoke<int>(0x2A374E6F0075EE81, p0, p1, p2, p3, p4);
		} // 0x2A374E6F0075EE81 undefined b1207
		static void TELEMETRY_SHOP_SELL_(Any p0, Any p1, Any p2, Any p3, int centSalePrice)
		{
			invoke<int>(0x9BD8A9D0A774A6F8, p0, p1, p2, p3, centSalePrice);
		} // 0x9BD8A9D0A774A6F8 undefined b1207
		static void TELEMETRY_GOLD_STORE_(Any p0, Any p1, Any p2, Any p3)
		{
			invoke<int>(0x536B6025E94AC48F, p0, p1, p2, p3);
		} // 0x536B6025E94AC48F undefined b1207
		static void CLEAR_TELEMETRY_SHOP_UI_()
		{
			invoke<int>(0x32D5898C4898CD95);
		} // 0x32D5898C4898CD95 undefined b1207
		static void TELEMETRY_SHOP_CUTSCENE_(Any p0, Any p1, Any p2, Any p3)
		{
			invoke<int>(0xB0B19B56697836F5, p0, p1, p2, p3);
		} // 0xB0B19B56697836F5 undefined b1311
		static void TELEMETRY_AMBIENT_VIGNETTE_(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6)
		{
			invoke<int>(0x3145044F3990D321, p0, p1, p2, p3, p4, p5, p6);
		} // 0x3145044F3990D321 undefined b1207
		static void TELEMETRY_DISCOVERABLE_(Any p0)
		{
			invoke<int>(0xF5EAD898EF387E73, p0);
		} // 0xF5EAD898EF387E73 undefined b1207
		static void TELEMETRY_HONOR_(Any p0, Any p1)
		{
			invoke<int>(0xE6B763C7F4902201, p0, p1);
		} // 0xE6B763C7F4902201 undefined b1207
		static void TELEMETRY_CRAFT_ITEM_(Any p0, Any p1, Any p2, Any quantity)
		{
			invoke<int>(0x78C2E029DB205A3A, p0, p1, p2, quantity);
		} // 0x78C2E029DB205A3A undefined b1207
		static void TELEMETRY_CAMP_DONATE(Any transactionId, Any p1, Any p2, Any p3, Any p4, Hash slotId, Hash p6, Any p7, BOOL p8)
		{
			invoke<int>(0xDF516E598D966D06, transactionId, p1, p2, p3, p4, slotId, p6, p7, p8);
		} // 0xDF516E598D966D06 undefined b1207
		static void TELEMETRY_MOONSHINE_BREW_(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9, Any p10)
		{
			invoke<int>(0xB5013EFBB5516867, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
		} // 0xB5013EFBB5516867 undefined b1232
		static void TELEMETRY_COLLECT_(Any transactionId, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6)
		{
			invoke<int>(0xD6CB05DDAEE43AFD, transactionId, p1, p2, p3, p4, p5, p6);
		} // 0xD6CB05DDAEE43AFD undefined b1207
		static void TELEMETRY_MISSION_ILO_OPTION_(Any p0, Any p1)
		{
			invoke<int>(0xEA323F5E1A4DA2F1, p0, p1);
		} // 0xEA323F5E1A4DA2F1 undefined b1207
		// _TELEMETRY_C* - _TELEMETRY_G*
		static void TELEMETRY_MISSION_FAILED_TO_LAUNCH_(Any p0, Any p1, float x, float y, float z, int reason)
		{
			invoke<int>(0x6571E4327390EC0B, p0, p1, x, y, z, reason);
		} // 0x6571E4327390EC0B undefined b1207
		static void TELEMETRY_GANG_SHARES_(Any p0, Any p1, Any p2, Any p3)
		{
			invoke<int>(0xE6DC9B21AC7A8729, p0, p1, p2, p3);
		} // 0xE6DC9B21AC7A8729 undefined b1207
		static void TELEMETRY_FAST_TRAVEL_(Any p0, Any p1, Any p2, Any p3, Any p4)
		{
			invoke<int>(0x7CEF4AC79F7E7FAD, p0, p1, p2, p3, p4);
		} // 0x7CEF4AC79F7E7FAD undefined b1207
		static void TELEMETRY_NET_CAMP_(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6)
		{
			invoke<int>(0xA72773C3134F9A57, p0, p1, p2, p3, p4, p5, p6);
		} // 0xA72773C3134F9A57 undefined b1207
		// Creation of the metric is related to attribute filling, i. e. at camp fires, when the ped is resting.
		// _TELEMETRY_C* - _TELEMETRY_P*
		static void TELEMETRY_RPG_GLOBAL_CALCULATE_ATTRIBUTE_CORE_DELTA_()
		{
			invoke<int>(0x7E002A36AEFCFB55);
		} // 0x7E002A36AEFCFB55 undefined b1207
		static void TELEMETRY_SLEEP_(Any p0)
		{
			invoke<int>(0xF9F14080D80937BD, p0);
		} // 0xF9F14080D80937BD undefined b1207
		static void TELEMETRY_PARLEY_FEUD_(Any p0, Any p1, Any p2, Any p3, Any p4)
		{
			invoke<int>(0xF37A2149BC9A8A27, p0, p1, p2, p3, p4);
		} // 0xF37A2149BC9A8A27 undefined b1207
		static void TELEMETRY_PLAYER_MENU_PIN(Any p0, Any p1, Any p2, Any p3)
		{
			invoke<int>(0x076C5843371EB889, p0, p1, p2, p3);
		} // 0x076C5843371EB889 undefined b1311
		static void TELEMETRY_NOTORIETY_(Any p0, Any p1, Any p2, Any p3)
		{
			invoke<int>(0xE26970A7AE0F28E9, p0, p1, p2, p3);
		} // 0xE26970A7AE0F28E9 undefined b1207
		static void TELEMETRY_DEFENSIVE_(Any p0, Any p1, Any p2)
		{
			invoke<int>(0xE57529D23541D2DD, p0, p1, p2);
		} // 0xE57529D23541D2DD undefined b1207
		static void TELEMETRY_LOOT_(Any p0, Any p1, Any p2, Any p3)
		{
			invoke<int>(0xCF63EF77B0DF0397, p0, p1, p2, p3);
		} // 0xCF63EF77B0DF0397 undefined b1207
		static void TELEMETRY_EMOTE_ADD_CATEGORY_TO_SAVE_(Any p0, Any p1, Hash emote)
		{
			invoke<int>(0x2C24AF8EEEEF8A55, p0, p1, emote);
		} // 0x2C24AF8EEEEF8A55 undefined b1207
		static void TELEMETRY_FAVOR_EMOTE_(Any p0, Any p1, Any p2)
		{
			invoke<int>(0x16B23D4F7A1F50D9, p0, p1, p2);
		} // 0x16B23D4F7A1F50D9 undefined b1207
		static void TELEMETRY_POKER_OVER_(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9)
		{
			invoke<int>(0x8127C5AA05C5A210, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
		} // 0x8127C5AA05C5A210 undefined b1207
		// Returns false when transaction request is failing
		static BOOL TELEMETRY_TRIGGER_TRANSACTION_REQUEST_(Any* requestId, Any* transactionId)
		{
			return invoke<BOOL>(0x80A02D9F948A8BCA, requestId, transactionId);
		} // 0x80A02D9F948A8BCA undefined b1207
		static BOOL TRY_GET_TELEMETRY_ID_FROM_TRANSACTION_ID_(Any* transactionId, Any* requestId)
		{
			return invoke<BOOL>(0xF184B3ECE36219CF, transactionId, requestId);
		} // 0xF184B3ECE36219CF undefined b1207
		static void TELEMETRY_ROLE_BOUNTY_(Any p0)
		{
			invoke<int>(0xAB43D1C80B5E9500, p0);
		} // 0xAB43D1C80B5E9500 undefined b1207
		static void TELEMETRY_BOUNTY_TARGET_(Any* data)
		{
			invoke<int>(0x52FA31DB8F3AD25D, data);
		} // 0x52FA31DB8F3AD25D undefined b1207
		static void TELEMETRY_PRISON_(Any transactionId, Any bountyAmount, Ped ped, Any completionType, Any jailTimeServed, Any jailTimeLeft, Any posseRole)
		{
			invoke<int>(0xB204BF9F30298D77, transactionId, bountyAmount, ped, completionType, jailTimeServed, jailTimeLeft, posseRole);
		} // 0xB204BF9F30298D77 undefined b1207
		static void TELEMETRY_ROLE_TRADER_(Any p0, Any transactionId)
		{
			invoke<int>(0x476038B5A0734C10, p0, transactionId);
		} // 0x476038B5A0734C10 undefined b1207
		static void TELEMETRY_ROLE_MOONSHINER_(Any p0, Any transactionId)
		{
			invoke<int>(0x99D40C5D74BC88E9, p0, transactionId);
		} // 0x99D40C5D74BC88E9 undefined b1232
		static void TELEMETRY_ROLE_COLLECTOR_(Any transactionId, Any collectible, Any category, Any p3, Any p4, Any p5, Any p6)
		{
			invoke<int>(0x4AC38DFD286DAD14, transactionId, collectible, category, p3, p4, p5, p6);
		} // 0x4AC38DFD286DAD14 undefined b1207
		static void TELEMETRY_PHOTO_(Any p0, Any p1, Any p2, Any p3)
		{
			invoke<int>(0xED22BE4C5A399E63, p0, p1, p2, p3);
		} // 0xED22BE4C5A399E63 undefined b1207
		static void TELEMETRY_START_GUN_LOCKER_INTERACTION_()
		{
			invoke<int>(0xF0D54E0651DD7E07);
		} // 0xF0D54E0651DD7E07 undefined b1207
		static void TELEMETRY_GUN_LOCKER_()
		{
			invoke<int>(0x415FE28ED44BFF14);
		} // 0x415FE28ED44BFF14 undefined b1207
		static void TELEMETRY_GUN_LOCKER_WEAPON_STORED_(Hash p0)
		{
			invoke<int>(0xC3ADF4880784FA9C, p0);
		} // 0xC3ADF4880784FA9C undefined b1207
		static void TELEMETRY_GUN_LOCKER_WEAPON_REMOVED_(Hash p0)
		{
			invoke<int>(0x317D9C9560529CC2, p0);
		} // 0x317D9C9560529CC2 undefined b1207
		static void TELEMETRY_ROLE_TOKEN_TRANSACTION_(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5)
		{
			invoke<int>(0x32C2939564D74BFF, p0, p1, p2, p3, p4, p5);
		} // 0x32C2939564D74BFF undefined b1207
		static void TELEMETRY_COUPON_(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5)
		{
			invoke<int>(0x621D719C4836292B, p0, p1, p2, p3, p4, p5);
		} // 0x621D719C4836292B undefined b1232
		static void TELEMETRY_PERSONAL_VEHICLE_MOUNT(Any p0, Any p1, Any p2, Any p3)
		{
			invoke<int>(0xFF9052BC7A3B7D33, p0, p1, p2, p3);
		} // 0xFF9052BC7A3B7D33 undefined b1207
		static void TELEMETRY_PERSONAL_VEHICLE_WAGON_(Any p0, Any p1, Any p2)
		{
			invoke<int>(0xE67AF24C5A3B6058, p0, p1, p2);
		} // 0xE67AF24C5A3B6058 undefined b1207
		static void TELEMETRY_MENU_NAVIGATION_(Any p0, Any p1, Any p2, Any p3)
		{
			invoke<int>(0x3255D4D2082C6339, p0, p1, p2, p3);
		} // 0x3255D4D2082C6339 undefined b1207
		static void TELEMETRY_HUB_NAVIGATION_(Any p0, Any p1, Any p2, Any p3)
		{
			invoke<int>(0x25CC50EC1A6F3A96, p0, p1, p2, p3);
		} // 0x25CC50EC1A6F3A96 undefined b1232
		static void TELEMETRY_HUB_OFFERS_(Any couponItem, Any p1)
		{
			invoke<int>(0x37AA282163B0D2C4, couponItem, p1);
		} // 0x37AA282163B0D2C4 undefined b1232
		static void TELEMETRY_SAMPLE_(Any transactionId, Any animal, Any p2, Any bSampled, BOOL bTranq)
		{
			invoke<int>(0x61559675D23D8BD1, transactionId, animal, p2, bSampled, bTranq);
		} // 0x61559675D23D8BD1 undefined b1311
		static void TELEMETRY_ROLE_NATURALIST_(Any transactionId, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9)
		{
			invoke<int>(0x6FB9EA308F302922, transactionId, p1, p2, p3, p4, p5, p6, p7, p8, p9);
		} // 0x6FB9EA308F302922 undefined b1311
		static void TELEMETRY_PHOTO_CAM_(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8)
		{
			invoke<int>(0x0777D65EE8A17517, p0, p1, p2, p3, p4, p5, p6, p7, p8);
		} // 0x0777D65EE8A17517 undefined b1311
		static void TELEMETRY_INTRO_SKIP_(Any p0, Any p1, Any p2)
		{
			invoke<int>(0x1B554723799245F4, p0, p1, p2);
		} // 0x1B554723799245F4 undefined b1355
		static void ANALYTICS_PLAYTIME_FREEMODE_START()
		{
			invoke<int>(0xE9F24081D84931B8);
		} // 0xE9F24081D84931B8 undefined b1207
		static void ANALYTICS_PLAYTIME_FREEMODE_END()
		{
			invoke<int>(0x3180E991D4B8F248);
		} // 0x3180E991D4B8F248 undefined b1207
		static void TELEMETRY_CUSTOM_(Any* args)
		{
			invoke<int>(0x40914CCF2A1AB531, args);
		} // 0x40914CCF2A1AB531 undefined b1207
		static void TELEMETRY_MATCH_NOMINATION_(Any* args)
		{
			invoke<int>(0x330029E121380CEB, args);
		} // 0x330029E121380CEB undefined b1355
		static void TELEMETRY_CHAR_CREATOR_(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6)
		{
			invoke<int>(0x7207AD471BC9278C, p0, p1, p2, p3, p4, p5, p6);
		} // 0x7207AD471BC9278C undefined b1355
	}

	namespace TXD
	{
		static BOOL DOES_STREAMED_TXD_EXIST(Hash txdHash)
		{
			return invoke<BOOL>(0xBA0163B277C2D2D0, txdHash);
		} // 0xBA0163B277C2D2D0 undefined b1207
		static void REQUEST_STREAMED_TXD(Hash txdHash, BOOL p1)
		{
			invoke<int>(0xDB1BD07FB464584D, txdHash, p1);
		} // 0xDB1BD07FB464584D undefined b1207
		static BOOL HAS_STREAMED_TXD_LOADED(Hash txdHash)
		{
			return invoke<BOOL>(0xBE72591D1509FFE4, txdHash);
		} // 0xBE72591D1509FFE4 undefined b1207
		static void SET_STREAMED_TXD_AS_NO_LONGER_NEEDED(Hash txdHash)
		{
			invoke<int>(0x8232F37DF762ACB2, txdHash);
		} // 0x8232F37DF762ACB2 undefined b1207
		static BOOL DOES_STREAMED_TEXTURE_DICT_EXIST(const char* textureDict)
		{
			return invoke<BOOL>(0x7332461FC59EB7EC, textureDict);
		} // 0x7332461FC59EB7EC undefined b1207
		static void REQUEST_STREAMED_TEXTURE_DICT(const char* textureDict, BOOL p1)
		{
			invoke<int>(0xC1BA29DF5631B0F8, textureDict, p1);
		} // 0xC1BA29DF5631B0F8 0x4C9B035F b1207
		static BOOL HAS_STREAMED_TEXTURE_DICT_LOADED(const char* textureDict)
		{
			return invoke<BOOL>(0x54D6900929CCF162, textureDict);
		} // 0x54D6900929CCF162 0x3F436EEF b1207
		static void SET_STREAMED_TEXTURE_DICT_AS_NO_LONGER_NEEDED(const char* textureDict)
		{
			invoke<int>(0x4ACA10A91F66F1E2, textureDict);
		} // 0x4ACA10A91F66F1E2 0xF07DDA38 b1207
	}

	namespace UIAPPS
	{
		static BOOL IS_UIAPP_ACTIVE_BY_HASH(Hash appNameHash)
		{
			return invoke<BOOL>(0x25B7A0206BDFAC76, appNameHash);
		} // 0x25B7A0206BDFAC76 undefined b1207
		static BOOL IS_ANY_UIAPP_ACTIVE()
		{
			return invoke<BOOL>(0xAC959AB99AAF3D9F);
		} // 0xAC959AB99AAF3D9F undefined b1207
		static BOOL IS_UIAPP_RUNNING_BY_HASH(Hash appNameHash)
		{
			return invoke<BOOL>(0x4E511D093A86AD49, appNameHash);
		} // 0x4E511D093A86AD49 undefined b1207
		static BOOL IS_UIAPP_RUNNING(const char* appName)
		{
			return invoke<BOOL>(0xDE4A9B35D028979F, appName);
		} // 0xDE4A9B35D028979F undefined b1232
		static BOOL IS_ANY_UIAPP_RUNNING()
		{
			return invoke<BOOL>(0xDB30BEC7A7A5CBD3);
		} // 0xDB30BEC7A7A5CBD3 undefined b1207
		static Hash GET_UIAPP_CURRENT_ACTIVITY_BY_HASH_(Hash appNameHash)
		{
			return invoke<Hash>(0x96FD694FE5BE55DC, appNameHash);
		} // 0x96FD694FE5BE55DC undefined b1207
		static void CLOSE_UIAPP_BY_HASH_(Hash appNameHash)
		{
			invoke<int>(0x2FF10C9C3F92277E, appNameHash);
		} // 0x2FF10C9C3F92277E undefined b1207
		static void CLOSE_UIAPP_BY_HASH_IMMEDIATE_(Hash appNameHash)
		{
			invoke<int>(0x04428420A248A354, appNameHash);
		} // 0x04428420A248A354 undefined b1207
		static void CLOSE_UIAPP_(const char* appName)
		{
			invoke<int>(0x818C6CA9B659E8EC, appName);
		} // 0x818C6CA9B659E8EC undefined b1207
		static void CLOSE_UIAPP_IMMEDIATE_(const char* appName)
		{
			invoke<int>(0x3015635426D1B17C, appName);
		} // 0x3015635426D1B17C undefined b1207
		static void CLOSE_ALL_UIAPPS_()
		{
			invoke<int>(0xAD7B70F7230C5A12);
		} // 0xAD7B70F7230C5A12 undefined b1207
		static void CLOSE_ALL_UIAPPS_IMMEDIATE_()
		{
			invoke<int>(0x12769EEB8DBD7A7B);
		} // 0x12769EEB8DBD7A7B undefined b1207
		static int LAUNCH_UIAPP_BY_HASH_WITH_ENTRY(Hash appNameHash, Hash entryHash)
		{
			return invoke<int>(0xC1BCF31E975B3195, appNameHash, entryHash);
		} // 0xC1BCF31E975B3195 undefined b1207
		static int LAUNCH_UIAPP_BY_HASH(Hash appNameHash)
		{
			return invoke<int>(0xC8FC7F4E4CF4F581, appNameHash);
		} // 0xC8FC7F4E4CF4F581 undefined b1207
		static int LAUNCH_UIAPP_WITH_ENTRY(const char* appName, const char* entry)
		{
			return invoke<int>(0x7B2027BAC5C8EC89, appName, entry);
		} // 0x7B2027BAC5C8EC89 undefined b1207
		static BOOL CAN_LAUNCH_UIAPP_BY_HASH_WITH_ENTRY(Hash appNameHash, Hash entryHash)
		{
			return invoke<BOOL>(0x16F47D434B6086BF, appNameHash, entryHash);
		} // 0x16F47D434B6086BF undefined b1207
		static BOOL CAN_LAUNCH_UIAPP_BY_HASH(Hash appNameHash)
		{
			return invoke<BOOL>(0xE555EC27D65EDE80, appNameHash);
		} // 0xE555EC27D65EDE80 undefined b1207
		static BOOL REQUEST_UIAPP_TRANSITION_BY_HASH(Hash appNameHash, Hash transitionHash)
		{
			return invoke<BOOL>(0x7689CD255655BFD7, appNameHash, transitionHash);
		} // 0x7689CD255655BFD7 undefined b1207
		static BOOL IS_UIAPP_TRANSITIONING_BY_HASH(Hash appNameHash)
		{
			return invoke<BOOL>(0x42095B886D30DE66, appNameHash);
		} // 0x42095B886D30DE66 undefined b1232
	}

	namespace UIDEBUG
	{
		// Note: you must use VAR_STRING
		static void BG_DISPLAY_TEXT_(const char* text, float x, float y)
		{
			invoke<int>(0x16794E044C9EFB58, text, x, y);
		} // 0x16794E044C9EFB58 undefined b1355
		static void BG_SET_TEXT_SCALE_(float scaleX, float scaleY)
		{
			invoke<int>(0xA1253A3C870B6843, scaleX, scaleY);
		} // 0xA1253A3C870B6843 undefined b1355
		// https://github.com/femga/rdr3_discoveries/tree/master/useful_info_from_rpfs/colours
		static void BG_SET_TEXT_COLOR_(int red, int green, int blue, int alpha)
		{
			invoke<int>(0x16FA5CE47F184F1E, red, green, blue, alpha);
		} // 0x16FA5CE47F184F1E undefined b1355
	}

	namespace UIEVENTS
	{
		// Old name: _EVENT_MANAGER_IS_EVENT_PENDING
		static BOOL EVENTS_UI_IS_PENDING(Hash hash)
		{
			return invoke<BOOL>(0x67ED5A7963F2F722, hash);
		} // 0x67ED5A7963F2F722 undefined b1207
		// eventData:
		// struct UI_SCRIPT_EVENT
		// {
		// 	alignas(8) eUIScriptEventType eventType; // https://alloc8or.re/rdr3/doc/enums/eUIScriptEventType.txt
		// 	alignas(8) int intParam;
		// 	alignas(8) Hash hashParam;
		// 	alignas(8) Hash datastoreParam;
		// };
		//
		// Old name: _EVENT_MANAGER_GET_EVENT
		static BOOL EVENTS_UI_GET_MESSAGE(Hash hash, Any* eventData)
		{
			return invoke<BOOL>(0xE24E957294241444, hash, eventData);
		} // 0xE24E957294241444 undefined b1207
		// eventData: see EVENTS_UI_GET_MESSAGE
		//
		// Old name: _EVENT_MANAGER_PEEK_EVENT
		static BOOL EVENTS_UI_PEEK_MESSAGE(Hash hash, Any* eventData)
		{
			return invoke<BOOL>(0x90237103F27F7937, hash, eventData);
		} // 0x90237103F27F7937 undefined b1207
		// Old name: _EVENT_MANAGER_POP_EVENT
		static void EVENTS_UI_POP_MESSAGE(Hash hash)
		{
			invoke<int>(0x8E8A2369F48EC839, hash);
		} // 0x8E8A2369F48EC839 undefined b1207
	}

	namespace UIFEED
	{
		// Example : https://pastebin.com/GvdBp8Dh
		static int UI_FEED_POST_HELP_TEXT_(Any* p0, Any* p1, BOOL p2)
		{
			return invoke<int>(0x049D5C615BD38BAD, p0, p1, p2);
		} // 0x049D5C615BD38BAD undefined b1207
		// Example : https://pastebin.com/h1YzycuR
		static int UI_FEED_POST_LOCATION_SHARD_(Any* duration, Any* data, BOOL p2, BOOL p3)
		{
			return invoke<int>(0xD05590C1AB38F068, duration, data, p2, p3);
		} // 0xD05590C1AB38F068 undefined b1207
		// Example : https://pastebin.com/13tuRa63
		static int UI_FEED_POST_OBJECTIVE_(Any* p0, Any* p1, BOOL p2)
		{
			return invoke<int>(0xCEDBF17EFCC0E4A4, p0, p1, p2);
		} // 0xCEDBF17EFCC0E4A4 undefined b1207
		// Display text on right of the screen, Example : https://pastebin.com/n1YmNe25
		static int UI_FEED_POST_FEED_TICKER_(Any* p0, Any* p1, BOOL p2)
		{
			return invoke<int>(0xB2920B9760F0F36B, p0, p1, p2);
		} // 0xB2920B9760F0F36B undefined b1207
		// Example : https://pastebin.com/YZMBkAmW
		static int UI_FEED_POST_SAMPLE_TOAST_(Any* p0, Any* p1, BOOL p2, BOOL p3)
		{
			return invoke<int>(0x26E87218390E6729, p0, p1, p2, p3);
		} // 0x26E87218390E6729 undefined b1207
		static int N0xAFF5BE9BA496CE40(Any* p0, Any* p1, BOOL p2, BOOL p3, Hash collectableCategory)
		{
			return invoke<int>(0xAFF5BE9BA496CE40, p0, p1, p2, p3, collectableCategory);
		} // 0xAFF5BE9BA496CE40 undefined b1207
		static int UI_FEED_POST_SAMPLE_TOAST_WITH_APP_LINK_(Any* p0, Any* p1, BOOL p2, BOOL p3, BOOL p4)
		{
			return invoke<int>(0x38838A646FB30AAE, p0, p1, p2, p3, p4);
		} // 0x38838A646FB30AAE undefined b1311
		// Example : https://pastebin.com/kAtEMQTD
		static int UI_FEED_POST_SAMPLE_NOTIFICATION_(Any* p0, Any* p1, int p2, int p3)
		{
			return invoke<int>(0xC927890AA64E9661, p0, p1, p2, p3);
		} // 0xC927890AA64E9661 undefined b1207
		static int UI_FEED_POST_RANKUP_TOAST_(Any* p0, Any* p1, int p2, int p3)
		{
			return invoke<int>(0x3F9FDDBA79117C69, p0, p1, p2, p3);
		} // 0x3F9FDDBA79117C69 undefined b1207
		// Only used in R* SP Scripts
		static int N0x18D6869FBFFEC0F8(Any* p0, Any* p1, BOOL p2, BOOL p3)
		{
			return invoke<int>(0x18D6869FBFFEC0F8, p0, p1, p2, p3);
		} // 0x18D6869FBFFEC0F8 undefined b1207
		static int UI_FEED_POST_SAMPLE_TOAST_RIGHT_(Any* p0, Any* p1, BOOL p2)
		{
			return invoke<int>(0xB249EBCB30DD88E0, p0, p1, p2);
		} // 0xB249EBCB30DD88E0 undefined b1207
		static int UI_FEED_POST_MISSION_NAME_(Any* p0, Any* p1, BOOL p2)
		{
			return invoke<int>(0x2024F4F333095FB1, p0, p1, p2);
		} // 0x2024F4F333095FB1 undefined b1207
		static int UI_FEED_POST_RETICLE_MESSAGE_(Any* p0, Any* p1, BOOL p2)
		{
			return invoke<int>(0x893128CDB4B81FBB, p0, p1, p2);
		} // 0x893128CDB4B81FBB undefined b1207
		static int UI_FEED_POST_ONE_TEXT_SHARD_(Any* p0, Any* p1, BOOL p2)
		{
			return invoke<int>(0x860DDFE97CC94DF0, p0, p1, p2);
		} // 0x860DDFE97CC94DF0 undefined b1207
		static int UI_FEED_POST_TWO_TEXT_SHARD_(Any* p0, Any* p1, BOOL p2, BOOL p3)
		{
			return invoke<int>(0xA6F4216AB10EB08E, p0, p1, p2, p3);
		} // 0xA6F4216AB10EB08E undefined b1207
		static int UI_FEED_POST_THREE_TEXT_SHARD_(Any* p0, Any* p1, BOOL p2, BOOL p3, BOOL p4)
		{
			return invoke<int>(0x02BCC0FE9EBA3529, p0, p1, p2, p3, p4);
		} // 0x02BCC0FE9EBA3529 undefined b1207
		static int UI_FEED_POST_GAME_UPDATE_SHARD_(Any* p0, Any* p1, BOOL p2)
		{
			return invoke<int>(0x8D1249BD28791878, p0, p1, p2);
		} // 0x8D1249BD28791878 undefined b1207
		static int UI_FEED_POST_VOICE_CHAT_FEED_(Any* p0, Any* p1, BOOL p2)
		{
			return invoke<int>(0xC48152BC6B3E821C, p0, p1, p2);
		} // 0xC48152BC6B3E821C undefined b1207
		// feedChannel: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eUIFeedChannel
		static void UI_FEED_CLEAR_CHANNEL(int feedChannel, BOOL p1, BOOL p2)
		{
			invoke<int>(0xDD1232B332CBB9E7, feedChannel, p1, p2);
		} // 0xDD1232B332CBB9E7 undefined b1207
		// Hides Toast Notifications
		static void UI_FEED_CLEAR_ALL_CHANNELS_()
		{
			invoke<int>(0x6035E8FBCA32AC5E);
		} // 0x6035E8FBCA32AC5E undefined b1207
		// Clears help text
		static void UI_FEED_CLEAR_HELP_TEXT_FEED_(int feedMessage, BOOL p1)
		{
			invoke<int>(0x2F901291EF177B02, feedMessage, p1);
		} // 0x2F901291EF177B02 undefined b1207
		static void N0x6D85126F6CCF02C9(int feedChannel, int p1, BOOL p2)
		{
			invoke<int>(0x6D85126F6CCF02C9, feedChannel, p1, p2);
		} // 0x6D85126F6CCF02C9 undefined b1207
		// Returns feedMessage
		static int N0x4E88A65968A55C78(Any* p0, BOOL p1)
		{
			return invoke<int>(0x4E88A65968A55C78, p0, p1);
		} // 0x4E88A65968A55C78 undefined b1207
		// Only used in R* SP Script beat_animal_attack
		// Returns feedMessage
		static int N0x0FD07141AD048AAE(Any* p0, BOOL p1)
		{
			return invoke<int>(0x0FD07141AD048AAE, p0, p1);
		} // 0x0FD07141AD048AAE undefined b1207
		// Returns messageState, see https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eUIMessageState
		static int UI_FEED_GET_MESSAGE_STATE_(int feedMessage)
		{
			return invoke<int>(0x59FA676177DBE4C9, feedMessage);
		} // 0x59FA676177DBE4C9 undefined b1207
		// feedChannel: see UI_FEED_CLEAR_CHANNEL
		// Returns feedMessage
		static int UI_FEED_GET_CURRENT_MESSAGE(int feedChannel)
		{
			return invoke<int>(0xC17F69E1418CD11F, feedChannel);
		} // 0xC17F69E1418CD11F undefined b1207
		static BOOL N0xB7223B91CD6B7E07(int feedChannel)
		{
			return invoke<BOOL>(0xB7223B91CD6B7E07, feedChannel);
		} // 0xB7223B91CD6B7E07 undefined b1207
	}

	namespace UILOG
	{
		static BOOL UILOG_IS_ENTRY_REGISTERED_(int p0, Hash p1)
		{
			return invoke<BOOL>(0xB8188CCF52202475, p0, p1);
		} // 0xB8188CCF52202475 undefined b1207
		static void UILOG_ADD_ENTRY_HASH_(int p0, int p1, float x, float y, float z, Hash p5, Hash p6, Any p7)
		{
			invoke<int>(0x69D5479982355D8F, p0, p1, x, y, z, p5, p6, p7);
		} // 0x69D5479982355D8F undefined b1207
		static void UILOG_ADD_ITEM_TO_TASK_LIST_(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7)
		{
			invoke<int>(0x49C63FDF69744A27, p0, p1, p2, p3, p4, p5, p6, p7);
		} // 0x49C63FDF69744A27 undefined b1207
		static void UILOG_SET_ENTRY_ICON_TEXTURE_(int p0, Hash p1, Hash icon, Hash iconDictionary)
		{
			invoke<int>(0x6965469934958D8F, p0, p1, icon, iconDictionary);
		} // 0x6965469934958D8F undefined b1207
		static void UILOG_SET_ENTRY_BRIEF_TEXTURE_(int p0, Hash p1, Hash texture, Hash textureDictionary)
		{
			invoke<int>(0x69684D9936958D8F, p0, p1, texture, textureDictionary);
		} // 0x69684D9936958D8F undefined b1207
		static void UILOG_UPDATE_ENTRY_SUBHEADER_(int p0, Hash p1, const char* p2)
		{
			invoke<int>(0x80D6524190258C3E, p0, p1, p2);
		} // 0x80D6524190258C3E undefined b1207
		static void UILOG_SET_ENTRY_PINNED_(int p0, Hash p1, BOOL p2)
		{
			invoke<int>(0x72A5CD214B342568, p0, p1, p2);
		} // 0x72A5CD214B342568 undefined b1207
		static void UILOG_MARK_MISSION_COMPLETED_(Hash p0)
		{
			invoke<int>(0xDE31D66D1E54C471, p0);
		} // 0xDE31D66D1E54C471 undefined b1207
		static void UILOG_MARK_ENTRY_AVAILABILITY_(int p0, Hash p1, int p2, const char* p3)
		{
			invoke<int>(0x13E8D7DD08543482, p0, p1, p2, p3);
		} // 0x13E8D7DD08543482 undefined b1207
		static void UILOG_MARK_ALL_ENTRIES_AVAILABILITY_(int p0, const char* p1)
		{
			invoke<int>(0x3920574CF0A2B7B6, p0, p1);
		} // 0x3920574CF0A2B7B6 undefined b1207
		static void UILOG_REMOVE_ENTRY_(int p0, Hash p1)
		{
			invoke<int>(0xD594A19BE09A75C6, p0, p1);
		} // 0xD594A19BE09A75C6 undefined b1207
		static void UILOG_SET_DISPLAY_COMPLETION_RATING_(int logEntryType, Hash p1, BOOL p2)
		{
			invoke<int>(0xA31013798FADCADC, logEntryType, p1, p2);
		} // 0xA31013798FADCADC undefined b1207
		static void N0xA49D6D503E3EA847(Any p0, Any p1, Any p2, Any p3, Any p4)
		{
			invoke<int>(0xA49D6D503E3EA847, p0, p1, p2, p3, p4);
		} // 0xA49D6D503E3EA847 undefined b1207
		static void N0x763637F9B838B0A7(int p0, Hash p1, const char* p2)
		{
			invoke<int>(0x763637F9B838B0A7, p0, p1, p2);
		} // 0x763637F9B838B0A7 undefined b1207
		static void UILOG_CLEAR_ALL_ENTRIES_()
		{
			invoke<int>(0xB95B4EA6B1EDF035);
		} // 0xB95B4EA6B1EDF035 undefined b1207
		static void UILOG_ADD_OR_UPDATE_OBJECTIVE_(int p0, Hash p1, Hash p2, const char* p3, BOOL p4, BOOL p5, BOOL p6)
		{
			invoke<int>(0xB43163388484CC87, p0, p1, p2, p3, p4, p5, p6);
		} // 0xB43163388484CC87 undefined b1207
		static void N0xA20398536B7F1134(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5)
		{
			invoke<int>(0xA20398536B7F1134, p0, p1, p2, p3, p4, p5);
		} // 0xA20398536B7F1134 undefined b1207
		static void UILOG_SET_CACHED_OBJECTIVE_(const char* p0)
		{
			invoke<int>(0xFA233F8FE190514C, p0);
		} // 0xFA233F8FE190514C undefined b1207
		static void UILOG_CLEAR_CACHED_OBJECTIVE_()
		{
			invoke<int>(0xDFF0D417277B41F8);
		} // 0xDFF0D417277B41F8 undefined b1207
		static BOOL UILOG_HAS_DISPLAYED_CACHED_OBJECTIVE_()
		{
			return invoke<BOOL>(0xCC48FFBB45B54F71);
		} // 0xCC48FFBB45B54F71 undefined b1207
		static void UILOG_CLEAR_HAS_DISPLAYED_CACHED_OBJECTIVE_()
		{
			invoke<int>(0xA3108D6981A5CADB);
		} // 0xA3108D6981A5CADB undefined b1207
		static void UILOG_SET_HAS_DISPLAYED_CACHED_OBJECTIVE_()
		{
			invoke<int>(0xA3108D6981A5CADC);
		} // 0xA3108D6981A5CADC undefined b1207
		static const char* UILOG_GET_CACHED_OBJECTIVE_()
		{
			return invoke<const char*>(0x15A4461BEB788096);
		} // 0x15A4461BEB788096 undefined b1207
		static void UILOG_PRINT_CACHED_OBJECTIVE_()
		{
			invoke<int>(0xE9990552DEC71600);
		} // 0xE9990552DEC71600 undefined b1207
		static Any UILOG_SET_PENDING_DETAILS_ID_(int p0, Hash p1)
		{
			return invoke<Any>(0x136A027CF37B0A4F, p0, p1);
		} // 0x136A027CF37B0A4F undefined b1207
		static Any N0x2A4765812202E671()
		{
			return invoke<Any>(0x2A4765812202E671);
		} // 0x2A4765812202E671 undefined b1207
		static void UILOG_ADD_TOTAL_TAKE_ENTRY_(Hash p0, Hash p1, const char* p2, const char* p3, Hash p4)
		{
			invoke<int>(0x60C59968E8E87E6B, p0, p1, p2, p3, p4);
		} // 0x60C59968E8E87E6B undefined b1207
		static void UILOG_SET_TOTAL_TAKE_SUMMARY_(const char* p0, const char* p1)
		{
			invoke<int>(0xD106B211EF1B8F04, p0, p1);
		} // 0xD106B211EF1B8F04 undefined b1207
		static int UILOG_POST_NOTIFICATION_(Any* data)
		{
			return invoke<int>(0x49E58FE6EF40B987, data);
		} // 0x49E58FE6EF40B987 undefined b1207
		static void N0xDA0A30153FCC0FFD()
		{
			invoke<int>(0xDA0A30153FCC0FFD);
		} // 0xDA0A30153FCC0FFD undefined b1207
	}

	namespace UIPINNING
	{
		static const char* UIPINNING_GET_TOOLTIP_TEXT_(Hash hash)
		{
			return invoke<const char*>(0x3138582E0A13BFAB, hash);
		} // 0x3138582E0A13BFAB undefined b1207
	}

	namespace UITUTORIAL
	{
		static BOOL UITUTORIAL_GET_IS_THREAT_INDICATOR_CAPABLE_RADAR_SHOWN_()
		{
			return invoke<BOOL>(0x2CC24A2A7A1489C4);
		} // 0x2CC24A2A7A1489C4 undefined b1207
		static BOOL UITUTORIAL_GET_IS_THREAT_INDICATOR_ON_()
		{
			return invoke<BOOL>(0xFC2E0A5E9ED4E1B4);
		} // 0xFC2E0A5E9ED4E1B4 undefined b1207
		// enum eRpgIcons
		// {
		// 	ICON_STAMINA,
		// 	ICON_STAMINA_CORE,
		// 	ICON_DEADEYE,
		// 	ICON_DEADEYE_CORE,
		// 	ICON_HEALTH,
		// 	ICON_HEALTH_CORE,
		// 	ICON_HORSE_HEALTH,
		// 	ICON_HORSE_HEALTH_CORE,
		// 	ICON_HORSE_STAMINA,
		// 	ICON_HORSE_STAMINA_CORE,
		// 	ICON_HORSE_COURAGE,
		// 	ICON_HORSE_COURAGE_CORE
		// };
		//
		// enum eRpgIconVisibility
		// {
		// 	ICON_VISIBILITY_WAIT_TO_HIDE,
		// 	ICON_VISIBILITY_ALWAYS_SHOW,
		// 	ICON_VISIBILITY_ALWAYS_HIDE,
		// 	ICON_VISIBILITY_ALWAYS_BLINK
		// };
		static void UITUTORIAL_SET_RPG_ICON_VISIBILITY_(int rpgIcon, int visibility)
		{
			invoke<int>(0xC116E6DF68DCE667, rpgIcon, visibility);
		} // 0xC116E6DF68DCE667 undefined b1207
	}

	namespace UISTATEMACHINE
	{
		static Any UIFLOWBLOCK_REQUEST_(Any p0)
		{
			return invoke<Any>(0xC0081B34E395CE48, p0);
		} // 0xC0081B34E395CE48 undefined b1207
		static void UIFLOWBLOCK_RELEASE_(Any p0)
		{
			invoke<int>(0xF320A77DD5F781DF, p0);
		} // 0xF320A77DD5F781DF undefined b1207
		static Any UIFLOWBLOCK_IS_LOADED_(Any p0)
		{
			return invoke<Any>(0x10A93C057B6BD944, p0);
		} // 0x10A93C057B6BD944 undefined b1207
		static Any UIFLOWBLOCK_ENTER_(Any p0, Any p1)
		{
			return invoke<Any>(0x3B7519720C9DCB45, p0, p1);
		} // 0x3B7519720C9DCB45 undefined b1207
		static Any UI_STATE_MACHINE_EXISTS(Any p0)
		{
			return invoke<Any>(0x5D15569C0FEBF757, p0);
		} // 0x5D15569C0FEBF757 undefined b1207
		static Any UI_STATE_MACHINE_CREATE(Any p0, Any p1)
		{
			return invoke<Any>(0x4C6F2C4B7A03A266, p0, p1);
		} // 0x4C6F2C4B7A03A266 undefined b1207
		static Any UI_STATE_MACHINE_CAN_REQUEST_TRANSITION(Any p0)
		{
			return invoke<Any>(0xF7C180F57F85D0B8, p0);
		} // 0xF7C180F57F85D0B8 undefined b1207
		static Any UI_STATE_MACHINE_REQUEST_TRANSITION(Any p0, Any p1)
		{
			return invoke<Any>(0x7EA9C3547E80350E, p0, p1);
		} // 0x7EA9C3547E80350E undefined b1207
		static void UI_STATE_MACHINE_REQUEST_EXIT(Any p0, Any p1)
		{
			invoke<int>(0x6B9FE4F0BA521A19, p0, p1);
		} // 0x6B9FE4F0BA521A19 undefined b1207
		static BOOL UI_STATE_MACHINE_IS_EXITED_(Hash p0)
		{
			return invoke<BOOL>(0x11E73195E735B25B, p0);
		} // 0x11E73195E735B25B undefined b1207
		static void UI_STATE_MACHINE_DESTROY(Any p0)
		{
			invoke<int>(0x4EB122210A90E2D8, p0);
		} // 0x4EB122210A90E2D8 undefined b1207
		static void UI_STATE_MACHINE_DESTROY_AND_CLEAR(Any* p0)
		{
			invoke<int>(0x2738D68D2B4E09E7, p0);
		} // 0x2738D68D2B4E09E7 undefined b1207
	}

	namespace UISTICKYFEED
	{
		// Example: https://pastebin.com/EJD7ytnz
		static int UI_STICKY_FEED_CREATE_ERROR_MESSAGE_(Any* p0, Any* p1, BOOL p2)
		{
			return invoke<int>(0x9F2CC2439A04E7BA, p0, p1, p2);
		} // 0x9F2CC2439A04E7BA undefined b1207
		// Example: https://pastebin.com/JygJShNU
		static int UI_STICKY_FEED_CREATE_DEATH_FAIL_MESSAGE_(Any* p0, Any* p1, BOOL p2)
		{
			return invoke<int>(0x815C4065AE6E6071, p0, p1, p2);
		} // 0x815C4065AE6E6071 undefined b1207
		// Example: https://pastebin.com/6mLtee2S
		static int UI_STICKY_FEED_CREATE_WARNING_MESSAGE_(Any* p0, Any* p1, BOOL p2)
		{
			return invoke<int>(0x339E16B41780FC35, p0, p1, p2);
		} // 0x339E16B41780FC35 undefined b1207
		// Seems to only update _UI_STICKY_FEED_CREATE_ERROR_MESSAGE(0x9F2CC2439A04E7BA) and _UI_STICKY_FEED_CREATE_DEATH_FAIL_MESSAGE(0x815C4065AE6E6071) message.
		// Example: https://pastebin.com/nDrJyWq2
		static void UI_STICKY_FEED_UPDATE_MESSAGE_(int msgId, Any* p1, BOOL p2)
		{
			invoke<int>(0xBC6F454E310124DA, msgId, p1, p2);
		} // 0xBC6F454E310124DA undefined b1207
		static void UI_STICKY_FEED_CLEAR_MESSAGE_(int msgId)
		{
			invoke<int>(0x00A15B94CBA4F76F, msgId);
		} // 0x00A15B94CBA4F76F undefined b1207
		// stickyFeedChannel: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eUIStickyFeedChannel
		static BOOL UI_STICKY_FEED_IS_CHANNEL_ACTIVE_(int stickyFeedChannel)
		{
			return invoke<BOOL>(0xC5C395C60B542A3C, stickyFeedChannel);
		} // 0xC5C395C60B542A3C undefined b1207
		static BOOL UI_STICKY_FEED_IS_ALERT_SCREEN_ACTIVE_()
		{
			return invoke<BOOL>(0xF8806EC3FF840FDC);
		} // 0xF8806EC3FF840FDC undefined b1207
		// Returns state of sticky feed message, see 0x59FA676177DBE4C9
		static int UI_STICKY_FEED_GET_MESSAGE_STATE_(int msgId)
		{
			return invoke<int>(0x07954320D77F6A3D, msgId);
		} // 0x07954320D77F6A3D undefined b1207
	}

	namespace UNLOCK
	{
		static BOOL UNLOCK_IS_UNLOCK_FLAG_SET_(Hash unlockHash, int flag)
		{
			return invoke<BOOL>(0x6B6369647F26F09F, unlockHash, flag);
		} // 0x6B6369647F26F09F undefined b1207
		static BOOL UNLOCK_IS_UNLOCKED(Hash unlockHash)
		{
			return invoke<BOOL>(0xC4B660C7B6040E75, unlockHash);
		} // 0xC4B660C7B6040E75 undefined b1207
		static void UNLOCK_SET_UNLOCKED(Hash unlockHash, BOOL toggle)
		{
			invoke<int>(0x1B7C5ADA8A6910A0, unlockHash, toggle);
		} // 0x1B7C5ADA8A6910A0 undefined b1207
		static BOOL UNLOCK_IS_VISIBLE(Hash unlockHash)
		{
			return invoke<BOOL>(0x8588A14B75AF096B, unlockHash);
		} // 0x8588A14B75AF096B undefined b1207
		static void UNLOCK_SET_VISIBLE(Hash unlockHash, BOOL toggle)
		{
			invoke<int>(0x46B901A8ECDB5A61, unlockHash, toggle);
		} // 0x46B901A8ECDB5A61 undefined b1207
		static BOOL UNLOCK_IS_NEW_(Hash unlockHash)
		{
			return invoke<BOOL>(0x644166BA7AA49DEA, unlockHash);
		} // 0x644166BA7AA49DEA undefined b1207
		static void UNLOCK_SET_NEW_(Hash unlockHash, BOOL toggle)
		{
			invoke<int>(0xA6D79C7AEF870A99, unlockHash, toggle);
		} // 0xA6D79C7AEF870A99 undefined b1207
		static BOOL UNLOCK_IS_LOOTABLE_(Hash unlockHash)
		{
			return invoke<BOOL>(0x66BF197E066050DE, unlockHash);
		} // 0x66BF197E066050DE undefined b1207
		static void UNLOCK_GET_ITEM_ROLE_UNLOCK_INFO_(Hash unlockHash, Any* outData)
		{
			invoke<int>(0x7C1C2062CFAD06FE, unlockHash, outData);
		} // 0x7C1C2062CFAD06FE undefined b1207
	}

	namespace VEHICLE
	{
		// Only used in R* Script beat_train_holdup: p1 = 1
		static void N0x6355602C02EDC6DF(Entity entity, Any p1)
		{
			invoke<int>(0x6355602C02EDC6DF, entity, p1);
		} // 0x6355602C02EDC6DF undefined b1207
		static void SET_VEHICLE_IS_IN_HURRY_(Vehicle vehicle, BOOL enabled)
		{
			invoke<int>(0xCE1531927AD6C9F8, vehicle, enabled);
		} // 0xCE1531927AD6C9F8 undefined b1207
		static Vehicle CREATE_VEHICLE(Hash modelHash, float x, float y, float z, float heading, BOOL isNetwork, BOOL bScriptHostVeh, BOOL bDontAutoCreateDraftAnimals, BOOL p8)
		{
			return invoke<Vehicle>(0xAF35D0D2583051B0, modelHash, x, y, z, heading, isNetwork, bScriptHostVeh, bDontAutoCreateDraftAnimals, p8);
		} // 0xAF35D0D2583051B0 0xDD75460A b1207
		// Identical to CREATE_VEHICLE but allows to set draftAnimalPopGroup (see popgroups.#mt for DRAFT_HORSES_*)
		static Vehicle CREATE_DRAFT_VEHICLE_(Hash modelHash, float x, float y, float z, float heading, BOOL isNetwork, BOOL bScriptHostVeh, BOOL bDontAutoCreateDraftAnimals, Hash draftAnimalPopGroup, BOOL p9)
		{
			return invoke<Vehicle>(0x214651FB1DFEBA89, modelHash, x, y, z, heading, isNetwork, bScriptHostVeh, bDontAutoCreateDraftAnimals, draftAnimalPopGroup, p9);
		} // 0x214651FB1DFEBA89 undefined b1207
		// Deletes a vehicle.
		// The vehicle must be a mission entity to delete, so call this before deleting: SET_ENTITY_AS_MISSION_ENTITY(vehicle, true, true);
		//
		// eg how to use:
		// SET_ENTITY_AS_MISSION_ENTITY(vehicle, true, true);
		// DELETE_VEHICLE(&vehicle);
		//
		// Deletes the specified vehicle, then sets the handle pointed to by the pointer to NULL.
		static void DELETE_VEHICLE(Vehicle* vehicle)
		{
			invoke<int>(0xE20A909D8C4A70F8, vehicle);
		} // 0xE20A909D8C4A70F8 0x9803AF60 b1207
		static void FADE_AND_DESTROY_VEHICLE_(Vehicle* vehicle)
		{
			invoke<int>(0x35DC1877312FBA0F, vehicle);
		} // 0x35DC1877312FBA0F undefined b1207
		static BOOL IS_VEHICLE_FADING_OUT_(Vehicle vehicle)
		{
			return invoke<BOOL>(0x5136B284B67B35C7, vehicle);
		} // 0x5136B284B67B35C7 undefined b1207
		static void SET_VEHICLE_ALLOW_HOMING_MISSLE_LOCKON(Vehicle vehicle, BOOL toggle)
		{
			invoke<int>(0x1240E8596A8308B9, vehicle, toggle);
		} // 0x1240E8596A8308B9 0xBB54ECCA b1207
		// Makes the vehicle accept no passengers.
		static void SET_VEHICLE_ALLOW_NO_PASSENGERS_LOCKON(Vehicle vehicle, BOOL toggle)
		{
			invoke<int>(0xECB9E9BC887E8060, vehicle, toggle);
		} // 0xECB9E9BC887E8060 0x8BAAC437 b1207
		static BOOL IS_VEHICLE_MODEL(Vehicle vehicle, Hash model)
		{
			return invoke<BOOL>(0x0045A54EC7A22455, vehicle, model);
		} // 0x0045A54EC7A22455 0x013B10B6 b1207
		static void SET_ALL_VEHICLE_GENERATORS_DISABLED_FOR_VOLUME_(Volume volume, BOOL toggle)
		{
			invoke<int>(0x424FFCB9F0D2D4B5, volume, toggle);
		} // 0x424FFCB9F0D2D4B5 undefined b1207
		static void SET_ALL_VEHICLE_GENERATORS_ACTIVE_IN_AREA(float x1, float y1, float z1, float x2, float y2, float z2, BOOL p6, BOOL p7)
		{
			invoke<int>(0xBBB134FB9D50C0CC, x1, y1, z1, x2, y2, z2, p6, p7);
		} // 0xBBB134FB9D50C0CC 0xB4E0E69A b1207
		static void SET_ALL_VEHICLE_GENERATORS_ACTIVE()
		{
			invoke<int>(0x3D596E6E88A02C24);
		} // 0x3D596E6E88A02C24 0xAB1FDD76 b1207
		static BOOL SET_VEHICLE_ON_GROUND_PROPERLY(Vehicle vehicle, BOOL p1)
		{
			return invoke<BOOL>(0x7263332501E07F52, vehicle, p1);
		} // 0x7263332501E07F52 0xE14FDBA6 b1207
		// Returns true if the vehicle's current speed is less than, or equal to 0.0025f.
		//
		// For some vehicles it returns true if the current speed is <= 0.00039999999.
		static BOOL IS_VEHICLE_STOPPED(Vehicle vehicle)
		{
			return invoke<BOOL>(0x78C3311A73135241, vehicle);
		} // 0x78C3311A73135241 0x655F072C b1207
		// Gets the number of passengers, NOT including the driver. Use IS_VEHICLE_SEAT_FREE(Vehicle, -1) to also check for the driver
		static int GET_VEHICLE_NUMBER_OF_PASSENGERS(Vehicle vehicle)
		{
			return invoke<int>(0x59F3F16577CD79B2, vehicle);
		} // 0x59F3F16577CD79B2 0x1EF20849 b1207
		static int GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS(Vehicle vehicle)
		{
			return invoke<int>(0xA9C55F1C15E62E06, vehicle);
		} // 0xA9C55F1C15E62E06 0x0A2FC08C b1207
		static int GET_VEHICLE_MODEL_NUMBER_OF_SEATS(Hash modelHash)
		{
			return invoke<int>(0x9A578736FF3A17C3, modelHash);
		} // 0x9A578736FF3A17C3 0x838F7BF7 b1207
		// seatIndex: see CREATE_PED_INSIDE_VEHICLE
		static BOOL IS_SEAT_WARP_ONLY(Vehicle vehicle, int seatIndex)
		{
			return invoke<BOOL>(0x7892685BF6D9775E, vehicle, seatIndex);
		} // 0x7892685BF6D9775E 0x769E5CF2 b1207
		static BOOL GET_VEHICLE_TURRET_SEAT_(Vehicle vehicle, int* seatIndex)
		{
			return invoke<BOOL>(0xFF5791B7639C2A46, vehicle, seatIndex);
		} // 0xFF5791B7639C2A46 undefined b1207
		static Any N0xA9E185D498B9AC67(Any p0, Any p1)
		{
			return invoke<Any>(0xA9E185D498B9AC67, p0, p1);
		} // 0xA9E185D498B9AC67 undefined b1207
		static void SET_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME(float multiplier)
		{
			invoke<int>(0x606374EBFC27B133, multiplier);
		} // 0x606374EBFC27B133 0xF4187E51 b1207
		static void SET_RANDOM_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME(float multiplier)
		{
			invoke<int>(0x1F91D44490E1EA0C, multiplier);
		} // 0x1F91D44490E1EA0C 0x543F712B b1207
		static void SET_PARKED_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME(float multiplier)
		{
			invoke<int>(0xFEDFA97638D61D4A, multiplier);
		} // 0xFEDFA97638D61D4A 0xDD46CEBE b1207
		// nullsub, doesn't do anything
		static void SET_DISABLE_RANDOM_TRAINS_THIS_FRAME(BOOL toggle)
		{
			invoke<int>(0xD4288603E8766FF7, toggle);
		} // 0xD4288603E8766FF7 0x09462665 b1207
		static void SET_VEHICLE_DOORS_LOCKED(Vehicle vehicle, int doorLockStatus)
		{
			invoke<int>(0x96F78A6A075D55D9, vehicle, doorLockStatus);
		} // 0x96F78A6A075D55D9 0x4CDD35D0 b1207
		// doorId: see SET_VEHICLE_DOOR_SHUT
		static void SET_VEHICLE_INDIVIDUAL_DOORS_LOCKED(Vehicle vehicle, int doorId, int doorLockStatus)
		{
			invoke<int>(0xA9F1D75195CC40F6, vehicle, doorId, doorLockStatus);
		} // 0xA9F1D75195CC40F6 0xD61D182D b1207
		static void SET_VEHICLE_DOORS_LOCKED_FOR_PLAYER(Vehicle vehicle, Player player, BOOL toggle)
		{
			invoke<int>(0x359A8EA1FB8D6F0F, vehicle, player, toggle);
		} // 0x359A8EA1FB8D6F0F 0x49829236 b1207
		static BOOL GET_VEHICLE_DOORS_LOCKED_FOR_PLAYER(Vehicle vehicle, Player player)
		{
			return invoke<BOOL>(0xFA2CDDFEB8BC898B, vehicle, player);
		} // 0xFA2CDDFEB8BC898B 0x1DC50247 b1207
		static void SET_VEHICLE_DOORS_LOCKED_FOR_ALL_PLAYERS(Vehicle vehicle, BOOL toggle)
		{
			invoke<int>(0x2381977DA948F8DC, vehicle, toggle);
		} // 0x2381977DA948F8DC 0x891BA8A4 b1207
		static void SET_VEHICLE_DOORS_LOCKED_FOR_TEAM(Vehicle vehicle, int team, BOOL toggle)
		{
			invoke<int>(0xE712BC978770F105, vehicle, team, toggle);
		} // 0xE712BC978770F105 0x4F85E783 b1207
		static BOOL GET_VEHICLE_DOORS_LOCKED_FOR_TEAM_(Vehicle vehicle, int team)
		{
			return invoke<BOOL>(0xDD1E1393D966D39A, vehicle, team);
		} // 0xDD1E1393D966D39A undefined b1207
		// Explodes a selected vehicle.
		//
		// Vehicle vehicle = Vehicle you want to explode.
		// BOOL isAudible = If explosion makes a sound.
		// BOOL isInvisible = If the explosion is invisible or not.
		//
		// First BOOL does not give any visual explosion, the vehicle just falls apart completely but slowly and starts to burn.
		static void EXPLODE_VEHICLE(Vehicle vehicle, BOOL isAudible, BOOL isInvisible, Any p3, Any p4)
		{
			invoke<int>(0x75DCED9EEC5769D7, vehicle, isAudible, isInvisible, p3, p4);
		} // 0x75DCED9EEC5769D7 0xBEDEACEB b1207
		static void N0x750D42C013F64AE7(Any p0, Any p1)
		{
			invoke<int>(0x750D42C013F64AE7, p0, p1);
		} // 0x750D42C013F64AE7 undefined b1207
		static void N0xE78993FF9022C064(Any p0)
		{
			invoke<int>(0xE78993FF9022C064, p0);
		} // 0xE78993FF9022C064 undefined b1207
		// nullsub, doesn't do anything
		static void N0x9868C0D0134855F7(Any p0)
		{
			invoke<int>(0x9868C0D0134855F7, p0);
		} // 0x9868C0D0134855F7 undefined b1207
		static void HIDE_HORSE_REINS_(Vehicle vehicle)
		{
			invoke<int>(0x201B8ED4FF7FE9F5, vehicle);
		} // 0x201B8ED4FF7FE9F5 undefined b1207
		static void SHOW_HORSE_REINS_(Vehicle vehicle)
		{
			invoke<int>(0x41CDA90EE3450921, vehicle);
		} // 0x41CDA90EE3450921 undefined b1207
		static void N0xD21A3D421E7F09F7(Any p0, Any p1)
		{
			invoke<int>(0xD21A3D421E7F09F7, p0, p1);
		} // 0xD21A3D421E7F09F7 undefined b1207
		static void N0xA13028E22564A1BD(Any p0, Any p1)
		{
			invoke<int>(0xA13028E22564A1BD, p0, p1);
		} // 0xA13028E22564A1BD undefined b1207
		static void N0x485B05EF05B9AEE9(Any p0, Any p1)
		{
			invoke<int>(0x485B05EF05B9AEE9, p0, p1);
		} // 0x485B05EF05B9AEE9 undefined b1207
		static void SET_BOAT_ANCHOR(Vehicle vehicle, BOOL toggle)
		{
			invoke<int>(0xAEAB044F05B92659, vehicle, toggle);
		} // 0xAEAB044F05B92659 0xA3906284 b1207
		static void N0x6B53F4B811E583D2(Vehicle vehicle, BOOL toggle)
		{
			invoke<int>(0x6B53F4B811E583D2, vehicle, toggle);
		} // 0x6B53F4B811E583D2 undefined b1207
		static BOOL CAN_ANCHOR_BOAT_HERE(Vehicle vehicle)
		{
			return invoke<BOOL>(0xC075176CFB8B4128, vehicle);
		} // 0xC075176CFB8B4128 0xE97A4F5E b1207
		// Old name: _SET_BOAT_FROZEN_WHEN_ANCHORED
		static void SET_BOAT_REMAINS_ANCHORED_WHILE_PLAYER_IS_DRIVER(Vehicle vehicle, BOOL p1, BOOL p2)
		{
			invoke<int>(0x286771F3059A37A7, vehicle, p1, p2);
		} // 0x286771F3059A37A7 0x0ED84792 b1207
		// Sets boat to be anchored on spawn, called together with SET_BOAT_ANCHOR and _SET_BOAT_ANCHOR_BUOYANCY_COEFFICIENT
		static void SET_FORCE_LOW_LOD_ANCHOR_MODE(Vehicle vehicle, BOOL p1)
		{
			invoke<int>(0x75B49ACD73617437, vehicle, p1);
		} // 0x75B49ACD73617437 0xA739012A b1207
		// Value: mostly 99999.9f
		//
		// Old name: _SET_BOAT_MOVEMENT_RESISTANCE
		static void SET_BOAT_LOW_LOD_ANCHOR_DISTANCE(Vehicle vehicle, float value)
		{
			invoke<int>(0xE3261532550D6A9F, vehicle, value);
		} // 0xE3261532550D6A9F 0x66FA450C b1207
		static void SET_BOAT_SINKS_WHEN_WRECKED(Vehicle vehicle, BOOL toggle)
		{
			invoke<int>(0x62A6D317A011EA1D, vehicle, toggle);
		} // 0x62A6D317A011EA1D 0x35614622 b1207
		static void SET_FORCE_HIGH_LOD_VEHICLE_(Vehicle vehicle, BOOL p1)
		{
			invoke<int>(0x1098CDA477890165, vehicle, p1);
		} // 0x1098CDA477890165 undefined b1207
		static void N0x98A7598C579EE871(Any p0, Any p1, Any p2)
		{
			invoke<int>(0x98A7598C579EE871, p0, p1, p2);
		} // 0x98A7598C579EE871 undefined b1207
		// Forcing high LOD buoyancy for vehicle: p1 = false
		// _SET_A*
		static void N0x9E8711C81AA17876(Vehicle vehicle, BOOL p1)
		{
			invoke<int>(0x9E8711C81AA17876, vehicle, p1);
		} // 0x9E8711C81AA17876 undefined b1207
		// If set to true, vehicle will not take crash damage, but is still susceptible to damage from bullets and explosives
		static void SET_VEHICLE_STRONG(Vehicle vehicle, BOOL toggle)
		{
			invoke<int>(0xAB315515C9F8803D, vehicle, toggle);
		} // 0xAB315515C9F8803D 0xC758D19F b1207
		// seatIndex: see CREATE_PED_INSIDE_VEHICLE
		// Use GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS(vehicle) - 1 for last seat index.
		static BOOL IS_VEHICLE_SEAT_FREE(Vehicle vehicle, int seatIndex)
		{
			return invoke<BOOL>(0xE052C1B1CAA4ECE4, vehicle, seatIndex);
		} // 0xE052C1B1CAA4ECE4 0xDAF42B02 b1207
		// seatIndex: see CREATE_PED_INSIDE_VEHICLE
		static Ped GET_PED_IN_VEHICLE_SEAT(Vehicle vehicle, int seatIndex)
		{
			return invoke<Ped>(0xBB40DD2270B65366, vehicle, seatIndex);
		} // 0xBB40DD2270B65366 0x388FDE9A b1207
		// seatIndex: see CREATE_PED_INSIDE_VEHICLE
		static Ped GET_LAST_PED_IN_VEHICLE_SEAT(Vehicle vehicle, int seatIndex)
		{
			return invoke<Ped>(0x74583B19FEEAFDA7, vehicle, seatIndex);
		} // 0x74583B19FEEAFDA7 0xF7C6792D b1207
		static BOOL IS_DRAFT_VEHICLE(Vehicle vehicle)
		{
			return invoke<BOOL>(0xEA44E97849E9F3DD, vehicle);
		} // 0xEA44E97849E9F3DD undefined b1207
		// enum eDraftHarness
		// {
		// 	DRAFT_HARNESS_LR,
		// 	DRAFT_HARNESS_RR,
		// 	DRAFT_HARNESS_LM,
		// 	DRAFT_HARNESS_RM,
		// 	DRAFT_HARNESS_LF,
		// 	DRAFT_HARNESS_RF,
		// 	DRAFT_HARNESS_COUNT
		// };
		static Ped GET_PED_IN_DRAFT_HARNESS_(Vehicle vehicle, int harnessId)
		{
			return invoke<Ped>(0xA8BA0BAE0173457B, vehicle, harnessId);
		} // 0xA8BA0BAE0173457B undefined b1207
		static void SET_VEHICLE_FORWARD_SPEED(Vehicle vehicle, float speed)
		{
			invoke<int>(0xF9F92AF49F12F6E7, vehicle, speed);
		} // 0xF9F92AF49F12F6E7 0x69880D14 b1207
		// This native makes the vehicle stop immediately
		//
		// distance defines how far it will travel until stopping.
		static void BRING_VEHICLE_TO_HALT(Vehicle vehicle, float distance, int duration, BOOL unknown)
		{
			invoke<int>(0x260BE8F09E326A20, vehicle, distance, duration, unknown);
		} // 0x260BE8F09E326A20 0xCBC7D3C8 b1207
		// Only returns true if BRING_VEHICLE_TO_HALT is called on vehicle beforehand
		static BOOL IS_VEHICLE_BROUGHT_TO_HALT_(Vehicle vehicle)
		{
			return invoke<BOOL>(0x404527BC03DA0E6C, vehicle);
		} // 0x404527BC03DA0E6C undefined b1207
		// Old name: _STOP_BRING_VEHICLE_TO_HALT
		static void STOP_BRINGING_VEHICLE_TO_HALT(Vehicle vehicle)
		{
			invoke<int>(0x7C06330BFDDA182E, vehicle);
		} // 0x7C06330BFDDA182E  b1207
		static void N0xE12F5ED49F44D40D(Any p0)
		{
			invoke<int>(0xE12F5ED49F44D40D, p0);
		} // 0xE12F5ED49F44D40D undefined b1207
		static void N0xF6E3D38869D0F7AD(Any p0)
		{
			invoke<int>(0xF6E3D38869D0F7AD, p0);
		} // 0xF6E3D38869D0F7AD undefined b1207
		// Closes all doors of a vehicle:
		static void SET_VEHICLE_DOORS_SHUT(Vehicle vehicle, BOOL closeInstantly)
		{
			invoke<int>(0xA4FFCD645B11F25A, vehicle, closeInstantly);
		} // 0xA4FFCD645B11F25A 0xBB1FF6E7 b1207
		// Allows you to toggle bulletproof tires.
		static void SET_VEHICLE_TYRES_CAN_BURST(Vehicle vehicle, BOOL toggle)
		{
			invoke<int>(0xEBD0A4E935106FE5, vehicle, toggle);
		} // 0xEBD0A4E935106FE5 0xA198DB54 b1207
		static void SET_VEHICLE_WHEELS_CAN_BREAK(Vehicle vehicle, BOOL enabled)
		{
			invoke<int>(0x839137C40275FB77, vehicle, enabled);
		} // 0x839137C40275FB77 0x829ED654 b1207
		static void SET_VEHICLE_DOORS_TO_OPEN_AT_ANY_DISTANCE(Vehicle vehicle, BOOL toggle)
		{
			invoke<int>(0x362CEDD2A41E0747, vehicle, toggle);
		} // 0x362CEDD2A41E0747 undefined b1232
		// doorId: see SET_VEHICLE_DOOR_SHUT
		// Can also be used on trains and its wagons
		static void SET_VEHICLE_DOOR_OPEN(Vehicle vehicle, int doorId, BOOL loose, BOOL openInstantly)
		{
			invoke<int>(0x550CE392A4672412, vehicle, doorId, loose, openInstantly);
		} // 0x550CE392A4672412 0xBB75D38B b1207
		// windowIndex:
		// 0 = Front Right Window
		// 1 = Front Left Window
		// 2 = Back Right Window
		// 3 = Back Left Window
		static void REMOVE_VEHICLE_WINDOW(Vehicle vehicle, int windowIndex)
		{
			invoke<int>(0x745F15A215F2DDF1, vehicle, windowIndex);
		} // 0x745F15A215F2DDF1 0xBB8104A3 b1207
		static void N0x8878FF3EEE2868A9(Any p0, Any p1)
		{
			invoke<int>(0x8878FF3EEE2868A9, p0, p1);
		} // 0x8878FF3EEE2868A9 undefined b1207
		// dirtLevel: 0.0 - 1.0
		static void SET_VEHICLE_DIRT_LEVEL_2_(Vehicle vehicle, float dirtLevel)
		{
			invoke<int>(0xBAE0EEDF93F05EAA, vehicle, dirtLevel);
		} // 0xBAE0EEDF93F05EAA undefined b1207
		// mudLevel: 0.0 - 1.0
		static void SET_VEHICLE_MUD_LEVEL_(Vehicle vehicle, float mudLevel)
		{
			invoke<int>(0x4D15E49764CB328A, vehicle, mudLevel);
		} // 0x4D15E49764CB328A undefined b1207
		// Sets the vehicle's lights state.
		static void SET_VEHICLE_LIGHTS(Vehicle vehicle, int state)
		{
			invoke<int>(0x629F0A0E952CAE7D, vehicle, state);
		} // 0x629F0A0E952CAE7D 0xE8930226 b1207
		static void SET_RANDOM_TRAINS(BOOL toggle)
		{
			invoke<int>(0x1156C6EE7E82A98A, toggle);
		} // 0x1156C6EE7E82A98A 0xD461CA7F b1207
		// Returns trackIndex
		static int N0x331CBD247FC5DAA8(Hash configHash, float x, float y, float z, BOOL direction, BOOL p5)
		{
			return invoke<int>(0x331CBD247FC5DAA8, configHash, x, y, z, direction, p5);
		} // 0x331CBD247FC5DAA8 undefined b1207
		// Takes value returned from 0x45853F4E17D847D5
		static BOOL N0x0516FAE561276EFC(int trackIndex)
		{
			return invoke<BOOL>(0x0516FAE561276EFC, trackIndex);
		} // 0x0516FAE561276EFC undefined b1207
		// Returns trackIndex
		static int GET_TRAIN_TRACK_FROM_TRAIN_VEHICLE_(Vehicle train)
		{
			return invoke<int>(0x45853F4E17D847D5, train);
		} // 0x45853F4E17D847D5 undefined b1207
		// Returns train
		static Vehicle GET_TRAIN_VEHICLE_FROM_TRACK_INDEX_(int trackIndex)
		{
			return invoke<Vehicle>(0x6E585A616ABB8401, trackIndex);
		} // 0x6E585A616ABB8401 undefined b1207
		static void N0x15206E88FF7617DF(int trackIndex, float p1)
		{
			invoke<int>(0x15206E88FF7617DF, trackIndex, p1);
		} // 0x15206E88FF7617DF undefined b1207
		static void N0xA7966807953A18EE(int trackIndex, float p1)
		{
			invoke<int>(0xA7966807953A18EE, trackIndex, p1);
		} // 0xA7966807953A18EE undefined b1207
		static void N0x6B34BE961F639E21(int trackIndex, int p1)
		{
			invoke<int>(0x6B34BE961F639E21, trackIndex, p1);
		} // 0x6B34BE961F639E21 undefined b1207
		static void N0xE6BD7DD3FD474415(Vehicle train, BOOL p1)
		{
			invoke<int>(0xE6BD7DD3FD474415, train, p1);
		} // 0xE6BD7DD3FD474415 undefined b1207
		static void N0x615B3B8E73634509(int trackIndex, float p1)
		{
			invoke<int>(0x615B3B8E73634509, trackIndex, p1);
		} // 0x615B3B8E73634509 undefined b1207
		static void N0x38E7DD70A242D5CB(int trackIndex, int p1)
		{
			invoke<int>(0x38E7DD70A242D5CB, trackIndex, p1);
		} // 0x38E7DD70A242D5CB undefined b1207
		static void N0x63509DDF102E08E8(int trackIndex, int p1)
		{
			invoke<int>(0x63509DDF102E08E8, trackIndex, p1);
		} // 0x63509DDF102E08E8 undefined b1207
		static void N0x7408B5C66BA31ADB(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9, Any p10)
		{
			invoke<int>(0x7408B5C66BA31ADB, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
		} // 0x7408B5C66BA31ADB undefined b1207
		static void N0x41365DB586CD9E8E(int trackIndex, float p1)
		{
			invoke<int>(0x41365DB586CD9E8E, trackIndex, p1);
		} // 0x41365DB586CD9E8E undefined b1207
		static void N0xD0AABE5B9F8FA589(int trackIndex, float p1)
		{
			invoke<int>(0xD0AABE5B9F8FA589, trackIndex, p1);
		} // 0xD0AABE5B9F8FA589 undefined b1207
		static void N0x427C919E9809E370(int trackIndex, int p1)
		{
			invoke<int>(0x427C919E9809E370, trackIndex, p1);
		} // 0x427C919E9809E370 undefined b1207
		static BOOL DOES_TRAIN_EXIST_ON_TRACK_(int trackIndex)
		{
			return invoke<BOOL>(0xC29996A337BDD099, trackIndex);
		} // 0xC29996A337BDD099 undefined b1207
		static Vector3 GET_TRAIN_POSITION_ON_TRACK_(int trackIndex)
		{
			return invoke<Vector3>(0x1E8A921112891651, trackIndex);
		} // 0x1E8A921112891651 undefined b1207
		static BOOL N0xB4241AD8F5AEE9ED(int trackIndex)
		{
			return invoke<BOOL>(0xB4241AD8F5AEE9ED, trackIndex);
		} // 0xB4241AD8F5AEE9ED undefined b1207
		static void N0xA230A5DDE12ED374(Any p0)
		{
			invoke<int>(0xA230A5DDE12ED374, p0);
		} // 0xA230A5DDE12ED374 undefined b1207
		static void N0x0D5FDF0D36FA10CD(int trackIndex)
		{
			invoke<int>(0x0D5FDF0D36FA10CD, trackIndex);
		} // 0x0D5FDF0D36FA10CD undefined b1207
		static void N0xE682002DB1F30669(Any p0)
		{
			invoke<int>(0xE682002DB1F30669, p0);
		} // 0xE682002DB1F30669 undefined b1207
		static void N0x718EB706B6E998A0(int trackIndex)
		{
			invoke<int>(0x718EB706B6E998A0, trackIndex);
		} // 0x718EB706B6E998A0 undefined b1207
		// _IS_* (related to CREATE_MISSION_TRAIN)
		static BOOL N0xF05DFAF1ADFEF2CD(Hash trainConfig, float x, float y, float z, BOOL direction, BOOL p5)
		{
			return invoke<BOOL>(0xF05DFAF1ADFEF2CD, trainConfig, x, y, z, direction, p5);
		} // 0xF05DFAF1ADFEF2CD undefined b1207
		static Any N0xD1DF5E54F4ACBE1A(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6)
		{
			return invoke<Any>(0xD1DF5E54F4ACBE1A, p0, p1, p2, p3, p4, p5, p6);
		} // 0xD1DF5E54F4ACBE1A undefined b1207
		static Any N0x0FDDEE66E3465726(Any p0)
		{
			return invoke<Any>(0x0FDDEE66E3465726, p0);
		} // 0x0FDDEE66E3465726 undefined b1207
		static void N0x4C05B42A8D937796()
		{
			invoke<int>(0x4C05B42A8D937796);
		} // 0x4C05B42A8D937796 undefined b1207
		static void N0xB961DD799A837BD7()
		{
			invoke<int>(0xB961DD799A837BD7);
		} // 0xB961DD799A837BD7 undefined b1207
		static void N0x16B86A49E072AA85()
		{
			invoke<int>(0x16B86A49E072AA85);
		} // 0x16B86A49E072AA85 undefined b1207
		static void N0x2A7413168F6CD5A8()
		{
			invoke<int>(0x2A7413168F6CD5A8);
		} // 0x2A7413168F6CD5A8 undefined b1207
		static void N0xFFFE15B433300B8C(Any p0, Any p1, Any p2)
		{
			invoke<int>(0xFFFE15B433300B8C, p0, p1, p2);
		} // 0xFFFE15B433300B8C undefined b1207
		static void N0x6EA1273D525427F4(Any p0, Any p1, Any p2)
		{
			invoke<int>(0x6EA1273D525427F4, p0, p1, p2);
		} // 0x6EA1273D525427F4 undefined b1207
		static Any N0x7BE0746539DEF0C8(Any p0, Any p1)
		{
			return invoke<Any>(0x7BE0746539DEF0C8, p0, p1);
		} // 0x7BE0746539DEF0C8 undefined b1207
		static void N0x3137EDC899E6DAE4(Any p0, Any p1)
		{
			invoke<int>(0x3137EDC899E6DAE4, p0, p1);
		} // 0x3137EDC899E6DAE4 undefined b1355
		// Returns trackIndex
		static int N0x6C87F49BFA181DB5(float x, float y, float z)
		{
			return invoke<int>(0x6C87F49BFA181DB5, x, y, z);
		} // 0x6C87F49BFA181DB5 undefined b1207
		// Returns trackIndex
		// _E* - _F*
		static int GET_TRACK_INDEX_FROM_COORDS_(float x, float y, float z)
		{
			return invoke<int>(0x85D39F5E3B6D7EB0, x, y, z);
		} // 0x85D39F5E3B6D7EB0 undefined b1207
		static Vector3 GET_NEAREST_TRAIN_TRACK_POSITION_(float x, float y, float z)
		{
			return invoke<Vector3>(0x6DE03BCC15E81710, x, y, z);
		} // 0x6DE03BCC15E81710 undefined b1207
		static void DELETE_ALL_TRAINS()
		{
			invoke<int>(0xA3120A1385F17FF7);
		} // 0xA3120A1385F17FF7 0x83DE7ABF b1207
		static Any N0x0E558D3A49D759D6(Any p0, Any p1)
		{
			return invoke<Any>(0x0E558D3A49D759D6, p0, p1);
		} // 0x0E558D3A49D759D6 undefined b1207
		static void N0xD4907EF4334C7602(Any p0, Any p1)
		{
			invoke<int>(0xD4907EF4334C7602, p0, p1);
		} // 0xD4907EF4334C7602 undefined b1207
		static void N0x68830738A6BFB370(Any p0, Any p1)
		{
			invoke<int>(0x68830738A6BFB370, p0, p1);
		} // 0x68830738A6BFB370 undefined b1207
		static void SET_TRAIN_SPEED(Vehicle train, float speed)
		{
			invoke<int>(0xDFBA6BBFF7CCAFBB, train, speed);
		} // 0xDFBA6BBFF7CCAFBB 0xDFC35E4D b1207
		// Maximum possible speed is 30.0 (108 km/h)
		static void SET_TRAIN_MAX_SPEED_(Vehicle train, float speed)
		{
			invoke<int>(0x9F29999DFDF2AEB8, train, speed);
		} // 0x9F29999DFDF2AEB8 undefined b1207
		static void SET_TRAIN_CRUISE_SPEED(Vehicle train, float speed)
		{
			invoke<int>(0x01021EB2E96B793C, train, speed);
		} // 0x01021EB2E96B793C 0xB507F51D b1207
		// Returns iNumCars - to be used with GET_TRAIN_CARRIAGE (trailerNumber)
		// _C* (O, P, Q, R)
		static int GET_TRAIN_CARRIAGE_TRAILER_NUMBER_(Vehicle train)
		{
			return invoke<int>(0x60B7D1DCC312697D, train);
		} // 0x60B7D1DCC312697D undefined b1207
		// Returns modelHash
		static Hash GET_TRAIN_MODEL_FROM_TRAIN_CONFIG_BY_CAR_INDEX_(Hash trainConfig, int trainCarIndex)
		{
			return invoke<Hash>(0x8DF5F6A19F99F0D5, trainConfig, trainCarIndex);
		} // 0x8DF5F6A19F99F0D5 undefined b1207
		// Returns amount for CAN_REGISTER_MISSION_VEHICLES
		static int GET_NUM_CARS_FROM_TRAIN_CONFIG_(Hash trainConfig)
		{
			return invoke<int>(0x635423D55CA84FC8, trainConfig);
		} // 0x635423D55CA84FC8 undefined b1207
		// Returns train car, use GET_TRAIN_CARRIAGE when trailerNumber is bigger than 0
		static Entity GET_TRAIN_CAR_(Vehicle train)
		{
			return invoke<Entity>(0x671A07C9A1CD50A5, train);
		} // 0x671A07C9A1CD50A5 undefined b1207
		static void SET_TRAIN_STOPS_FOR_STATIONS_(Vehicle train, BOOL toggle)
		{
			invoke<int>(0x4182C037AA1F0091, train, toggle);
		} // 0x4182C037AA1F0091 undefined b1207
		static void N0xDD100CE1EBBF37E3(Any p0, Any p1)
		{
			invoke<int>(0xDD100CE1EBBF37E3, p0, p1);
		} // 0xDD100CE1EBBF37E3 undefined b1207
		static void N0x160C1B5AB48AB87C(Vehicle train, float p1)
		{
			invoke<int>(0x160C1B5AB48AB87C, train, p1);
		} // 0x160C1B5AB48AB87C undefined b1207
		static BOOL IS_TRAIN_WAITING_AT_STATION(Vehicle train)
		{
			return invoke<BOOL>(0xE887BD31D97793F6, train);
		} // 0xE887BD31D97793F6 undefined b1207
		static void SET_TRAIN_HALT_(Vehicle train)
		{
			invoke<int>(0x3660BCAB3A6BB734, train);
		} // 0x3660BCAB3A6BB734 undefined b1207
		// Restarts the train
		static void SET_TRAIN_LEAVE_STATION_(Vehicle train)
		{
			invoke<int>(0x787E43477746876F, train);
		} // 0x787E43477746876F undefined b1207
		static void SET_RANDOM_BOATS(BOOL toggle)
		{
			invoke<int>(0xF44D446D4E36DB87, toggle);
		} // 0xF44D446D4E36DB87 0xB505BD89 b1207
		// Request the vehicle recording defined by the lowercase format string "%s%03d.yvr". For example, REQUEST_VEHICLE_RECORDING(1, "FBIs1UBER") corresponds to fbis1uber001.yvr.
		// For all vehicle recording/playback natives, "script" is a common prefix that usually corresponds to the script/mission the recording is used in, "recording" is its int suffix, and "id" corresponds to a unique identifier within the recording streaming module.
		// (GTA) Note that only 24 recordings (hardcoded in multiple places) can ever active at a given time before clobbering begins.
		static void REQUEST_VEHICLE_RECORDING(int recording, const char* script)
		{
			invoke<int>(0xC474CF16EDA45DC9, recording, script);
		} // 0xC474CF16EDA45DC9 0x91AFEFD9 b1207
		// See REQUEST_VEHICLE_RECORDING
		static BOOL HAS_VEHICLE_RECORDING_BEEN_LOADED(int recording, const char* script)
		{
			return invoke<BOOL>(0xBA9325BE372AB6EA, recording, script);
		} // 0xBA9325BE372AB6EA 0xF52CD7F5 b1207
		// See REQUEST_VEHICLE_RECORDING
		static void REMOVE_VEHICLE_RECORDING(Any p0, Any* p1)
		{
			invoke<int>(0x139E35755418F6AA, p0, p1);
		} // 0x139E35755418F6AA 0xD3C05B00 b1207
		// This native does no interpolation between pathpoints. The same position will be returned for all times up to the next pathpoint in the recording.
		//
		// See REQUEST_VEHICLE_RECORDING
		static Vector3 GET_POSITION_OF_VEHICLE_RECORDING_AT_TIME(int recording, float time, const char* script)
		{
			return invoke<Vector3>(0x1A00961A1BE94E5E, recording, time, script);
		} // 0x1A00961A1BE94E5E 0x7178558D b1207
		// This native does no interpolation between pathpoints. The same rotation will be returned for all times up to the next pathpoint in the recording.
		//
		// See REQUEST_VEHICLE_RECORDING
		static Vector3 GET_ROTATION_OF_VEHICLE_RECORDING_AT_TIME(int recording, float time, const char* script)
		{
			return invoke<Vector3>(0x61787DD28B8CC0D5, recording, time, script);
		} // 0x61787DD28B8CC0D5 0xD96DEC68 b1207
		static float GET_TIME_POSITION_IN_RECORDING(Vehicle vehicle)
		{
			return invoke<float>(0x233B51C7913FA031, vehicle);
		} // 0x233B51C7913FA031 0xF8C3E4A2 b1207
		// p3 is some flag related to 'trailers' (invokes CVehicle::GetTrailer).
		//
		// See REQUEST_VEHICLE_RECORDING
		static void START_PLAYBACK_RECORDED_VEHICLE(Vehicle vehicle, int recording, const char* script, BOOL p3)
		{
			invoke<int>(0x4932B84E3276508E, vehicle, recording, script, p3);
		} // 0x4932B84E3276508E 0xCF614CA8 b1207
		// Often called after START_PLAYBACK_RECORDED_VEHICLE and SKIP_TIME_IN_PLAYBACK_RECORDED_VEHICLE; similar in use to FORCE_ENTITY_AI_AND_ANIMATION_UPDATE.
		static void FORCE_PLAYBACK_RECORDED_VEHICLE_UPDATE(Vehicle vehicle, BOOL p1)
		{
			invoke<int>(0x59ECA796021B0539, vehicle, p1);
		} // 0x59ECA796021B0539 0x01B91CD0 b1207
		static void STOP_PLAYBACK_RECORDED_VEHICLE(Vehicle vehicle)
		{
			invoke<int>(0xBF9B4D6267E8C26D, vehicle);
		} // 0xBF9B4D6267E8C26D 0xAE99C57C b1207
		static BOOL IS_PLAYBACK_GOING_ON_FOR_VEHICLE(Vehicle vehicle)
		{
			return invoke<BOOL>(0x02774B3A9034278F, vehicle);
		} // 0x02774B3A9034278F 0x61F7650D b1207
		static BOOL IS_PLAYBACK_USING_AI_GOING_ON_FOR_VEHICLE(Vehicle vehicle)
		{
			return invoke<BOOL>(0x5A7472606EC5B7C1, vehicle);
		} // 0x5A7472606EC5B7C1 0x63022C58 b1207
		static void SET_PLAYBACK_SPEED(Vehicle vehicle, float speed)
		{
			invoke<int>(0xD78084EED4CD94C6, vehicle, speed);
		} // 0xD78084EED4CD94C6 0x684E26E4 b1207
		// SET_TIME_POSITION_IN_RECORDING can be emulated by: desired_time - GET_TIME_POSITION_IN_RECORDING(vehicle)
		static void SKIP_TIME_IN_PLAYBACK_RECORDED_VEHICLE(Vehicle vehicle, float time)
		{
			invoke<int>(0x5F5E6379C59EFC56, vehicle, time);
		} // 0x5F5E6379C59EFC56 0xCF3EFA4B b1207
		static Vehicle GET_CLOSEST_VEHICLE(float x, float y, float z, float radius, Hash modelHash, int flags)
		{
			return invoke<Vehicle>(0x52F45D033645181B, x, y, z, radius, modelHash, flags);
		} // 0x52F45D033645181B 0xD7E26B2C b1207
		static Entity GET_TRAIN_CARRIAGE(Vehicle train, int trailerNumber)
		{
			return invoke<Entity>(0xD0FB093A4CDB932C, train, trailerNumber);
		} // 0xD0FB093A4CDB932C 0x2544E7A6 b1207
		static void DELETE_MISSION_TRAIN(Vehicle* train)
		{
			invoke<int>(0x0D3630FB07E8B570, train);
		} // 0x0D3630FB07E8B570 0x86C9497D b1207
		// flags = 0: DEFAULT; 1: KEEP_OLD_SPEED
		static void SET_MISSION_TRAIN_AS_NO_LONGER_NEEDED(Vehicle* train, int flags)
		{
			invoke<int>(0xBBE7648349B49BE8, train, flags);
		} // 0xBBE7648349B49BE8 0x19808560 b1207
		static void SET_MISSION_TRAIN_COORDS(Vehicle train, float x, float y, float z)
		{
			invoke<int>(0x7632755962AB9922, train, x, y, z);
		} // 0x7632755962AB9922 0xD6D70803 b1207
		// Notice: BOOL p4 was wrongly named takePassengers (?)
		// Can be used to rotate the train by setting the BOOL direction
		static void SET_MISSION_TRAIN_WARP_TO_COORDS_(Vehicle train, float x, float y, float z, BOOL direction)
		{
			invoke<int>(0xC9EA26893C9E4024, train, x, y, z, direction);
		} // 0xC9EA26893C9E4024 undefined b1207
		static void N0xA72B1BF3857B94D7(Vehicle train, BOOL p1)
		{
			invoke<int>(0xA72B1BF3857B94D7, train, p1);
		} // 0xA72B1BF3857B94D7 undefined b1207
		static BOOL IS_THIS_MODEL_A_DRAFT_VEHICLE_(Hash model)
		{
			return invoke<BOOL>(0xB9D5BDDA88E1BB66, model);
		} // 0xB9D5BDDA88E1BB66 undefined b1207
		static BOOL IS_THIS_MODEL_A_BOAT(Hash model)
		{
			return invoke<BOOL>(0x799CFC7C5B743B15, model);
		} // 0x799CFC7C5B743B15 0x10F6085C b1207
		static BOOL IS_THIS_MODEL_A_TRAIN(Hash model)
		{
			return invoke<BOOL>(0xFC08C8F8C1EDF174, model);
		} // 0xFC08C8F8C1EDF174 0xF87DCFFD b1207
		static void SET_VEHICLE_CAN_BE_TARGETTED(Vehicle vehicle, BOOL state)
		{
			invoke<int>(0x05254BA0B44ADC16, vehicle, state);
		} // 0x05254BA0B44ADC16 0x64B70B1D b1207
		static void SET_DONT_ALLOW_PLAYER_TO_ENTER_VEHICLE_IF_LOCKED_FOR_PLAYER(Vehicle vehicle, BOOL p1)
		{
			invoke<int>(0x63DC1F22C903B709, vehicle, p1);
		} // 0x63DC1F22C903B709 0x486C1280 b1207
		static void SET_VEHICLE_CAN_BE_VISIBLY_DAMAGED(Vehicle vehicle, BOOL state)
		{
			invoke<int>(0x4BF8131AE811541C, vehicle, state);
		} // 0x4BF8131AE811541C 0xC5D94017 b1207
		static void SET_VEHICLE_HAS_UNBREAKABLE_LIGHTS(Vehicle vehicle, BOOL p1)
		{
			invoke<int>(0xC903855E028A05F2, vehicle, p1);
		} // 0xC903855E028A05F2 0x009AB49E b1207
		static void SET_VEHICLE_RESPECTS_LOCKS_WHEN_HAS_DRIVER(Vehicle vehicle, BOOL p1)
		{
			invoke<int>(0x33992A808DF1C1BA, vehicle, p1);
		} // 0x33992A808DF1C1BA 0x758C5E2E b1207
		static void SET_VEHICLE_CAN_EJECT_PASSENGERS_IF_LOCKED(Vehicle vehicle, BOOL p1)
		{
			invoke<int>(0x065D03A9D6B2C6B5, vehicle, p1);
		} // 0x065D03A9D6B2C6B5  b1207
		static void SET_VEHICLE_DIRT_LEVEL(Vehicle vehicle, float dirtLevel)
		{
			invoke<int>(0x758C3460EE915D0A, vehicle, dirtLevel);
		} // 0x758C3460EE915D0A 0x2B39128B b1207
		// doorId: see SET_VEHICLE_DOOR_SHUT
		static BOOL IS_VEHICLE_DOOR_FULLY_OPEN(Vehicle vehicle, int doorId)
		{
			return invoke<BOOL>(0x7AE191143C7A9107, vehicle, doorId);
		} // 0x7AE191143C7A9107 0xC2385B6F b1207
		// Starts or stops the engine on the specified vehicle.
		//
		// vehicle: The vehicle to start or stop the engine on.
		// value: true to turn the vehicle on; false to turn it off.
		// instantly: if true, the vehicle will be set to the state immediately; otherwise, the current driver will physically turn on or off the engine.
		static void SET_VEHICLE_ENGINE_ON(Vehicle vehicle, BOOL value, BOOL instantly)
		{
			invoke<int>(0xB64CFA14CB9A2E78, vehicle, value, instantly);
		} // 0xB64CFA14CB9A2E78 0x7FBC86F1 b1207
		static void SET_VEHICLE_UNDRIVEABLE(Vehicle vehicle, BOOL toggle)
		{
			invoke<int>(0x6E884BAB713A2A94, vehicle, toggle);
		} // 0x6E884BAB713A2A94 0x48D02A4E b1207
		static void SET_VEHICLE_PROVIDES_COVER(Vehicle vehicle, BOOL toggle)
		{
			invoke<int>(0x652712478F1721F4, vehicle, toggle);
		} // 0x652712478F1721F4 0xEFC01CA9 b1207
		static void N0x3053064F909B5F42(Any p0, Any p1)
		{
			invoke<int>(0x3053064F909B5F42, p0, p1);
		} // 0x3053064F909B5F42 undefined b1207
		// doorId: see SET_VEHICLE_DOOR_SHUT
		static void SET_VEHICLE_DOOR_CONTROL(Vehicle vehicle, int doorId, int speed, float angle)
		{
			invoke<int>(0xD57F10EBBA814ECF, vehicle, doorId, speed, angle);
		} // 0xD57F10EBBA814ECF 0x572DD360 b1207
		// doorId: see SET_VEHICLE_DOOR_SHUT
		static void SET_VEHICLE_DOOR_LATCHED(Vehicle vehicle, int doorId, BOOL p2, BOOL p3, BOOL p4)
		{
			invoke<int>(0x06F8A202EB312A3C, vehicle, doorId, p2, p3, p4);
		} // 0x06F8A202EB312A3C 0x4EB7BBFC b1207
		// doorId: enum eDoorId
		// {
		// 	VEH_EXT_DOOR_INVALID_ID = -1,
		// 	VEH_EXT_DOOR_DSIDE_F,
		// 	VEH_EXT_DOOR_DSIDE_M,
		// 	VEH_EXT_DOOR_DSIDE_M1,
		// 	VEH_EXT_DOOR_DSIDE_M2,
		// 	VEH_EXT_DOOR_DSIDE_R,
		// 	VEH_EXT_DOOR_PSIDE_F,
		// 	VEH_EXT_DOOR_PSIDE_M,
		// 	VEH_EXT_DOOR_PSIDE_M1,
		// 	VEH_EXT_DOOR_PSIDE_M2,
		// 	VEH_EXT_DOOR_PSIDE_R,
		// 	VEH_EXT_BONNET,
		// 	VEH_EXT_BOOT
		// };
		static void SET_VEHICLE_DOOR_SHUT(Vehicle vehicle, int doorId, BOOL closeInstantly)
		{
			invoke<int>(0x6A3C24B91FD0EA09, vehicle, doorId, closeInstantly);
		} // 0x6A3C24B91FD0EA09 0x142606BD b1207
		// doorId: see SET_VEHICLE_DOOR_SHUT
		static void SET_VEHICLE_DOOR_BROKEN(Vehicle vehicle, int doorId, BOOL deleteDoor)
		{
			invoke<int>(0x9666CF20A1C6D780, vehicle, doorId, deleteDoor);
		} // 0x9666CF20A1C6D780 0x8147FEA7 b1207
		static void SET_VEHICLE_CAN_BREAK(Vehicle vehicle, BOOL toggle)
		{
			invoke<int>(0xC5ED9D59B4646611, vehicle, toggle);
		} // 0xC5ED9D59B4646611 0x90A810D1 b1207
		// Setting this to false, makes the specified vehicle to where if you press Y your character doesn't even attempt the animation to enter the vehicle. Hence it's not considered aka ignored.
		static void SET_VEHICLE_IS_CONSIDERED_BY_PLAYER(Vehicle vehicle, BOOL toggle)
		{
			invoke<int>(0x54800D386C5825E5, vehicle, toggle);
		} // 0x54800D386C5825E5 0x14413319 b1207
		static void SET_VEHICLE_MAY_BE_USED_BY_GOTO_POINT_ANY_MEANS(Vehicle vehicle, BOOL p1)
		{
			invoke<int>(0x7549B9E841940695, vehicle, p1);
		} // 0x7549B9E841940695 0x2F98B4B7 b1207
		static int GET_VEHICLE_DOOR_LOCK_STATUS(Vehicle vehicle)
		{
			return invoke<int>(0xC867FD144F2469D3, vehicle);
		} // 0xC867FD144F2469D3 0x0D72CEF2 b1207
		// doorId: see SET_VEHICLE_DOOR_SHUT
		//
		// Old name: _SET_VEHICLE_DOOR_CAN_BREAK
		static void SET_DOOR_ALLOWED_TO_BE_BROKEN_OFF(Vehicle vehicle, int doorId, BOOL isBreakable)
		{
			invoke<int>(0x081FB9D6422F804C, vehicle, doorId, isBreakable);
		} // 0x081FB9D6422F804C 0x065B92B3 b1207
		static BOOL IS_VEHICLE_ON_ALL_WHEELS(Vehicle vehicle)
		{
			return invoke<BOOL>(0x0D5D119529654EE0, vehicle);
		} // 0x0D5D119529654EE0 0x10089F8E b1207
		static BOOL GET_TRAIN_DIRECTION_(Vehicle train)
		{
			return invoke<BOOL>(0x3C9628A811CBD724, train);
		} // 0x3C9628A811CBD724 undefined b1207
		// https://i.imgur.com/1rHibjW.jpg
		static BOOL GET_TRAIN_DIRECTION_FROM_INDEX_(int trackIndex)
		{
			return invoke<BOOL>(0x67995318F5FAA496, trackIndex);
		} // 0x67995318F5FAA496 undefined b1207
		// _RESET_VEHICLE_*
		static Any N0x09034479E6E3E269(Vehicle train, Hash* trainTrack, int* junctionIndex)
		{
			return invoke<Any>(0x09034479E6E3E269, train, trainTrack, junctionIndex);
		} // 0x09034479E6E3E269 undefined b1207
		// Outputs junctionIndex, to be used with 0xE6C5E2125EB210C1
		static BOOL GET_TRAIN_TRACK_JUNCTION_AT_COORDS_(Hash trainTrack, float x, float y, float z, int* junctionIndex)
		{
			return invoke<BOOL>(0x86AFC343CF7F0B34, trainTrack, x, y, z, junctionIndex);
		} // 0x86AFC343CF7F0B34 undefined b1207
		static Any N0xD9BF3ED8EFB67EA3(Any p0, Any p1, Any p2, Any p3, Any p4)
		{
			return invoke<Any>(0xD9BF3ED8EFB67EA3, p0, p1, p2, p3, p4);
		} // 0xD9BF3ED8EFB67EA3 undefined b1207
		static Vector3 N0x785639D89F8451AB(Any p0, Any p1)
		{
			return invoke<Vector3>(0x785639D89F8451AB, p0, p1);
		} // 0x785639D89F8451AB undefined b1207
		// trainTrack: FREIGHT_GROUP, TRAINS3, BRAITHWAITES2_TRACK_CONFIG, TRAINS_OLD_WEST01, TRAINS_OLD_WEST03, TRAINS_NB1, TRAINS_INTERSECTION1_ANN
		static void SET_TRAIN_TRACK_JUNCTION_SWITCH_(Hash trainTrack, int junctionIndex, BOOL enabled)
		{
			invoke<int>(0xE6C5E2125EB210C1, trainTrack, junctionIndex, enabled);
		} // 0xE6C5E2125EB210C1 undefined b1207
		// Called together with 0xE6C5E2125EB210C1 in R* Script medium_update
		static void N0x3ABFA128F5BF5A70(Hash trainTrack, int junctionIndex, BOOL enabled)
		{
			invoke<int>(0x3ABFA128F5BF5A70, trainTrack, junctionIndex, enabled);
		} // 0x3ABFA128F5BF5A70 undefined b1207
		static Any N0x2C46D2A591D8C322(Any p0, Any p1, Any p2)
		{
			return invoke<Any>(0x2C46D2A591D8C322, p0, p1, p2);
		} // 0x2C46D2A591D8C322 undefined b1207
		static Any N0xCAFF2C9747103C02(Any p0, Any p1, Any p2)
		{
			return invoke<Any>(0xCAFF2C9747103C02, p0, p1, p2);
		} // 0xCAFF2C9747103C02 undefined b1207
		static void SET_ALL_JUNCTIONS_CLEARED_()
		{
			invoke<int>(0x138398153824E332);
		} // 0x138398153824E332 undefined b1207
		static void N0x34BCF6209B9668A7(int trackIndex, Any p1)
		{
			invoke<int>(0x34BCF6209B9668A7, trackIndex, p1);
		} // 0x34BCF6209B9668A7 undefined b1207
		static void N0xD0BA1853D76683C8(int trackIndex, float x, float y, float z, Any p4)
		{
			invoke<int>(0xD0BA1853D76683C8, trackIndex, x, y, z, p4);
		} // 0xD0BA1853D76683C8 undefined b1207
		static void SET_TRAIN_OFFSET_FROM_STATION(Vehicle train, float offset)
		{
			invoke<int>(0x8EC47DD4300BF063, train, offset);
		} // 0x8EC47DD4300BF063 undefined b1207
		static void N0xDC69F6913CCA0B99(Any p0, Any p1)
		{
			invoke<int>(0xDC69F6913CCA0B99, p0, p1);
		} // 0xDC69F6913CCA0B99 undefined b1207
		static void N0x7840576C50A13DBA(Vehicle train, BOOL p1)
		{
			invoke<int>(0x7840576C50A13DBA, train, p1);
		} // 0x7840576C50A13DBA undefined b1207
		static Any N0xD0116DF21E6C7B36(Any p0, Any p1)
		{
			return invoke<Any>(0xD0116DF21E6C7B36, p0, p1);
		} // 0xD0116DF21E6C7B36 undefined b1207
		// Only used in train_robbery4 R* Script
		// _C* - _DEL*
		static void DETACH_WAGON_ENTITY_FROM_TRAIN_(Entity entity)
		{
			invoke<int>(0x54CBDD6E1B4CB4DF, entity);
		} // 0x54CBDD6E1B4CB4DF undefined b1207
		// Returns p1 for 0xBA958F68031DDBFC (stationIndex)
		// _GET_N* (NEAREST_STATION_FOR_TRAIN?)
		static int N0x1180A2974D251B7B(Vehicle train)
		{
			return invoke<int>(0x1180A2974D251B7B, train);
		} // 0x1180A2974D251B7B undefined b1207
		// Returns p1 for 0xBA958F68031DDBFC (stationIndex)
		static int GET_CURRENT_STATION_FOR_TRAIN(Vehicle train)
		{
			return invoke<int>(0x86FA6D8B48667D75, train);
		} // 0x86FA6D8B48667D75 undefined b1207
		// _GET_P - _GET_T*
		static Hash N0x9CC94A948EAF5372(int trackIndex, int stationIndex)
		{
			return invoke<Hash>(0x9CC94A948EAF5372, trackIndex, stationIndex);
		} // 0x9CC94A948EAF5372 undefined b1207
		static Any N0xDE8C5B9F65017FA1(Vehicle train)
		{
			return invoke<Any>(0xDE8C5B9F65017FA1, train);
		} // 0xDE8C5B9F65017FA1 undefined b1207
		// Returns p0 for 0xBA958F68031DDBFC (trackIndex)
		static int GET_CURRENT_TRACK_FOR_TRAIN_(Vehicle train)
		{
			return invoke<int>(0xAF787E081AC4A8EE, train);
		} // 0xAF787E081AC4A8EE undefined b1207
		// Returns Coords of vStation
		// p0 - NET_TRAIN_MANAGER_GET_TRAIN_STATION_DATA
		// _GET_P* - _GET_T*
		static Vector3 GET_STATION_COORDS_FROM_TRAIN_STATION_DATA_(int trackIndex, int stationIndex)
		{
			return invoke<Vector3>(0xBA958F68031DDBFC, trackIndex, stationIndex);
		} // 0xBA958F68031DDBFC undefined b1207
		static int GET_TRACK_INDEX_OF_TRAIN(Vehicle train)
		{
			return invoke<int>(0x865FEC2FA899F29C, train);
		} // 0x865FEC2FA899F29C undefined b1207
		static void N0x1A861F899EBBE17C(Vehicle train, BOOL p1)
		{
			invoke<int>(0x1A861F899EBBE17C, train, p1);
		} // 0x1A861F899EBBE17C undefined b1207
		static void N0xF8F7DA13CFBD4532(int trackIndex, BOOL p1)
		{
			invoke<int>(0xF8F7DA13CFBD4532, trackIndex, p1);
		} // 0xF8F7DA13CFBD4532 undefined b1207
		// whistleSequence: ACKNOWLEDGE, BACKING_UP, CROSSING, DANGER, MOVING, NEXT_STATION, PASSING, STOPPED
		// p2 = true seems to mute the sound
		static void TRIGGER_TRAIN_WHISTLE_(Vehicle train, const char* whistleSequence, BOOL p2, BOOL p3)
		{
			invoke<int>(0xCFE122EC635CC2B2, train, whistleSequence, p2, p3);
		} // 0xCFE122EC635CC2B2 undefined b1207
		static void N0x2BB2B5BCF0DF8008(Any p0, Any p1)
		{
			invoke<int>(0x2BB2B5BCF0DF8008, p0, p1);
		} // 0x2BB2B5BCF0DF8008 undefined b1207
		static void N0x6703872EC09BC158(Any p0, Any p1)
		{
			invoke<int>(0x6703872EC09BC158, p0, p1);
		} // 0x6703872EC09BC158 undefined b1207
		static void N0x1BFBAFCC6760FF02(Vehicle train, BOOL p1)
		{
			invoke<int>(0x1BFBAFCC6760FF02, train, p1);
		} // 0x1BFBAFCC6760FF02 undefined b1207
		static Any N0xF5EA41C1408695FB(Any p0, Any p1, Any p2, Any p3)
		{
			return invoke<Any>(0xF5EA41C1408695FB, p0, p1, p2, p3);
		} // 0xF5EA41C1408695FB undefined b1207
		// This fixes a vehicle.
		// If the vehicle's engine's broken then you cannot fix it with this native.
		static void SET_VEHICLE_FIXED(Vehicle vehicle)
		{
			invoke<int>(0x79811282A9D1AE56, vehicle);
		} // 0x79811282A9D1AE56 0x17469AA1 b1207
		static void SET_DISABLE_VEHICLE_PETROL_TANK_FIRES(Vehicle vehicle, BOOL toggle)
		{
			invoke<int>(0xB70986AB19B04AFF, vehicle, toggle);
		} // 0xB70986AB19B04AFF 0xC40192B5 b1207
		static void SET_DISABLE_VEHICLE_PETROL_TANK_DAMAGE(Vehicle vehicle, BOOL toggle)
		{
			invoke<int>(0x5795FBE7A2001C14, vehicle, toggle);
		} // 0x5795FBE7A2001C14 0xAD3E05F2 b1207
		static void SET_DISABLE_VEHICLE_ENGINE_FIRES(Vehicle vehicle, BOOL p1)
		{
			invoke<int>(0xD146EE5F2B06B95E, vehicle, p1);
		} // 0xD146EE5F2B06B95E 0x1784BA1A b1207
		// _SET_VEHICLE_LI*
		static void SET_VEHICLE_LIMIT_SPEED_WHEN_PLAYER_INACTIVE(Vehicle vehicle, BOOL p1)
		{
			invoke<int>(0x8F75941C86EEBFCA, vehicle, p1);
		} // 0x8F75941C86EEBFCA 0x40C323AE b1207
		static void SET_VEHICLE_STOP_INSTANTLY_WHEN_PLAYER_INACTIVE(Vehicle vehicle, BOOL p1)
		{
			invoke<int>(0xC84E138448507567, vehicle, p1);
		} // 0xC84E138448507567 0x847F1304 b1207
		static void REMOVE_VEHICLES_FROM_GENERATORS_IN_AREA(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5)
		{
			invoke<int>(0xC619A44639BC0CB4, p0, p1, p2, p3, p4, p5);
		} // 0xC619A44639BC0CB4 0x42CC15E0 b1207
		// Locks the vehicle's steering to the desired angle, explained below.
		//
		// Requires to be called onTick. Steering is unlocked the moment the function stops being called on the vehicle.
		//
		// Steer bias:
		// -1.0 = full right
		// 0.0 = centered steering
		// 1.0 = full left
		static void SET_VEHICLE_STEER_BIAS(Vehicle vehicle, float value)
		{
			invoke<int>(0x84DAAE11E9EE4FC3, vehicle, value);
		} // 0x84DAAE11E9EE4FC3 0x7357C1EB b1207
		static BOOL IS_VEHICLE_EXTRA_TURNED_ON(Vehicle vehicle, int extraId)
		{
			return invoke<BOOL>(0xFA9A55D9C4351625, vehicle, extraId);
		} // 0xFA9A55D9C4351625 0x042098B5 b1207
		// Note: only some vehicle have extras
		// https://github.com/femga/rdr3_discoveries/blob/master/vehicles/vehicle_modding/vehicle_extras.lua
		static void SET_VEHICLE_EXTRA(Vehicle vehicle, int extraId, BOOL disable)
		{
			invoke<int>(0xBB6F89150BC9D16B, vehicle, extraId, disable);
		} // 0xBB6F89150BC9D16B 0x642D065C b1207
		static BOOL DOES_EXTRA_EXIST(Vehicle vehicle, int extraId)
		{
			return invoke<BOOL>(0xAF5E7E9A7620FFB5, vehicle, extraId);
		} // 0xAF5E7E9A7620FFB5 0x409411CC b1207
		// Apply damage to vehicle at a location. Location is relative to vehicle model (not world).
		//
		// Radius of effect damage applied in a sphere at impact location
		static void SET_VEHICLE_DAMAGE(Vehicle vehicle, float xOffset, float yOffset, float zOffset, float damage, float radius, BOOL p6)
		{
			invoke<int>(0x1D7678F81452BB41, vehicle, xOffset, yOffset, zOffset, damage, radius, p6);
		} // 0x1D7678F81452BB41 0x21B458B2 b1207
		// Returns 1000.0 if the function is unable to get the address of the specified vehicle or if it's not a vehicle.
		//
		// Minimum: -4000
		// Maximum: 1000
		//
		// -4000: Engine is destroyed
		// 0 and below: Engine catches fire and health rapidly declines
		// 300: Engine is smoking and losing functionality
		// 1000: Engine is perfect
		static float GET_VEHICLE_ENGINE_HEALTH(Vehicle vehicle)
		{
			return invoke<float>(0x90DBFFAC43B22081, vehicle);
		} // 0x90DBFFAC43B22081 0x8880038A b1207
		// 1000 is max health
		// Begins leaking gas at around 650 health
		// -999.90002441406 appears to be minimum health, although nothing special occurs <- false statement
		//
		// -------------------------
		// Minimum: -4000
		// Maximum: 1000
		//
		// -4000: Engine is destroyed
		// 0 and below: Engine catches fire and health rapidly declines
		// 300: Engine is smoking and losing functionality
		// 1000: Engine is perfect
		static void SET_VEHICLE_ENGINE_HEALTH(Vehicle vehicle, float health)
		{
			invoke<int>(0x8BDC5B998B4654EF, vehicle, health);
		} // 0x8BDC5B998B4654EF 0x1B760FB5 b1207
		// 1000 is max health
		static float GET_VEHICLE_PETROL_TANK_HEALTH(Vehicle vehicle)
		{
			return invoke<float>(0x1E5A9B356D5098BE, vehicle);
		} // 0x1E5A9B356D5098BE 0xE41595CE b1207
		// 1000 is max health
		static void SET_VEHICLE_PETROL_TANK_HEALTH(Vehicle vehicle, float health)
		{
			invoke<int>(0x6AB2918EE3BEC94C, vehicle, health);
		} // 0x6AB2918EE3BEC94C 0x660A3692 b1207
		// VEH_STUCK_ON_ROOF = 0,
		// VEH_STUCK_ON_SIDE,
		// VEH_STUCK_HUNG_UP,
		// VEH_STUCK_JAMMED
		static BOOL IS_VEHICLE_STUCK_TIMER_UP(Vehicle vehicle, int stuckType, int ms)
		{
			return invoke<BOOL>(0x1ABA9753939503C5, vehicle, stuckType, ms);
		} // 0x1ABA9753939503C5 0x2FCF58C1 b1207
		static void RESET_VEHICLE_STUCK_TIMER(Vehicle vehicle, int nullAttributes)
		{
			invoke<int>(0x23298B468F7D88B6, vehicle, nullAttributes);
		} // 0x23298B468F7D88B6 0xEF2A6016 b1207
		static BOOL IS_VEHICLE_DRIVEABLE(Vehicle vehicle, BOOL p1, BOOL p2)
		{
			return invoke<BOOL>(0xB86D29B10F627379, vehicle, p1, p2);
		} // 0xB86D29B10F627379 0x41A7267A b1207
		static BOOL IS_VEHICLE_WRECKED(Vehicle vehicle)
		{
			return invoke<BOOL>(0xDDBEA5506C848227, vehicle);
		} // 0xDDBEA5506C848227 undefined b1207
		static BOOL IS_VEHICLE_ON_FIRE_(Vehicle vehicle)
		{
			return invoke<BOOL>(0x0E3BF7ED4169EC43, vehicle);
		} // 0x0E3BF7ED4169EC43 undefined b1207
		static void SET_VEHICLE_HAS_BEEN_OWNED_BY_PLAYER(Vehicle vehicle, BOOL owned)
		{
			invoke<int>(0xBB5A3FA8ED3979C5, vehicle, owned);
		} // 0xBB5A3FA8ED3979C5 0xB4D3DBFB b1207
		// Sounds the horn for the specified vehicle.
		//
		// vehicle: The vehicle to activate the horn for.
		// mode: The hash of "NORMAL" or "HELDDOWN". Can be 0.
		// duration: The duration to sound the horn, in milliseconds.
		//
		// Note: If a player is in the vehicle, it will only sound briefly.
		static void START_VEHICLE_HORN(Vehicle vehicle, int duration, Hash mode, BOOL forever)
		{
			invoke<int>(0xB4E3BFC39CA16057, vehicle, duration, mode, forever);
		} // 0xB4E3BFC39CA16057 0x0DF5ADB3 b1207
		// if true, axles won't bend.
		static void SET_VEHICLE_HAS_STRONG_AXLES(Vehicle vehicle, BOOL toggle)
		{
			invoke<int>(0x252253C8A45AA1FC, vehicle, toggle);
		} // 0x252253C8A45AA1FC 0x0D1CBC65 b1207
		// snowLevel: 0.0 - 1.0
		static void SET_VEHICLE_SNOW_LEVEL_(Vehicle vehicle, float snowLevel)
		{
			invoke<int>(0x6F73EFAB11651D7F, vehicle, snowLevel);
		} // 0x6F73EFAB11651D7F undefined b1207
		// wetLevel: 0.0 - 1.0
		static void SET_VEHICLE_WET_LEVEL_(Vehicle vehicle, float wetLevel)
		{
			invoke<int>(0x5AABB09F6FBD1F87, vehicle, wetLevel);
		} // 0x5AABB09F6FBD1F87 undefined b1207
		// https://github.com/femga/rdr3_discoveries/blob/master/vehicles/vehicle_modding/vehicle_tints.lua
		static void SET_VEHICLE_TINT_(Vehicle vehicle, int tintId)
		{
			invoke<int>(0x8268B098F6FCA4E2, vehicle, tintId);
		} // 0x8268B098F6FCA4E2 undefined b1207
		// https://github.com/femga/rdr3_discoveries/blob/master/vehicles/vehicle_modding/vehicle_liveries.lua
		static void SET_VEHICLE_LIVERY_(Vehicle vehicle, int liveryIndex)
		{
			invoke<int>(0xF89D82A0582E46ED, vehicle, liveryIndex);
		} // 0xF89D82A0582E46ED undefined b1207
		static int GET_VEHICLE_TINT_(Vehicle vehicle)
		{
			return invoke<int>(0xA44D65E6C624526F, vehicle);
		} // 0xA44D65E6C624526F undefined b1207
		static int GET_VEHICLE_LIVERY_(Vehicle vehicle)
		{
			return invoke<int>(0xBB765B8FD49A796C, vehicle);
		} // 0xBB765B8FD49A796C undefined b1207
		static BOOL IS_VEHICLE_WINDOW_INTACT(Vehicle vehicle, int windowIndex)
		{
			return invoke<BOOL>(0x0E7910A63E05B12C, vehicle, windowIndex);
		} // 0x0E7910A63E05B12C 0xAC4EF23D b1436
		// Returns false if every seat is occupied.
		static BOOL ARE_ANY_VEHICLE_SEATS_FREE(Vehicle vehicle)
		{
			return invoke<BOOL>(0xA0A424505A1B6429, vehicle);
		} // 0xA0A424505A1B6429 0x648E685A b1207
		// Sets a vehicle to be strongly resistant to explosions. p0 is the vehicle; set p1 to false to toggle the effect on/off.
		static void SET_VEHICLE_EXPLODES_ON_HIGH_EXPLOSION_DAMAGE(Vehicle vehicle, BOOL toggle)
		{
			invoke<int>(0xA402939C6761E1A3, vehicle, toggle);
		} // 0xA402939C6761E1A3 0x38CC692B b1207
		static void SET_ALLOW_VEHICLE_EXPLODES_ON_CONTACT(Vehicle vehicle, BOOL p1)
		{
			invoke<int>(0x8D3230A0ED7DE39F, vehicle, p1);
		} // 0x8D3230A0ED7DE39F 0xC306A9A3 b1207
		static BOOL IS_ANY_VEHICLE_NEAR_POINT(float x, float y, float z, float radius)
		{
			return invoke<BOOL>(0x5698BA4FD04D39C4, x, y, z, radius);
		} // 0x5698BA4FD04D39C4 0x2867A834 b1207
		static void REQUEST_VEHICLE_HIGH_DETAIL_MODEL(Vehicle vehicle)
		{
			invoke<int>(0x84B81EF78BD22357, vehicle);
		} // 0x84B81EF78BD22357 0x9DA21956 b1207
		static void REQUEST_VEHICLE_ASSET(Hash vehicleHash, int vehicleAsset)
		{
			invoke<int>(0x81A15811460FAB3A, vehicleHash, vehicleAsset);
		} // 0x81A15811460FAB3A 0x902B4F06 b1207
		static void N0xCF9DA72002FC16BF(Any p0, Any p1, Any p2)
		{
			invoke<int>(0xCF9DA72002FC16BF, p0, p1, p2);
		} // 0xCF9DA72002FC16BF undefined b1207
		static BOOL HAS_VEHICLE_ASSET_LOADED(Hash vehicleAsset)
		{
			return invoke<BOOL>(0xB935F3154BC913C8, vehicleAsset);
		} // 0xB935F3154BC913C8 0x8DAAC3CB b1207
		static void REMOVE_VEHICLE_ASSET(Hash vehicleAsset)
		{
			invoke<int>(0x888A4E675B38F5AD, vehicleAsset);
		} // 0x888A4E675B38F5AD 0x9620E9C6 b1207
		static Any SET_VEHICLE_AUTOMATICALLY_ATTACHES(Vehicle vehicle, BOOL p1, Any p2)
		{
			return invoke<Any>(0x501354951CD942DE, vehicle, p1, p2);
		} // 0x501354951CD942DE 0x4273A8D3 b1207
		static void N0x104D9A7B1C0D0783(Vehicle vehicle, float p1)
		{
			invoke<int>(0x104D9A7B1C0D0783, vehicle, p1);
		} // 0x104D9A7B1C0D0783 undefined b1207
		static BOOL IS_VEHICLE_IN_BURNOUT(Vehicle vehicle)
		{
			return invoke<BOOL>(0x3F5029A8FC060C48, vehicle);
		} // 0x3F5029A8FC060C48 0x6632BC12 b1207
		static void SET_VEHICLE_HANDBRAKE(Vehicle vehicle, BOOL toggle)
		{
			invoke<int>(0x91BE51AEC4E99710, vehicle, toggle);
		} // 0x91BE51AEC4E99710 0xBA729A25 b1207
		static void INSTANTLY_FILL_VEHICLE_POPULATION()
		{
			invoke<int>(0x1FF00DB43026B12F);
		} // 0x1FF00DB43026B12F 0x37BC6ACB b1207
		static BOOL HAS_INSTANT_FILL_VEHICLE_POPULATION_FINISHED()
		{
			return invoke<BOOL>(0x2701D01D5E18FC31);
		} // 0x2701D01D5E18FC31 0x71D898EF b1207
		// Gets the trailer of a vehicle and puts it into the trailer parameter.
		static BOOL GET_VEHICLE_TRAILER_VEHICLE(Vehicle vehicle, Vehicle* trailer)
		{
			return invoke<BOOL>(0xCF867A239EC30741, vehicle, trailer);
		} // 0xCF867A239EC30741 0xAE84D758 b1207
		static float GET_VEHICLE_ESTIMATED_MAX_SPEED(Vehicle vehicle)
		{
			return invoke<float>(0xFE52F34491529F0B, vehicle);
		} // 0xFE52F34491529F0B 0x7D1A0616 b1207
		static int ADD_ROAD_NODE_SPEED_ZONE(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9, Any p10)
		{
			return invoke<int>(0x4C221BAC54D735C3, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
		} // 0x4C221BAC54D735C3 0xD6685803 b1207
		static BOOL REMOVE_ROAD_NODE_SPEED_ZONE(int speedzone)
		{
			return invoke<BOOL>(0xFE9AB3354ACE6C9C, speedzone);
		} // 0xFE9AB3354ACE6C9C 0x0C0332A6 b1207
		static BOOL IS_ENTRY_POINT_FOR_SEAT_CLEAR(Ped ped, Vehicle vehicle, int seatIndex, BOOL side, BOOL onEnter)
		{
			return invoke<BOOL>(0x80DDCCB2F4A3EB57, ped, vehicle, seatIndex, side, onEnter);
		} // 0x80DDCCB2F4A3EB57 0xAB0E79EB b1207
		// seatIndex: see CREATE_PED_INSIDE_VEHICLE
		static BOOL CAN_SHUFFLE_SEAT(Vehicle vehicle, int seatIndex)
		{
			return invoke<BOOL>(0xF8B2D32A2231FD24, vehicle, seatIndex);
		} // 0xF8B2D32A2231FD24 0xB3EB01ED b1207
		static void MODIFY_VEHICLE_TOP_SPEED(Vehicle vehicle, float value)
		{
			invoke<int>(0x35AD938C74CACD6A, vehicle, value);
		} // 0x35AD938C74CACD6A 0xE943B09C b1207
		static void SET_VEHICLE_STAYS_FROZEN_WHEN_CLEANED_UP(Vehicle vehicle, BOOL toggle)
		{
			invoke<int>(0x23A3AB86E0807721, vehicle, toggle);
		} // 0x23A3AB86E0807721 0xDF594D8D b1207
		static void SET_VEHICLE_INFLUENCES_WANTED_LEVEL(Vehicle vehicle, BOOL toggle)
		{
			invoke<int>(0xC1842F40FD501DA2, vehicle, toggle);
		} // 0xC1842F40FD501DA2 0x04F5546C b1207
		static BOOL IS_BOAT_GROUNDED_(Vehicle vehicle)
		{
			return invoke<BOOL>(0x30D86B2B7622D0EB, vehicle);
		} // 0x30D86B2B7622D0EB undefined b1207
		static void SET_VEHICLE_NOT_STEALABLE_AMBIENTLY(Vehicle vehicle, BOOL p1)
		{
			invoke<int>(0x09C970AE59ABF6B2, vehicle, p1);
		} // 0x09C970AE59ABF6B2 0x1984F88D b1207
		static void LOCK_DOORS_WHEN_NO_LONGER_NEEDED(Vehicle vehicle)
		{
			invoke<int>(0x1EF36558FBDE2DAA, vehicle);
		} // 0x1EF36558FBDE2DAA 0x3FBE904F b1207
		static Vehicle GET_LAST_DRIVEN_VEHICLE()
		{
			return invoke<Vehicle>(0xA94F3E0AB9695E19);
		} // 0xA94F3E0AB9695E19 0xFEB0C0C8 b1207
		static void CLEAR_LAST_DRIVEN_VEHICLE()
		{
			invoke<int>(0x0EFC5DC62E67609B);
		} // 0x0EFC5DC62E67609B 0x07186AD9 b1207
		static void SET_PED_OWNS_VEHICLE(Ped ped, Vehicle vehicle)
		{
			invoke<int>(0x838C216C2B05A009, ped, vehicle);
		} // 0x838C216C2B05A009 undefined b1207
		static Entity GET_VEHICLE_OWNER_(Vehicle vehicle)
		{
			return invoke<Entity>(0xB729679356A889AE, vehicle);
		} // 0xB729679356A889AE undefined b1207
		static void SET_VEHICLE_LOD_MULTIPLIER(Vehicle vehicle, float multiplier)
		{
			invoke<int>(0x5F5E2B1B9EAECC0F, vehicle, multiplier);
		} // 0x5F5E2B1B9EAECC0F 0x569E5AE3 b1207
		// Ranges from -1 to 2? (internal type is int8)
		// https://imgur.com/a/bPzHcft
		static void SET_VEHICLE_LOD_LEVEL_(Vehicle vehicle, int lodLevel)
		{
			invoke<int>(0x3FA7D7D1E0EA809E, vehicle, lodLevel);
		} // 0x3FA7D7D1E0EA809E undefined b1207
		static void SET_FORCE_VEHICLE_ENGINE_DAMAGE_BY_BULLET(Vehicle vehicle, BOOL toggle)
		{
			invoke<int>(0x7F8E2B131E1DCA6C, vehicle, toggle);
		} // 0x7F8E2B131E1DCA6C 0x900C878C b1207
		// Copies sourceVehicle's damage (broken bumpers, broken lights, etc.) to targetVehicle.
		static void COPY_VEHICLE_DAMAGES(Vehicle sourceVehicle, Vehicle targetVehicle)
		{
			invoke<int>(0xDBC28A8C683CD80B, sourceVehicle, targetVehicle);
		} // 0xDBC28A8C683CD80B 0xBAE491C7 b1207
		static void SET_VEHICLE_SHOOT_AT_TARGET(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5)
		{
			invoke<int>(0xB79BE78C665B3E6D, p0, p1, p2, p3, p4, p5);
		} // 0xB79BE78C665B3E6D 0x2343FFDF b1207
		static void SET_FORCE_HD_VEHICLE(Vehicle vehicle, BOOL toggle)
		{
			invoke<int>(0x373CB1283308BD7B, vehicle, toggle);
		} // 0x373CB1283308BD7B 0xE0FC6A32 b1207
		static void TRACK_VEHICLE_VISIBILITY(Vehicle vehicle)
		{
			invoke<int>(0x1F3969B140DEE157, vehicle);
		} // 0x1F3969B140DEE157 0x78122DC1 b1207
		// Requires a visibility tracker on the vehicle (TRACK_VEHICLE_VISIBILITY)
		static BOOL IS_VEHICLE_VISIBLE(Vehicle vehicle)
		{
			return invoke<BOOL>(0x424910CD5DE8C246, vehicle);
		} // 0x424910CD5DE8C246 0x7E0D6056 b1207
		static Any N0x13C190302369308B(Any p0)
		{
			return invoke<Any>(0x13C190302369308B, p0);
		} // 0x13C190302369308B undefined b1207
		static void SET_ENABLE_VEHICLE_SLIPSTREAMING(BOOL p0)
		{
			invoke<int>(0x73F1E4F6DF26FE30, p0);
		} // 0x73F1E4F6DF26FE30 0xD2B8ACBD b1207
		static void SET_VEHICLE_INACTIVE_DURING_PLAYBACK(Vehicle vehicle, BOOL toggle)
		{
			invoke<int>(0x4EA71B4C9DB3C3F1, vehicle, toggle);
		} // 0x4EA71B4C9DB3C3F1 0x50F89338 b1207
		static void SET_VEHICLE_ENGINE_CAN_DEGRADE(Vehicle vehicle, BOOL toggle)
		{
			invoke<int>(0x48E4C137A71C2688, vehicle, toggle);
		} // 0x48E4C137A71C2688 0x081DAC12 b1207
		static void SET_VEHICLE_IS_STOLEN(Vehicle vehicle, BOOL isStolen)
		{
			invoke<int>(0x6C32FC81DFF25C9A, vehicle, isStolen);
		} // 0x6C32FC81DFF25C9A 0x70912E42 b1207
		// Used in Script Function MC_LOCAL_SETUP_VEH - enabling transitions
		static void N0xCBF88256E44D5D39(Vehicle vehicle, BOOL p1)
		{
			invoke<int>(0xCBF88256E44D5D39, vehicle, p1);
		} // 0xCBF88256E44D5D39 undefined b1207
		// Used in Script Function MC_LOCAL_SETUP_VEH - enabling transitions
		static void N0xC325A6BAA62CF8A2(Vehicle vehicle, BOOL p1)
		{
			invoke<int>(0xC325A6BAA62CF8A2, vehicle, p1);
		} // 0xC325A6BAA62CF8A2 undefined b1207
		static void N0x0CD7914D17A970AB(Any p0, Any p1)
		{
			invoke<int>(0x0CD7914D17A970AB, p0, p1);
		} // 0x0CD7914D17A970AB undefined b1207
		static void N0x23F66C36F8E5EAAB(Any p0, Any p1)
		{
			invoke<int>(0x23F66C36F8E5EAAB, p0, p1);
		} // 0x23F66C36F8E5EAAB undefined b1207
		static void N0x697DF68F3A761A50(Any p0)
		{
			invoke<int>(0x697DF68F3A761A50, p0);
		} // 0x697DF68F3A761A50 undefined b1207
		static void N0x27E3F2B57209FA54(Any p0, Any p1)
		{
			invoke<int>(0x27E3F2B57209FA54, p0, p1);
		} // 0x27E3F2B57209FA54 undefined b1207
		static void DISABLE_VEHICLE_WEAPON(BOOL disabled, Hash weaponHash, Vehicle vehicle, Ped owner)
		{
			invoke<int>(0x94B1E71B144356A5, disabled, weaponHash, vehicle, owner);
		} // 0x94B1E71B144356A5 0xA688B7D1 b1207
		static void SET_VEHICLE_CAN_BE_USED_BY_FLEEING_PEDS(Vehicle vehicle, BOOL toggle)
		{
			invoke<int>(0xE42952510F84AFDB, vehicle, toggle);
		} // 0xE42952510F84AFDB 0x5130DB1E b1207
		static void SET_VEHICLE_KEEP_ENGINE_ON_WHEN_ABANDONED(Vehicle vehicle, BOOL toggle)
		{
			invoke<int>(0x1549BA7FE83A2383, vehicle, toggle);
		} // 0x1549BA7FE83A2383 0x51E0064F b1207
		static void SET_VEHICLE_WHEELS_CAN_BREAK_OFF_WHEN_BLOW_UP(Vehicle vehicle, BOOL toggle)
		{
			invoke<int>(0xC462C79379ABBCB1, vehicle, toggle);
		} // 0xC462C79379ABBCB1 0x670913A4 b1207
		static void N0x15CC8C33D7FFCC4A(Vehicle vehicle, int p1)
		{
			invoke<int>(0x15CC8C33D7FFCC4A, vehicle, p1);
		} // 0x15CC8C33D7FFCC4A undefined b1436
		// Used to be incorrectly named SET_VEHICLE_EXCLUSIVE_DRIVER
		static void SET_VEHICLE_AI_CAN_USE_EXCLUSIVE_SEATS(Vehicle vehicle, BOOL toggle)
		{
			invoke<int>(0x0893DAFBFA67110E, vehicle, toggle);
		} // 0x0893DAFBFA67110E  b1207
		// index: 0 - 1
		//
		// Used to be incorrectly named _SET_VEHICLE_EXCLUSIVE_DRIVER_2
		static void SET_VEHICLE_EXCLUSIVE_DRIVER(Vehicle vehicle, Ped ped, int index)
		{
			invoke<int>(0xC6B9BF123B9463B6, vehicle, ped, index);
		} // 0xC6B9BF123B9463B6 0xAA8BD440 b1207
		static BOOL IS_PED_EXCLUSIVE_DRIVER_OF_VEHICLE_(Ped ped, Vehicle vehicle, int* outIndex)
		{
			return invoke<BOOL>(0xB213D2A560B2E48B, ped, vehicle, outIndex);
		} // 0xB213D2A560B2E48B undefined b1207
		static void N0xDC0556D0F484ECAA(Any p0)
		{
			invoke<int>(0xDC0556D0F484ECAA, p0);
		} // 0xDC0556D0F484ECAA undefined b1207
		// Old name: _SET_DISABLE_SUPERDUMMY_MODE
		static void SET_DISABLE_SUPERDUMMY(Vehicle vehicle, BOOL disable)
		{
			invoke<int>(0x1716D787D9B94202, vehicle, disable);
		} // 0x1716D787D9B94202  b1232
		// Seems related to vehicle health, like the one in IV.
		// Max 1000, min 0.
		// Vehicle does not necessarily explode or become undrivable at 0.
		static float GET_VEHICLE_BODY_HEALTH(Vehicle vehicle)
		{
			return invoke<float>(0x42113B857E33C16E, vehicle);
		} // 0x42113B857E33C16E 0x2B2FCC28 b1207
		static void SET_VEHICLE_BODY_HEALTH(Vehicle vehicle, float value)
		{
			invoke<int>(0x55CCAAE4F28C67A0, vehicle, value);
		} // 0x55CCAAE4F28C67A0 0x920C2517 b1207
		static Any N0xE777DDF3E78397E8(Any p0)
		{
			return invoke<Any>(0xE777DDF3E78397E8, p0);
		} // 0xE777DDF3E78397E8 undefined b1207
		static void SET_VEHICLE_BROKEN_PARTS_DONT_AFFECT_AI_HANDLING(Vehicle vehicle, BOOL p1)
		{
			invoke<int>(0xCEC4CA2CAB8FA98C, vehicle, p1);
		} // 0xCEC4CA2CAB8FA98C 0x819CD954 b1207
		// Only used in SP Scripts.
		// Related to Vehicle Speed.
		static void N0x012701ED938B85DE(float p0, float p1)
		{
			invoke<int>(0x012701ED938B85DE, p0, p1);
		} // 0x012701ED938B85DE undefined b1207
		static void N0x8379E05871AD24E0()
		{
			invoke<int>(0x8379E05871AD24E0);
		} // 0x8379E05871AD24E0 undefined b1207
		static void SET_HORSE_TRAFFIC_GROUPING_DISTRIBUTION_(Any p0, Any p1, Any p2, Any p3)
		{
			invoke<int>(0xF5FFB08976911B50, p0, p1, p2, p3);
		} // 0xF5FFB08976911B50 undefined b1207
		static BOOL ATTACH_DRAFT_VEHICLE_HARNESS_PED_(Ped mount, Vehicle draft, int harnessId)
		{
			return invoke<BOOL>(0x316CDB5B6E8F4110, mount, draft, harnessId);
		} // 0x316CDB5B6E8F4110 undefined b1207
		static BOOL DETACH_DRAFT_VEHICLE_HARNESS_FROM_INDEX_(Vehicle draft, int harnessId)
		{
			return invoke<BOOL>(0x4402960666000E62, draft, harnessId);
		} // 0x4402960666000E62 undefined b1207
		static BOOL DETACH_DRAFT_VEHICLE_HARNESS_PED_(Vehicle draft, Ped ped)
		{
			return invoke<BOOL>(0xB36D3EC70963BE60, draft, ped);
		} // 0xB36D3EC70963BE60 undefined b1207
		static void N0x0F7F603BDE08C4D3(Any p0)
		{
			invoke<int>(0x0F7F603BDE08C4D3, p0);
		} // 0x0F7F603BDE08C4D3 undefined b1207
		// Returns number of horses a wagon can have
		static int GET_NUM_DRAFT_VEHICLE_HARNESS_PED_(Hash modelHash)
		{
			return invoke<int>(0x5B1A26BB18E7D451, modelHash);
		} // 0x5B1A26BB18E7D451 undefined b1207
		static Vector3 GET_CHECKPOINT_TRAIN_SPAWN_LOCATION_(int trackIndex, float x, float y, float z, float distance, BOOL direction)
		{
			return invoke<Vector3>(0x35D302397E524939, trackIndex, x, y, z, distance, direction);
		} // 0x35D302397E524939 undefined b1207
		static void N0xC399CC89FBA05DA0(Vehicle vehicle, BOOL p1)
		{
			invoke<int>(0xC399CC89FBA05DA0, vehicle, p1);
		} // 0xC399CC89FBA05DA0 undefined b1207
		// Returns handles of boat paddles entities.
		static void GET_ROWING_OARS_(Vehicle vehicle, Entity* left, Entity* right)
		{
			invoke<int>(0xA6E210FB4283B767, vehicle, left, right);
		} // 0xA6E210FB4283B767 undefined b1207
		static Ped GET_DRIVER_OF_VEHICLE(Vehicle vehicle)
		{
			return invoke<Ped>(0x2963B5C1637E8A27, vehicle);
		} // 0x2963B5C1637E8A27 undefined b1207
		// Hashes: COACH2_BOOT_LOOT_ITEMS_COACHROB_RSC, COACH2_BOOT_LOOT_ITEMS_COACHROB, COACH2_MARY3
		static void SET_FORCE_COACH_ROBBERY_LOOT_(Vehicle vehicle, Hash coachrobberyLoot)
		{
			invoke<int>(0xF489F94BFEE12BB0, vehicle, coachrobberyLoot);
		} // 0xF489F94BFEE12BB0 undefined b1207
		static Any N0x0BA4250D20007C2E(Any p0)
		{
			return invoke<Any>(0x0BA4250D20007C2E, p0);
		} // 0x0BA4250D20007C2E undefined b1207
		static void N0x2200AB13CBD10F4E(Vehicle vehicle, float x, float y, float z, BOOL p4, float p5)
		{
			invoke<int>(0x2200AB13CBD10F4E, vehicle, x, y, z, p4, p5);
		} // 0x2200AB13CBD10F4E undefined b1207
		static void N0xB42C87521D1BDD2F(Vehicle vehicle, float x, float y, float z)
		{
			invoke<int>(0xB42C87521D1BDD2F, vehicle, x, y, z);
		} // 0xB42C87521D1BDD2F undefined b1207
		static void N0xC351394B932A6A50(Any p0)
		{
			invoke<int>(0xC351394B932A6A50, p0);
		} // 0xC351394B932A6A50 undefined b1207
		static void N0x172E9DD35858DCD7(Any p0)
		{
			invoke<int>(0x172E9DD35858DCD7, p0);
		} // 0x172E9DD35858DCD7 undefined b1207
		static int GET_BREAKABLE_VEHICLE_LOCKS_STATE_(Vehicle vehicle)
		{
			return invoke<int>(0xE015CF1F2C0959D8, vehicle);
		} // 0xE015CF1F2C0959D8 undefined b1207
		static Any N0x877EA24EB1614495(Any p0, Any p1, Any p2)
		{
			return invoke<Any>(0x877EA24EB1614495, p0, p1, p2);
		} // 0x877EA24EB1614495 undefined b1207
		static Object GET_BREAKABLE_VEHICLE_LOCK_OBJECT_(Vehicle vehicle, int index)
		{
			return invoke<Object>(0x58F2244C1286D09A, vehicle, index);
		} // 0x58F2244C1286D09A undefined b1207
		static int GET_NUM_BREAKABLE_VEHICLE_LOCK_OBJECTS_(Vehicle vehicle)
		{
			return invoke<int>(0x2FA86833E3617E2D, vehicle);
		} // 0x2FA86833E3617E2D undefined b1207
		static void SET_BREAKABLE_VEHICLE_LOCKS_UNBREAKABLE(Vehicle vehicle, BOOL toggle)
		{
			invoke<int>(0xBC4735F48CD983EF, vehicle, toggle);
		} // 0xBC4735F48CD983EF undefined b1207
		static void N0x9D12796EF4BF9EA9(Any p0)
		{
			invoke<int>(0x9D12796EF4BF9EA9, p0);
		} // 0x9D12796EF4BF9EA9 undefined b1207
		static void N0x850CE59DEC2028F3(Vehicle vehicle, Any p1)
		{
			invoke<int>(0x850CE59DEC2028F3, vehicle, p1);
		} // 0x850CE59DEC2028F3 undefined b1207
		static void N0x0355FE37240E2C77(Any p0, Any p1)
		{
			invoke<int>(0x0355FE37240E2C77, p0, p1);
		} // 0x0355FE37240E2C77 undefined b1207
		static void N0x3D86997A86FEEF0D(Any p0, Any p1)
		{
			invoke<int>(0x3D86997A86FEEF0D, p0, p1);
		} // 0x3D86997A86FEEF0D undefined b1207
		static void N0xD826690B5CF3BEFF(Vehicle vehicle, Any p1)
		{
			invoke<int>(0xD826690B5CF3BEFF, vehicle, p1);
		} // 0xD826690B5CF3BEFF undefined b1207
		// Params: destroyingForce is usually 100f in R* Scripts
		// Similar to 0xD4F5EFB55769D272, _A*
		static void BREAK_OFF_DRAFT_WHEEL_(Vehicle vehicle, int wheelIndex, float destroyingForce)
		{
			invoke<int>(0xC372B6A88F6E4AD8, vehicle, wheelIndex, destroyingForce);
		} // 0xC372B6A88F6E4AD8 undefined b1207
		static BOOL GET_DRAFT_ANIMAL_COUNT(Vehicle vehicle, int* expected, int* actual)
		{
			return invoke<BOOL>(0xA19447D83294E29F, vehicle, expected, actual);
		} // 0xA19447D83294E29F undefined b1207
		static void N0x165BE2001E5E4B75(Any p0)
		{
			invoke<int>(0x165BE2001E5E4B75, p0);
		} // 0x165BE2001E5E4B75 undefined b1207
		static void SET_DRAFT_VEHICLE_ANIMALS_CAN_DETACH_(Vehicle draft, BOOL canDetach)
		{
			invoke<int>(0x6090A031C69F384E, draft, canDetach);
		} // 0x6090A031C69F384E undefined b1207
		static void SET_DRAFT_VEHICLE_YOKE_CAN_BREAK_(Vehicle draft, BOOL canBreak)
		{
			invoke<int>(0x226C6A4E3346D288, draft, canBreak);
		} // 0x226C6A4E3346D288 undefined b1207
		static void ADD_TRAIN_TEMPORARY_STOP_(Vehicle train, int trackIndex, float x, float y, float z)
		{
			invoke<int>(0x41503629D1139ABC, train, trackIndex, x, y, z);
		} // 0x41503629D1139ABC undefined b1207
		// _SET_VEHICLE_S*
		static void N0x0794199B25E499E1(Vehicle wagon, BOOL p1)
		{
			invoke<int>(0x0794199B25E499E1, wagon, p1);
		} // 0x0794199B25E499E1 undefined b1207
		// _SET_VEHICLE_WHEELS_*
		static void N0x73118A3EE9C9B6DB(Vehicle wagon, int p1, BOOL p2)
		{
			invoke<int>(0x73118A3EE9C9B6DB, wagon, p1, p2);
		} // 0x73118A3EE9C9B6DB undefined b1207
		// Only used in R* SP Script rcm_abigail31: p1 = 5
		// _GET_VEHICLE_T* - _GET_VO*
		static BOOL N0xE1C0F8781BF130C2(Vehicle wagon, int p1)
		{
			return invoke<BOOL>(0xE1C0F8781BF130C2, wagon, p1);
		} // 0xE1C0F8781BF130C2 undefined b1207
		static BOOL IS_VEHICLE_WHEEL_DESTROYED_(Vehicle vehicle, int wheel)
		{
			return invoke<BOOL>(0xCB2CA620C48BC875, vehicle, wheel);
		} // 0xCB2CA620C48BC875 undefined b1207
		// _ARE_ANY_VEHICLE_(WHEELS_DESTROYED?)*
		static BOOL N0x18714953CCED17D3(Vehicle vehicle)
		{
			return invoke<BOOL>(0x18714953CCED17D3, vehicle);
		} // 0x18714953CCED17D3 undefined b1207
		// _H*
		static void N0x41F0B254DDF71473(Vehicle wagon)
		{
			invoke<int>(0x41F0B254DDF71473, wagon);
		} // 0x41F0B254DDF71473 undefined b1207
		static void SET_VEHICLE_DETERIORATION_(Vehicle vehicle, float amount, int p2, BOOL p3)
		{
			invoke<int>(0x8E5DA070BAD3279E, vehicle, amount, p2, p3);
		} // 0x8E5DA070BAD3279E undefined b1207
		// doorId: see SET_VEHICLE_DOOR_SHUT
		static BOOL IS_VEHICLE_DOOR_BROKEN_(Vehicle vehicle, int doorId)
		{
			return invoke<BOOL>(0xE979BB5602AD3402, vehicle, doorId);
		} // 0xE979BB5602AD3402 undefined b1207
		// wheelIndex 0: left, wheelIndex 1: right, 4 & 5: unknown
		static Entity BREAK_OFF_VEHICLE_WHEEL_(Vehicle vehicle, int wheelIndex)
		{
			return invoke<Entity>(0xD4F5EFB55769D272, vehicle, wheelIndex);
		} // 0xD4F5EFB55769D272 undefined b1207
		// Spawn without lanterns set
		static BOOL DELETE_VEHICLE_LANTERNS_(Vehicle vehicle)
		{
			return invoke<BOOL>(0xE1A83D4A3B5D7938, vehicle);
		} // 0xE1A83D4A3B5D7938 undefined b1207
		// _SET_INSTANTLY_* - _SET_MISSION_TRAIN*
		static void N0x6DE072AC8A95FFC1(Vehicle vehicle, BOOL p1)
		{
			invoke<int>(0x6DE072AC8A95FFC1, vehicle, p1);
		} // 0x6DE072AC8A95FFC1 undefined b1207
		static void SET_DRAFT_VEHICLE_DESIRED_SPEED_(Vehicle vehicle, float speed)
		{
			invoke<int>(0x0C3F0F7F92CA847C, vehicle, speed);
		} // 0x0C3F0F7F92CA847C undefined b1207
		// Returns rage::NumericLimits<float>::kMax (3.402823466e+38) if vehicle is not a valid vehicle of type VEHICLE_TYPE_DRAFT.
		static float GET_DRAFT_VEHICLE_DESIRED_SPEED_(Vehicle vehicle)
		{
			return invoke<float>(0xC6D7DDC843176701, vehicle);
		} // 0xC6D7DDC843176701 undefined b1207
		// _SET_DRAFT_VEHICLE_(STOP?)*
		static void N0xC4A2C11FC0D41916(Vehicle vehicle, BOOL p1)
		{
			invoke<int>(0xC4A2C11FC0D41916, vehicle, p1);
		} // 0xC4A2C11FC0D41916 undefined b1207
		// _SET_DRAFT_VEHICLE_*
		static void N0xFC4F15A7DDDC47B1(Vehicle vehicle, BOOL p1)
		{
			invoke<int>(0xFC4F15A7DDDC47B1, vehicle, p1);
		} // 0xFC4F15A7DDDC47B1 undefined b1207
		// Params: p1 usually true in R* Scripts
		// _SET_DRAFT_VEHICLE_*
		static void N0x4C60C333F9CCA2B6(Vehicle vehicle, BOOL p1)
		{
			invoke<int>(0x4C60C333F9CCA2B6, vehicle, p1);
		} // 0x4C60C333F9CCA2B6 undefined b1207
		static void N0xCF342503CA4C8DF1(Vehicle vehicle, float p1)
		{
			invoke<int>(0xCF342503CA4C8DF1, vehicle, p1);
		} // 0xCF342503CA4C8DF1 undefined b1207
		// _SET_TRAIN_*
		static void N0x06A09A6E0C6D2A84(Vehicle train, BOOL p1)
		{
			invoke<int>(0x06A09A6E0C6D2A84, train, p1);
		} // 0x06A09A6E0C6D2A84 undefined b1207
		// _SET_TRAIN_*
		static void N0xAE7E66A61E7C17A5(Vehicle train, BOOL p1)
		{
			invoke<int>(0xAE7E66A61E7C17A5, train, p1);
		} // 0xAE7E66A61E7C17A5 undefined b1207
		// _SET_TRAIN_*
		static void N0xEF28A614B4B264B8(Vehicle train, BOOL p1)
		{
			invoke<int>(0xEF28A614B4B264B8, train, p1);
		} // 0xEF28A614B4B264B8 undefined b1207
		// _SET_VEHICLE_*
		static void N0x04F0579DBDD32F34(Vehicle vehicle)
		{
			invoke<int>(0x04F0579DBDD32F34, vehicle);
		} // 0x04F0579DBDD32F34 undefined b1207
		// Params: coords = GET_ENTITY_VELOCITY
		// _SET_VELOCITY*
		static void N0x12F6C6ED3EFF42DE(Vehicle vehicle, float x, float y, float z)
		{
			invoke<int>(0x12F6C6ED3EFF42DE, vehicle, x, y, z);
		} // 0x12F6C6ED3EFF42DE undefined b1207
		static void N0x87B974E54C71BA7B(Vehicle vehicle, BOOL p1)
		{
			invoke<int>(0x87B974E54C71BA7B, vehicle, p1);
		} // 0x87B974E54C71BA7B undefined b1207
		static BOOL HAS_TRAIN_LOADED_(Vehicle train)
		{
			return invoke<BOOL>(0xBD3C4A2ED509205E, train);
		} // 0xBD3C4A2ED509205E undefined b1207
		// configHash: https://alloc8or.re/rdr3/doc/enums/eTrainConfig.txt
		// For more information, see trainconfigs.ymt
		// To make the train AI controlled, set conductor to true and set the speed once.
		static Vehicle CREATE_MISSION_TRAIN_(Hash configHash, float x, float y, float z, BOOL direction, BOOL passengers, BOOL p6, BOOL conductor)
		{
			return invoke<Vehicle>(0xC239DBD9A57D2A71, configHash, x, y, z, direction, passengers, p6, conductor);
		} // 0xC239DBD9A57D2A71 undefined b1207
		static void N0xD1EFA8D68BF5D63D(Any p0, Any p1, Any p2, Any p3)
		{
			invoke<int>(0xD1EFA8D68BF5D63D, p0, p1, p2, p3);
		} // 0xD1EFA8D68BF5D63D undefined b1207
		static Any N0x1121B07088ED3013(Any p0)
		{
			return invoke<Any>(0x1121B07088ED3013, p0);
		} // 0x1121B07088ED3013 undefined b1207
		static Any N0x42404D57D621601A(Any p0)
		{
			return invoke<Any>(0x42404D57D621601A, p0);
		} // 0x42404D57D621601A undefined b1207
		static Any N0x288CBB414C3C2FBB(Any p0)
		{
			return invoke<Any>(0x288CBB414C3C2FBB, p0);
		} // 0x288CBB414C3C2FBB undefined b1207
		static void N0x6FD7BDF10304363A(Any p0, Any p1)
		{
			invoke<int>(0x6FD7BDF10304363A, p0, p1);
		} // 0x6FD7BDF10304363A undefined b1207
		static void N0xCEB1F1EED484A5B4(Any p0, Any p1)
		{
			invoke<int>(0xCEB1F1EED484A5B4, p0, p1);
		} // 0xCEB1F1EED484A5B4 undefined b1207
		static Any N0xF57DB8E83DCD8349(Any p0)
		{
			return invoke<Any>(0xF57DB8E83DCD8349, p0);
		} // 0xF57DB8E83DCD8349 undefined b1207
		// Params: 1.0f will make balloon hover
		static void SET_BALLOON_HOVER_STATE_(Vehicle balloon, float p1)
		{
			invoke<int>(0x7C9E45A4CED2E8DA, balloon, p1);
		} // 0x7C9E45A4CED2E8DA undefined b1207
		static void SET_DRAFT_VEHICLE_ALLOW_DRAFT_ANIMAL_AUTO_CREATION_(Vehicle vehicle, BOOL allow)
		{
			invoke<int>(0x87344305778E5415, vehicle, allow);
		} // 0x87344305778E5415 undefined b1207
		static void N0x6835AFEA10E186F4(Any p0, Any p1)
		{
			invoke<int>(0x6835AFEA10E186F4, p0, p1);
		} // 0x6835AFEA10E186F4 undefined b1207
		static void SET_DRAFT_ANIMAL_RANDOM_SEED_(Vehicle vehicle, int seed)
		{
			invoke<int>(0x8C6D9A399126C194, vehicle, seed);
		} // 0x8C6D9A399126C194 undefined b1207
		static Any N0x14DA8C4BC2CCD90A(Any p0)
		{
			return invoke<Any>(0x14DA8C4BC2CCD90A, p0);
		} // 0x14DA8C4BC2CCD90A undefined b1207
		static Any N0xCACAB2B123BBDBD6(Any p0, Any p1, Any p2)
		{
			return invoke<Any>(0xCACAB2B123BBDBD6, p0, p1, p2);
		} // 0xCACAB2B123BBDBD6 undefined b1207
		static void N0xFF2B1F59FB892F14(Any p0)
		{
			invoke<int>(0xFF2B1F59FB892F14, p0);
		} // 0xFF2B1F59FB892F14 undefined b1207
		static void N0x5AADC7BBBB1BCEEB(Any p0, Any p1, Any p2, Any p3, Any p4)
		{
			invoke<int>(0x5AADC7BBBB1BCEEB, p0, p1, p2, p3, p4);
		} // 0x5AADC7BBBB1BCEEB undefined b1207
		static BOOL GET_VEHICLE_IS_PROP_SET_APPLIED_(Vehicle vehicle)
		{
			return invoke<BOOL>(0xD798DF5DB67B1659, vehicle);
		} // 0xD798DF5DB67B1659 undefined b1207
		// Total height is calculated using: cargo ratio + pelt ratio (by pelt count)
		// Screenshot: https://imgur.com/a/nsomtiv
		static void SET_BATCH_TARP_HEIGHT_(Vehicle vehicle, float height, BOOL immediately)
		{
			invoke<int>(0x31F343383F19C987, vehicle, height, immediately);
		} // 0x31F343383F19C987 undefined b1207
		static void N0x07E2E21E799080A0(Any p0, Any p1)
		{
			invoke<int>(0x07E2E21E799080A0, p0, p1);
		} // 0x07E2E21E799080A0 undefined b1207
		static void N0xC2E62678D602853C(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6)
		{
			invoke<int>(0xC2E62678D602853C, p0, p1, p2, p3, p4, p5, p6);
		} // 0xC2E62678D602853C undefined b1207
		static void N0x873AAF600CC36DAC(Any p0)
		{
			invoke<int>(0x873AAF600CC36DAC, p0);
		} // 0x873AAF600CC36DAC undefined b1207
		static Any N0x51C7694E140FAE43(Any p0)
		{
			return invoke<Any>(0x51C7694E140FAE43, p0);
		} // 0x51C7694E140FAE43 undefined b1207
		static void N0x8DECD262602548B9(Any p0, Any p1)
		{
			invoke<int>(0x8DECD262602548B9, p0, p1);
		} // 0x8DECD262602548B9 undefined b1207
		static void N0xCBC7B6F9A56B79F6(Any p0, Any p1)
		{
			invoke<int>(0xCBC7B6F9A56B79F6, p0, p1);
		} // 0xCBC7B6F9A56B79F6 undefined b1207
		static BOOL N0x37D238BE69F7378A(int trackIndex)
		{
			return invoke<BOOL>(0x37D238BE69F7378A, trackIndex);
		} // 0x37D238BE69F7378A undefined b1207
		static void N0x703D4FB366DA4452(Any p0, Any p1)
		{
			invoke<int>(0x703D4FB366DA4452, p0, p1);
		} // 0x703D4FB366DA4452 undefined b1207
		// Seems to be related while setting a (door) state of specific trains (midlandboxcar05x, privateboxcar01x, privateboxcar02x, midlandrefrigeratorCar, privateArmoured, armoredCar01x)
		static void N0x762FDC4C19E5A981(Entity trainCarriage, BOOL p1)
		{
			invoke<int>(0x762FDC4C19E5A981, trainCarriage, p1);
		} // 0x762FDC4C19E5A981 undefined b1207
		static Any N0x2045429505158D1A(Any p0)
		{
			return invoke<Any>(0x2045429505158D1A, p0);
		} // 0x2045429505158D1A undefined b1207
		static void N0x13EB275BF81636D1(Any p0, Any p1)
		{
			invoke<int>(0x13EB275BF81636D1, p0, p1);
		} // 0x13EB275BF81636D1 undefined b1207
	}

	namespace VOICE
	{
		static BOOL N0xCCF71FCFA0070B1A()
		{
			return invoke<BOOL>(0xCCF71FCFA0070B1A);
		} // 0xCCF71FCFA0070B1A undefined b1207
		static void N0x79F478FF5F9F4F05(BOOL enabled)
		{
			invoke<int>(0x79F478FF5F9F4F05, enabled);
		} // 0x79F478FF5F9F4F05 undefined b1207
		static BOOL N0xAA35FD9ABAB490A3(Player player)
		{
			return invoke<BOOL>(0xAA35FD9ABAB490A3, player);
		} // 0xAA35FD9ABAB490A3 undefined b1207
		static BOOL N0x356135B9B10A2A82(Any* gamerHandle)
		{
			return invoke<BOOL>(0x356135B9B10A2A82, gamerHandle);
		} // 0x356135B9B10A2A82 undefined b1207
		static BOOL N0xEF6F2A35FAAF2ED7(Player player)
		{
			return invoke<BOOL>(0xEF6F2A35FAAF2ED7, player);
		} // 0xEF6F2A35FAAF2ED7 undefined b1207
		static BOOL N0x49623BCFC3A3D829(Player player, BOOL muted)
		{
			return invoke<BOOL>(0x49623BCFC3A3D829, player, muted);
		} // 0x49623BCFC3A3D829 undefined b1207
		static BOOL N0x919AF2D93E9AA89D(Player player)
		{
			return invoke<BOOL>(0x919AF2D93E9AA89D, player);
		} // 0x919AF2D93E9AA89D undefined b1207
		static BOOL N0x0DED260A1958A82E(Player player)
		{
			return invoke<BOOL>(0x0DED260A1958A82E, player);
		} // 0x0DED260A1958A82E undefined b1207
		static BOOL N0x8E462DB1EAA9C47C(Player player)
		{
			return invoke<BOOL>(0x8E462DB1EAA9C47C, player);
		} // 0x8E462DB1EAA9C47C undefined b1207
		static float N0x5CA7FB7D6DE49DCC(Player player)
		{
			return invoke<float>(0x5CA7FB7D6DE49DCC, player);
		} // 0x5CA7FB7D6DE49DCC undefined b1207
		static void N0x58125B691F6827D5(float proximity)
		{
			invoke<int>(0x58125B691F6827D5, proximity);
		} // 0x58125B691F6827D5 undefined b1207
		static float N0x2F82CAB262C8AE26(Player player)
		{
			return invoke<float>(0x2F82CAB262C8AE26, player);
		} // 0x2F82CAB262C8AE26 undefined b1207
		static void N0x08797A8C03868CB8(float threshold)
		{
			invoke<int>(0x08797A8C03868CB8, threshold);
		} // 0x08797A8C03868CB8 undefined b1207
		static void N0xB779F4FA19269AEC(BOOL flag)
		{
			invoke<int>(0xB779F4FA19269AEC, flag);
		} // 0xB779F4FA19269AEC undefined b1207
		static void N0x1FBF7F5BA7E4BE3A(int p0)
		{
			invoke<int>(0x1FBF7F5BA7E4BE3A, p0);
		} // 0x1FBF7F5BA7E4BE3A undefined b1207
		static void N0xDC9B361CB7776673(Player player)
		{
			invoke<int>(0xDC9B361CB7776673, player);
		} // 0xDC9B361CB7776673 undefined b1207
		static void N0xEC8703E4536A9952()
		{
			invoke<int>(0xEC8703E4536A9952);
		} // 0xEC8703E4536A9952 undefined b1207
		static Any N0xDB622ECD3DCBE078(Player player)
		{
			return invoke<Any>(0xDB622ECD3DCBE078, player);
		} // 0xDB622ECD3DCBE078 undefined b1207
		static void N0xB6E79850B759A30E(int teamId, BOOL allow)
		{
			invoke<int>(0xB6E79850B759A30E, teamId, allow);
		} // 0xB6E79850B759A30E undefined b1207
		// Params: p1 = 2; p2 = 3 in R* Script net_main_offline
		static void N0x4791899615D70FA2(Player player, int p1, int p2)
		{
			invoke<int>(0x4791899615D70FA2, player, p1, p2);
		} // 0x4791899615D70FA2 undefined b1207
		static void N0xF8938CF3984092A5(Player player)
		{
			invoke<int>(0xF8938CF3984092A5, player);
		} // 0xF8938CF3984092A5 undefined b1207
		// Returns p2 value of 0x4791899615D70FA2
		static int N0x767931C727DF2ED7(Player player, int p1)
		{
			return invoke<int>(0x767931C727DF2ED7, player, p1);
		} // 0x767931C727DF2ED7 undefined b1207
		static void N0x1C38C3577901AF1F()
		{
			invoke<int>(0x1C38C3577901AF1F);
		} // 0x1C38C3577901AF1F undefined b1207
		static void N0xB3E8841F6BDAF83E()
		{
			invoke<int>(0xB3E8841F6BDAF83E);
		} // 0xB3E8841F6BDAF83E undefined b1207
	}

	namespace VOLUME
	{
		static Volume CREATE_VOLUME_BY_HASH_(Hash volumeType, float x, float y, float z, float rotX, float rotY, float rotZ, float scaleX, float scaleY, float scaleZ)
		{
			return invoke<Volume>(0x502022FA1AF9DC86, volumeType, x, y, z, rotX, rotY, rotZ, scaleX, scaleY, scaleZ);
		} // 0x502022FA1AF9DC86 undefined b1207
		static Volume CREATE_VOLUME_BOX(float x, float y, float z, float rotX, float rotY, float rotZ, float scaleX, float scaleY, float scaleZ)
		{
			return invoke<Volume>(0xDF85637F22706891, x, y, z, rotX, rotY, rotZ, scaleX, scaleY, scaleZ);
		} // 0xDF85637F22706891 undefined b1207
		static Volume CREATE_VOLUME_CYLINDER(float x, float y, float z, float rotX, float rotY, float rotZ, float scaleX, float scaleY, float scaleZ)
		{
			return invoke<Volume>(0x0522D4774B82E3E6, x, y, z, rotX, rotY, rotZ, scaleX, scaleY, scaleZ);
		} // 0x0522D4774B82E3E6 undefined b1207
		static Volume CREATE_VOLUME_SPHERE(float x, float y, float z, float rotX, float rotY, float rotZ, float scaleX, float scaleY, float scaleZ)
		{
			return invoke<Volume>(0xB3FB80A32BAE3065, x, y, z, rotX, rotY, rotZ, scaleX, scaleY, scaleZ);
		} // 0xB3FB80A32BAE3065 undefined b1207
		static Volume CREATE_VOLUME_AGGREGATE()
		{
			return invoke<Volume>(0x59F6F5C1D129F106);
		} // 0x59F6F5C1D129F106 undefined b1207
		static Volume CREATE_VOLUME_BY_HASH_WITH_CUSTOM_NAME_(Hash volumeType, float x, float y, float z, float rotX, float rotY, float rotZ, float scaleX, float scaleY, float scaleZ, const char* name)
		{
			return invoke<Volume>(0x1F85E4AC774A201E, volumeType, x, y, z, rotX, rotY, rotZ, scaleX, scaleY, scaleZ, name);
		} // 0x1F85E4AC774A201E undefined b1207
		static Volume CREATE_ANTI_GRIEF_VOLUME_(Hash volumeType, float x, float y, float z, float rotX, float rotY, float rotZ, float scaleX, float scaleY, float scaleZ)
		{
			return invoke<Volume>(0x0EB78C2B156635B1, volumeType, x, y, z, rotX, rotY, rotZ, scaleX, scaleY, scaleZ);
		} // 0x0EB78C2B156635B1 undefined b1207
		static void SET_ANTI_GRIEF_VOLUME_BLOCKS_HORSE_(Volume volume, BOOL toggle)
		{
			invoke<int>(0xBE551C2CC421185D, volume, toggle);
		} // 0xBE551C2CC421185D undefined b1207
		static void SET_ANTI_GRIEF_VOLUME_BLOCKS_PLAYER_(Volume volume, BOOL toggle)
		{
			invoke<int>(0x5B23DFF8E0948BB2, volume, toggle);
		} // 0x5B23DFF8E0948BB2 undefined b1207
		static Volume CREATE_WALK_AND_TALK_VOLUME_(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9, Any p10, Any p11, Any p12)
		{
			return invoke<Volume>(0xFD0E389CD44434B6, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12);
		} // 0xFD0E389CD44434B6 undefined b1207
		static Volume CREATE_SPEED_VOLUME_(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9, Any p10, Any p11, Any p12, Any p13, Any p14)
		{
			return invoke<Volume>(0xBBE768E3AE76E07C, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14);
		} // 0xBBE768E3AE76E07C undefined b1207
		static Volume CREATE_VOLUME_BOX_WITH_CUSTOM_NAME_(float x, float y, float z, float rotX, float rotY, float rotZ, float scaleX, float scaleY, float scaleZ, const char* name)
		{
			return invoke<Volume>(0xF68485C7495D848E, x, y, z, rotX, rotY, rotZ, scaleX, scaleY, scaleZ, name);
		} // 0xF68485C7495D848E undefined b1207
		static Volume CREATE_VOLUME_CYLINDER_WITH_CUSTOM_NAME_(float x, float y, float z, float rotX, float rotY, float rotZ, float scaleX, float scaleY, float scaleZ, const char* name)
		{
			return invoke<Volume>(0xDF1E350EDDF06E59, x, y, z, rotX, rotY, rotZ, scaleX, scaleY, scaleZ, name);
		} // 0xDF1E350EDDF06E59 undefined b1207
		static Volume CREATE_VOLUME_SPHERE_WITH_CUSTOM_NAME_(float x, float y, float z, float rotX, float rotY, float rotZ, float scaleX, float scaleY, float scaleZ, const char* name)
		{
			return invoke<Volume>(0x10157BC3247FF3BA, x, y, z, rotX, rotY, rotZ, scaleX, scaleY, scaleZ, name);
		} // 0x10157BC3247FF3BA undefined b1207
		static Volume CREATE_VOLUME_AGGREGATE_WITH_CUSTOM_NAME_(const char* name)
		{
			return invoke<Volume>(0x5D580DE6398BB162, name);
		} // 0x5D580DE6398BB162 undefined b1207
		// _ADD_R* - _ADD_V(OLUME?)*
		static void ADD_BOUNDS_TO_AGGREGATE_VOLUME_(Volume volume, Volume aggregate)
		{
			invoke<int>(0x6E0D3C3F828DA773, volume, aggregate);
		} // 0x6E0D3C3F828DA773 undefined b1207
		// _REMOVE_E* - _REMOVE_R*
		static void REMOVE_BOUNDS_FROM_AGGREGATE_VOLUME_(Volume volume, Volume aggregate)
		{
			invoke<int>(0xF92FA8890DECECF6, volume, aggregate);
		} // 0xF92FA8890DECECF6 undefined b1207
		static void ADD_VOLUME_TO_VOLUME_AGGREGATE_(Volume aggregate, Hash typeHash, float x, float y, float z, float rotX, float rotY, float rotZ, float scaleX, float scaleY, float scaleZ)
		{
			invoke<int>(0x12FCAA23F2320422, aggregate, typeHash, x, y, z, rotX, rotY, rotZ, scaleX, scaleY, scaleZ);
		} // 0x12FCAA23F2320422 undefined b1207
		static void ADD_BOX_VOLUME_TO_VOLUME_AGGREGATE_(Volume aggregate, float p1, float p2, float p3, float p4, float p5, float p6, float p7, float p8, float p9)
		{
			invoke<int>(0x39816F6F94F385AD, aggregate, p1, p2, p3, p4, p5, p6, p7, p8, p9);
		} // 0x39816F6F94F385AD undefined b1207
		static void ADD_CYLINDER_VOLUME_TO_VOLUME_AGGREGATE_(Volume aggregate, float p1, float p2, float p3, float p4, float p5, float p6, float p7, float p8, float p9)
		{
			invoke<int>(0xBCE668AAF83608BE, aggregate, p1, p2, p3, p4, p5, p6, p7, p8, p9);
		} // 0xBCE668AAF83608BE undefined b1207
		static void ADD_SPHERE_VOLUME_TO_VOLUME_AGGREGATE_(Volume aggregate, float p1, float p2, float p3, float p4, float p5, float p6, float p7, float p8, float p9)
		{
			invoke<int>(0x5B7D7BF36D2DE18B, aggregate, p1, p2, p3, p4, p5, p6, p7, p8, p9);
		} // 0x5B7D7BF36D2DE18B undefined b1207
		static void DELETE_VOLUME(Volume volume)
		{
			invoke<int>(0x43F867EF5C463A53, volume);
		} // 0x43F867EF5C463A53 undefined b1207
		static BOOL DOES_VOLUME_EXIST(Volume volume)
		{
			return invoke<BOOL>(0x92A78D0BEDB332A3, volume);
		} // 0x92A78D0BEDB332A3 undefined b1207
		// Old name: _IS_POSITION_INSIDE_VOLUME
		static BOOL IS_POINT_IN_VOLUME(Volume volume, float x, float y, float z)
		{
			return invoke<BOOL>(0xF256A75210C5C0EB, volume, x, y, z);
		} // 0xF256A75210C5C0EB undefined b1207
		static Vector3 GET_VOLUME_COORDS(Volume volume)
		{
			return invoke<Vector3>(0xF70F00013A62F866, volume);
		} // 0xF70F00013A62F866 undefined b1207
		static BOOL SET_VOLUME_COORDS(Volume volume, float posX, float posY, float posZ)
		{
			return invoke<BOOL>(0x541B8576615C33DE, volume, posX, posY, posZ);
		} // 0x541B8576615C33DE undefined b1207
		static Vector3 GET_VOLUME_ROTATION(Volume volume)
		{
			return invoke<Vector3>(0x18675BC914891122, volume);
		} // 0x18675BC914891122 undefined b1207
		static BOOL SET_VOLUME_ROTATION(Volume volume, float rotX, float rotY, float rotZ)
		{
			return invoke<BOOL>(0xA07CF1B21B56F041, volume, rotX, rotY, rotZ);
		} // 0xA07CF1B21B56F041 undefined b1207
		static Vector3 GET_VOLUME_SCALE(Volume volume)
		{
			return invoke<Vector3>(0x3E2A25B2416DD67E, volume);
		} // 0x3E2A25B2416DD67E undefined b1207
		static BOOL SET_VOLUME_SCALE(Volume volume, float scaleX, float scaleY, float scaleZ)
		{
			return invoke<BOOL>(0xA46E98BDC407E23D, volume, scaleX, scaleY, scaleZ);
		} // 0xA46E98BDC407E23D undefined b1207
		static void GET_VOLUME_BOUNDS_(Volume volume, Vector3* min, Vector3* max)
		{
			invoke<int>(0x5737199AF2DC609F, volume, min, max);
		} // 0x5737199AF2DC609F undefined b1207
		// nullsub, doesn't do anything
		static void N0x748C5F51A18CB8F0(BOOL p0)
		{
			invoke<int>(0x748C5F51A18CB8F0, p0);
		} // 0x748C5F51A18CB8F0 undefined b1207
		static Any N0x2B32B11520626229(Any p0, Any p1, Any p2, Any p3, Any p4)
		{
			return invoke<Any>(0x2B32B11520626229, p0, p1, p2, p3, p4);
		} // 0x2B32B11520626229 undefined b1207
		static Any N0x40F769D31A00D5A0(Any p0, Any p1)
		{
			return invoke<Any>(0x40F769D31A00D5A0, p0, p1);
		} // 0x40F769D31A00D5A0 undefined b1207
		static Vector3 N0xD882C5B3991575B7(Any p0, Any p1, Any p2, Any p3, Any p4)
		{
			return invoke<Vector3>(0xD882C5B3991575B7, p0, p1, p2, p3, p4);
		} // 0xD882C5B3991575B7 undefined b1207
		static void N0xB469CFD9E065EB99(Any p0, Any p1)
		{
			invoke<int>(0xB469CFD9E065EB99, p0, p1);
		} // 0xB469CFD9E065EB99 undefined b1207
		static Any N0x7FD78DFD0C5D7B9B(Any p0)
		{
			return invoke<Any>(0x7FD78DFD0C5D7B9B, p0);
		} // 0x7FD78DFD0C5D7B9B undefined b1207
		static Any N0xEE1D6FF54CAF7714(Any p0, Any p1)
		{
			return invoke<Any>(0xEE1D6FF54CAF7714, p0, p1);
		} // 0xEE1D6FF54CAF7714 undefined b1207
		static void N0xD52DF30355EA7C8E(Any p0, Any p1, Any p2)
		{
			invoke<int>(0xD52DF30355EA7C8E, p0, p1, p2);
		} // 0xD52DF30355EA7C8E undefined b1207
		static void SET_VOLUME_OWNER_PERSISTENT_CHARACTER(Volume volume, PersChar persChar, BOOL p2)
		{
			invoke<int>(0xE2BE6FFA4A13CBB0, volume, persChar, p2);
		} // 0xE2BE6FFA4A13CBB0 undefined b1207
		static void N0x6D5F9E69BA1BE783(Any p0)
		{
			invoke<int>(0x6D5F9E69BA1BE783, p0);
		} // 0x6D5F9E69BA1BE783 undefined b1207
		static void N0x998202B206872672(Any p0)
		{
			invoke<int>(0x998202B206872672, p0);
		} // 0x998202B206872672 undefined b1207
		static void N0x4A8FEFC43FD8AC9B(Any p0, Any p1, Any p2)
		{
			invoke<int>(0x4A8FEFC43FD8AC9B, p0, p1, p2);
		} // 0x4A8FEFC43FD8AC9B undefined b1207
		static void N0xF3A2FBA5985C8CD5(Any p0, Any p1, Any p2, Any p3)
		{
			invoke<int>(0xF3A2FBA5985C8CD5, p0, p1, p2, p3);
		} // 0xF3A2FBA5985C8CD5 undefined b1207
		static void N0x53D05D60E5F5B40C(Any p0, Any p1, Any p2, Any p3)
		{
			invoke<int>(0x53D05D60E5F5B40C, p0, p1, p2, p3);
		} // 0x53D05D60E5F5B40C undefined b1207
		static Any N0xCA5C90D40665D5CE(Any p0, Any p1)
		{
			return invoke<Any>(0xCA5C90D40665D5CE, p0, p1);
		} // 0xCA5C90D40665D5CE undefined b1207
		static void N0x3EFABB21E14A6BD1(Any p0, Any p1, Any p2)
		{
			invoke<int>(0x3EFABB21E14A6BD1, p0, p1, p2);
		} // 0x3EFABB21E14A6BD1 undefined b1207
		static BOOL IS_AGGREGATE_VOLUME_(Volume volume)
		{
			return invoke<BOOL>(0xFEFF01B5725BCD22, volume);
		} // 0xFEFF01B5725BCD22 undefined b1207
		// Params: p5 is always 0
		static Volume CREATE_VOLUME_LOCK_(float x, float y, float z, float radius, int flag, Any p5)
		{
			return invoke<Volume>(0x00BBF7CEAE8C666A, x, y, z, radius, flag, p5);
		} // 0x00BBF7CEAE8C666A undefined b1207
		// Params: p3 is always 0
		static Volume CREATE_VOLUME_LOCK_ATTACHED_TO_ENTITY_(Entity entity, float radius, int flag, Any p3)
		{
			return invoke<Volume>(0xF383E96C4904DF0C, entity, radius, flag, p3);
		} // 0xF383E96C4904DF0C undefined b1207
		static BOOL IS_VOLUME_LOCK_REQUEST_VALID_2_(int volLockRequestId)
		{
			return invoke<BOOL>(0xF6A8A652A6B186CD, volLockRequestId);
		} // 0xF6A8A652A6B186CD undefined b1207
		static Vector3 N0xC4019CF9AE8E931A(int volLockRequestId)
		{
			return invoke<Vector3>(0xC4019CF9AE8E931A, volLockRequestId);
		} // 0xC4019CF9AE8E931A undefined b1207
		static Any N0xF6CE6F9C3897804E(Any p0)
		{
			return invoke<Any>(0xF6CE6F9C3897804E, p0);
		} // 0xF6CE6F9C3897804E undefined b1207
		static Any N0xF6F5447D418DAA82(Any p0)
		{
			return invoke<Any>(0xF6F5447D418DAA82, p0);
		} // 0xF6F5447D418DAA82 undefined b1207
		static void N0xD4FA73FE628FEC63(Any p0, Any p1)
		{
			invoke<int>(0xD4FA73FE628FEC63, p0, p1);
		} // 0xD4FA73FE628FEC63 undefined b1207
		static void N0xB440F4E35393FC39(Volume volume, Any p1)
		{
			invoke<int>(0xB440F4E35393FC39, volume, p1);
		} // 0xB440F4E35393FC39 undefined b1207
		static void N0xD460135C98940274(Volume volume, Any p1)
		{
			invoke<int>(0xD460135C98940274, volume, p1);
		} // 0xD460135C98940274 undefined b1207
		static void N0xEBA87B9273835CF3(Any p0, Any p1)
		{
			invoke<int>(0xEBA87B9273835CF3, p0, p1);
		} // 0xEBA87B9273835CF3 undefined b1207
		static Any N0xAA9EE2AAFC717623(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5)
		{
			return invoke<Any>(0xAA9EE2AAFC717623, p0, p1, p2, p3, p4, p5);
		} // 0xAA9EE2AAFC717623 undefined b1207
		static Any N0x870E9981ED27C815(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5)
		{
			return invoke<Any>(0x870E9981ED27C815, p0, p1, p2, p3, p4, p5);
		} // 0x870E9981ED27C815 undefined b1207
		static BOOL DOES_VOLUME_COLLIDE_WITH_ANY_VOLUME_LOCK(float x, float y, float z, float radius, BOOL p4, int p5, int p6)
		{
			return invoke<BOOL>(0x397769175A7DBB30, x, y, z, radius, p4, p5, p6);
		} // 0x397769175A7DBB30 undefined b1207
		static BOOL IS_POINT_NEAR_VOLUME_LOCK_CENTER_(float x, float y, float z, float radius, int p4, int p5, int flags)
		{
			return invoke<BOOL>(0x769BB7626B8CDB06, x, y, z, radius, p4, p5, flags);
		} // 0x769BB7626B8CDB06 undefined b1207
		static Any N0x51E52C9687FCDEEC(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6)
		{
			return invoke<Any>(0x51E52C9687FCDEEC, p0, p1, p2, p3, p4, p5, p6);
		} // 0x51E52C9687FCDEEC undefined b1207
		static int FIND_VOLUME_LOCK_REQUEST_ID_WITH_ARGS_(Any* args)
		{
			return invoke<int>(0x77A6E4AD0C496F81, args);
		} // 0x77A6E4AD0C496F81 undefined b1207
		static void MODIFY_VOLUME_LOCK_LOCATION_(int volLock, float x, float y, float z)
		{
			invoke<int>(0xEC43C2FFB70E3F30, volLock, x, y, z);
		} // 0xEC43C2FFB70E3F30 undefined b1207
		static void N0x695DAC2DB928F308(Any p0, Any p1)
		{
			invoke<int>(0x695DAC2DB928F308, p0, p1);
		} // 0x695DAC2DB928F308 undefined b1207
		static void RELEASE_LOCK_VOLUME_(int volLockRequestId)
		{
			invoke<int>(0xFDFECC6EE4491E11, volLockRequestId);
		} // 0xFDFECC6EE4491E11 undefined b1207
		static void N0xAC355980681A7F89(Any p0)
		{
			invoke<int>(0xAC355980681A7F89, p0);
		} // 0xAC355980681A7F89 undefined b1207
		static BOOL ADD_ENTRY_VOLUME_LOCK_(Any* args)
		{
			return invoke<BOOL>(0x58D3803FA639A3BB, args);
		} // 0x58D3803FA639A3BB undefined b1311
		static void N0xC61E2FD926DBB406()
		{
			invoke<int>(0xC61E2FD926DBB406);
		} // 0xC61E2FD926DBB406 undefined b1311
		static int REQUEST_VOLUME_LOCK(float x, float y, float z, float radius, int p4, int p5)
		{
			return invoke<int>(0xF14BCEF290F869E1, x, y, z, radius, p4, p5);
		} // 0xF14BCEF290F869E1 undefined b1207
		static int REQUEST_VOLUME_LOCK_WITH_ARGS(Any* args)
		{
			return invoke<int>(0x183C0B6CFEFFCAE4, args);
		} // 0x183C0B6CFEFFCAE4 undefined b1207
		static BOOL IS_VOLUME_LOCK_REQUEST_VALID(int volLockRequestId)
		{
			return invoke<BOOL>(0xA4A4359320345B34, volLockRequestId);
		} // 0xA4A4359320345B34 undefined b1207
		// enum eVolumeLockRequestStatus
		// {
		// 	VOLUME_LOCK_REQUEST_STATUS_INVALID,
		// 	VOLUME_LOCK_REQUEST_STATUS_READY,
		// 	VOLUME_LOCK_REQUEST_STATUS_IN_PROGRESS,
		// 	VOLUME_LOCK_REQUEST_STATUS_SUCCEEDED,
		// 	VOLUME_LOCK_REQUEST_STATUS_FAILED
		// };
		static int GET_VOLUME_LOCK_REQUEST_STATUS(int volLockRequestId)
		{
			return invoke<int>(0xB33A604345F58202, volLockRequestId);
		} // 0xB33A604345F58202 undefined b1207
		static Any N0x351D71B8B72B858B(Any p0)
		{
			return invoke<Any>(0x351D71B8B72B858B, p0);
		} // 0x351D71B8B72B858B undefined b1207
		// nullsub, doesn't do anything
		static void N0xFA15C9A320E707B0()
		{
			invoke<int>(0xFA15C9A320E707B0);
		} // 0xFA15C9A320E707B0 undefined b1207
		static void N0x52572B331E693AED(Any p0, Any p1, Any p2)
		{
			invoke<int>(0x52572B331E693AED, p0, p1, p2);
		} // 0x52572B331E693AED undefined b1207
		// nullsub, doesn't do anything
		static void N0x128FC3A893BF853A(Any p0)
		{
			invoke<int>(0x128FC3A893BF853A, p0);
		} // 0x128FC3A893BF853A undefined b1207
		static void SET_VOLUME_RELATIONSHIP_(Volume volume, Hash relationshipGroup)
		{
			invoke<int>(0xFD010A2154B40676, volume, relationshipGroup);
		} // 0xFD010A2154B40676 undefined b1207
		// Returns relationshipGroup Hash
		static Hash GET_VOLUME_RELATIONSHIP_(Volume volume)
		{
			return invoke<Hash>(0x666C2F53ABEFC952, volume);
		} // 0x666C2F53ABEFC952 undefined b1207
	}

	namespace WATER
	{
		// Must be called every frame to take full effect.
		static void DISABLE_WATER_LOOKUP()
		{
			invoke<int>(0x754616EC6965D1FB);
		} // 0x754616EC6965D1FB undefined b1207
		static void ENABLE_WATER_LOOKUP()
		{
			invoke<int>(0x754616EC6965D1BF);
		} // 0x754616EC6965D1BF undefined b1207
		// Checks against a global variable that is set by _SET_WORLD_WATER_TYPE. If that is set to one it will fail. Likely not the only issue but part of it.
		static BOOL GET_WATER_HEIGHT(float x, float y, float z, float* height)
		{
			return invoke<BOOL>(0xFCA8B23F28813F69, x, y, z, height);
		} // 0xFCA8B23F28813F69 0xD864E17C b1207
		static BOOL GET_WATER_HEIGHT_NO_WAVES(float x, float y, float z, float* height)
		{
			return invoke<BOOL>(0xDCF3690AA262C03F, x, y, z, height);
		} // 0xDCF3690AA262C03F 0x262017F8 b1207
		// enum eScriptWaterTestResult
		// {
		// 	SCRIPT_WATER_TEST_RESULT_NONE,
		// 	SCRIPT_WATER_TEST_RESULT_WATER,
		// 	SCRIPT_WATER_TEST_RESULT_BLOCKED,
		// };
		static int TEST_PROBE_AGAINST_ALL_WATER(float x1, float y1, float z1, float x2, float y2, float z2, int flags, Vector3* intersectionPos)
		{
			return invoke<int>(0x8974647ED222EA5F, x1, y1, z1, x2, y2, z2, flags, intersectionPos);
		} // 0x8974647ED222EA5F 0x4A962D55 b1207
		// Checks against a global variable that is set by _SET_WORLD_WATER_TYPE. If it's set to 1 (Guarma) it will fail.
		//
		// See TEST_PROBE_AGAINST_ALL_WATER.
		static int TEST_VERTICAL_PROBE_AGAINST_ALL_WATER(float x, float y, float z, int flags, float* waterHeight)
		{
			return invoke<int>(0x2B3451FA1E3142E2, x, y, z, flags, waterHeight);
		} // 0x2B3451FA1E3142E2 0x4C71D143 b1207
		// Only used in rcm_crackpot1 R* Script: p0 = 0
		static void REMOVE_EXTRA_CALMING_QUAD(int index)
		{
			invoke<int>(0x4BEF8DD75AF6C71C, index);
		} // 0x4BEF8DD75AF6C71C 0x45268B6F b1207
		// Called together with REMOVE_EXTRA_CALMING_QUAD in rcm_crackpot1 R* Script: p0 = 0
		// _REMOVE_*
		static void N0x09A1C7DFDCE54FBC(int p0)
		{
			invoke<int>(0x09A1C7DFDCE54FBC, p0);
		} // 0x09A1C7DFDCE54FBC undefined b1207
		// Only used in fishing_core R* Script
		static void N0xF0FBF193F1F5C0EA(Ped ped)
		{
			invoke<int>(0xF0FBF193F1F5C0EA, ped);
		} // 0xF0FBF193F1F5C0EA undefined b1207
		// Only used in fishing_core R* Script
		static void N0xA33F5069B0CB89B8()
		{
			invoke<int>(0xA33F5069B0CB89B8);
		} // 0xA33F5069B0CB89B8 undefined b1207
		// Used in bounty1, fanale3, sean1 R* Scripts
		static void N0xB34A6009A0DB80B8(Entity entity)
		{
			invoke<int>(0xB34A6009A0DB80B8, entity);
		} // 0xB34A6009A0DB80B8 undefined b1207
		// Only used in R* Script guama1
		static void SET_OCEAN_GUARMA_WATER_QUADRANT_(float wavesHeight, float p1, int p2, float p3, float p4, float p5, float p6, float wavesStrength, int p8)
		{
			invoke<int>(0xC63540AEF8384732, wavesHeight, p1, p2, p3, p4, p5, p6, wavesStrength, p8);
		} // 0xC63540AEF8384732 undefined b1207
		// Only used in guama1 / guama3 R* Script
		// _REQUEST_* or _RESET_*
		static void RESET_GUARMA_WATER_STATE_()
		{
			invoke<int>(0xC63540AEF8384769);
		} // 0xC63540AEF8384769 undefined b1207
		// 0 = World
		// 1 = Guarma
		static void SET_WORLD_WATER_TYPE_(int waterType)
		{
			invoke<int>(0xE8770EE02AEE45C2, waterType);
		} // 0xE8770EE02AEE45C2 undefined b1207
		static int GET_WORLD_WATER_TYPE_()
		{
			return invoke<int>(0x189739A7631C1867);
		} // 0x189739A7631C1867 undefined b1207
		// Only used in native_son1 R* Script: p1 = 1
		static void N0x0DCEC6A92E497E17(Entity entity, int p1)
		{
			invoke<int>(0x0DCEC6A92E497E17, entity, p1);
		} // 0x0DCEC6A92E497E17 undefined b1207
		// Only used in fussar1 / train_robbery2 R* Script
		static void N0xE8126623008372AA()
		{
			invoke<int>(0xE8126623008372AA);
		} // 0xE8126623008372AA undefined b1207
	}

	namespace WEAPON
	{
		static Hash GET_WEAPON_UNLOCK_(Hash weaponHash)
		{
			return invoke<Hash>(0x865F36299079FB75, weaponHash);
		} // 0x865F36299079FB75 undefined b1207
		// addReason:
		// enum eAddItemReason : Hash
		// {
		// 	ADD_REASON_AWARDS = 0xB784AD1E,
		// 	ADD_REASON_CREATE_CHARACTER = 0xE2C4FF71,
		// 	ADD_REASON_DEBUG = 0x5C05C64D,
		// 	ADD_REASON_DEFAULT = 0x2CD419DC,
		// 	ADD_REASON_GET_INVENTORY = 0xD8188685,
		// 	ADD_REASON_INCENTIVE = 0x8ADC2E95,
		// 	ADD_REASON_LOADOUT = 0xCA3454E6,
		// 	ADD_REASON_LOAD_SAVEGAME = 0x56212906,
		// 	ADD_REASON_LOOTED = 0xCA806A55,
		// 	ADD_REASON_MELEE = 0x7B9BDCE7,
		// 	ADD_REASON_MP_MISSION = 0xEC0E0194,
		// 	ADD_REASON_NOTIFICATION = 0xC56292D2,
		// 	ADD_REASON_PICKUP = 0x1A770E22,
		// 	ADD_REASON_PURCHASED = 0x4A6726C9,
		// 	ADD_REASON_SET_AMOUNT = 0x4504731E,
		// 	ADD_REASON_SYNCING = 0x8D4B4FF4,
		// 	ADD_REASON_USE_FAILED = 0xD385B670
		// };
		static void ADD_AMMO_TO_PED_(Ped ped, Hash weaponHash, int amount, Hash addReason)
		{
			invoke<int>(0xB190BCA3F4042F95, ped, weaponHash, amount, addReason);
		} // 0xB190BCA3F4042F95 undefined b1207
		// addReason: see _ADD_AMMO_TO_PED
		static void ADD_AMMO_TO_PED_BY_TYPE_(Ped ped, Hash ammoType, int amount, Hash addReason)
		{
			invoke<int>(0x106A811C6D3035F3, ped, ammoType, amount, addReason);
		} // 0x106A811C6D3035F3 undefined b1207
		// removeReason must be REMOVE_REASON_USED, REMOVE_REASON_GIVEN, REMOVE_REASON_DROPPED or REMOVE_REASON_DEBUG, unless amount is -1
		//
		// removeReason: see REMOVE_WEAPON_FROM_PED
		static void REMOVE_AMMO_FROM_PED_(Ped ped, Hash weaponHash, int amount, Hash removeReason)
		{
			invoke<int>(0xF4823C813CB8277D, ped, weaponHash, amount, removeReason);
		} // 0xF4823C813CB8277D undefined b1207
		// removeReason must be REMOVE_REASON_USED, REMOVE_REASON_GIVEN, REMOVE_REASON_DROPPED or REMOVE_REASON_DEBUG, unless amount is -1
		//
		// removeReason: see REMOVE_WEAPON_FROM_PED
		static void REMOVE_AMMO_FROM_PED_BY_TYPE_(Ped ped, Hash ammoHash, int amount, Hash removeReason)
		{
			invoke<int>(0xB6CFEC32E3742779, ped, ammoHash, amount, removeReason);
		} // 0xB6CFEC32E3742779 undefined b1207
		static void REMOVE_ALL_PED_AMMO_(Ped ped)
		{
			invoke<int>(0x1B83C0DEEBCBB214, ped);
		} // 0x1B83C0DEEBCBB214 undefined b1207
		static void SET_PED_AMMO(Ped ped, Hash weaponHash, int ammo)
		{
			invoke<int>(0x14E56BC5B5DB6A19, ped, weaponHash, ammo);
		} // 0x14E56BC5B5DB6A19 0xBF90DF1A b1207
		// Only used in R* SP Scripts native_son2, native_son3 and smuggler2
		// Params: p2 = -1
		static void N0x8A779706DA5CA3DD(Ped ped, BOOL p1, int p2)
		{
			invoke<int>(0x8A779706DA5CA3DD, ped, p1, p2);
		} // 0x8A779706DA5CA3DD undefined b1207
		// Only used in R* SP Script guama3
		static void N0x9409C62504A8F9E9(Vehicle vehicle, BOOL p1)
		{
			invoke<int>(0x9409C62504A8F9E9, vehicle, p1);
		} // 0x9409C62504A8F9E9 undefined b1207
		static void SET_VEHICLE_WEAPON_HEADING_LIMITS_(Vehicle vehicle, int p1, float minHeading, float maxHeading)
		{
			invoke<int>(0x56CB3B4305A4F7CE, vehicle, p1, minHeading, maxHeading);
		} // 0x56CB3B4305A4F7CE undefined b1207
		static Any SET_VEHICLE_WEAPON_HEADING_LIMITS_2_(Vehicle vehicle, int p1, float minHeading, float maxHeading)
		{
			return invoke<Any>(0xBF5987E1CDE63501, vehicle, p1, minHeading, maxHeading);
		} // 0xBF5987E1CDE63501 undefined b1207
		static void SET_VEHICLE_WEAPON_HEADING(Vehicle vehicle, int seatIndex, float heading, BOOL p3)
		{
			invoke<int>(0x194D877FC5597B7D, vehicle, seatIndex, heading, p3);
		} // 0x194D877FC5597B7D undefined b1207
		static void SET_PED_INFINITE_AMMO(Ped ped, BOOL toggle, Hash weaponHash)
		{
			invoke<int>(0x3EDCB0505123623B, ped, toggle, weaponHash);
		} // 0x3EDCB0505123623B 0x9CB8D278 b1207
		static void SET_PED_INFINITE_AMMO_CLIP_(Ped ped, BOOL toggle)
		{
			invoke<int>(0xFBAA1E06B6BCA741, ped, toggle);
		} // 0xFBAA1E06B6BCA741 undefined b1207
		static int GET_AMMO_IN_PED_WEAPON(Ped ped, Hash weaponHash)
		{
			return invoke<int>(0x015A522136D7F951, ped, weaponHash);
		} // 0x015A522136D7F951 0x0C755733 b1207
		static int GET_MAX_AMMO_IN_CLIP(Ped ped, Hash weaponHash, BOOL p2)
		{
			return invoke<int>(0xA38DCFFCEA8962FA, ped, weaponHash, p2);
		} // 0xA38DCFFCEA8962FA 0x6961E2A4 b1207
		static BOOL GET_AMMO_IN_CLIP(Ped ped, int* ammo, Hash weaponHash)
		{
			return invoke<BOOL>(0x2E1202248937775C, ped, ammo, weaponHash);
		} // 0x2E1202248937775C 0x73C100C3 b1207
		static BOOL GET_AMMO_IN_CLIP_BY_INVENTORY_UID_(Ped ped, int* ammo, Any* inventoryUid)
		{
			return invoke<BOOL>(0x678F00858980F516, ped, ammo, inventoryUid);
		} // 0x678F00858980F516 undefined b1207
		static BOOL SET_AMMO_IN_CLIP(Ped ped, Hash weaponHash, int ammo)
		{
			return invoke<BOOL>(0xDCD2A934D65CB497, ped, weaponHash, ammo);
		} // 0xDCD2A934D65CB497 0xA54B0B10 b1207
		static Any REFILL_AMMO_IN_CLIP_(Ped ped, Any* clipInventoryUid, int p2)
		{
			return invoke<Any>(0xDF4A3404D022ADDE, ped, clipInventoryUid, p2);
		} // 0xDF4A3404D022ADDE undefined b1207
		static BOOL GET_MAX_AMMO(Ped ped, int* ammo, Hash weaponHash)
		{
			return invoke<BOOL>(0xDC16122C7A20C933, ped, ammo, weaponHash);
		} // 0xDC16122C7A20C933 0x0B294796 b1207
		static void SET_PED_AMMO_BY_TYPE(Ped ped, Hash ammoType, int ammo)
		{
			invoke<int>(0x5FD1E1F011E76D7E, ped, ammoType, ammo);
		} // 0x5FD1E1F011E76D7E 0x311C52BB b1207
		static int GET_PED_AMMO_BY_TYPE(Ped ped, Hash ammoType)
		{
			return invoke<int>(0x39D22031557946C1, ped, ammoType);
		} // 0x39D22031557946C1 0x54077C4D b1207
		static void SET_PED_AMMO_TO_DROP(Ped ped, int p1, int p2)
		{
			invoke<int>(0xA4EFEF9440A5B0EF, ped, p1, p2);
		} // 0xA4EFEF9440A5B0EF 0x2386A307 b1207
		static Hash GET_AMMO_TYPE_FOR_WEAPON_(Hash weaponHash)
		{
			return invoke<Hash>(0x5C2EA6C44F515F34, weaponHash);
		} // 0x5C2EA6C44F515F34 undefined b1207
		// Returns the current ammo type of the specified ped's specified weapon.
		static Hash GET_PED_AMMO_TYPE_FROM_WEAPON(Ped ped, Hash weaponHash)
		{
			return invoke<Hash>(0x7FEAD38B326B9F74, ped, weaponHash);
		} // 0x7FEAD38B326B9F74 0x09337863 b1207
		static Hash GET_WEAPON_TYPE_FROM_AMMO_TYPE_(Hash ammoType)
		{
			return invoke<Hash>(0x7AA043F6C41D151E, ammoType);
		} // 0x7AA043F6C41D151E undefined b1207
		static Hash GET_WEAPON_COMPONENT_TYPE_MODEL_(Hash componentHash)
		{
			return invoke<Hash>(0x59DE03442B6C9598, componentHash);
		} // 0x59DE03442B6C9598 undefined b1207
		// Gets the model hash from the weapon hash.
		static Hash GET_WEAPONTYPE_MODEL_(Hash weaponHash)
		{
			return invoke<Hash>(0xF70825EB340E7D15, weaponHash);
		} // 0xF70825EB340E7D15 undefined b1207
		// Returns hash where WEAPON_ is replaced with SLOT_
		static Hash GET_WEAPONTYPE_SLOT_(Hash weaponHash)
		{
			return invoke<Hash>(0x46F032B8DDF46CDE, weaponHash);
		} // 0x46F032B8DDF46CDE undefined b1207
		static Hash GET_WEAPONTYPE_GROUP(Hash weaponHash)
		{
			return invoke<Hash>(0xEDCA14CA5199FF25, weaponHash);
		} // 0xEDCA14CA5199FF25 0x5F2DE833 b1207
		// Returns weaponHash
		static Hash N0xF8204EF17410BF43(Hash weaponGroupHash, float p1, float p2, Any p3)
		{
			return invoke<Hash>(0xF8204EF17410BF43, weaponGroupHash, p1, p2, p3);
		} // 0xF8204EF17410BF43 undefined b1207
		// Returns true when the weapon passed is either a lasso, the camera or the binoculars
		// _IS_WEAPON_M* - _IS_WEAPON_P*
		static BOOL IS_WEAPON_KIT_(Hash weaponHash)
		{
			return invoke<BOOL>(0x6ABAD7B0A854F8FB, weaponHash);
		} // 0x6ABAD7B0A854F8FB undefined b1207
		// Returns true when the weapon passed is either the fishingrod, a lasso, the camera or the binoculars
		// _IS_WEAPON_M* - _IS_WEAPON_P*
		static BOOL IS_WEAPON_KIT_2_(Hash weaponHash)
		{
			return invoke<BOOL>(0x49E40483948AF062, weaponHash);
		} // 0x49E40483948AF062 undefined b1207
		static BOOL IS_WEAPON_BOW(Hash weaponHash)
		{
			return invoke<BOOL>(0xC4DEC3CA8C365A5D, weaponHash);
		} // 0xC4DEC3CA8C365A5D undefined b1207
		static BOOL IS_WEAPON_LANTERN_(Hash weaponHash)
		{
			return invoke<BOOL>(0x79407D33328286C6, weaponHash);
		} // 0x79407D33328286C6 undefined b1207
		static BOOL IS_WEAPON_TORCH_(Hash weaponHash)
		{
			return invoke<BOOL>(0x506F1DE1BFC75304, weaponHash);
		} // 0x506F1DE1BFC75304 undefined b1207
		static BOOL GIVE_WEAPON_TO_PED_WITH_OPTIONS(Ped ped, Any* data, Any* outData)
		{
			return invoke<BOOL>(0xBE7E42B07FD317AC, ped, data, outData);
		} // 0xBE7E42B07FD317AC undefined b1207
		// Gives the ped the weapon.
		// List: https://github.com/femga/rdr3_discoveries/blob/master/weapons/weapons.lua
		//
		// Params: p7 is 0.5f, and p8 is 1.0f. p11 and p12 are both 0 in R* Scripts
		// attachPoint: see SET_CURRENT_PED_WEAPON
		// addReason: see _ADD_AMMO_TO_PED
		// permanentDegradation: default 0.5, any higher than 0 it will automatically make the weapon worn, you can also adjust the value to change the weapons maximum cleanliness
		static Hash GIVE_WEAPON_TO_PED(Ped ped, Hash weaponHash, int ammoCount, BOOL bForceInHand, BOOL bForceInHolster, int attachPoint, BOOL bAllowMultipleCopies, float p7, float p8, Hash addReason, BOOL bIgnoreUnlocks, float permanentDegradation, BOOL p12)
		{
			return invoke<Hash>(0x5E3BDDBCB83F3D84, ped, weaponHash, ammoCount, bForceInHand, bForceInHolster, attachPoint, bAllowMultipleCopies, p7, p8, addReason, bIgnoreUnlocks, permanentDegradation, p12);
		} // 0x5E3BDDBCB83F3D84 undefined b1207
		static void SET_FORCE_CURRENT_WEAPON_INTO_COCKED_STATE_(Ped ped, int attachPoint)
		{
			invoke<int>(0x5230D3F6EE56CFE6, ped, attachPoint);
		} // 0x5230D3F6EE56CFE6 undefined b1207
		static Any N0x9F0E1892C7F228A8(BOOL p0)
		{
			return invoke<Any>(0x9F0E1892C7F228A8, p0);
		} // 0x9F0E1892C7F228A8 undefined b1207
		static void HOLSTER_PED_WEAPONS_(Ped ped, BOOL p1, BOOL p2, BOOL p3, BOOL immediately)
		{
			invoke<int>(0x94A3C1B804D291EC, ped, p1, p2, p3, immediately);
		} // 0x94A3C1B804D291EC undefined b1207
		// Unequip current weapon and set current weapon to WEAPON_UNARMED.
		// p0 usually 2 in R* scripts. Doesn't seem to have any effect if changed....
		// immediately: if true it will instantly switch to unarmed
		static void HIDE_PED_WEAPONS_(Ped ped, int p0, BOOL immediately)
		{
			invoke<int>(0xFCCC886EDE3C63EC, ped, p0, immediately);
		} // 0xFCCC886EDE3C63EC undefined b1207
		static void N0x4820A6939D7CEF28(Any p0, Any p1)
		{
			invoke<int>(0x4820A6939D7CEF28, p0, p1);
		} // 0x4820A6939D7CEF28 undefined b1207
		// attachPoint:
		// enum eWeaponAttachPoint
		// {
		// 	WEAPON_ATTACH_POINT_INVALID = -1,
		// 	WEAPON_ATTACH_POINT_HAND_PRIMARY = 0,
		// 	WEAPON_ATTACH_POINT_HAND_SECONDARY = 1,
		// 	WEAPON_ATTACH_POINT_PISTOL_R = 2,
		// 	MAX_HAND_WEAPON_ATTACH_POINTS = 2,
		// 	WEAPON_ATTACH_POINT_PISTOL_L = 3,
		// 	WEAPON_ATTACH_POINT_KNIFE = 4,
		// 	WEAPON_ATTACH_POINT_LASSO = 5,
		// 	WEAPON_ATTACH_POINT_THROWER = 6,
		// 	WEAPON_ATTACH_POINT_BOW = 7,
		// 	WEAPON_ATTACH_POINT_BOW_ALTERNATE = 8,
		// 	WEAPON_ATTACH_POINT_RIFLE = 9,
		// 	WEAPON_ATTACH_POINT_RIFLE_ALTERNATE = 10,
		// 	WEAPON_ATTACH_POINT_LANTERN = 11,
		// 	WEAPON_ATTACH_POINT_TEMP_LANTERN = 12,
		// 	WEAPON_ATTACH_POINT_MELEE = 13,
		// 	MAX_SYNCED_WEAPON_ATTACH_POINTS = 13,
		// 	WEAPON_ATTACH_POINT_HIP = 14,
		// 	WEAPON_ATTACH_POINT_BOOT = 15,
		// 	WEAPON_ATTACH_POINT_BACK = 16,
		// 	WEAPON_ATTACH_POINT_FRONT = 17,
		// 	WEAPON_ATTACH_POINT_SHOULDERSLING = 18,
		// 	WEAPON_ATTACH_POINT_LEFTBREAST = 19,
		// 	WEAPON_ATTACH_POINT_RIGHTBREAST = 20,
		// 	WEAPON_ATTACH_POINT_LEFTARMPIT = 21,
		// 	WEAPON_ATTACH_POINT_RIGHTARMPIT = 22,
		// 	WEAPON_ATTACH_POINT_LEFTARMPIT_RIFLE = 23,
		// 	WEAPON_ATTACH_POINT_SATCHEL = 24,
		// 	WEAPON_ATTACH_POINT_LEFTARMPIT_BOW = 25,
		// 	WEAPON_ATTACH_POINT_RIGHT_HAND_EXTRA = 26,
		// 	WEAPON_ATTACH_POINT_LEFT_HAND_EXTRA = 27,
		// 	WEAPON_ATTACH_POINT_RIGHT_HAND_AUX = 28,
		// 	MAX_WEAPON_ATTACH_POINTS = 29
		// };
		static void SET_CURRENT_PED_WEAPON(Ped ped, Hash weaponHash, BOOL equipNow, int attachPoint, BOOL p4, BOOL p5)
		{
			invoke<int>(0xADF692B254977C0C, ped, weaponHash, equipNow, attachPoint, p4, p5);
		} // 0xADF692B254977C0C 0xB8278882 b1207
		// attachPoint: see SET_CURRENT_PED_WEAPON
		static BOOL GET_CURRENT_PED_WEAPON(Ped ped, Hash* weaponHash, BOOL p2, int attachPoint, BOOL p4)
		{
			return invoke<BOOL>(0x3A87E44BB9A01D54, ped, weaponHash, p2, attachPoint, p4);
		} // 0x3A87E44BB9A01D54 0xB0237302 b1207
		// Returns weaponObject, attachPoint: see SET_CURRENT_PED_WEAPON
		static Entity GET_CURRENT_PED_WEAPON_ENTITY_INDEX(Ped ped, int attachPoint)
		{
			return invoke<Entity>(0x3B390A939AF0B5FC, ped, attachPoint);
		} // 0x3B390A939AF0B5FC 0x5D73CD20 b1207
		static BOOL ENABLE_WEAPON_RESTORE_(Ped ped)
		{
			return invoke<BOOL>(0xC395355843BE134B, ped);
		} // 0xC395355843BE134B undefined b1207
		static Hash GET_PED_BACKUP_WEAPON(Ped ped, BOOL p1)
		{
			return invoke<Hash>(0xC71FE230A513C30F, ped, p1);
		} // 0xC71FE230A513C30F undefined b1207
		static Any N0x486C96A0DCD2BC92(Any p0, Any p1)
		{
			return invoke<Any>(0x486C96A0DCD2BC92, p0, p1);
		} // 0x486C96A0DCD2BC92 undefined b1232
		static Hash GET_PED_WORST_WEAPON_(Ped ped, BOOL p1, BOOL p2, BOOL p3)
		{
			return invoke<Hash>(0xDA37A053C1522F5D, ped, p1, p2, p3);
		} // 0xDA37A053C1522F5D undefined b1207
		static Hash GET_BEST_PED_WEAPON(Ped ped, BOOL p1, BOOL p2)
		{
			return invoke<Hash>(0x8483E98E8B888AE2, ped, p1, p2);
		} // 0x8483E98E8B888AE2 0xB998D444 b1207
		static Any GET_BEST_PED_WEAPON_IN_INVENTORY_(Ped ped, Any p1, Any* guidPrimary)
		{
			return invoke<Any>(0x7B98500614C8E8B8, ped, p1, guidPrimary);
		} // 0x7B98500614C8E8B8 undefined b1232
		static void GET_BEST_PED_SHORTARM_GUID(Ped ped, Any* outGUID, BOOL p2, BOOL p3)
		{
			invoke<int>(0xF52BD94B47CCF736, ped, outGUID, p2, p3);
		} // 0xF52BD94B47CCF736 undefined b1207
		static BOOL GET_PED_WEAPON_GUID_AT_ATTACH_POINT(Ped ped, int attachPoint, Any* weaponGuid)
		{
			return invoke<BOOL>(0x6929E22158E52265, ped, attachPoint, weaponGuid);
		} // 0x6929E22158E52265 undefined b1207
		// If near your horse when called, weapons stored on your horse will be considered
		// Returns weaponHash
		static Hash GET_BEST_PED_WEAPON_IN_GROUP_(Ped ped, Hash weaponGroup, BOOL p2, BOOL p3)
		{
			return invoke<Hash>(0x9F67929D98E7C6E8, ped, weaponGroup, p2, p3);
		} // 0x9F67929D98E7C6E8 undefined b1207
		// Returns the ped's default unarmed weapon hash as defined in CPedModelInfo (DefaultUnarmedWeapon).
		// Falls back to WEAPON_UNARMED if the ped doesn't have a valid model info pointer, or 0 if the ped doesn't exist.
		static Hash GET_DEFAULT_UNARMED_WEAPON_HASH_(Ped ped)
		{
			return invoke<Hash>(0x08FF1099ED2E6E21, ped);
		} // 0x08FF1099ED2E6E21 undefined b1207
		// turretHash: WEAPON_TURRET_MAXIUM, WEAPON_TURRET_GATLING, WEAPON_TURRET_CANNON, WEAPON_TURRET_REVOLVING_CANNON
		static void SET_AMMO_IN_TURRET_(Vehicle vehicle, Hash turretHash, int ammo)
		{
			invoke<int>(0xBDDA0C290C228159, vehicle, turretHash, ammo);
		} // 0xBDDA0C290C228159 undefined b1207
		static BOOL SET_CURRENT_PED_VEHICLE_WEAPON(Ped ped, Hash weaponHash)
		{
			return invoke<BOOL>(0x75C55983C2C39DAA, ped, weaponHash);
		} // 0x75C55983C2C39DAA 0x8E6F2AF1 b1207
		static BOOL GET_CURRENT_PED_VEHICLE_WEAPON(Ped ped, Hash* weaponHash)
		{
			return invoke<BOOL>(0x1017582BCD3832DC, ped, weaponHash);
		} // 0x1017582BCD3832DC 0xF26C5D65 b1207
		static BOOL IS_PED_ARMED(Ped ped, int flags)
		{
			return invoke<BOOL>(0xCB690F680A3EA971, ped, flags);
		} // 0xCB690F680A3EA971 undefined b1207
		static Any N0xA2091482ED42EF85(Any p0, Any p1)
		{
			return invoke<Any>(0xA2091482ED42EF85, p0, p1);
		} // 0xA2091482ED42EF85 undefined b1207
		// Returns true if the ped is currently holstering or unholstering a weapon
		static BOOL IS_WEAPON_HOLSTER_STATE_CHANGING_(Ped ped)
		{
			return invoke<BOOL>(0x2387D6E9C6B478AA, ped);
		} // 0x2387D6E9C6B478AA undefined b1207
		static BOOL IS_WEAPON_VALID(Hash weaponHash)
		{
			return invoke<BOOL>(0x937C71165CF334B3, weaponHash);
		} // 0x937C71165CF334B3 0x38CA2954 b1207
		static BOOL IS_AMMO_VALID_(Hash ammoHash)
		{
			return invoke<BOOL>(0x1F7977C9101F807F, ammoHash);
		} // 0x1F7977C9101F807F undefined b1207
		static Any N0x23BF601A42F329A0(Any p0)
		{
			return invoke<Any>(0x23BF601A42F329A0, p0);
		} // 0x23BF601A42F329A0 undefined b1207
		static BOOL IS_PED_CARRYING_WEAPON(Ped ped, Hash weaponHash)
		{
			return invoke<BOOL>(0xF29A186ED428B552, ped, weaponHash);
		} // 0xF29A186ED428B552 undefined b1207
		static BOOL HAS_PED_GOT_WEAPON(Ped ped, Hash weaponHash, int p2, BOOL p3)
		{
			return invoke<BOOL>(0x8DECB02F88F428BC, ped, weaponHash, p2, p3);
		} // 0x8DECB02F88F428BC 0x43D2FA82 b1207
		// Seems to return true if the passed weapon is some sort of non-lethal melee weapon.
		// Weapon must currently be held/equipped by the ped.
		static BOOL N0x07E1C35F0078C3F9(Ped ped, Hash weapon)
		{
			return invoke<BOOL>(0x07E1C35F0078C3F9, ped, weapon);
		} // 0x07E1C35F0078C3F9 undefined b1207
		static BOOL IS_PED_WEAPON_READY_TO_SHOOT(Ped ped)
		{
			return invoke<BOOL>(0xB80CA294F2F26749, ped);
		} // 0xB80CA294F2F26749 0x02A32CB0 b1207
		// slotHash is usually just the weaponHash name, but WEAPON_* is replaced with SLOT_*
		static Hash GET_PED_WEAPON_IN_SLOT_(Ped ped, Hash slotHash)
		{
			return invoke<Hash>(0xDBC4B552B2AE9A83, ped, slotHash);
		} // 0xDBC4B552B2AE9A83 undefined b1207
		// addReason: see _ADD_AMMO_TO_PED
		static void GIVE_DELAYED_WEAPON_TO_PED(Ped ped, Hash weaponHash, int ammoCount, BOOL p3, Hash addReason)
		{
			invoke<int>(0xB282DC6EBD803C75, ped, weaponHash, ammoCount, p3, addReason);
		} // 0xB282DC6EBD803C75 0x5868D20D b1207
		static void REMOVE_ALL_PED_WEAPONS(Ped ped, BOOL p1, BOOL p2)
		{
			invoke<int>(0xF25DF915FA38C5F3, ped, p1, p2);
		} // 0xF25DF915FA38C5F3 0xA44CE817 b1207
		// removeReason:
		// enum eRemoveItemReason : Hash
		// {
		// 	REMOVE_REASON_CLIENT_PURGED = 0x4A4E94DC,
		// 	REMOVE_REASON_COALESCE = 0x2ABE393E,
		// 	REMOVE_REASON_DEBUG = 0xA07362E6,
		// 	REMOVE_REASON_DEFAULT = 0xF77DE93D,
		// 	REMOVE_REASON_DELETE_CHARACTER = 0x20AFBDE9,
		// 	REMOVE_REASON_DROPPED = 0xEC7FB5D5,
		// 	REMOVE_REASON_DUPLICATE = 0x19047132,
		// 	REMOVE_REASON_GIFTED_INCORRECTLY = 0x9C4E3829,
		// 	REMOVE_REASON_GIVEN = 0xAD5377D4,
		// 	REMOVE_REASON_INSUFFICIENT_INVENTORY = 0x518D1AAE,
		// 	REMOVE_REASON_ITEM_DOES_NOT_EXIST = 0xEAD5D889,
		// 	REMOVE_REASON_LOADOUT = 0x1B94E3BA,
		// 	REMOVE_REASON_SET_AMOUNT = 0x19D5CFA5,
		// 	REMOVE_REASON_SOLD = 0x76C4B482,
		// 	REMOVE_REASON_USED = 0x2188E0A3,
		// 	REMOVE_REASON_USE_FAILED = 0x671F9EAD
		// };
		static void REMOVE_WEAPON_FROM_PED(Ped ped, Hash weaponHash, BOOL p2, Hash removeReason)
		{
			invoke<int>(0x4899CB088EDF59B8, ped, weaponHash, p2, removeReason);
		} // 0x4899CB088EDF59B8 0x9C37F220 b1207
		static void REMOVE_WEAPON_FROM_PED_BY_GUID_(Ped ped, Any* weaponGuid, Hash removeReason)
		{
			invoke<int>(0x51C3B71591811485, ped, weaponGuid, removeReason);
		} // 0x51C3B71591811485 undefined b1311
		// Hides the ped's weapon during a cutscene.
		static void HIDE_PED_WEAPON_FOR_SCRIPTED_CUTSCENE(Ped ped, BOOL toggle)
		{
			invoke<int>(0x6F6981D2253C208F, ped, toggle);
		} // 0x6F6981D2253C208F 0x00CFD6E9 b1207
		static void SET_PED_CURRENT_WEAPON_VISIBLE(Ped ped, BOOL visible, BOOL deselectWeapon, BOOL p3, BOOL p4)
		{
			invoke<int>(0x0725A4CCFDED9A70, ped, visible, deselectWeapon, p3, p4);
		} // 0x0725A4CCFDED9A70 0x00BECD77 b1207
		// attachPoint: see SET_CURRENT_PED_WEAPON
		static void SET_PED_WEAPON_ATTACH_POINT_VISIBILITY_(Ped ped, int attachPoint, BOOL visible)
		{
			invoke<int>(0x67E21ACC5C0C970C, ped, attachPoint, visible);
		} // 0x67E21ACC5C0C970C undefined b1207
		static void SET_PED_ALL_WEAPONS_VISIBILITY_(Ped ped, BOOL visible)
		{
			invoke<int>(0x4F806A6CFED89468, ped, visible);
		} // 0x4F806A6CFED89468 undefined b1207
		static void SET_PED_DROPS_WEAPONS_WHEN_DEAD(Ped ped, BOOL toggle)
		{
			invoke<int>(0x476AE72C1D19D1A8, ped, toggle);
		} // 0x476AE72C1D19D1A8 0x8A444056 b1207
		static void N0x431240A58484D5D0(Ped ped, BOOL toggle)
		{
			invoke<int>(0x431240A58484D5D0, ped, toggle);
		} // 0x431240A58484D5D0 undefined b1207
		static void N0x45E57FDD531C9477(Ped ped, BOOL toggle)
		{
			invoke<int>(0x45E57FDD531C9477, ped, toggle);
		} // 0x45E57FDD531C9477 undefined b1207
		static void N0xF08D8FEB455F2C8C(Ped ped, BOOL toggle)
		{
			invoke<int>(0xF08D8FEB455F2C8C, ped, toggle);
		} // 0xF08D8FEB455F2C8C undefined b1207
		static void N0x16D9841A85FA627E(Ped ped, BOOL toggle)
		{
			invoke<int>(0x16D9841A85FA627E, ped, toggle);
		} // 0x16D9841A85FA627E undefined b1207
		static BOOL GET_PED_LAST_WEAPON_IMPACT_COORD(Ped ped, Vector3* coords)
		{
			return invoke<BOOL>(0x6C4D0409BA1A2BC2, ped, coords);
		} // 0x6C4D0409BA1A2BC2 0x9B266079 b1207
		static void CLEAR_PED_LAST_WEAPON_DAMAGE_(Ped ped)
		{
			invoke<int>(0x087D8F4BC65F68E4, ped);
		} // 0x087D8F4BC65F68E4 undefined b1207
		static BOOL HAS_ENTITY_BEEN_DAMAGED_BY_WEAPON_(Entity entity, Hash weaponName, int weaponType)
		{
			return invoke<BOOL>(0xDCF06D0CDFF68424, entity, weaponName, weaponType);
		} // 0xDCF06D0CDFF68424 undefined b1207
		static void SET_PED_DROPS_INVENTORY_WEAPON(Ped ped, Hash weaponHash, float xOffset, float yOffset, float zOffset, int ammoCount)
		{
			invoke<int>(0x208A1888007FC0E6, ped, weaponHash, xOffset, yOffset, zOffset, ammoCount);
		} // 0x208A1888007FC0E6 0x81FFB874 b1207
		static void N0xB0FB9B196A3D13F0(Any p0, Any p1, Any p2)
		{
			invoke<int>(0xB0FB9B196A3D13F0, p0, p1, p2);
		} // 0xB0FB9B196A3D13F0 undefined b1207
		// _SET_A* - _SET_B*
		static void N0x2EBF70E1D8C06683(Ped ped, Hash p1)
		{
			invoke<int>(0x2EBF70E1D8C06683, ped, p1);
		} // 0x2EBF70E1D8C06683 undefined b1207
		// Only used in R* Script fme_escaped_convicts, p0 = 0
		static void N0x63B83A526329AFBC(Any p0)
		{
			invoke<int>(0x63B83A526329AFBC, p0);
		} // 0x63B83A526329AFBC undefined b1207
		static Any MAKE_PED_RELOAD_(Ped ped)
		{
			return invoke<Any>(0x79E1E511FF7EFB13, ped);
		} // 0x79E1E511FF7EFB13 undefined b1207
		static Any REFILL_AMMO_IN_CURRENT_PED_WEAPON_(Ped ped)
		{
			return invoke<Any>(0x0A2AB7B7ABC055F4, ped);
		} // 0x0A2AB7B7ABC055F4 undefined b1207
		// Old name: _DROP_CURRENT_PED_WEAPON
		static Entity MAKE_PED_DROP_WEAPON(Ped ped, BOOL p1, int attachPoint, BOOL p3, BOOL p4)
		{
			return invoke<Entity>(0xCEF4C65DE502D367, ped, p1, attachPoint, p3, p4);
		} // 0xCEF4C65DE502D367 undefined b1207
		// Returns eCurrentHeldWeapon
		// _GET_R* - _GET_T*
		static Hash GET_PED_CURRENT_HELD_WEAPON_(Ped ped)
		{
			return invoke<Hash>(0x8425C5F057012DAB, ped);
		} // 0x8425C5F057012DAB undefined b1207
		static void SET_ALLOW_ANY_WEAPON_DROP(Ped ped, BOOL toggle)
		{
			invoke<int>(0x78030C7867D8B9B6, ped, toggle);
		} // 0x78030C7867D8B9B6 undefined b1207
		static void N0xA3716A77DCF17424(Any p0, Any p1, Any p2)
		{
			invoke<int>(0xA3716A77DCF17424, p0, p1, p2);
		} // 0xA3716A77DCF17424 undefined b1207
		static void N0x457B16951AD77C1B(Any p0)
		{
			invoke<int>(0x457B16951AD77C1B, p0);
		} // 0x457B16951AD77C1B undefined b1436
		static Any N0x3799EFCC3C8CD5E1(Any p0)
		{
			return invoke<Any>(0x3799EFCC3C8CD5E1, p0);
		} // 0x3799EFCC3C8CD5E1 undefined b1207
		static float GET_MAX_LOCKON_DISTANCE_OF_CURRENT_PED_WEAPON_(Ped ped)
		{
			return invoke<float>(0x79B1A6E780266DB0, ped);
		} // 0x79B1A6E780266DB0 undefined b1207
		static void REMOVE_WEAPON_COMPONENT_FROM_PED_(Ped ped, Hash componentHash, Hash weaponHash)
		{
			invoke<int>(0x19F70C4D80494FF8, ped, componentHash, weaponHash);
		} // 0x19F70C4D80494FF8 undefined b1207
		static BOOL HAS_PED_GOT_WEAPON_COMPONENT_(Ped ped, Hash componentHash, Hash weaponHash)
		{
			return invoke<BOOL>(0xBBC67A6F965C688A, ped, componentHash, weaponHash);
		} // 0xBBC67A6F965C688A undefined b1207
		static BOOL IS_PED_CURRENT_WEAPON_HOLSTERED_(Ped ped)
		{
			return invoke<BOOL>(0xBDD9C235D8D1052E, ped);
		} // 0xBDD9C235D8D1052E undefined b1207
		static Any N0xD2209866B0CB72EA(Any p0, Any p1)
		{
			return invoke<Any>(0xD2209866B0CB72EA, p0, p1);
		} // 0xD2209866B0CB72EA undefined b1207
		static void REQUEST_WEAPON_ASSET_(Hash weaponHash, int p1, BOOL p2)
		{
			invoke<int>(0x72D4CB5DB927009C, weaponHash, p1, p2);
		} // 0x72D4CB5DB927009C undefined b1207
		static BOOL HAS_WEAPON_ASSET_LOADED_(Hash weaponHash)
		{
			return invoke<BOOL>(0xFF07CF465F48B830, weaponHash);
		} // 0xFF07CF465F48B830 undefined b1207
		static void REMOVE_WEAPON_ASSET_(Hash weaponHash)
		{
			invoke<int>(0xC3896D03E2852236, weaponHash);
		} // 0xC3896D03E2852236 undefined b1207
		static void N0xE9B3FEC825668291(Any p0, Any p1, Any p2)
		{
			invoke<int>(0xE9B3FEC825668291, p0, p1, p2);
		} // 0xE9B3FEC825668291 undefined b1207
		static Any N0x9CCA3131E6B53C68(Any p0, Any p1, Any p2)
		{
			return invoke<Any>(0x9CCA3131E6B53C68, p0, p1, p2);
		} // 0x9CCA3131E6B53C68 undefined b1207
		static const char* GET_WEAPON_NAME_2_(Hash weaponHash)
		{
			return invoke<const char*>(0x6D3AC61694A791C5, weaponHash);
		} // 0x6D3AC61694A791C5 undefined b1207
		// Returns "WNS_INVALID" if the weapon is invalid/doesn't exist.
		static const char* GET_WEAPON_NAME_(Hash weaponHash)
		{
			return invoke<const char*>(0x89CF5FF3D363311E, weaponHash);
		} // 0x89CF5FF3D363311E undefined b1207
		static const char* GET_WEAPON_NAME_WITH_PERMANENT_DEGRADATION_(Hash weaponHash, float permanentDegradationLevel)
		{
			return invoke<const char*>(0x7A56D66C78D8EF8E, weaponHash, permanentDegradationLevel);
		} // 0x7A56D66C78D8EF8E undefined b1207
		static void N0xB832F1A686B9B810(Any p0, Any p1, Any p2)
		{
			invoke<int>(0xB832F1A686B9B810, p0, p1, p2);
		} // 0xB832F1A686B9B810 undefined b1207
		static Any N0x5A695BD328586B44(Any p0, Any p1)
		{
			return invoke<Any>(0x5A695BD328586B44, p0, p1);
		} // 0x5A695BD328586B44 undefined b1207
		static void N0x641351E9AD103890(Any p0, Any p1)
		{
			invoke<int>(0x641351E9AD103890, p0, p1);
		} // 0x641351E9AD103890 undefined b1207
		static void SET_INSTANTLY_EQUIP_WEAPON_PICKUPS(Ped ped, BOOL toggle)
		{
			invoke<int>(0x739B9C6D0E7F7F93, ped, toggle);
		} // 0x739B9C6D0E7F7F93 undefined b1207
		static void SET_FORCE_AUTO_EQUIP_(Ped ped, BOOL toggle)
		{
			invoke<int>(0xBE711B14A159E84F, ped, toggle);
		} // 0xBE711B14A159E84F undefined b1207
		// Appears to just send specified weapon to your horse holster without having to be close
		// However, the weapon is not visible on the horse holster, but you can reach the weapon on the weapon wheel
		static void SEND_WEAPON_TO_INVENTORY_(Ped ped, Hash weaponHash)
		{
			invoke<int>(0xE9BD19F8121ADE3E, ped, weaponHash);
		} // 0xE9BD19F8121ADE3E undefined b1207
		// Puts the gun visibly in your horse's holster without having to be close to the horse. Use 0xE9BD19F8121ADE3E before using this native
		// _A* or _B*
		static void N0x14FF0C2545527F9B(Ped horse, Hash weaponHash, Ped ped)
		{
			invoke<int>(0x14FF0C2545527F9B, horse, weaponHash, ped);
		} // 0x14FF0C2545527F9B undefined b1207
		static void N0xD4C6E24D955FF061(Any p0)
		{
			invoke<int>(0xD4C6E24D955FF061, p0);
		} // 0xD4C6E24D955FF061 undefined b1311
		static Any N0xAFFD0CCF31F469B8(Any p0)
		{
			return invoke<Any>(0xAFFD0CCF31F469B8, p0);
		} // 0xAFFD0CCF31F469B8 undefined b1207
		static Hash GET_WEAPON_STAT_ID_(Hash weaponHash)
		{
			return invoke<Hash>(0x8EC44AE8DECFF841, weaponHash);
		} // 0x8EC44AE8DECFF841 undefined b1207
		static BOOL HAS_ENTITY_BEEN_DAMAGED_BY_WEAPON_RECENTLY_(Entity entity, Hash weaponHash, int ms)
		{
			return invoke<BOOL>(0x9E2D5D6BC97A5F1E, entity, weaponHash, ms);
		} // 0x9E2D5D6BC97A5F1E undefined b1207
		static Hash GET_PED_HOGTIE_WEAPON_(Ped ped)
		{
			return invoke<Hash>(0x90EB1CB189923587, ped);
		} // 0x90EB1CB189923587 undefined b1207
		static Object CREATE_WEAPON_OBJECT_(Hash weaponHash, int ammoCount, float x, float y, float z, BOOL showWorldModel, float scale)
		{
			return invoke<Object>(0x9888652B8BA77F73, weaponHash, ammoCount, x, y, z, showWorldModel, scale);
		} // 0x9888652B8BA77F73 undefined b1207
		static void REMOVE_WEAPON_COMPONENT_FROM_WEAPON_OBJECT(Object weaponObject, Hash component)
		{
			invoke<int>(0xF7D82B0D66777611, weaponObject, component);
		} // 0xF7D82B0D66777611 0xA6E7ED3C b1207
		static BOOL HAS_WEAPON_GOT_WEAPON_COMPONENT(Object weapon, Hash addonHash)
		{
			return invoke<BOOL>(0x76A18844E743BF91, weapon, addonHash);
		} // 0x76A18844E743BF91 0x1D368510 b1207
		static void GIVE_WEAPON_COMPONENT_TO_WEAPON_OBJECT_(Object* weaponObject, Ped ped, Hash componentHash, BOOL p3)
		{
			invoke<int>(0x1A47699E8D533E8F, weaponObject, ped, componentHash, p3);
		} // 0x1A47699E8D533E8F undefined b1207
		// Detaches the weapon from the ped and actually removes the ped's weapon
		static Object GET_WEAPON_OBJECT_FROM_PED_(Ped ped, BOOL p1)
		{
			return invoke<Object>(0xC6A6789BB405D11C, ped, p1);
		} // 0xC6A6789BB405D11C undefined b1207
		// _GET_M* - _GET_PED_A*
		static Object GET_PED_WEAPON_OBJECT_(Ped ped, BOOL p1)
		{
			return invoke<Object>(0x6CA484C9A7377E4F, ped, p1);
		} // 0x6CA484C9A7377E4F undefined b1207
		// entity can be a ped or weapon object.
		static void GIVE_WEAPON_COMPONENT_TO_ENTITY_(Entity entity, Hash componentHash, Hash weaponHash, BOOL p3)
		{
			invoke<int>(0x74C9090FDD1BB48E, entity, componentHash, weaponHash, p3);
		} // 0x74C9090FDD1BB48E undefined b1207
		static void N0x74C9080FDD1BB48E(Any p0, Any p1)
		{
			invoke<int>(0x74C9080FDD1BB48E, p0, p1);
		} // 0x74C9080FDD1BB48E undefined b1207
		static void N0x74C9080FDD1BB48F(Any p0, Any p1)
		{
			invoke<int>(0x74C9080FDD1BB48F, p0, p1);
		} // 0x74C9080FDD1BB48F undefined b1207
		static void N0x74C2365FDD1BB48F(Any p0, Any p1)
		{
			invoke<int>(0x74C2365FDD1BB48F, p0, p1);
		} // 0x74C2365FDD1BB48F undefined b1207
		static void N0x74C90AAACC1DD48F(Any p0)
		{
			invoke<int>(0x74C90AAACC1DD48F, p0);
		} // 0x74C90AAACC1DD48F undefined b1207
		static Any N0x74C8000FDD1BB111(Any p0, Any p1)
		{
			return invoke<Any>(0x74C8000FDD1BB111, p0, p1);
		} // 0x74C8000FDD1BB111 undefined b1207
		static Any N0x74C8000FDD1BB222(Any p0, Any p1)
		{
			return invoke<Any>(0x74C8000FDD1BB222, p0, p1);
		} // 0x74C8000FDD1BB222 undefined b1207
		// Returns iSpinHash
		static Hash GET_WEAPON_GUN_SPINNING_WEAPON_EMOTE_TRICK_TYPE_HASH_(Hash emote, int weaponEmoteTrickType)
		{
			return invoke<Hash>(0xF4601C1203B1A78D, emote, weaponEmoteTrickType);
		} // 0xF4601C1203B1A78D undefined b1207
		// emote hashes: KIT_EMOTE_TWIRL_GUN, KIT_EMOTE_TWIRL_GUN_LEFT_HOLSTER, KIT_EMOTE_TWIRL_GUN_DUAL, 0 (to unequip)
		static void SET_ACTIVE_GUN_SPINNING_EQUIP_KIT_EMOTE_TWIRL_(Ped ped, Hash emote)
		{
			invoke<int>(0xCBCFFF805F1B4596, ped, emote);
		} // 0xCBCFFF805F1B4596 undefined b1311
		// Returns emote Hash
		static Hash GET_PED_GUN_SPINNING_EQUIPPED_KIT_EMOTE_TWIRL_(Ped ped)
		{
			return invoke<Hash>(0x2C4FEC3D0EFA9FC0, ped);
		} // 0x2C4FEC3D0EFA9FC0 undefined b1355
		// spinHash can be -1, 0 to disable
		static void SET_ACTIVE_GUN_SPINNING_KIT_EMOTE_TWIRL_(Ped ped, int weaponEmoteTrickType, Hash spin)
		{
			invoke<int>(0x01F661BB9C71B465, ped, weaponEmoteTrickType, spin);
		} // 0x01F661BB9C71B465 undefined b1207
		// Returns iSpinHash / iVariationSpin
		static Hash GET_PED_GUN_SPINNING_HASH_FROM_WEAPON_EMOTE_VARIATION_(Ped ped, int weaponEmoteVariation)
		{
			return invoke<Hash>(0xF3B1620B920D1708, ped, weaponEmoteVariation);
		} // 0xF3B1620B920D1708 undefined b1355
		// Returns weaponEmoteVariation
		//
		// WEAPON_EMOTE_VARIATION_INVALID = -2,
		// WEAPON_EMOTE_VARIATION_BASE,
		// WEAPON_EMOTE_VARIATION_A,
		// WEAPON_EMOTE_VARIATION_B,
		// WEAPON_EMOTE_VARIATION_C,
		// WEAPON_EMOTE_VARIATION_D,
		// WEAPON_EMOTE_VARIATION_PREVIEW,
		// WEAPON_EMOTE_NUM_VARIATIONS
		static int GET_WEAPON_EMOTE_VARIATION_(Ped ped, int variation)
		{
			return invoke<int>(0x86147D05FA831D3A, ped, variation);
		} // 0x86147D05FA831D3A undefined b1355
		// _STOP_* - _TEST_*
		static void SET_GUN_SPINNING_INVENTORY_SLOT_ID_ACTIVATE_(Ped ped, int emoteType)
		{
			invoke<int>(0x408CF580C5E96D49, ped, emoteType);
		} // 0x408CF580C5E96D49 undefined b1355
		static BOOL GET_CAN_TWIRL_WEAPON_(Hash weaponHash)
		{
			return invoke<BOOL>(0x6554ECCE226F2A2A, weaponHash);
		} // 0x6554ECCE226F2A2A undefined b1207
		// _GET_BEST_* - _GET_CLOSEST_*
		static BOOL GET_CORRECT_KIT_EMOTE_TWIRL_GUN_(Ped ped, Any* weaponGuid)
		{
			return invoke<BOOL>(0xCD356B42C57BFE01, ped, weaponGuid);
		} // 0xCD356B42C57BFE01 undefined b1355
		static Any N0xBC9444F2FF94A9C0(Any p0)
		{
			return invoke<Any>(0xBC9444F2FF94A9C0, p0);
		} // 0xBC9444F2FF94A9C0 undefined b1355
		// Returns weaponCollection Hash
		// Example: RE_POLICECHASE_MALES_01: Carbine Repeater + Knife, LO_AGRO_PED
		static Hash GET_DEFAULT_PED_WEAPON_COLLECTION_(Hash pedModel)
		{
			return invoke<Hash>(0xD42514C182121C23, pedModel);
		} // 0xD42514C182121C23 undefined b1207
		static void GIVE_WEAPON_COLLECTION_TO_PED_(Ped ped, Hash weaponCollection)
		{
			invoke<int>(0x899A04AFCC725D04, ped, weaponCollection);
		} // 0x899A04AFCC725D04 undefined b1207
		static BOOL N0xF252A85B8F3F8C58(Hash weaponCollection, Hash dualwieldVariant)
		{
			return invoke<BOOL>(0xF252A85B8F3F8C58, weaponCollection, dualwieldVariant);
		} // 0xF252A85B8F3F8C58 undefined b1207
		// Returns weaponHash
		static Hash N0x9EEFD670F10656D7(Hash weaponCollection, Hash weaponGroup)
		{
			return invoke<Hash>(0x9EEFD670F10656D7, weaponCollection, weaponGroup);
		} // 0x9EEFD670F10656D7 undefined b1207
		static Any N0xF2F585411E748B9C(Any p0, Any p1)
		{
			return invoke<Any>(0xF2F585411E748B9C, p0, p1);
		} // 0xF2F585411E748B9C undefined b1207
		static int GET_WEAPON_CLIP_SIZE(Hash weaponHash)
		{
			return invoke<int>(0xD3750CCC00635FC2, weaponHash);
		} // 0xD3750CCC00635FC2 undefined b1207
		static void N0xA769D753922B031B(Any p0, Any p1, Any p2)
		{
			invoke<int>(0xA769D753922B031B, p0, p1, p2);
		} // 0xA769D753922B031B undefined b1207
		static void N0xC5899C4CD2E2495D(Any p0)
		{
			invoke<int>(0xC5899C4CD2E2495D, p0);
		} // 0xC5899C4CD2E2495D undefined b1207
		static BOOL GET_ALLOW_DUAL_WIELD(Ped ped)
		{
			return invoke<BOOL>(0x918990BD9CE08582, ped);
		} // 0x918990BD9CE08582 undefined b1207
		static void SET_ALLOW_DUAL_WIELD_(Ped ped, BOOL allow)
		{
			invoke<int>(0x83B8D50EB9446BBA, ped, allow);
		} // 0x83B8D50EB9446BBA undefined b1207
		static BOOL N0x44C8F4908F1B2622(Ped ped, Hash ammoHash)
		{
			return invoke<BOOL>(0x44C8F4908F1B2622, ped, ammoHash);
		} // 0x44C8F4908F1B2622 undefined b1207
		static BOOL IS_WEAPON_KNIFE_(Hash weaponHash)
		{
			return invoke<BOOL>(0x792E3EF76C911959, weaponHash);
		} // 0x792E3EF76C911959 undefined b1207
		static BOOL IS_WEAPON_REVOLVER(Hash weaponHash)
		{
			return invoke<BOOL>(0xC212F1D05A8232BB, weaponHash);
		} // 0xC212F1D05A8232BB undefined b1207
		static BOOL IS_WEAPON_PISTOL(Hash weaponHash)
		{
			return invoke<BOOL>(0xDDC64F5E31EEDAB6, weaponHash);
		} // 0xDDC64F5E31EEDAB6 undefined b1207
		static BOOL IS_WEAPON_REPEATER(Hash weaponHash)
		{
			return invoke<BOOL>(0xDDB2578E95EF7138, weaponHash);
		} // 0xDDB2578E95EF7138 undefined b1207
		static BOOL IS_WEAPON_RIFLE(Hash weaponHash)
		{
			return invoke<BOOL>(0x0A82317B7EBFC420, weaponHash);
		} // 0x0A82317B7EBFC420 undefined b1207
		static BOOL IS_WEAPON_SHOTGUN(Hash weaponHash)
		{
			return invoke<BOOL>(0xC75386174ECE95D5, weaponHash);
		} // 0xC75386174ECE95D5 undefined b1207
		static BOOL IS_WEAPON_SNIPER_(Hash weaponHash)
		{
			return invoke<BOOL>(0x6AD66548840472E5, weaponHash);
		} // 0x6AD66548840472E5 undefined b1207
		static BOOL IS_WEAPON_MELEE_WEAPON(Hash weaponHash)
		{
			return invoke<BOOL>(0x959383DCD42040DA, weaponHash);
		} // 0x959383DCD42040DA undefined b1207
		static BOOL IS_WEAPON_THROWABLE_(Hash weaponHash)
		{
			return invoke<BOOL>(0x30E7C16B12DA8211, weaponHash);
		} // 0x30E7C16B12DA8211 undefined b1207
		static BOOL IS_WEAPON_LASSO_(Hash weaponHash)
		{
			return invoke<BOOL>(0x6E4E1A82081EABED, weaponHash);
		} // 0x6E4E1A82081EABED undefined b1207
		static BOOL IS_WEAPON_BINOCULARS_(Hash weaponHash)
		{
			return invoke<BOOL>(0xC853230E76A152DF, weaponHash);
		} // 0xC853230E76A152DF undefined b1207
		// Returns true if CWeaponInfoFlags::Flags::Gun is set.
		static BOOL IS_WEAPON_A_GUN(Hash weaponHash)
		{
			return invoke<BOOL>(0x705BE297EEBDB95D, weaponHash);
		} // 0x705BE297EEBDB95D undefined b1207
		static BOOL IS_WEAPON_TWO_HANDED_(Hash weaponHash)
		{
			return invoke<BOOL>(0x0556E9D2ECF39D01, weaponHash);
		} // 0x0556E9D2ECF39D01 undefined b1207
		static BOOL IS_WEAPON_ONE_HANDED_(Hash weaponHash)
		{
			return invoke<BOOL>(0xD955FEE4B87AFA07, weaponHash);
		} // 0xD955FEE4B87AFA07 undefined b1207
		static BOOL IS_WEAPON_SILENT_(Hash weaponHash)
		{
			return invoke<BOOL>(0x5809DBCA0A37C82B, weaponHash);
		} // 0x5809DBCA0A37C82B undefined b1207
		static Any N0xEA522F991E120D45(Any p0)
		{
			return invoke<Any>(0xEA522F991E120D45, p0);
		} // 0xEA522F991E120D45 undefined b1207
		static BOOL IS_AMMO_SILENT_(Hash ammoHash)
		{
			return invoke<BOOL>(0xD2866CBA797E872E, ammoHash);
		} // 0xD2866CBA797E872E undefined b1232
		static BOOL IS_AMMO_SILENT_2_(Hash ammoHash)
		{
			return invoke<BOOL>(0x7EFACC589B98C488, ammoHash);
		} // 0x7EFACC589B98C488 undefined b1207
		static BOOL SHOULD_WEAPON_BE_DISCARDED_WHEN_SWAPPED(Hash weaponHash)
		{
			return invoke<BOOL>(0x2C83212A7AA51D3D, weaponHash);
		} // 0x2C83212A7AA51D3D undefined b1207
		static Any N0x5B235F24472F2C3B(Any p0, Any p1)
		{
			return invoke<Any>(0x5B235F24472F2C3B, p0, p1);
		} // 0x5B235F24472F2C3B undefined b1207
		static Any N0xBFCA7AFABF9D7967(Any p0, Any p1)
		{
			return invoke<Any>(0xBFCA7AFABF9D7967, p0, p1);
		} // 0xBFCA7AFABF9D7967 undefined b1207
		static Any N0x495A04CAEC263AF8(Any p0, Any p1)
		{
			return invoke<Any>(0x495A04CAEC263AF8, p0, p1);
		} // 0x495A04CAEC263AF8 undefined b1207
		static Any N0x95CA12E2C68043E5(Any p0, Any p1)
		{
			return invoke<Any>(0x95CA12E2C68043E5, p0, p1);
		} // 0x95CA12E2C68043E5 undefined b1207
		static Any N0xABC18A28BAD4B46F(Any p0, Any p1)
		{
			return invoke<Any>(0xABC18A28BAD4B46F, p0, p1);
		} // 0xABC18A28BAD4B46F undefined b1207
		static Any N0x80BB243789008A82(Any p0, Any p1)
		{
			return invoke<Any>(0x80BB243789008A82, p0, p1);
		} // 0x80BB243789008A82 undefined b1207
		// Related to weapon visual damage, not actual damage.
		static float GET_WEAPON_DAMAGE_(Object weaponObject)
		{
			return invoke<float>(0x904103D5D2333977, weaponObject);
		} // 0x904103D5D2333977 undefined b1207
		// Related to weapon visual damage, not actual damage.
		static void SET_WEAPON_DAMAGE_(Object weaponObject, float level, BOOL p2)
		{
			invoke<int>(0xE22060121602493B, weaponObject, level, p2);
		} // 0xE22060121602493B undefined b1207
		static float GET_WEAPON_DIRT_(Object weaponObject)
		{
			return invoke<float>(0x810E8AE9AFEA7E54, weaponObject);
		} // 0x810E8AE9AFEA7E54 undefined b1207
		static void SET_WEAPON_DIRT_(Object weaponObject, float level, BOOL p2)
		{
			invoke<int>(0x812CE61DEBCAB948, weaponObject, level, p2);
		} // 0x812CE61DEBCAB948 undefined b1207
		static float GET_WEAPON_SOOT_(Object weaponObject)
		{
			return invoke<float>(0x4BF66F8878F67663, weaponObject);
		} // 0x4BF66F8878F67663 undefined b1207
		static void SET_WEAPON_SOOT_(Object weaponObject, float level, BOOL p2)
		{
			invoke<int>(0xA9EF4AD10BDDDB57, weaponObject, level, p2);
		} // 0xA9EF4AD10BDDDB57 undefined b1207
		// every other level will have the max value of (brokeLevel - threshold)
		static void SET_WEAPON_LEVEL_THRESHOLD_(Object weaponObject, float threshold)
		{
			invoke<int>(0xD4071EFC83794B2F, weaponObject, threshold);
		} // 0xD4071EFC83794B2F undefined b1207
		// 0.0: good condition, 1.0: poor condition
		static float GET_WEAPON_DEGRADATION(Object weaponObject)
		{
			return invoke<float>(0x0D78E1097F89E637, weaponObject);
		} // 0x0D78E1097F89E637 undefined b1207
		// Related to rust of weapons
		static float GET_WEAPON_PERMANENT_DEGRADATION(Object weaponObject)
		{
			return invoke<float>(0xD56E5F336C675EFA, weaponObject);
		} // 0xD56E5F336C675EFA undefined b1207
		static void SET_WEAPON_DEGRADATION_(Object weaponObject, float level)
		{
			invoke<int>(0xA7A57E89E965D839, weaponObject, level);
		} // 0xA7A57E89E965D839 undefined b1207
		static void LISTEN_PROJECTILE_HIT_EVENTS_(BOOL listen)
		{
			invoke<int>(0xDA5D3F2C6DD5B5D4, listen);
		} // 0xDA5D3F2C6DD5B5D4 undefined b1207
		static float GET_WEAPON_SCALE_(Object weaponObject)
		{
			return invoke<float>(0x22084CA699219624, weaponObject);
		} // 0x22084CA699219624 undefined b1207
		static void SET_WEAPON_SCALE_(Object weaponObject, float scale)
		{
			invoke<int>(0xC3544AD0522E69B4, weaponObject, scale);
		} // 0xC3544AD0522E69B4 undefined b1207
		static Any N0x58425FCA3D3A2D15(Any p0)
		{
			return invoke<Any>(0x58425FCA3D3A2D15, p0);
		} // 0x58425FCA3D3A2D15 undefined b1207
		static Any N0xEC97101A8F311282(Any p0)
		{
			return invoke<Any>(0xEC97101A8F311282, p0);
		} // 0xEC97101A8F311282 undefined b1207
		// Returns ammoHash from weaponObject (Returned by 0x6CA484C9A7377E4F)
		static Hash GET_CURRENT_PED_WEAPON_AMMO_TYPE_(Ped ped, Object weaponObject)
		{
			return invoke<Hash>(0x7E7B19A4355FEE13, ped, weaponObject);
		} // 0x7E7B19A4355FEE13 undefined b1207
		// Returns ammoHash
		static Hash GET_CURRENT_AMMO_TYPE_FROM_GUID_(Ped ped, Any* weaponGuid)
		{
			return invoke<Hash>(0xAF9D167A5656D6A6, ped, weaponGuid);
		} // 0xAF9D167A5656D6A6 undefined b1207
		static BOOL IS_AMMO_TYPE_VALID_FOR_WEAPON_(Hash weaponHash, Hash ammoHash)
		{
			return invoke<BOOL>(0xC570B881754DF609, weaponHash, ammoHash);
		} // 0xC570B881754DF609 undefined b1207
		static void SET_AMMO_TYPE_FOR_PED_WEAPON_(Ped ped, Hash weaponHash, Hash ammoHash)
		{
			invoke<int>(0xCC9C4393523833E2, ped, weaponHash, ammoHash);
		} // 0xCC9C4393523833E2 undefined b1207
		static void N0x183CE355115B6E75(Any p0, Any p1)
		{
			invoke<int>(0x183CE355115B6E75, p0, p1);
		} // 0x183CE355115B6E75 undefined b1207
		static void SET_AMMO_TYPE_FOR_PED_WEAPON_INVENTORY_(Ped ped, Any* weaponInventoryUid, Hash ammoHash)
		{
			invoke<int>(0xEBE46B501BC3FBCF, ped, weaponInventoryUid, ammoHash);
		} // 0xEBE46B501BC3FBCF undefined b1207
		static void DISABLE_AMMO_TYPE_FOR_PED_WEAPON_(Ped ped, Hash weaponHash, Hash ammoHash)
		{
			invoke<int>(0xF0D728EEA3C99775, ped, weaponHash, ammoHash);
		} // 0xF0D728EEA3C99775 undefined b1207
		static void DISABLE_AMMO_TYPE_FOR_PED_(Ped ped, Hash ammoHash)
		{
			invoke<int>(0xAA5A52204E077883, ped, ammoHash);
		} // 0xAA5A52204E077883 undefined b1207
		static void N0xD63B4BA3A02A99E0(Any p0, Any p1)
		{
			invoke<int>(0xD63B4BA3A02A99E0, p0, p1);
		} // 0xD63B4BA3A02A99E0 undefined b1207
		static void ENABLE_AMMO_TYPE_FOR_PED_WEAPON_(Ped ped, Hash weaponHash, Hash ammoHash)
		{
			invoke<int>(0x23FB9FACA28779C1, ped, weaponHash, ammoHash);
		} // 0x23FB9FACA28779C1 undefined b1207
		static void ENABLE_AMMO_TYPE_FOR_PED_(Ped ped, Hash weaponHash)
		{
			invoke<int>(0x3B7B7908B7ADFB4B, ped, weaponHash);
		} // 0x3B7B7908B7ADFB4B undefined b1207
		static void N0x404514D231DB27A0(Any p0, Any p1)
		{
			invoke<int>(0x404514D231DB27A0, p0, p1);
		} // 0x404514D231DB27A0 undefined b1207
		static void N0xD53846B9C931C181(Any p0, Any p1, Any p2)
		{
			invoke<int>(0xD53846B9C931C181, p0, p1, p2);
		} // 0xD53846B9C931C181 undefined b1207
		static void N0x000FA7A4A8443AF7(Any p0)
		{
			invoke<int>(0x000FA7A4A8443AF7, p0);
		} // 0x000FA7A4A8443AF7 undefined b1207
		static void N0xECBB26529A737EF6(Any p0)
		{
			invoke<int>(0xECBB26529A737EF6, p0);
		} // 0xECBB26529A737EF6 undefined b1207
		// Returns WeaponAttachPoint
		static int GET_WEAPON_ATTACH_POINT_(Ped ped, int attachPoint)
		{
			return invoke<int>(0xCAD4FE9398820D24, ped, attachPoint);
		} // 0xCAD4FE9398820D24 undefined b1207
		static Any N0x4823F13A21F51964(Any p0, Any p1)
		{
			return invoke<Any>(0x4823F13A21F51964, p0, p1);
		} // 0x4823F13A21F51964 undefined b1207
		// Equips a weapon from a weaponItem, similar to GIVE_WEAPON_TO_PED
		static void SET_CURRENT_PED_WEAPON_BY_GUID(Ped ped, Any* weaponUid, BOOL p2, BOOL p3, BOOL p4, BOOL p5)
		{
			invoke<int>(0x12FB95FE3D579238, ped, weaponUid, p2, p3, p4, p5);
		} // 0x12FB95FE3D579238 undefined b1207
		static void SET_PLAYER_PED_QUICK_SWAP_WEAPON_BY_GUID(Ped ped, Any* guidPrimary, Any* guidSecondary)
		{
			invoke<int>(0xEC1F85DA51D3D6C4, ped, guidPrimary, guidSecondary);
		} // 0xEC1F85DA51D3D6C4 undefined b1232
		// Outputs cached guids
		static void GET_PLAYER_PED_QUICK_SWAP_WEAPON_BY_GUID_(Ped ped, Any* guidPrimary, Any* guidSecondary)
		{
			invoke<int>(0xB7E52A058B07C7E2, ped, guidPrimary, guidSecondary);
		} // 0xB7E52A058B07C7E2 undefined b1232
		// _GET_D* - _GET_L*
		static BOOL N0x0DE0944ECCB3DF5D(Ped ped)
		{
			return invoke<BOOL>(0x0DE0944ECCB3DF5D, ped);
		} // 0x0DE0944ECCB3DF5D undefined b1232
		// _GET_NUM_*
		static Any N0x46D42883E873C1D7(Ped ped)
		{
			return invoke<Any>(0x46D42883E873C1D7, ped);
		} // 0x46D42883E873C1D7 undefined b1232
		static BOOL IS_TARGET_PED_CONSTRAINED_BY_PED_USING_BOLAS_(Ped ped, Ped targetPed)
		{
			return invoke<BOOL>(0x8D50F43298AB9545, ped, targetPed);
		} // 0x8D50F43298AB9545 undefined b1232
		// Returns attachPoint
		static int N0x65DC4AC5B96614CB(Hash weaponHash)
		{
			return invoke<int>(0x65DC4AC5B96614CB, weaponHash);
		} // 0x65DC4AC5B96614CB undefined b1311
	}

	namespace ZONE
	{
		// Returns name hash, see common:/data/levels/rdr3/mapzones.meta
		//
		// type (-1 matches any type):
		// class CMapZone
		// {
		// public:
		// 	enum class Type
		// 	{
		// 		STATE,
		// 		TOWN,
		// 		LAKE,
		// 		RIVER,
		// 		OIL_SPILL,
		// 		SWAMP,
		// 		OCEAN,
		// 		CREEK,
		// 		POND,
		// 		GLACIER,
		// 		DISTRICT,
		// 		TEXT_PRINTED,
		// 		TEXT_WRITTEN
		// 	};
		// };
		//
		// https://github.com/femga/rdr3_discoveries/tree/master/zones & https://alloc8or.re/rdr3/doc/enums/CMapZone__Type.txt
		static Hash GET_MAP_ZONE_AT_COORDS_(float x, float y, float z, int type)
		{
			return invoke<Hash>(0x43AD8FC02B429D33, x, y, z, type);
		} // 0x43AD8FC02B429D33 undefined b1207
		// Returns the zone's name hash if its type matches one of the following:
		// - LAKE
		// - RIVER
		// - OIL_SPILL
		// - SWAMP
		// - OCEAN
		// - CREEK
		// - POND
		// - GLACIER
		static Hash GET_WATER_MAP_ZONE_AT_COORDS_(float x, float y, float z)
		{
			return invoke<Hash>(0x5BA7A68A346A5A91, x, y, z);
		} // 0x5BA7A68A346A5A91 undefined b1207
	}

	namespace COMPAPP
	{
		// nullsub, doesn't do anything
		static void N0xB6FD96420C0126A1(Hash p0, BOOL p1)
		{
			invoke<int>(0xB6FD96420C0126A1, p0, p1);
		} // 0xB6FD96420C0126A1 undefined b1207
		// nullsub, doesn't do anything
		static void N0x74BCCEB233AD95B2(Hash p0, Hash p1)
		{
			invoke<int>(0x74BCCEB233AD95B2, p0, p1);
		} // 0x74BCCEB233AD95B2 undefined b1207
		// nullsub, doesn't do anything
		static void N0x29C733459A9011EB(Hash p0, const char* p1)
		{
			invoke<int>(0x29C733459A9011EB, p0, p1);
		} // 0x29C733459A9011EB undefined b1207
		// Hardcoded to return false.
		static BOOL N0x7AF1BB4504EA5ED9()
		{
			return invoke<BOOL>(0x7AF1BB4504EA5ED9);
		} // 0x7AF1BB4504EA5ED9 undefined b1207
		// nullsub, doesn't do anything
		static void N0xCCB4635A071FB62D()
		{
			invoke<int>(0xCCB4635A071FB62D);
		} // 0xCCB4635A071FB62D undefined b1207
	}

}